<control ref="MASVS-7.3" name="Remove or obfuscate the debugging symbols from native binaries" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>As a general rule of thumb, as little explanative information as possible should be provided along with the compiled code. Some metadata such as debugging information, line numbers and descriptive function or method names make the binary or bytecode easier to understand for the reverse engineer, but isn't actually needed in a release build and can therefore be safely discarded without impacting the functionality of the app. This data shall be removed from the release version or shall be obfuscated in order to be inaccessible to the reverse engineer.</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP MASVS - Android - Testing for Debugging Symbols" url="https://sushi2k.gitbooks.io/the-owasp-mobile-security-testing-guide/content/0x05i-Testing-Code-Quality-and-Build-Settings.html#testing-for-debugging-symbols"/>
                        <reference name="OWASP MASVS - iOS - Testing for Debugging Symbols" url="https://sushi2k.gitbooks.io/the-owasp-mobile-security-testing-guide/content/0x06i-Testing-Code-Quality-and-Build-Settings.html#testing-for-debugging-symbols"/>
                    </references>
                    <standards>
                        <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L1"/>
                        <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
                        <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>For Android:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Symbols are usually stripped during the build process, so you need the compiled byte-code
                            and libraries to verify whether any unnecessary metadata has been discarded. First find the
                            nm binary in your Android NDK and export it (or create an alias).
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            export $NM =
                            $ANDROID_NDK_DIR/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            To display debug symbols:
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            $ $NM -a
                            libfoo.so/tmp/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm:
                            libfoo.so: no symbols&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;To display dynamic symbols:
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            $ $NM -D libfoo.so&amp;nbsp;
                            &lt;/blockquote&gt;Alternatively, open the file in your favorite disassembler and check the
                            symbol tables manually. Dynamic symbols can be stripped using the visibility compiler flag.
                            Adding this flag causes gcc to discard the function names while still preserving the names
                            of functions declared as JNIEXPORT.&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;br /&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            Check if the following was added to build.gradle:&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            externalNativeBuild { cmake { cppFlags &amp;quot;-fvisibility=hidden&amp;quot; } }&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;br /&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;For iOS:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Use gobjdump to inspect the main binary and any included dylibs for Stabs and DWARF symbols.
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            $ gobjdump --stabs --dwarf TargetApp&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;In archive MyTargetApp:&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            - armv5te: file format mach-o-arm - aarch64: file format mach-o-arm64 Gobjdump is part of
                            binutils and can be installed via Homebrew on Mac OS X.
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-08-02T10:21:32.718000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>