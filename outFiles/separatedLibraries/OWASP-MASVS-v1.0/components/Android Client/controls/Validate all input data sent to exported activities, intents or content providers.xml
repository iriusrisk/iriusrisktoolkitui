<control ref="CWE-20" name="Validate all input data sent to exported activities, intents or content providers" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>All data received from the client-side should be considered tainted and a potential risk,
                        regardless of the source or transport method. This affects all application platforms, including
                        mobile. All data from the client side must be subjected to strict validation, sanitization, and
                        encoding against expected syntactic and semantic criteria.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Define a specification of the data that is expected at each input; both the syntax (e.g.
                        alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific
                        list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid
                        because it only contains alphanumeric characters, but it is not valid if the input is only
                        expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria
                        for each input are accepted, and reject, transform, or encapsulate any non-compliant data. While
                        useful for identifying malicious content, do not rely on looking for specific malformed or
                        attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate
                        blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate
                        payloads, and changes to the code's execution environment. As noted, blacklists can be useful
                        for detecting and logging potential attacks, or determining which inputs are so malformed that
                        they should be rejected outright. Validate all data received from the client, including values
                        such as HTTP headers and cookie values if these are used as input on the server side, X-
                        headers, and other platform specific data objects passed between the client and server.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This validation and sanitization must be performed in context, for example, data sent to an SQL
                        database must be escaped for SQL special characters whereas data sent as part of a shell command
                        must be escaped for shell special characters.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP MASVS - Android - Testing Custom URL Schemes" url="https://sushi2k.gitbooks.io/the-owasp-mobile-security-testing-guide/content/0x05h-Testing-Platform-Interaction.html#testing-custom-url-schemes"/>
                        <reference name="OWASP MASVS - Android - Testing Input Validation and Sanitization" url="https://sushi2k.gitbooks.io/the-owasp-mobile-security-testing-guide/content/0x05h-Testing-Platform-Interaction.html#testing-input-validation-and-sanitization"/>
                        <reference name="OWASP MASVS - iOS - Testing Custom URL Schemes" url="https://sushi2k.gitbooks.io/the-owasp-mobile-security-testing-guide/content/0x06h-Testing-Platform-Interaction.html#testing-custom-url-schemes"/>
                        <reference name="OWASP MASVS - iOS - Testing Input Validation and Sanitization" url="https://sushi2k.gitbooks.io/the-owasp-mobile-security-testing-guide/content/0x06h-Testing-Platform-Interaction.html#testing-input-validation-and-sanitization"/>
                    </references>
                    <standards>
                        <standard ref="6.2" supportedStandardRef="OWASP-MASVS-L1"/>
                        <standard ref="6.3" supportedStandardRef="OWASP-MASVS-L1"/>
                        <standard ref="6.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
                        <standard ref="6.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
                        <standard ref="6.2" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="6.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>- Identify exported activities, intents and contents providers.
                            - For every input, define accepted input (both syntactic and semantic criteria)
                            - Where possible, define a white-list of accepted input or characters
                            - For each of the inputs, ensure the data is validated against the defined whitelists (for
                            example with a regular expression) before being processed.
                            - Check the code to look for input validation methods and input restrictions.
                            - Test they are effective by fuzzing the identified features.
                            - Tools such as&lt;a href="https://labs.mwrinfosecurity.com/tools/drozer/"&gt;Drozer&lt;/a&gt;can
                            help with this task.
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-08-02T10:21:32.718000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>