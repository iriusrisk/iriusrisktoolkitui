<control ref="MASVS-7.7" name="Secure in the unmanaged code, the allocated memory, freed memory and used memory" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Memory corruption bugs are a popular mainstay for hackers. This class of bug results from a
                        programming error that causes the program to access an unintended memory location. Under the
                        right conditions, attackers can capitalize on this behavior to hijack the execution flow of the
                        vulnerable program and execute arbitrary code.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This kind of vulnerability occurs in a number of ways:
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Buffer overflows:&lt;/b&gt; This describes a programming error where an app
                        writes beyond an allocated memory range for a particular operation. An attacker can use this
                        flaw to overwrite important control data located in adjacent memory, such as function pointers.
                        Buffer overflows were formerly the most common type of memory corruption flaw, but have become
                        less prevalent over the years due to a number of factors. Notably, awareness among developers of
                        the risks in using unsafe C library functions is now a common best practice plus, catching
                        buffer overflow bugs is relatively simple. However, it is still worth testing for such defects.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;Out-of-bounds-access: &lt;/b&gt;Buggy pointer arithmetic may cause a pointer
                        or index to reference a position beyond the bounds of the intended memory structure (e.g. buffer
                        or list). When an app attempts to write to an out-of-bounds address, a crash or unintended
                        behavior occurs. If the attacker can control the target offset and manipulate the content
                        written to some extent, code execution exploit is likely possible.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;Dangling pointers:&lt;/b&gt; These occur when an object with an incoming
                        reference to a memory location is deleted or deallocated, but the object pointer is not reset.
                        If the program later uses the dangling pointer to call a virtual function of the already
                        deallocated object, it is possible to hijack execution by overwriting the original vtable
                        pointer. Alternatively, it is possible to read or write object variables or other memory
                        structures referenced by a dangling pointer.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;Use-after-free:&lt;/b&gt; This refers to a special case of dangling pointers
                        referencing released (deallocated) memory. After a memory address is cleared, all pointers
                        referencing the location become invalid, causing the memory manager to return the address to a
                        pool of available memory. When this memory location is eventually re-allocated, accessing the
                        original pointer will read or write the data contained in the newly allocated memory. This
                        usually leads to data corruption and undefined behavior, but crafty attackers can set up the
                        appropriate memory locations to leverage control of the instruction pointer.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;Integer overflows: &lt;/b&gt;When the result of an arithmetic operation
                        exceeds the maximum value for the integer type defined by the programmer, this results in the
                        value &amp;quot;wrapping around&amp;quot; the maximum integer value, inevitably resulting in a
                        small value being stored. Conversely, when the result of an arithmetic operation is smaller than
                        the minimum value of the integer type, an integer underflow occurs where the result is larger
                        than expected. Whether a particular integer overflow/underflow bug is exploitable depends on how
                        the integer is used - for example, if the integer type were to represent the length of a
                        buffer,
                        this could create a buffer overflow vulnerability.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;Format string vulnerabilities: &lt;/b&gt;When unchecked user input is passed
                        to the format string parameter of the printf() family of C functions, attackers may inject
                        format tokens such as '%c' and '%n' to access memory. Format string bugs
                        are convenient to
                        exploit due to their flexibility. Should a program output the result of the string formatting
                        operation, the attacker can read and write to memory arbitrarily, thus bypassing protection
                        features such as ASLR.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A best practice to fix the Memory Corruption Bugs are the following:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;When using integer variables for array indexing, buffer length calculations, or any
                        other security-critical operation, verify that unsigned integer types are used and perform
                        precondition tests to prevent the possibility of integer wrapping.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Ensure the app does not use unsafe string functions such as strcpy, most other
                        functions beginning with the "str" prefix, sprint, vsprintf, gets, etc.; If the app
                        contains C++
                        code, ANSI C++ string classes are used; iOS apps written in Objective-C use NSString class. C
                        apps on iOS should use CFString, the Core Foundation representation of a string. No untrusted
                        data is concatenated into format strings.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP MASVS - Testing for Memory Management Bugs" url="https://sushi2k.gitbooks.io/the-owasp-mobile-security-testing-guide/content/0x04h-Testing-Code-Quality.html#memory-corruption-bugs"/>
                    </references>
                    <standards>
                        <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L1"/>
                        <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L1+R"/>
                        <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check if some of the different Memory Corruption bugs appear when you try to use them to
                            gain access to the system.
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-08-02T10:21:32.718000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>