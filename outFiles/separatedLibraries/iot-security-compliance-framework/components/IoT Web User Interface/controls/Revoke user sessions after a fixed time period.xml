<control ref="ASVS-2014-3.4" name="Revoke user sessions after a fixed time period" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;p&gt;User sessions that remain active for extended periods can expose them to attacks, or provide greater opportunities for a malicious actor to exploit a compromised session. For example, cryptographic or brute-force attacks against a session ID may become practical in a longer time-window. Similarly, if a user session has been compromised, an attacker may forcibly keep that session alive to maintain a foothold in the application or environment. These types of attack can be mitigated by setting a hard limit on user sessions, even where the user is (or appears to be) actively using the application.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Invalidate all user sessions with the application after an extended period, even when they appear active (e.g. after 24 hours the user should be warned to complete their tasks or forced to re-authenticate)&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Ensure session revocation is enforced at the server-side rather than the client-side; for example, the session ID should be invalidated at the server rather than the client-side cookie being deleted or changed.&lt;/p&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="2.4.10.14" supportedStandardRef="iotsf-class-1"/>
                        <standard ref="2.4.10.14" supportedStandardRef="iotsf-class-2"/>
                        <standard ref="AC-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="3.4" supportedStandardRef="OWASP-ASVS-Level-2"/>
                        <standard ref="3.4" supportedStandardRef="OWASP-ASVS-Level-3"/>
                        <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Verify the expected active ('hard') timeout.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Check 'normal' use through a browser:&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Go to the authentication feature of the component.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Authenticate as a user.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Keep the session open, with manual or automated requests to the server to maintain an active session.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Revisit an authenticated page and determine if the session has expired (e.g. the session is no longer authenticated).&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Check the control is enforced at the server side and not using code in the browser:&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Using an intercepting proxy, the Web Developer Console,or other tool; intercept the browser request and server response, and determine which cookies or other tokens are used to maintain session state. Alternatively, capture an authenticated application request for replay.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Keep the session open with manual or automated requests to the server.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Store and replay the request after the timeout period to see if the application response with authenticated data.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:48">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>