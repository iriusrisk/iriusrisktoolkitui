<control ref='D5.12' name='Ensure the container&apos;s root filesystem is mounted as read only' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>The container's root filesystem should be treated as a 'golden image' by using Docker run's
                        --read-only option. This prevents any writes to the container's root filesystem at container
                        runtime and enforces the principle of immutable infrastructure.&amp;nbsp;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Enabling this option forces containers at runtime to explicitly define their data writing
                        strategy to persist or not persist their data. This also reduces security attack vectors since
                        the container instance's filesystem cannot be tampered with or written to unless it has explicit
                        read-write permissions on its filesystem folder and directories.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Add a --read-only flag at a container's runtime to enforce the container's root filesystem to be
                        mounted as read only. docker run --read-only Enabling the --read-only option at a container's
                        runtime should be used by administrators to force a container's executable processes to only
                        write container data to explicit storage locations during the container's runtime.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Examples of explicit storage locations during a container's runtime include, but are not limited
                        to:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Use the --tmpfs option to mount a temporary file system for non-persistent data
                        writes. docker run --interactive --tty --read-only --tmpfs &amp;quot;/run&amp;quot; --tmpfs
                        &amp;quot;/tmp&amp;quot; centos /bin/bash&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Enabling Docker rw mounts at a container's runtime to persist container data directly
                        on the Docker host filesystem. docker run --interactive --tty --read-only -v
                        /opt/app/data:/run/app/data:rw centos /bin/bash&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Utilizing Docker shared-storage volume plugins for Docker data volume to persist
                        container data. docker volume create -d convoy --opt o=size=20GB my-named-volume docker run
                        --interactive --tty --read-only -v my-named-volume:/run/app/data centos /bin/bash&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Transmitting container data outside of the docker during the container's runtime for
                        container data to persist container data. Examples include hosted databases, network file
                        shares, and APIs.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Enabling --read-only at container runtime may break some container OS packages if a data writing
                        strategy is not defined. Define what the container's data should and should not persist at
                        runtime to determine which recommendation procedure to utilize.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: mount tmpfs' url='https://docs.docker.com/engine/reference/commandline/run/#mount-tmpfs-tmpfs' />
            <reference name='Docker docs: run' url='http://docs.docker.com/reference/commandline/cli/#run' />
            <reference name='Docker docs: Volumes' url='https://docs.docker.com/engine/tutorials/dockervolumes/' />
            <reference name='Docker: images in production' url='http://www.projectatomic.io/blog/2015/12/making-docker-images-write-only-in-production/' />
          </references>
          <standards>
            <standard ref='5.12' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run the following command on the docker host:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: ReadonlyRootfs={{
                            .HostConfig.ReadonlyRootfs }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            If the above command returns true, it means the container's root filesystem is mounted
                            read-only. If the above command returns false, it means the container's root filesystem is
                            writable.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>