<control ref='D5.11' name='Ensure CPU priority is set appropriately on the container' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>By default, all containers on a Docker host share the resources equally. By using the resource
                        management capabilities of Docker host, such as CPU shares, you can control the host CPU
                        resources that a container may consume.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, CPU time is divided between containers equally. If it is desired, to control the CPU
                        time amongst the container instances, you can use the CPU sharing feature. CPU sharing allows
                        prioritization of one container over the other and forbids the lower priority container claiming
                        CPU resources more often. This ensures that the high priority containers are served better.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Manage the CPU shares between your containers. To do so, start the container using the
                        --cpu-shares argument. For example, you could run a container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --cpu-shares 512 centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        In the above example, the container is started with CPU shares of 50% of what the other
                        containers use. So, if the other container has CPU shares of 80%, this container will have CPU
                        shares of 40%.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note: Every new container will have 1024 shares of CPU by default. However, this value is shown
                        as 0 if you run the command mentioned in the audit section. Alternatively,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Navigate to /sys/fs/cgroup/cpu/system.slice/ directory.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Check your container instance ID using docker ps.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Now, inside the above directory (in step 1), you would have a directory named
                        docker-.scope. For example,
                        docker-4acae729e8659c6be696ee35b2237cc1fe4edd2672e9186434c5116e1a6fbed6.scope. Navigate to this
                        directory.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You will find a file named cpu.shares. Execute cat cpu.shares.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;This will always give you the CPU share value based on the system. So, even if there
                        is no CPU shares configured using -c or --cpu-shares argument in the docker run command, this
                        file will have a value of 1024. If we set one container's CPU shares to 512
                        it will receive half
                        of the CPU time compared to the other container. So, take 1024 as 100% and then do quick math to
                        derive the number that you should set for respective CPU shares. For example, use 512 if you
                        want to set 50% and 256 if you want to set 25%.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If you do not set proper CPU shares, the container process may have to starve if the resources
                        on the host are not available. If the CPU resources on the host are free, CPU shares do not
                        place any restrictions on the CPU that the container may use.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: run metrics' url='https://docs.docker.com/engine/admin/runmetrics/' />
            <reference name='Docker docs: run options' url='https://docs.docker.com/engine/reference/commandline/run/#options' />
            <reference name='Goldmann blog: run options' url='https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/' />
          </references>
          <standards>
            <standard ref='5.11' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: CpuShares={{
                            .HostConfig.CpuShares }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns 0 or 1024, it means the CPU shares are not in place. If the
                            above command returns a non-zero value other than 1024, it means CPU shares are in place.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>