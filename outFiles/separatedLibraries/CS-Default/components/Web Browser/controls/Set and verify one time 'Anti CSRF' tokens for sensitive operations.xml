<control ref="CWE-352-TOKENS" name="Set and verify one time 'Anti CSRF' tokens for sensitive operations" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Cross Site Request Forgery (CSRF) attacks exploit users by causing them to unknowingly submit
                        requests to the application while logged in, for example by tricking them in to clicking links
                        or through cross-site scripting (XSS) attacks. These attacks can be deployed where sensitive
                        operations can be accessed through a simple GET request, or a POST form submission and no
                        additional controls are in place. These attacks can be mitigated by requiring a random server
                        generated token be submitted and verified in each request. Requiring re-authentication of
                        sensitive functions is also effective, but intrusive in the user experience.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;HTML pages that offer sensitive operations should also include a random one time token
                        as a hidden field with every form. When the form is submitted, the server side should verify
                        that the token received is the same as the token issued.&lt;/li&gt;
                        &lt;li&gt;Re-authentication should be required on sensitive functionality such as
                        password-change or user-creation.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-30" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="18.7" supportedStandardRef="OWASP-ASVS-Level-1"/>
                        <standard ref="4.13" supportedStandardRef="OWASP-ASVS-Level-1"/>
                        <standard ref="18.7" supportedStandardRef="OWASP-ASVS-Level-2"/>
                        <standard ref="4.13" supportedStandardRef="OWASP-ASVS-Level-2"/>
                        <standard ref="18.7" supportedStandardRef="OWASP-ASVS-Level-3"/>
                        <standard ref="4.13" supportedStandardRef="OWASP-ASVS-Level-3"/>
                        <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify application components performing sensitive operations.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Using an intercepting proxy, the Web Developer Console,&amp;nbsp;or other tool;
                            intercept the browser request and server response, and verify a unique strong token is being
                            sent and verified with each request.&lt;/li&gt;
                            &lt;li&gt;Confirm the tokens are passed in a programmatic way resistant to CSRF attack; e.g.
                            in a custom POST field and separate HTTP header.&lt;/li&gt;
                            &lt;li&gt;Attempt to subvert the CSRF controls to ensure they are robust:&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Change or remove the tokens and confirm the application rejects the request.&lt;/li&gt;
                            &lt;li&gt;Attempt to replay the tokens in a subsequent request&lt;/li&gt;
                            &lt;li&gt;Mismatch the tokens in a request&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            To modify headers and&amp;nbsp;otherwise modify browser requests, use an intercepting proxy
                            (e.g. OWASP Zap, Burp or Fiddler), or browser extensions such as Cookie Manager or Tamper
                            Data.
                            &lt;/div&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.997000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>