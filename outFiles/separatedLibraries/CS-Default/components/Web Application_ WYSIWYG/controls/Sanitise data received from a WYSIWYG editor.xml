<control ref="CWE-79-HTML" name="Sanitise data received from a WYSIWYG editor" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        WYSIWYG editors allow users to input formatted HTML text to the application. Allowing
                        uncontrolled HTML input could lead to Cross Site Scripting and other content-based attacks. In a
                        number of instances it may be necessary to allow users to use extended or active content in data
                        provided to the application (for example CMS or blogs), but the active content permitted should
                        be carefully vetted and controlled.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Sanitize data received through WYSIWYG (or other HTML/raw) editing interfaces.&lt;/li&gt;
                        &lt;li&gt;Where HTML or other meta-data is permitted, this should be checked against a carefully
                        selected and controlled whitelist of tags and attributes.&lt;/li&gt;
                        &lt;li&gt;All other meta-characters or unexpected content should either be rejected, removed,
                        masked, or encoded.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.22" supportedStandardRef="OWASP-ASVS-Level-1"/>
                        <standard ref="5.22" supportedStandardRef="OWASP-ASVS-Level-2"/>
                        <standard ref="5.22" supportedStandardRef="OWASP-ASVS-Level-3"/>
                        <standard ref="A7:2017-Cross-Site Scripting (XSS)" supportedStandardRef="owasp-top-10-2017"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            To test data validation:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the acceptable input criteria for the WYSIWYG editor, and build test cases
                            that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;As a general rule, only very basic HTML tags should be allowed on these editors
                            and without attributes, e.g.: &amp;lt;p&amp;gt;, &amp;lt;ul&amp;gt;, &amp;lt;ol&amp;gt;,
                            &amp;lt;li&amp;gt;, &amp;lt;strong&amp;gt;, &amp;lt;em&amp;gt;, &amp;lt;pre&amp;gt;, &amp;lt;code&amp;gt;,
                            &amp;lt;blockquote&amp;gt;, &amp;lt;cite&amp;gt;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Try to put HTML tags which should not be allowed.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Pass invalid input to the application through the editor and in intercepted
                            requests, and review error trapping and handling.&lt;/li&gt;
                            &lt;li&gt;Check if bad input, tags, and other unexpected content is removed or an error is
                            produced when sent to the server.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            A number of tools can be used to aid in testing: &amp;nbsp;&amp;nbsp;
                            &lt;ul&gt;
                            &lt;li&gt;Directly your browser with the Developer Tools&lt;/li&gt;
                            &lt;li&gt;Use a browser extension which allows you to modify the request and responses on
                            the fly (i.e. Tamper Data)&lt;/li&gt;
                            &lt;li&gt;Use a proxy which allows you to modify the request and response on the fly (i.e.
                            OWASP ZAP, Burp, Fiddler, etc.)&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-29T20:00:18.645000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>