<control ref="CWE-799-LOGIN" name="Implement application and network rate limiting on the login function" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        A number of attacks rely on brute-force techniques to send large volumes of requests to
                        enumerate or attempt to exploit flaws in an application, for example, sending common passwords
                        to multiple target accounts within an application. By profiling normal traffic volumes, and
                        applying rate limiting, the application can be built to actively mitigate such attacks.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict
                        attacks against the authentication or registration systems. Multiple failures (or attempts) from
                        a single IP should result in temporarily blocking or dropping traffic from the source. Note
                        however that some corporate and ISP environment may place multiple valid and discrete clients
                        behind the same IP address, resulting in false-positives.&lt;/li&gt;
                        &lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks from
                        multiple sources to avoid IP based rate-limiting. To mitigate this class of attack, Indicators
                        of Compromise should be monitored (for example a higher rate of login failures than usual), and
                        appropriate actions taken. For example, when the application detects active brute-force attacks,
                        a Web Application Firewall (WAF) or other intermediate devices could be used to block attacks
                        sharing a signature from pattern matching or deep packet inspection (e.g. HTTP headers or common
                        passwords across multiple accounts). Similarly, the application could respond by requiring a
                        CAPTCHA, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Implement the mechanisms to lockout accounts:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;When the application detects a set number of failure login attempts, the account shall
                        be locked for a certain time period.&lt;/li&gt;
                        &lt;li&gt;When the application detects that an account is locked more times than usual, this
                        account shall be disabled. A disabled account shall only be restored by an administrator.&lt;/li&gt;
                        &lt;li&gt;When the application detects active brute-force attacks, the application shall require
                        a CAPTCHA, cookie, or JavaScript challenge.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
                    </references>
                    <standards>
                        <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
                        <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="2.20" supportedStandardRef="OWASP-ASVS-Level-1"/>
                        <standard ref="2.20" supportedStandardRef="OWASP-ASVS-Level-2"/>
                        <standard ref="2.23" supportedStandardRef="OWASP-ASVS-Level-2"/>
                        <standard ref="2.20" supportedStandardRef="OWASP-ASVS-Level-3"/>
                        <standard ref="2.23" supportedStandardRef="OWASP-ASVS-Level-3"/>
                        <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1"/>
                        <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
                        <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
                        <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Use tools like
                            &lt;a href="https://www.thc.org/thc-hydra/"&gt;THC-Hydra&lt;/a&gt;,
                            &lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;OWASP ZAP&lt;/a&gt;
                            or
                            &lt;a href="https://portswigger.net/burp/"&gt;Burp Suite&lt;/a&gt;&amp;nbsp;to simulate
                            brute force attacks against the login function.&amp;nbsp;
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Perform a simulation of the attack against the login function.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify that the function is blocked for your source after n attempts.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify that there is a log alerting function for an unusual amount of failed log
                            in attempts, even if they originated from different sources.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:15.179000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>