<control ref="CWE-799" name="Implement application and network rate limiting" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and &lt;span class="caps"&gt;ISP&lt;/span&gt; environment may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks from multiple sources to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (&lt;span class="caps"&gt;WAF&lt;/span&gt;) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g. &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a &lt;span class="caps"&gt;CAPTCHA&lt;/span&gt;, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;b&gt;&lt;font size="4"&gt; Remediation:&lt;/font&gt;&lt;/b&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;font size="4"&gt;&lt;/font&gt;&lt;/b&gt;Implement the mechanisms to lockout accounts:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;When the application detects that an account is locked more times than usual, this account shall be disabled. A disabled account shall only be restored by an administrator.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;When the application detects active brute-force attacks, the application shall require a &lt;span class="caps"&gt;CAPTCHA&lt;/span&gt;, cookie, or JavaScript challenge.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
                    </references>
                    <standards>
                        <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-23" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
                        <standard ref="2.20" supportedStandardRef="OWASP-ASVS-Level-1"/>
                        <standard ref="2.20" supportedStandardRef="OWASP-ASVS-Level-2"/>
                        <standard ref="4.14" supportedStandardRef="OWASP-ASVS-Level-2"/>
                        <standard ref="2.20" supportedStandardRef="OWASP-ASVS-Level-3"/>
                        <standard ref="4.14" supportedStandardRef="OWASP-ASVS-Level-3"/>
                        <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;p&gt;This test requires triggering a bruteforce attack and checking if it has been blocked. To perform this kind of attacks you can use &lt;a href="https://support.portswigger.net/customer/portal/articles/1964020-using-burp-to-brute-force-a-login-page"&gt;Burp proxy bruteforcing feature&lt;/a&gt;.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:42">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>