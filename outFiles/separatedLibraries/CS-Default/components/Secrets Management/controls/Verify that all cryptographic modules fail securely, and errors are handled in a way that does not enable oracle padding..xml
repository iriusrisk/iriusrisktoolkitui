<control ref="ASVS-7.2" name="Verify that all cryptographic modules fail securely, and errors are handled in a way that does not enable oracle padding." platform="" cost="1" risk="0" state="Recommended" owner="admin" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Encryption should fail closed so that data does not get stored in an unprotected state.
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        To protect against padding oracles, you want to make sure that your application does not return
                        a different error when the padding is wrong. The best way to do this is an Encrypt-then-MAC
                        construction, where a Message Authentication Code (MAC) is applied to the ciphertext. If the MAC
                        fails, you don't even need to look at the padding. If the MAC is correct, it is
                        cryptographically unlikely that the padding has been tampered with.
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="SEI CERT Oracle Coding Standard for Java. MSC61-J. Do not use insecure or weak cryptographic algorithms" url="https://wiki.sei.cmu.edu/confluence/display/java/MSC61-J.+Do+not+use+insecure+or+weak+cryptographic+algorithms"/>
                    </references>
                    <standards>
                        <standard ref="7.2" supportedStandardRef="OWASP-ASVS-Level-1"/>
                        <standard ref="7.2" supportedStandardRef="OWASP-ASVS-Level-2"/>
                        <standard ref="7.2" supportedStandardRef="OWASP-ASVS-Level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;b&gt;Testing for padding oracle vulnerabilities: &lt;/b&gt;
                            &lt;br /&gt;
                            &lt;p&gt; First the possible input points for padding oracles must be identified. Generally
                            the following conditions must be met: &lt;/p&gt;
                            &lt;ol&gt;
                            &lt;li&gt; The data is encrypted. Good candidates are values which appear to be random.&lt;/li&gt;
                            &lt;li&gt; A block cipher is used. The length of the decoded (Base64 is used often) cipher
                            text is a multiple of common cipher block sizes like 8 or 16 bytes. Different cipher texts
                            (e.g. gathered by different sessions or manipulation of session state) share a common
                            divisor in the length.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP Testing Guide. Testing for Padding Oracle (OTG-CRYPST-002)" url="https://www.owasp.org/index.php/Testing_for_Padding_Oracle_(OTG-CRYPST-002)"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-11-16T17:22:00.269000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>