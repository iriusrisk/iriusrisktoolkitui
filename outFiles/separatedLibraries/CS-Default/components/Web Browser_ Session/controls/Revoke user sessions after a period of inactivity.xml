<control ref="ASVS-2014-3.3" name="Revoke user sessions after a period of inactivity" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Unattended authenticated sessions may be hijacked by a malicious user; for example on a shared terminal or an unlocked computer. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;User sessions should be invalidated and terminated after a period of inactivity.&lt;/li&gt; 
  &lt;li&gt;This period should be defined by the project; time limit of between 5 and 30 mins is common in most online applications. &amp;nbsp;Shorter periods for high-security applications, or longer periods dictated by the work-flow may be appropriate.&lt;/li&gt; 
  &lt;li&gt;The timeout should be triggered when the user is no longer interacting with the (web) application; e.g. the are no longer manually browsing or using the application functionality. Ensure that any background automated processes (e.g. heartbeats, pricing or data updates) are not considered activities that reset the timeout.&lt;/li&gt; 
  &lt;li&gt;Session revocation must occur at the server-side; for example, the session associated with the session ID is terminated on the server, rather than simply resetting a client-side cookie containing the session ID.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="164.312(a)(1)(C)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="3.3" supportedStandardRef="OWASP-ASVS-Level-1"/>
                        <standard ref="3.3" supportedStandardRef="OWASP-ASVS-Level-2"/>
                        <standard ref="3.3" supportedStandardRef="OWASP-ASVS-Level-3"/>
                        <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Verify the expected inactive timeout.&lt;/li&gt;
                            &lt;li&gt;Check 'normal' use through a browser:&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Go to the authentication feature of the component.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Authenticate as a user.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Leave the session open for a given time (check the expiration time that has been
                            agreed to be implemented).&lt;/li&gt;
                            &lt;li&gt;Revisit an authenticated page and determine if the session has expired (e.g. the
                            session is no longer authenticated).&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;li&gt;Check the control is enforced at the server side and not using code in the
                            browser:&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Using an intercepting proxy, the Web Developer Console,&amp;nbsp;or other tool;
                            intercept the browser request and server response, and determine which cookies or other
                            tokens are used to maintain session state. Alternatively, capture an authenticated
                            application request for replay.&lt;/li&gt;
                            &lt;li&gt;Store and replay the request after the timeout period to see if the application
                            response with authenticated data.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;li&gt;Review application operation and determine if any behavior artificially holds the
                            session open, for example, heartbeat requests or calls to update data feeds sent from the
                            client to the server are sometimes mistakenly interpreted as user activity, holding the
                            session open.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.266000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>