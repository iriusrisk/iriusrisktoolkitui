<control ref="CWE-147" name="Validate input parameters to prevent HTTP Parameter Pollution" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>All data received from external sources should be considered tainted and a potential risk,
                        regardless of the source or transport method. HTTP Parameter Pollution attacks result when
                        parameters are added or inserted into requests, and are inappropriately or unsafely handled by
                        the server. For example, injection of parameters into strings or cookies sent to the application
                        can result in the variables being interpreted out of sequence, exploiting flaws in the business
                        logic and flow.
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;p&gt;For example, there was a bug in the Blogger platform which illustrates this
                        vulnerability. The bug allowed malicious users to take ownership of the victim's blog by using the following HTTP request:&lt;/p&gt;
                        &lt;blockquote&gt;
                        &lt;p&gt;&lt;code&gt;POST /add-authors.do HTTP/1.1&lt;/code&gt;&lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;p&gt;&lt;code&gt;security_token=attackertoken&amp;amp;&lt;b&gt;blogID=attackerblogidvalue&lt;/b&gt;&amp;amp;&lt;b&gt;blogID=victimblogidvalue&lt;/b&gt;&amp;amp;authorsList=goldshlager19test%40gmail.com(attacker
                        email)&amp;amp;ok=Invite&lt;/code&gt;&lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;p&gt;The flaw resided in the authentication mechanism used by the web application, as the
                        security check was performed on the first&amp;nbsp;&lt;code&gt;blogID&lt;/code&gt;&amp;nbsp;parameter,
                        whereas the actual operation used the second occurrence.&lt;/p&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.17" supportedStandardRef="OWASP-ASVS-Level-2"/>
                        <standard ref="9.7" supportedStandardRef="OWASP-ASVS-Level-2"/>
                        <standard ref="5.17" supportedStandardRef="OWASP-ASVS-Level-3"/>
                        <standard ref="9.7" supportedStandardRef="OWASP-ASVS-Level-3"/>
                        <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify parameters within the application used for authentication decisions, or
                            critical business logic.&lt;/li&gt;
                            &lt;li&gt;Send specially forged requests to the application in which those parameters are
                            duplicated, or passed through other methods (e.g. POST parameters in the URL as GET fields,
                            cookies as form fields etc.)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Review the application logic to ensure:&lt;/li&gt;
                            &lt;li&gt;The same parameter is for all the decisions.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Parameters received over unexpected or non compliant methods result in a security
                            exception.&lt;/li&gt;
                            &lt;li&gt;Duplicate parameters are identified and result in a security exception.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;The application should fail-safe; i.e. unexpected or suspicious behavior should
                            result in termination of the user's session and a security event being logged.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            A number of tools can be used to aid in testing:&amp;nbsp; &amp;nbsp;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Directly your browser with the Developer Tools&lt;/li&gt;
                            &lt;li&gt;Use a browser extension which allows you to modify the request and responses on
                            the fly (i.e. Tamper Data)&lt;/li&gt;
                            &lt;li&gt;Use a proxy which allows you to modify the request and response on the fly (i.e.
                            OWASP ZAP, Burp, Fiddler, etc.)&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP - Testing for HTTP Parameter Pollution" url="https://www.owasp.org/index.php/Testing_for_HTTP_Parameter_pollution_(OTG-INPVAL-004)"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-29T19:21:35.402000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>