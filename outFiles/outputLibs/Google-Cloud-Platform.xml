<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (c) 2012-2019 Continuum Security.  All rights reserved.
The content of this library is the property of Continuum Security SL and may only be used in whole or in part with a valid license for IriusRisk. -->
<project ref="Google Cloud Platform" name="Google Cloud Platform" revision="1" type="LIBRARY" status="OPEN" enabled="true" priority="0" tags="" workflowState="">
    <desc>This library provides a baseline set of risks for anyone implementing an environment on Google Cloud Platform.
        It covers foundation services such as Governance, Identity and Access Management (IAM), Logging, Monitoring,
        Network, Kubernetes, Storage, Databases SQL and Virtual Machines.&amp;nbsp;
    </desc>
    <categoryComponents>
        <categoryComponent ref="google-cloud-platform" name="Google Cloud Platform"/>
    </categoryComponents>
    <componentDefinitions>
        <componentDefinition ref="google-cloud-platform-environment" name="Google Cloud Platform Environment" desc="Only select this if the security of the Google Cloud Platform environment will be managed in this product." categoryRef="google-cloud-platform">
            <riskPatterns>
                <riskPattern ref="GOOGLE-CLOUD-VNETS"/>
                <riskPattern ref="GOOGLE-CLOUD-IAM"/>
                <riskPattern ref="GOOGLE-CLOUD-LOGS"/>
                <riskPattern ref="GOOGLE-CLOUD-MON"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="google-virtual-machines" name="Google Cloud Virtual Machines" desc="" categoryRef="google-cloud-platform">
            <riskPatterns>
                <riskPattern ref="GOOGLE-CLOUD-VM"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="google-sql" name="Google Cloud SQL" desc="" categoryRef="google-cloud-platform">
            <riskPatterns>
                <riskPattern ref="GOOGLE-CLOUD-SQL"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="google-storage" name="Google Cloud Storage" desc="" categoryRef="google-cloud-platform">
            <riskPatterns>
                <riskPattern ref="GOOGLE-CLOUD-STORAGE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="google-kubernetes" name="Google Cloud Kubernetes" desc="" categoryRef="google-cloud-platform">
            <riskPatterns>
                <riskPattern ref="GOOGLE-CLOUD-KUB"/>
            </riskPatterns>
        </componentDefinition>
    </componentDefinitions>
    <udts/>
    <dataflows/>
    <supportedStandards/>
    <components>
        <component ref="GOOGLE-CLOUD-IAM" name="Google Cloud Identity and Access" desc="" tags="" position="1" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="GOOGLE-MON02" name="Excessive use of administrator accounts" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:08">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The administrator accounts are used for all actions, not only for administrative actions..</desc>
                </weakness>
                <weakness ref="LOST-SECURITY-ALERTS" name="Misconfigured Security contact details" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:08">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The security contact details for the Google subscription are not properly configured.</desc>
                </weakness>
                <weakness ref="GOOGLE-IAM-01" name="Misconfigured authentication method for administrator accounts" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:08">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The authentication method "Multi-factor Authentication" for the Administrator accounts is not
 configured.</desc>
                </weakness>
                <weakness ref="GOOGLE-IAM03" name="Misconfigured User Account" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:08">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Key security settings such as resetting the password, and other password controls are not
 configured.</desc>
                </weakness>
                <weakness ref="GOOGLE_IAM-02" name="Misconfigured credentials for groups and roles" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:08">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The credentials for the groups and roles are incorrectly configured and there are user
 accounts with more privileges than necessary.</desc>
                </weakness>
                <weakness ref="GOOGLE-EXPIRATION-DATE" name="Misconfigured security key expirations" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:08">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The password and security key expiration is not configured and users are not obliged to change
 their security credentials. Not frequently changing passwords, gives attackers the chance to
 obtain credentials and gain access to the systems.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="GOOGLE-IAM05" name="Create Individual Accounts for the administrator users" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create individual accounts for administrator users and with these new accounts perform the necessary administrative actions. By creating service accounts for people accessing your account, you can give each Google user a unique set of security credentials and roles. &lt;/p&gt;




 The administrator accounts shall be used for administrative actions and for giving or revoking credentials to users&amp;#8217; accounts. The administrator account shall be not used as a normal user account. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 # Open the Service Accounts page in the Cloud Platform Console and open the IAM page. 
 # Click Select a project. 
 # Select your project and click Open. 
 # Click Create Service Account. 
 # Enter a service account name, select a role you wish to grant to the service account and click Create.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: manage service accounts" url="https://cloud.google.com/iam/docs/creating-managing-service-accounts"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Open the Service Accounts page in the Cloud Platform Console and open the IAM
 page.
 # Click Select a project.
 # Select your project and click Open.
 # Review that each administrator user has an individual Google Service Account.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-GOV01" name="Configure the reset security challenge questions for Administrator accounts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Ensure configuration of the security challenge questions for the Administrator accounts recover or reset password process are secure. &lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt; 



 # Go to &lt;a href="https://myaccount.google.com/security#signin"&gt;Google Cloud Account&lt;/a&gt;. 
 # Fill in the fields from the &amp;#8216;Recover Account Options&amp;#8217; sections and click &amp;#8216;Save&amp;#8217;.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: Security" url="https://myaccount.google.com/security#signin"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to &lt;a href="https://myaccount.google.com/security#signin"&gt;Google Cloud
 account&lt;/a&gt;.
 # Check that all fields from the &amp;#8216;Recover Account Options&amp;#8217;
 sections are filled correctly.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-IAM06" name="Use Security Key for 2-Step Verification for administrator or co-administrator accounts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Ensure that the users with administrator and co-administrator accounts activate and configure the second factor authentication provided by Google. With 2-Step Verification, you can log into Google with a security key. &lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt; 


 To activate and configure 2 Factor Authentication, you shall follow the following steps: 



 # Go to the 2-Step Verification page section of &lt;a href="https://myaccount.google.com/signinoptions/two-step-verification"&gt;My Account&lt;/a&gt;. 
 # Click Add security key. 
 # Follow the on-screen instructions.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: mobile account" url="https://support.google.com/accounts/answer/6103523?co=GENIE.Platform%3DAndroid#phone"/>
                        <reference name="Google support: answers" url="https://support.google.com/accounts/answer/6103534"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the 2-Step Verification page section of My Account.
 # Check that 2-Step Verification authentication is enabled and configured correctly.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-IAM01" name="Recertify user access" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Do regular reviews of service accounts on the system and verify they do not contain stolen or
 fake accounts. This process ensures there are not any compromised accounts by former employees
 or attackers.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;


 At least every 90 days complete the following:



 # Open the Service Accounts page in the Cloud Platform Console.
 # Click Select a project.
 # Select your project and click Open. All service accounts are listed in the Service
 Accounts page.
 # For any user that should not exist, select the user and click the Delete button.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: manage service accounts" url="https://cloud.google.com/iam/docs/creating-managing-service-accounts"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Open the Service Accounts page in the Cloud Platform Console.
 # Click Select a project.
 # Select your project and click Open. All service accounts are listed in the Service
 Accounts page.
 # Check that the necessary users appear in the list.
 # And check that there is a process to review the access users at least every 90
 days.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-IAM02" name="Define roles for the Google Service Accounts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Define and create the roles for the Google Cloud. For each role, you can use one of the
 predefined roles or create a new custom role to ensure that each role has got the least minimum
 permissions.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # List all predefined roles and review them.
 # If it&amp;#8217;s necessary, create new custom roles to ensure users have the least privileges.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;List all roles.
 # Check that all fulfill the least privilege principle.
 # Check that all roles are defined correctly.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-IAM03" name="Apply RBAC with pre-defined policies added into groups and roles" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Define and create groups that relate to job functions (administrators, developers, accounting,
 etc.) and assign the relevant permissions for each group, and then assign IAM users to those
 groups. All the users in an IAM group inherit the permissions assigned to the group. That way,
 you can make changes for everyone in a group in just one place. As people move around in your
 company, you can simply change what IAM group their IAM user belongs to. This method is known as
 Role Based Access Control (RBAC).&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;


 To add a team member and grant an IAM role to the member:



 # Open the IAM page in the Cloud Platform Console and open the IAM page.
 # Click Select a project.
 # Select a project and click Open.
 # Click Add to add new members to the project and set their permissions. In the Select a
 role drop-down menu, click on a service name to find the roles that belong to that service.
 To grant more than one role to the same project member:



 # Open the IAM page in the Cloud Platform Console and open the IAM page.
 # Click Select a project.
 # Select a project and click Open.
 # Enter the email address of the member and select all the roles that you want to grant
 to the member. Click Add.
 To grant a role to a member for more than one project:



 # Open the IAM and Admin Projects page in the Cloud Platform Console and open the IAM
 &amp;amp; ADMIN PROJECTS page.
 # Select all the projects for which you want to grant permissions.
 # In the IAM tab on the right pane, add the new member and select a role to grant the
 role for all selected projects.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: grant/revoke access" url="https://cloud.google.com/iam/docs/granting-changing-revoking-access"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Open the IAM page in the Cloud Platform Console and open the IAM page.
 # Click Select a project and click Open.
 # List all members from the project.
 # Check that each member has been assigned to the correct roles.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-IAM04" name="Create mechanisms to ensure Least Privilege is applied" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create mechanisms to periodically review the group and user permissions to ensure the least
 privilege for the user accounts. Granting least privilege ensures that users only have the
 permissions required to complete their tasks rather than additional privileges that are not
 required. Following this model ensures that, should an account be compromised, the blast radius
 of damage is limited.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;


 Allocate privileges via groups or roles via the recommendation in &amp;#8216;Use RBAC with
 pre-defined policies added into groups or roles&amp;#8217;.



 # Open the IAM page in the Google Cloud Platform Console and open the IAM page.
 # Click Select a project.
 # Select a project and click Open.
 # Review the groups and users with access to the project and their permissions.
 # If there is a user with more privileges, revoke the access as following:

 * Select the user to revoke privileges.
 * In the Roles(s) drop-down menu in the member&amp;#8217;s row, uncheck the roles you want to
 revoke and click Save.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: grant/revoke access" url="https://cloud.google.com/iam/docs/granting-changing-revoking-access"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check there is a mechanism in place to ensure the enforcement of the Least Privilege
 principle.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-IAM07" name="Create a process to create and manage the Google Service Keys" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create a process or mechanism to create, manage, or revoke the assignment of keys to users and
 give them the least necessary access to resources. There are two types of service account keys:&lt;/p&gt;


 * **GCP-managed keys:**These keys are used by Cloud Platform
 services such as the App Engine and Compute Engine. These keys cannot be downloaded. Google will
 keep the keys and automatically rotate them daily.
 * **User-managed keys:**These keys are created, downloadable,
 and managed by users. For user-managed keys, you need to ensure you have processes in place to
 address key management requirements such as:

 * Key storage
 * Key distribution
 * Key revocation
 * Key rotation
 * Protecting the keys from unauthorized users.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: IAM manage account keys" url="https://cloud.google.com/iam/docs/understanding-service-accounts#managing_service_account_keys"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check there exists a mechanism or process to create, manage or revoke the assignment of
 keys to users.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-IAM08" name="Automatically rotate Google Service account keys" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The Google Service Keys shall be rotated to avoid unauthorized access.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;


 To enable automatic rotation of a key, set the rotation schedule with the following gcloud
 command-line syntax:


 gcloud kms keys update KEY_NAME \



 &amp;#8212;location LOCATION \


 &amp;#8212;keyring KEYRING_NAME \


 &amp;#8212;rotation-period ROTATION_PERIOD \


 &amp;#8212;next-rotation-time NEXT_ROTATION_TIME




 For example:

 gcloud kms keys update KEY_NAME



 &amp;#8212;rotation-period=30d


 &amp;#8212;next-rotation-time=2016-10-12T12:34:56.1234Z</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: KMS rotation schedule" url="https://cloud.google.com/kms/docs/rotating-keys#kms-set-rotation-schedule-cli"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check automatic rotation of keys is enabled.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="">
                    <threats>
                        <threat ref="GOOGLE-LOST-ACCESS-ROOT" name="Attackers gain unauthorized access to the root account due to lack of configuration of the account" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain unauthorized access to the administrator account due to lack of
 configuration of the account and its security mechanisms, such as modifying credentials
 and adding/removing user accounts.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-IAM05" mitigation="34"/>
                                <control ref="GOOGLE-GOV01" mitigation="33"/>
                                <control ref="GOOGLE-IAM06" mitigation="33"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-MON02">
                                    <controls>
                                        <control ref="GOOGLE-IAM05" mitigation="34"/>
                                    </controls>
                                </weakness>
                                <weakness ref="LOST-SECURITY-ALERTS">
                                    <controls>
                                        <control ref="GOOGLE-GOV01" mitigation="33"/>
                                    </controls>
                                </weakness>
                                <weakness ref="GOOGLE-IAM-01">
                                    <controls>
                                        <control ref="GOOGLE-IAM06" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="GOOGLE-LOST-ACCESS-USER" name="Attackers gain unauthorized access to the user account due to lack of configuration of the account" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain unauthorized access to the user account due to lack of
 configuration of the account, for example, the security question to reset the password
 is configured incorrectly.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-IAM01" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-IAM03">
                                    <controls>
                                        <control ref="GOOGLE-IAM01" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="">
                    <threats>
                        <threat ref="LOSS-CONTROL_ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to
 improper definition and configuration of user accounts or role groups. Therefore,
 attackers can make changes without root approval.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-IAM02" mitigation="20"/>
                                <control ref="GOOGLE-IAM03" mitigation="20"/>
                                <control ref="GOOGLE-IAM04" mitigation="20"/>
                                <control ref="GOOGLE-IAM07" mitigation="20"/>
                                <control ref="GOOGLE-IAM08" mitigation="20"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE_IAM-02">
                                    <controls>
                                        <control ref="GOOGLE-IAM02" mitigation="20"/>
                                        <control ref="GOOGLE-IAM03" mitigation="20"/>
                                        <control ref="GOOGLE-IAM04" mitigation="20"/>
                                        <control ref="GOOGLE-IAM07" mitigation="20"/>
                                    </controls>
                                </weakness>
                                <weakness ref="GOOGLE-EXPIRATION-DATE">
                                    <controls>
                                        <control ref="GOOGLE-IAM08" mitigation="20"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GOOGLE-CLOUD-KUB" name="Google Cloud Kubernetes" desc="" tags="" position="2" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="GOOGLE_IAM-02" name="Misconfigured credentials for groups and roles" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The credentials for the groups and roles are incorrectly configured and there are user
 accounts with more privileges than necessary.</desc>
                </weakness>
                <weakness ref="GOOGLE-LOGS01" name="Undetected changes in the Google Container Builder" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Changes in the Google Cloud Container Builder are not detected and audited, because the Google
 Cloud mechanisms that are used to notify about changes are disabled.</desc>
                </weakness>
                <weakness ref="GOOGLE-KEY-ACCESS" name="Container Builder has no access to the CryptoKey" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The Container Builder has no access to the CryptoKey in order to create and view the keys.</desc>
                </weakness>
                <weakness ref="GOOGLE-USECURE-CREDENTIALS" name="Credentials are not securely stored" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The credentials that are used to access the resources are not securely stored and they can be
 accessed by unauthorized personnel.</desc>
                </weakness>
                <weakness ref="GOOGLE-KEY-CREATE" name="Keys for encryption are not created" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>There are no keys to encrypt the communication between the users and the Google Container.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="GOOGLE-CONT04" name="Assign IAM roles to grant access to the Container Builder" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Manage and assign roles with the corresponding permissions for access to the Container Builder
 systems. In this process, the assignment of roles shall adhere to the Principle of Least
 Privilege.&lt;/p&gt;




 Therefore, each role with access to the containers shall be assigned only with the permissions
 the user needs for their specific tasks.





 &lt;b&gt;Remediation:&lt;/b&gt;


 To grant IAM roles for a new team member or service account:



 # Open the Identity and Access Management page in the Google Cloud Platform Console.
 # Select your project, and click Continue.
 # Click Add.
 # Enter the team member&amp;#8217;s or service account&amp;#8217;s email address.
 # Select the desired Role Title from the drop-down menu. Container Builder roles are
 found under Container Builder.
 # Click Add.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: manage IAM roles via console" url="https://cloud.google.com/container-builder/docs/securing-builds/configure-access-control#managing_iam_roles_via_the_console_name_short"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Open the Identity and Access Management page in the Google Cloud Platform Console.
 # Select your project, and click Continue.
 # Check for each IAM role that the access to the Container Builder is assigned and
 configured correctly.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-CONT05" name="Enable the logs for Google Container Builder" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The Admin activity logs are enabled and logged by default but the Data access logs for
 Container Builder operations are not recorded by default. You shall enable the Data Access audit
 logs in the project to follow the access to the Google Cloud Container.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;


 To enable the audit logs for the containers, you shall go to the file auditConfigs and add the
 following code:



 * In JSON:





 &amp;#8216;auditConfigs&amp;#8217;: [ {







 &amp;#8216;service&amp;#8217;: &amp;#8216;[SERVICE]&amp;#8217;,


 &amp;#8216;auditLogConfigs&amp;#8217;: [









 { &amp;#8216;logType&amp;#8217;: &amp;#8216;ADMIN_READ&amp;#8217; },








 { &amp;#8216;logType&amp;#8217;: &amp;#8216;DATA_READ&amp;#8217; },








 { &amp;#8216;logType&amp;#8217;: &amp;#8216;DATA_WRITE&amp;#8217; },








 ]

 }, ]











 * In YAML:



 auditConfigs:





 &amp;#8211; auditLogConfigs:


 &amp;#8211; logType: ADMIN_READ


 &amp;#8211; logType: DATA_WRITE


 &amp;#8211; logType: DATA_READ service: [SERVICE]







 Note: the param [SERVICE] shall be replaced with each service of the
 containers, the services are the following: projects.builds.get, projects.builds.list,
 projects.triggers.list, projects.triggers.get</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: enable logs for Container Builder" url="https://cloud.google.com/container-builder/docs/securing-builds/audit-logs#enable"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that the logs are enabled for the Google Containers and they show the correct
 information about the access of users.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-CONT02" name="Grant the Container Builder service account access to the CryptoKey" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;To decrypt your resource during your build, you must grant the Container Builder service
 account the permissions to access your CryptoKey. If it only needs to decrypt the file, you need
 only grant decrypt permission.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;


 To grant permission:



 * Google Cloud Console:

 * Visit the GCP Console IAM menu.
 * Copy the Container Builder service account email address, which contains
 @cloudbuild.gserviceaccount.com.
 * Visit the GCP Console Encryption Keys menu.
 * Select your KeyRing from the list, then click Permission.
 * Fill the Add members field with the service account email address.
 * From the Roles drop-down menu, choose Cloud KMS CryptoKey Decrypter.
 * Click Add.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: grant access with Cryptokey" url="https://cloud.google.com/container-builder/docs/securing-builds/use-encrypted-secrets-credentials#grant_the_product_name_short_service_account_access_to_the_cryptokey"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Visit the GCP Console IAM menu.
 # Copy the Container Builder service account email address, which contains
 @cloudbuild.gserviceaccount.com.
 # Visit the GCP Console Encryption Keys menu.
 # Select your KeyRing from the list, then click Permission.
 # Check that the respective user accounts are listed.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-CONT03" name="Encrypt the files using the CryptoKey" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The files shall be encrypted before their storage into a repository or datastore.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;


 To encrypt a file, run the following command in your shell or terminal window:


 gcloud kms encrypt \



 &amp;#8212;plaintext-file=secrets.json \


 &amp;#8212;ciphertext-file=secrets.json.enc \


 &amp;#8212;location=global \


 &amp;#8212;keyring=[KEYRING-NAME] \


 &amp;#8212;key=[KEY-NAME]




 This produces an encrypted file named secrets.json.enc, which contains the
 contents of secrets.json.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: encrypting with Cryptokey" url="https://cloud.google.com/container-builder/docs/securing-builds/use-encrypted-secrets-credentials#encrypting_a_file_using_the_cryptokey"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that all files are encrypted before they are stored into a repository or data
 store.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-CONT01" name="Create a Cloud KMS KeyRing and CryptoKey" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create the Cryptokey or the KeyRing to create the keys to connect to the Google Cloud
 Containers.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;


 You can create KeyRings and CryptoKeys using the gcloud kms keyrings create and gcloud kms keys
 create commands.





 To create a KeyRing, run the following command in your shell or terminal window: gcloud kms
 keyrings create [KEYRING-NAME] \



 &amp;#8212;location=global




 To create a CryptoKey:

 gcloud kms keys create [KEY-NAME] \



 &amp;#8212;location=global \


 &amp;#8212;keyring=[KEYRING-NAME] \


 &amp;#8212;purpose=encryption




 where: [KEYRING-NAME] is the name of the KeyRing to create [KEY-NAME] is the
 name of the CryptoKey to create.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: create keyring" url="https://cloud.google.com/sdk/gcloud/reference/kms/keyrings/create"/>
                        <reference name="Google Cloud: create keys" url="https://cloud.google.com/sdk/gcloud/reference/kms/keys/create"/>
                        <reference name="Google Cloud docs: KMS Keyring and Cryptokey" url="https://cloud.google.com/container-builder/docs/securing-builds/use-encrypted-secrets-credentials#creating_a_cloud_kms_keyring_and_cryptokey"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that each Google Cloud Container has the respective CryptoKey or KeyRing.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="GOOGLE CLOUD PLATFORM" name="Google Cloud Platform" desc="" library="">
                    <threats>
                        <threat ref="LOSS-CONTROL_ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to
 improper definition and configuration of user accounts or role groups. Therefore,
 attackers can make changes without root approval.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-CONT04" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE_IAM-02">
                                    <controls>
                                        <control ref="GOOGLE-CONT04" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="UNAUDITABLE-CHANGES-GOOGLE" name="Attackers make undetected and unaudited changes to system configurations" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;If audit trails are not properly protected, an attacker could gain access to the
 system, modify the status of resources or exfiltrate sensitive data without being
 detected.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-CONT05" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-LOGS01">
                                    <controls>
                                        <control ref="GOOGLE-CONT05" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="ACCESS-TO-DATA" name="Sensitive data is compromised  thorough unauthorized access to data storage" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;If audit trails are not properly protected, an attacker could gain access to the
 system, modify the status of resources or exfiltrate sensitive data without being
 detected.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-CONT02" mitigation="34"/>
                                <control ref="GOOGLE-CONT03" mitigation="33"/>
                                <control ref="GOOGLE-CONT01" mitigation="33"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-KEY-ACCESS">
                                    <controls>
                                        <control ref="GOOGLE-CONT02" mitigation="34"/>
                                    </controls>
                                </weakness>
                                <weakness ref="GOOGLE-USECURE-CREDENTIALS">
                                    <controls>
                                        <control ref="GOOGLE-CONT03" mitigation="33"/>
                                    </controls>
                                </weakness>
                                <weakness ref="GOOGLE-KEY-CREATE">
                                    <controls>
                                        <control ref="GOOGLE-CONT01" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GOOGLE-CLOUD-LOGS" name="Google Cloud Logging" desc="" tags="" position="3" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="GOOGLE-LOGS03" name="Audit logs can be deleted" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>There is no external backups of log records. If logs are deleted, there is no way to recover
 them.</desc>
                </weakness>
                <weakness ref="GOOGLE-LOGS01" name="Undetected changes in the Google Container Builder" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Changes in the Google Cloud Container Builder are not detected and audited, because the Google
 Cloud mechanisms that are used to notify about changes are disabled.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="GOOGLE-LOG02" name="Create mechanisms to periodically export the Audit Logs" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Enable the exporting of information from the Audit Logs to save them in a storage account.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the Logs Viewer and pick a project.
 # Select Exports in the left-side navigation panel.
 # We want to export all audit logs, therefore select the All logs checkbox.
 # Select the corresponding Storage bucket in the section &amp;#8216;Save to Cloud Storage
 bucket&amp;#8217;.
 # Click &amp;#8216;Save&amp;#8217; button.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: exporting logs" url="https://cloud.google.com/logging/docs/export/configure_export_v1"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that the exporting of data from the Audit Logs is enabled and stored into a storage
 account.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-LOG01" name="Enable all access logs" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Enable all audit logs in the Google Cloud Platform to control and monitor the access of users
 and the configuration changes in the systems.&lt;/p&gt;




 First, you have to know there are two types of audit logs in the Google Cloud Platform:



 * Admin Activity audit logs that are enabled for all services and cannot be configured.
 * Data Access audit logs that are not enabled by default and they shall be configured.

 &lt;b&gt;Remediation:&lt;/b&gt;





 To enable all audit logs, you shall enable and configure the Data Access audit logs. To
 configure these logs, you shall write the following configurations in the auditConfigs section:



 * JSON:





 &amp;#8216;auditConfigs&amp;#8217;: [ {







 &amp;#8216;service&amp;#8217;: &amp;#8216;allServices&amp;#8217;,


 &amp;#8216;auditLogConfigs&amp;#8217;: [









 { &amp;#8216;logType&amp;#8217;: &amp;#8216;ADMIN_READ&amp;#8217; },










 { &amp;#8216;logType&amp;#8217;: &amp;#8216;DATA_READ&amp;#8217; },


 { &amp;#8216;logType&amp;#8217;: &amp;#8216;DATA_WRITE&amp;#8217; },


 ]


 }, ]






 * YAML:



 auditConfigs:





 &amp;#8211; auditLogConfigs:







 &amp;#8211; logType: ADMIN_READ


 &amp;#8211; logType: DATA_WRITE


 &amp;#8211; logType: DATA_READ service: allServices</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: data access" url="https://cloud.google.com/logging/docs/audit/configure-data-access#project-and-organization"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that all audit logs in the Google Cloud Platform are enabled and configured.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="API LOGGING AND AUDITING" name="API Logging and Auditing" desc="" library="">
                    <threats>
                        <threat ref="UNAUDITABLE-CHANGES-GOOGLE" name="Attackers make undetected and unaudited changes to system configurations" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;If audit trails are not properly protected, an attacker could gain access to the
 system, modify the status of resources or exfiltrate sensitive data without being
 detected.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-LOG02" mitigation="50"/>
                                <control ref="GOOGLE-LOG01" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-LOGS03">
                                    <controls>
                                        <control ref="GOOGLE-LOG02" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="GOOGLE-LOGS01">
                                    <controls>
                                        <control ref="GOOGLE-LOG01" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GOOGLE-CLOUD-MON" name="Google Cloud Monitoring" desc="" tags="" position="4" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="GOOGLE-MON02" name="Excessive use of administrator accounts" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The administrator accounts are used for all actions, not only for administrative actions..</desc>
                </weakness>
                <weakness ref="GOOGLE-MON03" name="Lack of 2FA" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Login to the console without using Multi-factor Authentication (MFA) is considered as
 suspicious activity. Therefore connection without MFA must be audited and monitored and the
 corresponding security group must be informed and must validate this connection.</desc>
                </weakness>
                <weakness ref="GOOGLE-RESOURCES-STATUS" name="Undetected Resources status changes" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Changes to the system status are not controlled with the consequence of system failure.</desc>
                </weakness>
                <weakness ref="GOOGLE-MON06" name="Undetected brute force attempts on the Google Cloud console" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Failed connection attempts (brute force) must be audited and monitored and the corresponding
 personnel must be alerted and informed.</desc>
                </weakness>
                <weakness ref="GOOGLE-MON05" name="Undetected changes in the data encryption configuration" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Changes to the database encryption must be audited and monitored. When there are changes to
 the database encryption, the security group must be alerted.</desc>
                </weakness>
                <weakness ref="GOOGLE-MON04" name="Undetected changes in the security groups" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Changes in the security groups must be traced and monitored and the corresponding personnel
 must approve these changes. If the configuration is not appropriate, attackers can gain access
 to security systems.</desc>
                </weakness>
                <weakness ref="GOOGLE-MON01" name="Undetected changes in the security configurations" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Monitoring and alerting for security configurations are not configured and changes cannot be
 detected.</desc>
                </weakness>
                <weakness ref="GOOGLE-MON07" name="Undetected changes in the network configuration" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Changes in network configurations (NACLs, route and gateway tables) are not detected because
 monitoring and alerts of network configuration changes are not in place.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="GOOGLE-MON02A" name="Create alerts to notify about improper usage of the root account" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create alerts to monitor, audit and notify about usage of the root account when this account
 is used frequently. It&amp;#8217;s vital that monitoring of root account usage detects and reports
 unauthorized or improper usage.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the &lt;a href="https://app.google.stackdriver.com/"&gt;Stackdriver Monitoring
 Console&lt;/a&gt;.
 # Find on the panel the Create Alerting Policy and click on it.
 # Fill in the sections as follows:

 * The Conditions section is already set up. Fill the condition correctly.
 * In the Notifications section, click Add Notification and fill in your email address or
 another notification method.
 * In the Name this policy section, you can accept the default.

 # Click Save Policy.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: monitoring alerts" url="https://cloud.google.com/monitoring/alerts/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Stackdriver Monitoring Console.
 # On the panel, check there exists an Alerting Policy to notify about improper usage
 of administrator accounts.
 # Check this alert is configured correctly and notifications are configured to be
 sent to the corresponding users.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-MON05" name="Create alerts to be notified about console login without 2FA" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create alerts to monitor, audit and notify when users log into the console without a Second
 Factor of Authentication. It&amp;#8217;s vital that monitoring of authentication to systems detects and
 reports any unauthorized access to them.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the &lt;a href="https://app.google.stackdriver.com/"&gt;Stackdriver Monitoring
 Console&lt;/a&gt;.
 # Find on the panel the Create Alerting Policy and click on it.
 # Fill in the sections as follows:

 * The Conditions section is already set up. Fill the condition correctly.
 * In the Notifications section, click Add Notification and fill in your email address or
 another notification method.
 * In the Name this policy section, you can accept the default.

 # Click Save Policy.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: monitoring alerts" url="https://cloud.google.com/monitoring/alerts/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Stackdriver Monitoring Console.
 # On the panel, check there exists an Alerting Policy to notify when users are
 logged into the console without using 2 Factor authentication
 # Check that this alert is configured correctly and its notifications are configured
 to be sent to the corresponding users.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-MON01" name="Create an uptime check to alert when the server is down" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create an uptime check to verify your web server is always accessible. The alerting policy
 controls who is notified when the uptime check fails.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the &lt;a href="https://app.google.stackdriver.com/"&gt;Stackdriver Monitoring
 Console&lt;/a&gt;.
 # Click Create an Uptime Check on the dashboard. Otherwise, go to Uptime Checks in the
 left-hand menu, then select Uptime Checks Overview and then click Create an Uptime Check in the
 new page.
 # Fill in the following fields for the new uptime:

 * Title: Lamp Uptime Check.
 * Check type: HTTP.
 * Resource Type: Instance
 * Applies To: Single, lamp-1-vm
 * Leave the other fields with their default values.

 # Click Test to verify your uptime check is working. If you see a Connection error -
 refused message, you might not have installed the Apache HTTP Server.
 # Click Save.
 # Find on the panel the Create Alerting Policy and click on it.
 # Fill in the sections as follows:

 * The Conditions section is already set up. You don&amp;#8217;t have to change it.
 * In the Notifications section, click Add Notification and fill in your email address or
 another notification method.
 * In the Documentation section, click Add Documentation and enter: Stackdriver LAMP
 quickstart example.
 * In the Name this policy section, you can accept the default Uptime Check Policy.

 # Click Save Policy.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: monitoring gs checks" url="https://cloud.google.com/monitoring/quickstart-lamp#gs-checks"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Check there exists an uptime Check alert to notify when the server is down.
 # Check that this uptime Check alert is configured correctly.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-MON08" name="Create alerts to be notified about console login failure attempts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create alerts to monitor, audit and to be notified when there are several console login
 failure attempts. It&amp;#8217;s vital that monitoring of these connection attempts detects and reports
 any unauthorized access to the systems.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the &lt;a href="https://app.google.stackdriver.com/"&gt;Stackdriver Monitoring
 Console&lt;/a&gt;.
 # Find on the panel the Create Alerting Policy and click on it.
 # Fill in the sections as follows:

 * The Conditions section is already set up. Fill the condition correctly.
 * In the Notifications section, click Add Notification and fill in your email address or
 another notification method.
 * In the Name this policy section, you can accept the default.

 # Click Save Policy.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: monitoring alerts" url="https://cloud.google.com/monitoring/alerts/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Stackdriver Monitoring Console.
 # On the panel, check there exists an Alerting Policy to notify when the console
 login failure attempts is greater than a fixed number.
 # Check that this alert is configured correctly and its notifications are configured
 to be sent to the corresponding users.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-MON07" name="Create alerts when the data encryption changes" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create alerts to monitor, audit and notify when the data encryption changes. It&amp;#8217;s vital that
 monitoring of data encryption detects and reports any unauthorized changes in the system
 configurations.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the &lt;a href="https://app.google.stackdriver.com/"&gt;Stackdriver Monitoring
 Console&lt;/a&gt;.
 # Find on the panel the Create Alerting Policy and click on it.
 # Fill in the sections as follows:

 * The Conditions section is already set up. Fill the condition correctly.
 * In the Notifications section, click Add Notification and fill in your email address or
 another notification method.
 * In the Name this policy section, you can accept the default.

 # Click Save Policy.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: monitoring alerts" url="https://cloud.google.com/monitoring/alerts/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Stackdriver Monitoring Console.
 # On the panel, check there exists an Alerting Policy to notify when the data
 encryption configuration changes.
 # Check that this alert is configured correctly and its notifications are configured
 to be sent to the corresponding users.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-MON06" name="Create alerts for changes in the security groups and in the security group configurations" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create alerts to monitor, audit and notify about changes to the Security Groups or the
 Security Groups configuration. It&amp;#8217;s vital that monitoring of Security Groups detects and reports
 any unauthorized changes in the security systems.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the &lt;a href="https://app.google.stackdriver.com/"&gt;Stackdriver Monitoring
 Console&lt;/a&gt;.
 # Find on the panel the Create Alerting Policy and click on it.
 # Fill in the sections as follows:

 * The Conditions section is already set up. Fill the condition correctly.
 * In the Notifications section, click Add Notification and fill in your email address or
 another notification method.
 * In the Name this policy section, you can accept the default.

 # Click Save Policy.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: monitoring alerts" url="https://cloud.google.com/monitoring/alerts/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Stackdriver Monitoring Console.
 # On the panel, check there exists an Alerting Policy to notify when security groups
 and their configurations are changed or modified.
 # Check that this alert is configured correctly and its notifications are configured
 to be sent to the corresponding users.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-MON03" name="Create alerts for security policy changes" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create alerts to monitor, audit and notify about changes to the Security Policy. It&amp;#8217;s vital
 that monitoring of the Security Policy detects and reports any unauthorized changes in the
 security configurations.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the &lt;a href="https://app.google.stackdriver.com/"&gt;Stackdriver Monitoring
 Console&lt;/a&gt;.
 # Find on the panel the Create Alerting Policy and click on it.
 # Fill in the sections as follows:

 * The Conditions section shall be set up. In this case, you have to add the condition
 for the these methods: projects.getIamPolicy, projects.setIamPolicy, organizations.getIamPolicy
 and organizations.setIamPolicy
 * In the Notifications section, click Add Notification and fill in your email address or
 another notification method.
 * In the Name this policy section, you can accept the default.

 # Click Save Policy.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: Modify IAM policy" url="https://cloud.google.com/logging/docs/audit/configure-data-access?hl=es-419#getiampolicy-setiampolicy"/>
                        <reference name="Google Cloud: monitoring alerts" url="https://cloud.google.com/monitoring/alerts/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Stackdriver Monitoring Console.
 # Find on the panel the Create Alerting Policy and click on it.
 # Check that all fields are configured correctly.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-MON04" name="Create alerts to detect the changes of activity alerts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create alerts to monitor, audit and notify about the changes of Monitoring alerts. It&amp;#8217;s vital
 that the monitoring of alerts detects and reports any unauthorized changes in the Monitoring
 systems.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the &lt;a href="https://app.google.stackdriver.com/"&gt;Stackdriver Monitoring
 Console&lt;/a&gt;.
 # Find on the panel the Create Alerting Policy and click on it.
 # Fill in the sections as follows:

 * The Conditions section is already set up. You don&amp;#8217;t have to change it.
 * In the Notifications section, click Add Notification and fill in your email address or
 another notification method.
 * In the Name this policy section, you can accept the default.

 # Click Save Policy.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: monitoring alerts" url="https://cloud.google.com/monitoring/alerts/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Stackdriver Monitoring Console.
 # Find on the panel the Create Alerting Policy and click on it.
 # Check that all fields are configured correctly.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-MON13" name="Create alerts for the Logging of configuration changes" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create alerts for Logging changes to monitor, audit and notify about changes in this section
 by the corresponding personnel. It&amp;#8217;s vital that any unauthorized changes are detected and
 reported.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the &lt;a href="https://app.google.stackdriver.com/"&gt;Stackdriver Monitoring
 Console&lt;/a&gt;.
 # Find on the panel the Create Alerting Policy and click on it.
 # Fill in the sections as follows:

 * The Conditions section is already set up. You don&amp;#8217;t have to change it.
 * In the Notifications section, click Add Notification and fill in your email address or
 another notification method.
 * In the Name this policy section, you can accept the default.

 # Click Save Policy.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: monitoring alerts" url="https://cloud.google.com/monitoring/alerts/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Stackdriver Monitoring Console.
 # Find on the panel the Create Alerting Policy and click on it.
 # Check that all fields are configured correctly.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-MON09" name="Create alerts for VPC NACL changes" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create alerts to monitor, audit and notify when the VPC NACL (Network Access Control List)
 changes. It&amp;#8217;s vital that monitoring of VPC NACL detects and reports any unauthorized access to
 the security network systems.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the &lt;a href="https://app.google.stackdriver.com/"&gt;Stackdriver Monitoring
 Console&lt;/a&gt;.
 # Find on the panel the Create Alerting Policy and click on it.
 # Fill in the sections as follows:

 * The Conditions section is already set up. Fill the condition correctly.
 * In the Notifications section, click Add Notification and fill in your email address or
 another notification method.
 * In the Name this policy section, you can accept the default.

 # Click Save Policy.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: monitoring alerts" url="https://cloud.google.com/monitoring/alerts/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Stackdriver Monitoring Console.
 # On the panel, check there exists an Alerting Policy to notify when the VPC NACL
 configuration changes.
 # Check that this alert is configured correctly and its notifications are configured
 to be sent to the corresponding users.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-MON10" name="Create alerts for the VPC route table changes" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create alerts to monitor, audit and notify when the VPC Route Table changes. It&amp;#8217;s vital that
 monitoring of the VPC Route Table detects and reports any unauthorized access to the security
 network systems.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the &lt;a href="https://app.google.stackdriver.com/"&gt;Stackdriver Monitoring
 Console&lt;/a&gt;.
 # Find on the panel the Create Alerting Policy and click on it.
 # Fill in the sections as follows:

 * The Conditions section is already set up. Fill the condition correctly.
 * In the Notifications section, click Add Notification and fill in your email address or
 another notification method.
 * In the Name this policy section, you can accept the default.

 # Click Save Policy.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: monitoring alerts" url="https://cloud.google.com/monitoring/alerts/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Stackdriver Monitoring Console.
 # On the panel, check there exists an Alerting Policy to notify when the VPC route
 table configuration changes.
 # Check that this alert is configured correctly and its notifications are configured
 to be sent to the corresponding users.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-MON11" name="Create alerts for VPC gateway changes" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create alerts to monitor, audit and notify when the VPC Gateway changes. It&amp;#8217;s vital that
 monitoring of the VPC Gateway detects and reports any unauthorized access to the security
 network systems.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the &lt;a href="https://app.google.stackdriver.com/"&gt;Stackdriver Monitoring
 Console&lt;/a&gt;.
 # Find on the panel the Create Alerting Policy and click on it.
 # Fill in the sections as follows:

 * The Conditions section is already set up. Fill the condition correctly.
 * In the Notifications section, click Add Notification and fill in your email address or
 another notification method.
 * In the Name this policy section, you can accept the default.

 # Click Save Policy.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: monitoring alerts" url="https://cloud.google.com/monitoring/alerts/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Stackdriver Monitoring Console.
 # On the panel, check there exists an Alerting Policy to notify when the VPC gateway
 configuration changes.
 # Check that this alert is configured correctly and its notifications are configured
 to be sent to the corresponding users.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="ACTIVITY LOGS ALERTS" name="Activity Logs alerts" desc="" library="">
                    <threats>
                        <threat ref="UNAUTHORIZED-ACCESS-SYSTEMS" name="Attackers access the systems without being detected" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers gain access to the systems and are not detected and changes made by the
 attackers couldn&amp;#8217;t be audited or detected.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-MON02A" mitigation="17"/>
                                <control ref="GOOGLE-MON05" mitigation="17"/>
                                <control ref="GOOGLE-MON01" mitigation="17"/>
                                <control ref="GOOGLE-MON08" mitigation="17"/>
                                <control ref="GOOGLE-MON07" mitigation="16"/>
                                <control ref="GOOGLE-MON06" mitigation="16"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-MON02">
                                    <controls>
                                        <control ref="GOOGLE-MON02A" mitigation="17"/>
                                    </controls>
                                </weakness>
                                <weakness ref="GOOGLE-MON03">
                                    <controls>
                                        <control ref="GOOGLE-MON05" mitigation="17"/>
                                    </controls>
                                </weakness>
                                <weakness ref="GOOGLE-RESOURCES-STATUS">
                                    <controls>
                                        <control ref="GOOGLE-MON01" mitigation="17"/>
                                    </controls>
                                </weakness>
                                <weakness ref="GOOGLE-MON06">
                                    <controls>
                                        <control ref="GOOGLE-MON08" mitigation="17"/>
                                    </controls>
                                </weakness>
                                <weakness ref="GOOGLE-MON05">
                                    <controls>
                                        <control ref="GOOGLE-MON07" mitigation="16"/>
                                    </controls>
                                </weakness>
                                <weakness ref="GOOGLE-MON04">
                                    <controls>
                                        <control ref="GOOGLE-MON06" mitigation="16"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="UNAUTHORIZED-ACCESS-SECURITY-SYSTEMS" name="Attackers gain undetected access to the security system configurations" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain undetected access to the security system configurations and
 changes made by attackers couldn&amp;#8217;t be audited or detected.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-MON03" mitigation="34"/>
                                <control ref="GOOGLE-MON04" mitigation="33"/>
                                <control ref="GOOGLE-MON13" mitigation="33"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-MON01">
                                    <controls>
                                        <control ref="GOOGLE-MON03" mitigation="34"/>
                                        <control ref="GOOGLE-MON04" mitigation="33"/>
                                        <control ref="GOOGLE-MON13" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="UNAUTHORIZED-ACCESS-NETWORK" name="Sensitive data is compromised through network access" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers gain undetected access to the network systems and changes made by the
 attackers couldn&amp;#8217;t be audited or detected.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-MON09" mitigation="34"/>
                                <control ref="GOOGLE-MON10" mitigation="33"/>
                                <control ref="GOOGLE-MON11" mitigation="33"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-MON07">
                                    <controls>
                                        <control ref="GOOGLE-MON09" mitigation="34"/>
                                        <control ref="GOOGLE-MON10" mitigation="33"/>
                                        <control ref="GOOGLE-MON11" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GOOGLE-CLOUD-VNETS" name="Google Cloud Networking VNets" desc="" tags="" position="5" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="GOOGLE-VNET01" name="Networks for Google Cloud resources are not properly segmented" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Resources in the same VNet are compromised because when one of them is attacked and the
 attackers gain access, they also gain access to all resources.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="GOOGLE-NET01" name="Isolate groups of VM instances" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Use networks within projects to isolate groups of VM instances.&lt;/p&gt;

 Each project supports up to five isolated networks. Each network constitutes a global IP address
 space. This means that you can create resources, such as Google Compute Engine Virtual Machine
 (VM) instances, in multiple geographic regions, and the resources will share the same IP address
 space because they are on the same virtual network. Note that, despite the flat network address
 space, you still incur normal egress charges when you leave your zone. You can request a quota
 increase to support up to 15 isolated networks in each project.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: Isolate resources" url="https://cloud.google.com/docs/enterprise/best-practices-for-enterprise-organizations#use_projects_to_fully_isolate_resources"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check the projects are isolated using groups of VM instances.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-NET02" name="Isolate Google Cloud resources into separate VNets by function" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Place the resources into separate VNets according to their use or function (production,
 development, test). Placing such resources accordingly ensures that a resource of a high
 security level is not exposed by the security settings of a lower labeled VNet.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Identify the resources that exist in an incorrect VNet.
 # Migrate or move it to the correct VNet.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: Isolate resources" url="https://cloud.google.com/docs/enterprise/best-practices-for-enterprise-organizations#use_projects_to_fully_isolate_resources"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that the Google Cloud resources are isolated and separated in several VNets by the
 function of the resources.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="NETWORKING" name="Networking" desc="" library="">
                    <threats>
                        <threat ref="UNAUTHORISED-CONNECTION" name="Attackers gain unauthorized connection to the resources" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain unauthorized connection to the resources through misconfigured
 ports or security network configurations.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-NET01" mitigation="50"/>
                                <control ref="GOOGLE-NET02" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-VNET01">
                                    <controls>
                                        <control ref="GOOGLE-NET01" mitigation="50"/>
                                        <control ref="GOOGLE-NET02" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GOOGLE-CLOUD-SQL" name="Google Cloud SQL" desc="" tags="" position="6" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="GOOGLE-BACKUP" name="There is not a recover or backup mechanism" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>There are not any processes or mechanisms to regularly save the data to another place in order
 to have an older version of the data to restore in case of loss. Consequently the data cannot be
 easily recovered or they cannot be recovered at all.</desc>
                </weakness>
                <weakness ref="GOOGLE-LOGS01" name="Undetected changes in the Google Container Builder" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Changes in the Google Cloud Container Builder are not detected and audited, because the Google
 Cloud mechanisms that are used to notify about changes are disabled.</desc>
                </weakness>
                <weakness ref="GOOGLE-NET-21" name="Unauthorized connection between the client and the SQL database" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>All connections to SQL Database are allowed and the firewall and other security networks
 methods are not configured to deny connections.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="GOOGLE-SQL04" name="Create a plan for backups and perform backups regularly" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create a mechanism to do regularly backups from the SQL database and save it into another
 place.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: SQL Best practices backing up" url="https://cloud.google.com/compute/docs/instances/sql-server/best-practices?-419#backing_up"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check there exists a mechanism to do backups of the SQL databases frequently and these
 backups are placed into another secure place.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-SQL05" name="Use Stackdriver Monitoring." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Install the beta Stackdriver Monitoring agent for Microsoft Windows to send several monitoring
 data points into the Stackdriver system.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;


 To install the agent on a VM instance running Windows, perform the following steps after you
 have established an RDP or similar connection to your instance and have logged into Windows:



 # If you use an HTTP proxy, run the following command from an administrator command
 prompt to set the http_proxy environment variable so that the agent can send data to Stackdriver
 Monitoring using outbound HTTPS: setx http_proxy http://YOUR-PROXY /m
 # Browse to the following URL.

 * Download and run the agent&amp;#8217;s installer:
 https://repo.stackdriver.com/windows/StackdriverMonitoring-GCM-45.exe
 * This can also be done via the following PowerShell commands: cd C:\Users\[USERNAME]
 invoke-webrequest https://repo.stackdriver.com/windows/StackdriverMonitoring-GCM-45.exe -OutFile
 StackdriverMonitoring-GCM-45.exe; .\StackdriverMonitoring-GCM-45.exe

 # Your agent installation is now complete.
 To install the agent on a VM instance running Linux, these instructions work for both
 Google Compute Engine instances and Amazon EC2 instances:



 # Run the following commands on your VM instance to install the monitoring agent: curl
 -sSO https://dl.google.com/cloudagents/install-monitoring-agent.sh sudo bash
 install-monitoring-agent.sh At the end of the installation, you should see something like the
 following message. Restarting services [ ok ] Restarting stackdriver-agent (via systemctl):
 stackdriver-agent.service.
 # If you use an HTTP proxy, do the following: a. Edit the Monitoring agent&amp;#8217;s
 system-defaults file to set PROXY_URL to the URL of your HTTP proxy. This URL comes from your
 configuration, not from a value Google provides. The name of the configuration file depends on
 your version of Linux: For Debian and Ubuntu, edit /etc/default/stackdriver-agent For Amazon
 Linux, Red Hat, and CentOS, edit /etc/sysconfig/stackdriver b. Restart the Monitoring agent by
 running the following command on your VM instance. sudo service stackdriver-agent restart You
 have finished installing the agent.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: SQL Best practices monitoring" url="https://cloud.google.com/compute/docs/instances/sql-server/best-practices?-419#monitoring"/>
                        <reference name="Google Cloud: monitoring install agent in linux" url="https://cloud.google.com/monitoring/agent/install-agent?hl=es-419#linux-install"/>
                        <reference name="Google Cloud: monitoring install agent in windows" url="https://cloud.google.com/monitoring/agent/install-agent?hl=es-419#windows-install"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Check that the Stackdriver Monitoring agent for Microsoft Windows is installed and
 configured to receive the monitoring data points into the Stackdriver system.
 # Check that the monitoring data points are received for the corresponding users.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-SQL01" name="Enable SSL channel encryption to connect to the database" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Enable and configure SSL encryption with the certificates to connect to the SQL database. This
 way only users with the appropriate certificate can connect to the SQL database. Remediation:
 You can create up to 10 client certificates for each instance. If you lose the private key for a
 certificate, you must create a new one; the private key cannot be recovered.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the Cloud SQL Instances page in the &lt;a
 href=&amp;#8220;https://console.cloud.google.com/sql/instances&amp;#8221;&gt;Google Cloud Platform Console&lt;/a&gt;.
 # Click the instance name to open its Instance details page.
 # Select the SSL tab.
 # In the SSL Connections section, click Allow only SSL connection to enforce that only
 SSL connections can connect to the instances. (This step is not required. However, if you do not
 require SSL for all connections, any issue with your SSL configuration can cause all connections
 to default silently to unencrypted.)
 # In the Client Certificates section, click Create a Client Certificate.
 # In the New client certificate dialog box, give the certificate a name unique for this
 instance and click Add.
 # In the first section of the New SSL certificate created dialog box, click the link to
 download the private key to a file named client-key.pem. (Important: Store this private key
 securely. If you lose it, you must create a new client certificate.)
 # In the second section, click the link to download the client certificate to a file
 named client-cert.pem.
 # In the third section, click the link to download the server certificate to a file
 named server-ca.pem.
 # Click Close.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: MySQL SSL configuration" url="https://cloud.google.com/sql/docs/mysql/configure-ssl-instance?-419#introduction"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Cloud SQL Instances page in the Google Cloud Platform Console.
 # Click the instance name to open its Instance details page.
 # Select the SSL tab.
 # In the SSL Connections section, check that the SSL Connections are configured and
 enabled correctly.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-SQL02" name="Restrict network access to the database" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Use the Windows Server Advanced Firewall, and specify the IP addresses of your client
 computers. The Windows Advanced Firewall is an important security component in Windows Server.
 When you set up your SQL Server environment to be able to connect to the database from other
 client machines, configure the firewall to allow incoming traffic:&lt;/p&gt;

 netsh advfirewall firewall add rule name=&amp;#8216;SQL Access&amp;#8217; ^ dir=in action=allow ^
 program=&amp;#8217;%programfiles%\Microsoft SQL
 Server\MSSQL12.MSSQLSERVER\MSSQL\Binn\sqlservr.exe&amp;#8217; ^ remoteip=[LOCAL_SUBNET]





 When you use this firewall rule, it is a good practice to specify the IP address of your client
 machines. Specify a comma-delimited list of IP addresses with no whitespaces for the remoteip
 parameter in place of [LOCAL_SUBNET]. Also, note that the path for the program parameter might
 change depending on the version of SQL Server that you use. The SQL Server application image
 includes an SQL Server Windows firewall rule. This rule is fairly unrestricted, so consider
 disabling it before your system goes to production.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: SQL Best practices" url="https://cloud.google.com/compute/docs/instances/sql-server/best-practices?-419"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that the network access is restricted when you try to access to the databases.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="GOOGLE CLOUD PLATFORM" name="Google Cloud Platform" desc="" library="">
                    <threats>
                        <threat ref="LOSS-DATA-REMOVED" name="Attackers destroy the data and the data cannot be recovered" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers gain access to the systems and data with excessive permissions and they
 remove all the information from the system, which might lead to permanent loss of data,
 including sensitive or personal data.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-SQL04" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-BACKUP">
                                    <controls>
                                        <control ref="GOOGLE-SQL04" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="UNAUDITABLE-CHANGES-GOOGLE" name="Attackers make undetected and unaudited changes to system configurations" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;If audit trails are not properly protected, an attacker could gain access to the
 system, modify the status of resources or exfiltrate sensitive data without being
 detected.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-SQL05" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-LOGS01">
                                    <controls>
                                        <control ref="GOOGLE-SQL05" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="UNAUTHORISED-CONNECTION" name="Attackers gain unauthorized connection to the resources" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain unauthorized connection to the resources through misconfigured
 ports or security network configurations.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-SQL01" mitigation="50"/>
                                <control ref="GOOGLE-SQL02" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-NET-21">
                                    <controls>
                                        <control ref="GOOGLE-SQL01" mitigation="50"/>
                                        <control ref="GOOGLE-SQL02" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GOOGLE-CLOUD-STORAGE" name="Google Cloud Storage" desc="" tags="" position="7" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="GOOGLE-BACKUP" name="There is not a recover or backup mechanism" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>There are not any processes or mechanisms to regularly save the data to another place in order
 to have an older version of the data to restore in case of loss. Consequently the data cannot be
 easily recovered or they cannot be recovered at all.</desc>
                </weakness>
                <weakness ref="GOOGLE-EASY-FIND-RESOURCES" name="Resources are exposed" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When you are into a VNet, you can search its resources, but that shall be used only when you
 know the resource name. The problem occurs when you don't know these names and you can easily
 find the resources. Therefore anyone with access to the system could easily find all the
 resources and gain access, regardless of having any information about them.</desc>
                </weakness>
                <weakness ref="GOOGLE-USECURE-CREDENTIALS" name="Credentials are not securely stored" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The credentials that are used to access the resources are not securely stored and they can be
 accessed by unauthorized personnel.</desc>
                </weakness>
                <weakness ref="GOOGLE-OBSOLETE-APPS-ACCESS" name="Obsolete applications have access to the resources" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>There are obsolete applications that no one uses, with permissions to access the resources.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="GOOGLE-STO04" name="Enable Data Storage versioning" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Enable data storage versioning to make data backups and avoid accidental or intentional
 removal of the data.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;


 To enable Object Versioning on a bucket:



 * Using GSUTIL: Use the gsutil versioning set on command, replacing [VALUES_IN_BRACKETS]
 with the appropriate values: gsutil versioning set on gs://[BUCKET_NAME]
 * Using REST APIS:

 * JSON API:







 # Get an authorization access token from the OAuth 2.0 Playground. Configure the
 playground to use your own OAuth credentials.
 # Create a .json file that contains the following information: {&amp;#8216;versioning&amp;#8217;:
 { &amp;#8216;enabled&amp;#8217;: true }}
 # Use cURL to call the JSON API with a PATCH Bucket request, replacing
 [VALUES_IN_BRACKETS] with the appropriate values:









 curl -X PATCH &amp;#8212;data-binary @[JSON_FILE_NAME].json \









 -H &amp;#8216;Authorization: Bearer [OAUTH2_TOKEN]&amp;#8217; \










 -H &amp;#8216;Content-Type: application/json&amp;#8217; \ &amp;#8216;https://www.googleapis.com/storage/v1/b/[BUCKET_NAME]?fields=versioning&amp;#8217;








 * XML API:






 # Get an authorization access token from the OAuth 2.0 Playground. Configure the
 playground to use your own OAuth credentials.
 # Create an .xml file that contains the following information, replacing
 [VALUES_IN_BRACKETS] with the appropriate values: Enabled
 # Use cURL to call the XML API, with a PUT Bucket request and versioning query string
 parameter, replacing [VALUES_IN_BRACKETS] with the appropriate values:









 curl -X PUT &amp;#8212;data-binary @[XML_FILE_NAME].xml \









 -H &amp;#8216;Authorization: Bearer [OAUTH2_TOKEN]&amp;#8217; \










 &amp;#8216;https://storage.googleapis.com/[BUCKET_NAME]?versioning&amp;#8217;</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: enable versioning" url="https://cloud.google.com/storage/docs/using-object-versioning#enable-object-versioning-xml"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that Data Storage versioning is enabled.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-STO03" name="Use apropriate names for the buckets" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Google Cloud Storage requests refer to buckets and objects by their names. As a result, even
 though ACLs will prevent unauthorized third parties from operating on buckets or objects, a
 third party can attempt requests with bucket or object names and determine their existence by
 observing the error responses.&lt;/p&gt;




 It can then be possible for information in bucket or object names to be leaked. If you are
 concerned about the privacy of your bucket or object names, you should take appropriate
 precautions, such as:



 * Choosing bucket and object names that are difficult to guess. For example, a bucket
 named mybucket-gtbytul3 is random enough that unauthorized third parties cannot feasibly guess
 it or enumerate other bucket names from it.
 * Avoiding use of sensitive information as part of bucket or object names. For example,
 instead of naming your bucket mysecretproject-prodbucket, name it somemeaninglesscodename-prod.
 In some applications, you may want to keep sensitive metadata in custom Google Cloud Storage
 headers such as x-goog-meta, rather than encoding the metadata in object names.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: Best practices Storage" url="https://cloud.google.com/storage/docs/best-practices#security"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that all buckets are named appropriately.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-STO02" name="Securely store your credentials" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Make sure that you securely store your credentials. This can be done differently depending on
 your environment and where you store your credentials. For example, if you store your
 credentials in a configuration file, make sure that you set appropriate permissions on that file
 to prevent unwanted access. If you are using Google App Engine, consider using StorageByKeyName
 to store your credentials.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: Best practices storage" url="https://cloud.google.com/storage/docs/best-practices"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that the credentials are stored securely.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-STO01" name="Revoke access to Storage for unnecessary applications" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create a mechanism or process to review all applications with access to the Data Storage and
 verify that these applications should have access. If an application should not have access to
 the data storage, you have to revoke the access from this application.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # To revoke the access from an application, go to the &lt;a
 href=&amp;#8220;https://www.google.com/accounts/ManageAccount&amp;#8221;&gt;Google Account&lt;/a&gt;.
 # Click in to Authorizing applications and sites.
 # In the next page, you can revoke access for applications by clicking Revoke Access
 next to the application.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: Best practices Storage security" url="https://cloud.google.com/storage/docs/best-practices#security"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that there are only the necessary accesses from applications to the data storages.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="GOOGLE CLOUD PLATFORM" name="Google Cloud Platform" desc="" library="">
                    <threats>
                        <threat ref="LOSS-DATA-REMOVED" name="Attackers destroy the data and the data cannot be recovered" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers gain access to the systems and data with excessive permissions and they
 remove all the information from the system, which might lead to permanent loss of data,
 including sensitive or personal data.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-STO04" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-BACKUP">
                                    <controls>
                                        <control ref="GOOGLE-STO04" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="ACCESS-TO-RESOURCES" name="Attackers gain access to the resources" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers gain access to the systems and data with excessive permissions and they
 remove all the information from the system, which might lead to permanent loss of data,
 including sensitive or personal data.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-STO03" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-EASY-FIND-RESOURCES">
                                    <controls>
                                        <control ref="GOOGLE-STO03" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="ACCESS-TO-DATA" name="Sensitive data is compromised  thorough unauthorized access to data storage" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;If audit trails are not properly protected, an attacker could gain access to the
 system, modify the status of resources or exfiltrate sensitive data without being
 detected.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-STO02" mitigation="50"/>
                                <control ref="GOOGLE-STO01" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-USECURE-CREDENTIALS">
                                    <controls>
                                        <control ref="GOOGLE-STO02" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="GOOGLE-OBSOLETE-APPS-ACCESS">
                                    <controls>
                                        <control ref="GOOGLE-STO01" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GOOGLE-CLOUD-VM" name="Google Cloud Virtual Machines" desc="" tags="" position="8" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="GOOGLE-VM01" name="Exposed security policies" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The security policies are not configured and the security configurations are exposed to the
 attackers.</desc>
                </weakness>
                <weakness ref="GOOGLE-NET-05" name="Communication is not allowed from/to Virtual Machines" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>IP allocation of Virtual Machines, DNS resolution, and node monitoring is performed by a host
 node. It is necessary to allow the communication with this virtual IP to be able to make the
 communication from/to the Virtual Machine of Google Cloud.</desc>
                </weakness>
                <weakness ref="GOOGLE-NET-01" name="Unauthorized connection attempts on open ports" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Receiving unauthorized connections to open ports is most likely an attack. To avoid this,
 access to the network must be as restricted as possible, so that only the necessary ports are
 open and the minimum inbound traffic is accepted.</desc>
                </weakness>
                <weakness ref="GOOGLE-NET-02" name="Unauthorized connection attempts on port 22" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Receiving unauthorized connections to port 22 is most likely an SSH attack. To avoid this,
 access to the network must be as restricted as possible, so that only the necessary ports are
 open and the minimum inbound traffic is accepted.</desc>
                </weakness>
                <weakness ref="GOOGLE-NET-03" name="Unauthorized connection attempts on port 3389" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Receiving unauthorized connections to port 3389 is most likely experiencing an RDP attack. To
 avoid this, access to the network must be as restricted as possible, so that only the necessary
 ports are open and the minimum inbound traffic is accepted.</desc>
                </weakness>
                <weakness ref="GOOGLE-VM02" name="Undetected changes in the Virtual Machine configurations " state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Changes in the Virtual Machines configurations are not detected because the monitoring and
 alerts of the security configuration are not configured.</desc>
                </weakness>
                <weakness ref="DATA-TRANSMIT-CLEAR" name="Data is transmitted in clear text" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The data is not protected when transmitted to applications or customers. The data can be
 accessed and stolen from external sources.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="GOOGLE-MON03" name="Create alerts for security policy changes" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create alerts to monitor, audit and notify about changes to the Security Policy. It&amp;#8217;s vital
 that monitoring of the Security Policy detects and reports any unauthorized changes in the
 security configurations.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the &lt;a href="https://app.google.stackdriver.com/"&gt;Stackdriver Monitoring
 Console&lt;/a&gt;.
 # Find on the panel the Create Alerting Policy and click on it.
 # Fill in the sections as follows:

 * The Conditions section shall be set up. In this case, you have to add the condition
 for the these methods: projects.getIamPolicy, projects.setIamPolicy, organizations.getIamPolicy
 and organizations.setIamPolicy
 * In the Notifications section, click Add Notification and fill in your email address or
 another notification method.
 * In the Name this policy section, you can accept the default.

 # Click Save Policy.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: Modify IAM policy" url="https://cloud.google.com/logging/docs/audit/configure-data-access?hl=es-419#getiampolicy-setiampolicy"/>
                        <reference name="Google Cloud: monitoring alerts" url="https://cloud.google.com/monitoring/alerts/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Stackdriver Monitoring Console.
 # Find on the panel the Create Alerting Policy and click on it.
 # Check that all fields are configured correctly.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-VM01" name="Allow Virtual IP of the Microsoft host node" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Allow the inbound access in the Network Security Groups from the IP address 168.63.129.16 to
 communicate with the Google Cloud Service. This IP belongs to Microsoft and acts as DHCP server,
 DNS server and monitors the host node hosting the Google Cloud Virtual Machine.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the Firewall rules page in the &lt;a
 href=&amp;#8220;https://console.cloud.google.com//networking/firewalls/list&amp;#8221;&gt;Google Cloud Platform
 Console&lt;/a&gt;.
 # Click Create firewall rule.
 # Enter a Name for the firewall rule. This name must be unique for the project.
 # Specify the Network where the firewall rule is implemented.
 # Specify the Priority of the rule. If this rule will not conflict with any other rules,
 you can leave the priority on the default of 1000. If you want to give it a higher or lower
 priority than other rules, give it a lower number to have it evaluated earlier or a higher
 number to have it evaluated later.
 # Indicate the Direction of traffic to which you want the rule to apply. In your case
 ingress.
 # Indicate the Action as Allow.
 # Specify the Targets of the rule.
 # Select IP ranges if you want the rule to apply to packets from certain source IP
 ranges only, then specify those ranges in the Source IP ranges field. In your case, the IP
 traffic is 168.63.129.16.
 # Click Create.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: create firewall rules" url="https://cloud.google.com/vpc/docs/using-firewalls#creating_firewall_rules"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Firewall rules page in the Google Cloud Platform Console.
 # Review all firewall rules.
 # Check that each firewall rule is configured correctly.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-VM04" name="Block all inbound port traffic from 0.0.0.0/0" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create a Firewall rule to filter the ingress/egress network traffic to Google Cloud resources
 and deny the access to the resources by default. Set the limit inbound access to all TCP or all
 ports to avoid undue exposure to risk.
 ****&lt;/p&gt;

 ****


 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the Firewall rules page in the &lt;a
 href=&amp;#8220;https://console.cloud.google.com//networking/firewalls/list&amp;#8221;&gt;Google Cloud Platform
 Console&lt;/a&gt;.
 # Click Create firewall rule.
 # Enter a Name for the firewall rule. This name must be unique for the project.
 # Specify the Network where the firewall rule is implemented.
 # Specify the Priority of the rule. If this rule will not conflict with any other rules,
 you can leave the priority on the default of 1000. This rules shall have the highest priority,
 because the other rules modify this rule.
 # Indicate the Direction of traffic to which you want the rule to apply. In your case
 ingress.
 # Indicate the Action as Deny.
 # Specify the Targets of the rule.
 # Select IP ranges if you want the rule to apply to packets from certain source IP
 ranges only, then specify those ranges in the Source IP ranges field. In your case, the IP
 traffic is 0.0.0.0/0.
 # Specify which Protocols and ports the rule should apply to. In your case, deny all
 traffic ports.
 # Click Create.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: create firewall rules" url="https://cloud.google.com/vpc/docs/using-firewalls#creating_firewall_rules"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Firewall rules page in the Google Cloud Platform Console.
 # Check that the corresponding Firewall rule is configured and implemented.
 # Check that the inbound traffic from the ip 0.0.0.0/0 is blocked.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-VM03" name="Use Network Security Groups to restrict ingress to port 22" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Use Network Security Groups (NSG) to filter the ingress/egress network traffic to Google Cloud
 resources. Set the limit inbound access to port 22 (Secure Desk) to IP addresses that require
 this access to avoid undue exposure to risk.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the Firewall rules page in the &lt;a
 href=&amp;#8220;https://console.cloud.google.com//networking/firewalls/list&amp;#8221;&gt;Google Cloud Platform
 Console&lt;/a&gt;.
 # Click Create firewall rule.
 # Enter a Name for the firewall rule. This name must be unique for the project.
 # Specify the Network where the firewall rule is implemented.
 # Specify the Priority of the rule. If this rule will not conflict with any other rules,
 you can leave the priority on the default of 1000. If you want to give it a higher or lower
 priority than other rules, give it a lower number to have it evaluated earlier or a higher
 number to have it evaluated later.
 # Indicate the Direction of traffic to which you want the rule to apply. In your case
 ingress.
 # Indicate the Action as Allow.
 # Specify the Targets of the rule.
 # Select the IP ranges you want the &amp;#8216;allow&amp;#8217; rule to apply to from
 certain source IP ranges only, then specify those ranges in the Source IP ranges field.
 # Specify which Protocols and ports the rule should apply to. In your case, port 22.
 # Click Create.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: create firewall rules" url="https://cloud.google.com/vpc/docs/using-firewalls#creating_firewall_rules"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Firewall rules page in the Google Cloud Platform Console.
 # Check that the corresponding Firewall rule is configured and implemented.
 # Check that the inbound traffic though to port 22 is restricted.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-VM02" name="Use Network Security Groups to restrict ingress to port 3389" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Use Network Security Groups (NSG) to filter the ingress/egress network traffic to Google Cloud
 resources. Set the limit inbound access to port 3389 (Remote Desk Protocol) to IP addresses that
 require this access in order to avoid undue exposure to risk.&lt;/p&gt;

 Remediation:
 1. Go to the Firewall rules page in the Google Cloud Platform Console.
 (https://console.cloud.google.com//networking/firewalls/list)
 2. Click Create firewall rule.
 3. Enter a Name for the firewall rule. This name must be unique for the project.
 4. Specify the Network where the firewall rule is implemented.
 5. Specify the Priority of the rule. If this rule will not conflict with any other rules, you
 can leave the priority on the default of 1000. If you want to give it a higher or lower priority
 than other rules, give it a lower number to have it evaluated earlier or a higher number to have
 it evaluated later.
 6. Indicate the Direction of traffic to which you want the rule to apply. In your case ingress.
 7. Indicate the Action as Allow.
 8. Specify the Targets of the rule.
 9. Select the IP ranges you want the &amp;#8220;allow&amp;#8221; rule to apply to from certain source IP ranges
 only, then specify those ranges in the Source IP ranges field.
 10. Specify which Protocols and ports the rule should apply to. In your case, port 3389
 11. Click Create.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud docs: create firewall rules" url="https://cloud.google.com/vpc/docs/using-firewalls#creating_firewall_rules"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Firewall rules page in the Google Cloud Platform Console.
 # Check that the corresponding Firewall rule is configured and implemented.
 # Check that inbound traffic though to port 3389 is restricted.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-VM05" name="Create alerts for the Virtual Machines" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Create alerts to monitor, audit and notify when the following cases occur. It&amp;#8217;s vital that the
 monitoring of the different Virtual Machines measures, detects and reports any errors or attack
 mechanisms that force changes to the Virtual Machine.&lt;/p&gt;




 To avoid this you have to create alerts based on specific performance metrics:



 # Notify the corresponding personnel when the average CPU usage exceeds a certain
 threshold.
 # Notify the corresponding personnel when the available free disk space drops below a
 certain amount.
 # Notify the corresponding personnel when the security configuration of the Virtual
 Machines changes.

 &lt;b&gt;Remediation:&lt;/b&gt;



 # Go to the &lt;a href="https://app.google.stackdriver.com/"&gt;Stackdriver Monitoring
 Console&lt;/a&gt;.
 # Find on the panel the Create Alerting Policy and click on it.
 # Fill in the sections as follows:

 * The Conditions section, you have to add a new condition for each metric in this
 section.
 * In the Notifications section, click Add Notification and fill in your email address or
 another notification method.
 * In the Name this policy section, you can accept the default.

 # Click Save Policy.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: monitoring alerts threshold" url="https://cloud.google.com/monitoring/alerts/#metric-threshold"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Go to the Stackdriver Monitoring Console.
 # Find on the panel the Create Alerting Policy and click on it.
 # Check that all fields are configured correctly.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-VM06" name="Configure and set up HTTPS/SSL for production environment " platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;For production web systems, you should configure HTTPS/SSL. HTTPS/SSL can be set up either by
 setting up an instance to terminate HTTPS or by configuring HTTPS load balancing. HTTPS/SSL does
 involve some initial complexity, requiring you to perform the following tasks: Register a domain
 name. Acquire an SSL certificate from a certificate authority.&lt;/p&gt;




 Register the certificate with your HTTPS load balancer and its connected instances, or configure
 an SSL-terminated web server or proxy on one or more Compute Engine instances. If you have set
 up SSL-serving domains before, it should be straightforward to do the same with Google Compute
 Engine. If not, you might find it easier to use a different security method, such as port
 forwarding or SOCKS proxy.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: HTTPS and SSL" url="https://cloud.google.com/solutions/connecting-securely?-419#https-and-ssl"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that HTTPS/SSL is enabled and configured for production environments.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="GOOGLE-VM07" name="Configure the SSH encryption protocol to connect to the VM" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Configure ports 2222 and 8888 to connect to the Virtual Machine with the SSH transport
 encryption protocol. Remediation: Use the gcloud command-line tool to start a server on a given
 local port that forwards all traffic to a remote host over an SSH connection.&lt;/p&gt;




 First, take a note of the instance and port that are providing the service to which you would
 like to establish a secure connection. Next, run the following command:





 gcloud compute ssh example-instance \



 &amp;#8212;project my-project \


 &amp;#8212;zone us-central1-a \


 &amp;#8212;ssh-flag=&amp;#8217;-L&amp;#8217; \


 &amp;#8212;ssh-flag=&amp;#8216;2222:localhost:8888&amp;#8217;




 In the above command, the parameters are defined as follows:


 * example-instance is the name of the instance to which you&amp;#8217;d like to connect.
 * my-project is your Google Cloud Platform project ID.
 * us-central1-a is the zone in which your instance is running.
 * 2222 is the local port you&amp;#8217;re listening on.
 * 8888 is the remote port you&amp;#8217;re connecting to.
 With these example settings, if you open http://localhost:2222/ in your browser, the
 HTTP connection will go over the SSH tunnel you have just created over to your remote host and
 connect to the specified instance via SSH and then connect to port 8888 on the same machine, but
 over an encrypted, secure SSH connection. The gcloud command creates and maintains an SSH
 connection, and this approach only works while the SSH session is active. As soon as you exit
 the SSH session that gcloud creates, the port forwarded via http://localhost:2222/ will stop
 working.</desc>
                    <implementations/>
                    <references>
                        <reference name="Google Cloud: port forwarding over SSL" url="https://cloud.google.com/solutions/connecting-securely?-419#port-forwarding-over-ssh"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that the encryption channel SSL is enabled and configured for connections to the
 VM.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:17:09">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="GOOGLE CLOUD PLATFORM" name="Google Cloud Platform" desc="" library="">
                    <threats>
                        <threat ref="UNCONFIGURED-SECURITY" name="Attackers gain access to the system by exploiting weak security configurations" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers gain access to the systems and data with excessive permissions and they
 remove all the information from the system, which might lead to permanent loss of data,
 including sensitive or personal data.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-MON03" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-VM01">
                                    <controls>
                                        <control ref="GOOGLE-MON03" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="UNAUTHORISED-CONNECTION" name="Attackers gain unauthorized connection to the resources" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain unauthorized connection to the resources through misconfigured
 ports or security network configurations.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-VM01" mitigation="25"/>
                                <control ref="GOOGLE-VM04" mitigation="25"/>
                                <control ref="GOOGLE-VM03" mitigation="25"/>
                                <control ref="GOOGLE-VM02" mitigation="25"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-NET-05">
                                    <controls>
                                        <control ref="GOOGLE-VM01" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="GOOGLE-NET-01">
                                    <controls>
                                        <control ref="GOOGLE-VM04" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="GOOGLE-NET-02">
                                    <controls>
                                        <control ref="GOOGLE-VM03" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="GOOGLE-NET-03">
                                    <controls>
                                        <control ref="GOOGLE-VM02" mitigation="25"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="UNAUTHORIZED-ACCESS-VIRTUAL-MACHINES" name="Attackers gain undetected access to the system by changing Virtual Machine configurations " state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers can gain undetected access to the virtual machine configurations and these
 changes couldn&amp;#8217;t be audited or detected.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-VM05" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="GOOGLE-VM02">
                                    <controls>
                                        <control ref="GOOGLE-VM05" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="DATA-EXPOSED-CHANNEL" name="The data is exposed through the transmission channel" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers can obtain the data through the transmitted channel because this does not
 have the security measures in place to protect the data&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="GOOGLE-VM06" mitigation="50"/>
                                <control ref="GOOGLE-VM07" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="DATA-TRANSMIT-CLEAR">
                                    <controls>
                                        <control ref="GOOGLE-VM06" mitigation="50"/>
                                        <control ref="GOOGLE-VM07" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
    </components>
    <rules>
        <rule name="Q: Deployed - Public Cloud &amp; Google Cloud &amp; All" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="trust.zone.public.cloud">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <action project="" value="cloud.google_::_Google Cloud_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
        </rule>
        <rule name="nan" module="nan" generatedByGui="true"/>
        <rule name="Q: Deployed - Public Cloud &amp; Google Cloud &amp; Client" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="publicCloud">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="cloud.google">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="cloud.google.services_::_Deployment_::_Which Google Cloud services?_::_6510_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; Google Cloud &amp; Client - *" module="nan" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-CLIENT">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="cloud.google.services">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="cloud.google.kubernetes_::_Google Cloud Kubernetes_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; Google Cloud &amp; Data Store" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-CLIENT">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="cloud.google">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="cloud.google.virtualMachines_::_Google Cloud Virtual Machines_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="cloud.google.services_::_Deployment_::_Which Google Cloud services?_::_6510_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; Google Cloud &amp; Data Store NoSQL - *" module="nan" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATASTORE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="cloud.google.services">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="cloud.google.kubernetes_::_Google Cloud Kubernetes_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; Google Cloud &amp; Data Store other - *" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATABASE-NOSQL">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="cloud.google.services">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="cloud.google.storage_::_Google Cloud Storage_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="cloud.google.kubernetes_::_Google Cloud Kubernetes_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; Google Cloud &amp; Data Store SQL - *" module="nan" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATASTORE-OTHER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="cloud.google.services">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="cloud.google.storage_::_Google Cloud Storage_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="cloud.google.kubernetes_::_Google Cloud Kubernetes_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; Google Cloud &amp; Service" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATABASE-SQL">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="cloud.google">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="cloud.google.sql_::_Google Cloud SQL_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="cloud.google.virtualMachines_::_Google Cloud Virtual Machines_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="cloud.google.services_::_Deployment_::_Which Google Cloud services?_::_6510_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; Google Cloud &amp; Service - *" module="nan" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="cloud.google.services">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="cloud.google.kubernetes_::_Google Cloud Kubernetes_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; Google Cloud &amp; Web UI" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="cloud.google">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="cloud.google.virtualMachines_::_Google Cloud Virtual Machines_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="cloud.google.services_::_Deployment_::_Which Google Cloud services?_::_6510_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; Google Cloud &amp; Web UI - *" module="nan" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="cloud.google.services">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="cloud.google.kubernetes_::_Google Cloud Kubernetes_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
        </rule>
        <rule name="Risk Pattern: Google Cloud - Environment" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="cloud.google">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="cloud.google.virtualMachines_::_Google Cloud Virtual Machines_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="Google Cloud Platform" value="Google Cloud Platform_::_GOOGLE-CLOUD-VM" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
        </rule>
        <rule name="Risk Pattern: Google Cloud - Kubernetes" module="nan" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="cloud.google.kubernetes">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="Google Cloud Platform" value="Google Cloud Platform_::_GOOGLE-CLOUD-KUB" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
        </rule>
        <rule name="Risk Pattern: Google Cloud - SQL" module="nan" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="cloud.google.sql">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="Google Cloud Platform" value="Google Cloud Platform_::_GOOGLE-CLOUD-SQL" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
        </rule>
        <rule name="Risk Pattern: Google Cloud - Storage" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="cloud.google.storage">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="Google Cloud Platform" value="Google Cloud Platform_::_GOOGLE-CLOUD-STORAGE" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
        </rule>
        <rule name="Risk Pattern: Google Cloud - Virtual Machine" module="nan" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="cloud.google.virtualMachines">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="Google Cloud Platform" value="Google Cloud Platform_::_GOOGLE-CLOUD-VM" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
        </rule>
        <rule name="Set Answer: Set Public Cloud when Google Cloud Environment is selected" module="component" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="google-cloud-platform-environment">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project="" value="Public Cloud_::_true_::_true" name="Answer Question" type="drools-without-variable-type">
                <pattern name="Action of answer question" pattern='$questionToAnswer : Question(id == "${value-1}", answer != ${value-2}); eval(!${value-3} || !$questionToAnswer.isManuallyModified());_:::_modify($questionToAnswer) { setAnswer(${value-2}), setCanBeManuallyModified(${value-3}) };'/>
            </action>
        </rule>
        <rule name="Set Answer: Set Public Cloud when Google Kubernetes is selected" module="nan" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="google-kubernetes">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project="" value="Public Cloud_::_true_::_true" name="Answer Question" type="drools-without-variable-type">
                <pattern name="Action of answer question" pattern='$questionToAnswer : Question(id == "${value-1}", answer != ${value-2}); eval(!${value-3} || !$questionToAnswer.isManuallyModified());_:::_modify($questionToAnswer) { setAnswer(${value-2}), setCanBeManuallyModified(${value-3}) };'/>
            </action>
        </rule>
        <rule name="Set Answer: Set Public Cloud when Google SQL is selected" module="component" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="google-sql">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project="" value="Public Cloud_::_true_::_true" name="Answer Question" type="drools-without-variable-type">
                <pattern name="Action of answer question" pattern='$questionToAnswer : Question(id == "${value-1}", answer != ${value-2}); eval(!${value-3} || !$questionToAnswer.isManuallyModified());_:::_modify($questionToAnswer) { setAnswer(${value-2}), setCanBeManuallyModified(${value-3}) };'/>
            </action>
        </rule>
        <rule name="Set Answer: Set Public Cloud when Google Storage is selected" module="nan" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="google-storage">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project="" value="Public Cloud_::_true_::_true" name="Answer Question" type="drools-without-variable-type">
                <pattern name="Action of answer question" pattern='$questionToAnswer : Question(id == "${value-1}", answer != ${value-2}); eval(!${value-3} || !$questionToAnswer.isManuallyModified());_:::_modify($questionToAnswer) { setAnswer(${value-2}), setCanBeManuallyModified(${value-3}) };'/>
            </action>
        </rule>
        <rule name="Set Answer: Set Public Cloud when Google Virtual Machines is selected" module="component" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="google-virtual-machines">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project="" value="Public Cloud_::_true_::_true" name="Answer Question" type="drools-without-variable-type">
                <pattern name="Action of answer question" pattern='$questionToAnswer : Question(id == "${value-1}", answer != ${value-2}); eval(!${value-3} || !$questionToAnswer.isManuallyModified());_:::_modify($questionToAnswer) { setAnswer(${value-2}), setCanBeManuallyModified(${value-3}) };'/>
            </action>
        </rule>
    </rules>
</project>
