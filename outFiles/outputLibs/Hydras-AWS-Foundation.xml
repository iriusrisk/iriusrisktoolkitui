<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (c) 2012-2019 Continuum Security.  All rights reserved.
The content of this library is the property of Continuum Security SL and may only be used in whole or in part with a valid license for IriusRisk. -->
<project ref="Hydras-AWS-Foundation" name="Hydras-AWS-Foundation" revision="1" type="LIBRARY" status="OPEN" enabled="true" priority="0" tags="" workflowState="">
    <desc>This library provides a baseline set of risks for anyone implementing an environment on Amazon Web Services
        (AWS). It covers foundation services such as Governance, Identity and Access Management (IAM), Logging,
        Monitoring, Network, EC2 and S3.

        This library has been supplied by Hydras IT LTD (https://hydrasit.com). and by CIS Benchmarks
        (https://www.cisecurity.org/cis-benchmarks/). Please contact Hydras for further
        information.
    </desc>
    <categoryComponents>
        <categoryComponent ref="amazon-web-services" name="Amazon Web Services"/>
    </categoryComponents>
    <componentDefinitions>
        <componentDefinition ref="amazon-web-services-environment" name="AWS Account Environment" desc="Amazon Web Services Environment. Only select this if the security of the AWS environment will be managed in this product." categoryRef="amazon-web-services">
            <riskPatterns>
                <riskPattern ref="HYDRAS-AWS-IAM"/>
                <riskPattern ref="HYDRAS-AWS-MON"/>
                <riskPattern ref="HYDRAS-AWS-NET"/>
                <riskPattern ref="HYDRAS-AWS-LOG"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="ec2" name="EC2 - Elastic Compute Cloud" desc="" categoryRef="amazon-web-services">
            <riskPatterns>
                <riskPattern ref="HYDRAS-AWS-EC2"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="s3" name="S3 - Simple Storage Service" desc="" categoryRef="amazon-web-services">
            <riskPatterns>
                <riskPattern ref="HYDRAS-AWS-S3"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="rds" name="RDS - Relational Database Service" desc="" categoryRef="amazon-web-services">
            <riskPatterns>
                <riskPattern ref="HYDRAS-AWS-RDS"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="load-balancer" name="ELB - Elastic Load Balancer" desc="" categoryRef="amazon-web-services">
            <riskPatterns>
                <riskPattern ref="HYDRAS-AWS-ELB"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="sns" name="SNS - Simple Notification Service" desc="" categoryRef="amazon-web-services">
            <riskPatterns>
                <riskPattern ref="HYDRAS-AWS-SNS"/>
            </riskPatterns>
        </componentDefinition>
    </componentDefinitions>
    <udts/>
    <dataflows/>
    <supportedStandards>
        <supportedStandard ref="cis-amazon-web-services-three-tier-web-architecture-benchmark" name="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
        <supportedStandard ref="CIS AWS Standard" name="CIS Amazon Web Services Foundations Benchmark"/>
    </supportedStandards>
    <components>
        <component ref="HYDRAS-AWS-EC2" name="AWS EC2" desc="" tags="" position="1" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="AWS-NET-01" name="Unauthorised connection attempts are allowed on open ports" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Receiving unauthorized connections to open ports is most likely to be receiving an attack. To
 avoid this, access to the network must be as restricted as possible, so that only the necessary
 ports are open and the minimum inbound traffic is accepted.</desc>
                </weakness>
                <weakness ref="AWS-NET-02" name="Unauthorised connection attempts are allowed on port 22" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Receiving unauthorized connections to port 22 is most likely to be receiving an SSH attack. To
 avoid this, access to the network must be as restricted as possible, so that only the necessary
 ports are open and the minimum inbound traffic is accepted.</desc>
                </weakness>
                <weakness ref="AWS-NET-03" name="Unauthorised connection attempts are allowed on port 3389" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Receiving unauthorized connections to port 3389 is most likely to be receiving an RDP attack.
 To avoid this, access to the network must be as restricted as possible, so that only the
 necessary ports are open and the minimum inbound traffic is accepted.</desc>
                </weakness>
                <weakness ref="AWS-EC2-6.2" name="The instances are not patched" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The instances are not patched with the last updates for the correspondent Operative System
 (OS), and the instances have got weaknesses which are solved in the last updates.</desc>
                </weakness>
                <weakness ref="AWS-NET-04" name="Unauthorised connection attempts are allowed on Amazon resources" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Receiving unauthorized connections to Amazon resources is most likely to be receiving an attack. To avoid this, access to the network must be as restricted as possible using Network Access Control Lists for blacklisting.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="Hydras-AWS-Network-5.5" name="Use security groups to block ingress to all ports from 0.0.0.0/0" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Security groups are analogous to firewalls and therefore provide stateful filtering of
 ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
 ALL TCP or ALL ports to avoid undue server exposure.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;


 # Login to the AWS Management Console (with VPC update).
 # Select VPC from the services menu.
 # Select Security Groups.
 # For each security group, perform the following:

 * Select the security group.
 * Click the Inbound tab.
 * Identify the rules to be removed.
 * Click the x in the Remove column.
 * Click Save.

 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="4.3" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Login to the AWS Management Console.
 # Select VPC from the services menu.
 # Select Security Groups.
 # For each security group, perform the following:&lt;/li&gt;
	&lt;/ol&gt;

 * Select the security group.
 * Click the Inbound tab.
 * Ensure no rule exists that has a port range of 0-1024 of 0-65535 and has a source
 of 0.0.0.0/0.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Network-5.6" name="Restrict all traffic with the default security group" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Security groups are analogous to firewalls and therefore provide stateful filtering of
 ingress/egress network traffic to AWS resources. It is recommended to limit all traffic
 (ingress/egress) on the default security group in order to force the use of least privilege via
 custom created security groups.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;


 # Identify AWS resources that exist within the default security group.
 # Create a set of least privilege security groups for those resources.
 # Place the resources in those security groups.
 # Remove the resources noted in 1 from the default security group.
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Login to the AWS Management Console.
 # Select VPC from the services menu.
 # Select Security Groups.
 # For each security group, perform the following:&lt;/li&gt;
	&lt;/ol&gt;

 * Select the default security group.
 * Click the Inbound Rules tab.
 * Ensure no rule exist.
 * Click the Outbound Rules tab.
 * Ensure no rules exist.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Network-5.3" name="Use security groups to block ingress to port 22 from 0.0.0.0/0" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Security groups are analogous to firewalls and therefore provide stateful filtering of
 ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
 port 22 (SSH) to IP addresses that require this access to avoid undue exposure to risk.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;


 # Login to the AWS Management Console (with VPC update)
 # Select VPC from the services menu
 # Select Security Groups
 # For each security group, perform the following:

 * Select the security group.
 * Click the Inbound tab.
 * Identify the rules to be removed.
 * Click the x in the Remove column.
 * Click Save.

 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="4.1" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Login to the AWS Management Console.
 # Select VPC from the services menu.
 # Select Security Groups.
 # For each security group, perform the following:&lt;/li&gt;
	&lt;/ol&gt;

 * Select the security group.
 * Click the Inbound tab.
 * Ensure no rule exists that has a port range that includes port 22 and has a source
 of 0.0.0.0/0.

 NB: Note that if the port range includes 0-1024 or 0-65535 these also include
 port 22</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Network-5.4" name="Use security groups to block ingress to port 3389 from 0.0.0.0/0" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Security groups are analogous to firewalls and therefore provide stateful filtering of
 ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
 port 3389 (RDP) to IP addresses that require this access to avoid undue exposure to risk.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;


 # Login to the AWS Management Console (with VPC update).
 # Select VPC from the services menu.
 # Select Security Groups.
 # For each security group, perform the following:

 * Select the security group.
 * Click the Inbound tab.
 * Identify the rules to be removed.
 * Click the x in the Remove column.
 * Click Save

 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="4.2" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Login to the AWS Management Console.
 # Select VPC from the services menu.
 # Select Security Groups.
 # For each security group, perform the following:&lt;/li&gt;
	&lt;/ol&gt;

 * Select the security group.
 * Click the Inbound tab.
 * Ensure no rule exists that has a port range that includes port 22 and has a source
 of 0.0.0.0/0.

 NB: Note that if the port range includes 0-1024 or 0-65535 these also include
 port 3389</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-EC2-6.2" name="Maintain a patch policy and patch EC2 systems regularly " platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Patching instances ensures that packages within the Operating System (OS) are updated to the
 latest version and/or have security fixes applied. It is recommended to patch EC2 instances
 every 90 days (or immediately if security patches become available) to avoid undue exposure&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;


 # For linux instances ensure your OS is updated as per:
 http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-software.html
 # For Windows instances ensure your OS is updated as per:
 http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#update-windows-instance
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Ensure you have a documented patching policy.
 # Ensure your systems have been patched at least every 90 days.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Network-5.7" name="Use Network Access Control Lists (NACLs) for blacklisting" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Network Access Control Lists (NACLs) act as packet filters across subnets, allowing or deny
 traffic per pre-created rules. It is recommended to use NACLs as a method of blacklisting IP
 addresses, denying either inbound or outbound access across your subnets.&lt;/p&gt;



 &lt;b&gt;Remediation:&lt;/b&gt;


 # Login to the AWS Management Console (with VPC update).
 # Select VPC from the services menu.
 # Select Network ACL&amp;#8217;s.
 # For each Network ACL ID, perform the following:

 * Select the Inbound Rules tab.
 * Click edit.
 * add a DENY rule that will restrict inbound access from a blacklisted IP address or
 range to a designated port or IP range.

 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Login to the AWS Management Console.
 # Select VPC from the services menu.
 # Select Network ACLs.
 # For each Network ACL ID, perform the following:&lt;/li&gt;
	&lt;/ol&gt;



 * Click the Inbound Rules tab.
 * Ensure a rule exists the DENY&amp;#8217;s access from a blacklisted IP or range.
 * Click the Outbound Rules tab.
 * Ensure a rule exists the DENY&amp;#8217;s access to a blacklisted IP or range.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="AMAZON WEB SERVICES" name="Amazon Web Services" desc="" library="">
                    <threats>
                        <threat ref="UNAUTHORIZED-CONNECTION" name="Attackers gain access to the systems through direct access" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers gain a unauthorized connection to the system through misconfigured ports or
 security network configurations.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="Hydras-AWS-Network-5.5" mitigation="25"/>
                                <control ref="Hydras-AWS-Network-5.6" mitigation="25"/>
                                <control ref="Hydras-AWS-Network-5.3" mitigation="25"/>
                                <control ref="Hydras-AWS-Network-5.4" mitigation="25"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-NET-01">
                                    <controls>
                                        <control ref="Hydras-AWS-Network-5.5" mitigation="25"/>
                                        <control ref="Hydras-AWS-Network-5.6" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-NET-02">
                                    <controls>
                                        <control ref="Hydras-AWS-Network-5.3" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-NET-03">
                                    <controls>
                                        <control ref="Hydras-AWS-Network-5.4" mitigation="25"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorised access to data on EC2 instances" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers cloud gain access to data on EC2 instances through the weaknesses
 in non-updated systems.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="Hydras-AWS-EC2-6.2" mitigation="50"/>
                                <control ref="Hydras-AWS-Network-5.7" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-EC2-6.2">
                                    <controls>
                                        <control ref="Hydras-AWS-EC2-6.2" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-NET-04">
                                    <controls>
                                        <control ref="Hydras-AWS-Network-5.7" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="HYDRAS-AWS-ELB" name="AWS ELB" desc="" tags="" position="2" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-295" name="Improper Certificate Validation" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not validate, or incorrectly validates, a
 certificate.</desc>
                </weakness>
                <weakness ref="CWE-326" name="Inadequate Encryption Strength" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software stores or transmits sensitive data using an encryption scheme that is
 theoretically sound, but is not strong enough for the level of protection required.</desc>
                </weakness>
                <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not encrypt sensitive or critical information
 before storage or transmission.</desc>
                </weakness>
                <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmentated." state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Resources in the same VNet are compromised because when one of them is attacked and the
 attackers gain access, they also gain access to all resources.</desc>
                </weakness>
                <weakness ref="AWS-Network-5.1" name="Non-identify the resources" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Resources are not registered in the safety net systems, and there are more unidentified
 resources. This can be a problem because these unidentified resources can have unknown
 weaknesses.</desc>
                </weakness>
                <weakness ref="AWS-NET-01" name="Unauthorised connection attempts are allowed on open ports" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Receiving unauthorized connections to open ports is most likely to be receiving an attack. To
 avoid this, access to the network must be as restricted as possible, so that only the necessary
 ports are open and the minimum inbound traffic is accepted.</desc>
                </weakness>
                <weakness ref="AWS-Logging-3.4" name="Non-auditable actions in the resources" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The actions in the resources are not audited and not recorded in the logs.</desc>
                </weakness>
                <weakness ref="unknown-resource-status" name="Unknown resource status" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>We do not have our resources current status and as a result lose control of some resources,
 for example, we may believe these resources are inactive when in fact the status has changed and we are unaware.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="aws-tier-1.12" name="Add SSL/TLS Certificate to App Tier ELB" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When you use HTTPS for your front-end listener, you must deploy an SSL/TLS certificate on your load balancer. The load balancer uses the certificate to terminate the connection and then decrypt requests from clients before sending them to the back-end instances. &lt;/p&gt;

 The SSL\TLS protocol uses an X.509 certificate (SSL\TLS server certificate) to authenticate both the client and the back-end application. An X.509 certificate is a digital form of identification issued by a trusted certificate authority (CA) and contains identification information, a validity period, a public key, a serial number, and the digital signature of the issuer. 

 You can create a certificate using a Third Party Certificate Authority, AWS Certificate Manager or a self signed certificate like OpenSSL. 

 Note: an SSL certificate configured on the ELB is not mandatory if you are terminating SSL connections directly on the App Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 

 All the application traffic between the Web Tier instances and the App Tier ELB nodes should be encrypted using an SSL\TLS certificate. 

	&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt; &lt;/p&gt;


	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;

 * Adding a HTTPS listener configured with a SSL\TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80): 

 aws elb create-load-balancer-listeners &amp;#8212;load-balancer-name &lt;app_tier_elb&gt; &amp;#8212;listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                        <reference name="Amazon docs: ELB add/delete listeners" url="http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-add-or-delete-listeners.html#add-listener-cli"/>
                    </references>
                    <standards>
                        <standard ref="1.12" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;


 (Note that you should replace &lt;app_tier_elb&gt; with your App-tier ELB name) 



 * Note that if the ListenerDescriptions is empty, the ELB does not have a listener configured with a SSL\TLS certificate, or a TCP listener (TCP pass-through): 





 aws elb describe-load-balancers &amp;#8212;load-balancer-names &lt;app_tier_elb&gt; &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == &amp;#8216;TCP&amp;#8217;]}&amp;#8217; &amp;#8212;output table</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-1.9" name="Add SSL/TLS Certificate to Web Tier ELB" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When you use HTTPS for your front-end listener, you must deploy an SSL/TLS certificate on your load balancer. The load balancer uses the certificate to terminate the connection and then decrypt requests from clients before sending them to the back-end instances. &lt;/p&gt;





 The TLS protocol uses an X.509 certificate (SSL/TLS server certificate) to authenticate both the client and the back-end application. An X.509 certificate is a digital form of identification issued by a trusted certificate authority (CA) and contains identification information, a validity period, a public key, a serial number, and the digital signature of the issuer. 





 You can create a certificate using a Third Party Certificate Authority or AWS Certificate Manager. 





 Note: an SSL certificate configured on the ELB is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 





 All the application traffic between the clients and the Web Tier ELB nodes should be encrypted using a SSL/TLS certificate. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 



 * Adding a HTTPS listener configured with a SSL/TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80): 







 aws elb create-load-balancer-listeners &amp;#8212;load-balancer-name &lt;web_tier_elb&gt; &amp;#8212;listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                        <reference name="Amazon docs: ELB add/delete listeners" url="http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-add-or-delete-listeners.html#add-listener-cli"/>
                    </references>
                    <standards>
                        <standard ref="1.9" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;


 (Note that you should replace &lt;web_tier_elb&gt; with your Web-tier ELB name) 



 * Note that if the ListenerDescriptions element is empty, the ELB does not have a listener configured with a SSL/TLS certificate, or a TCP listener (TCP pass-through): 





 aws elb describe-load-balancers &amp;#8212;load-balancer-names &lt;web_tier_elb&gt; &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == &amp;#8216;TCP&amp;#8217;]}&amp;#8217; &amp;#8212;output table</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-ELB-01" name="Use the Perfect Forward Secrecy feature" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;For greater communication privacy Elastic Load Balancing allows the use of Perfect Forward
 Secrecy. This feature provides additional safeguards against eavesdropping on encrypted data,
 through the use of a unique random session key, and therefore prevents the decoding of captured
 data, even if the secret long-term key is compromised.&lt;/p&gt;


 **To begin using Perfect Forward Secrecy: **Configure your load
 balancer with the newly added Elliptic Curve Cryptography (ECDHE) cipher suites.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that your load balancer is configured with the newly added Elliptic Curve
 Cryptography (ECDHE) cipher suites.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-ELB-02" name="Select the Server Order Preference option" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Within Elastic Load Balancing ensure the use of newer and stronger cipher suites when
 establishing a new connection supporting the Server Order Preference option. When this option is
 selected, the load balancer selects the first cipher in its list that is in the client&amp;#8217;s list of
 ciphers.&lt;/p&gt;


 ** &lt;b&gt;Remediation:&lt;/b&gt; **
 To enable Server Order Preference:


 * Open the Amazon EC2 console.
 * Under LOAD BALANCING, choose Load Balancers.
 * Select your Load Balancer.
 * On the Listeners tab, for Cipher, choose Change.
 * On the Select a Cipher page, select Custom Security Policy.
 * For SSL Options, select Server Order Preference.
 * Click Save.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ul&gt;
		&lt;li&gt;Open the Amazon EC2 console.
 * Under LOAD BALANCING, choose Load Balancers.
 * Select your Load Balancer.
 * On the Listeners tab, for Cipher, choose Change.
 * On the Select a Cipher page, select Custom Security Policy.
 * For SSL Options, check that the option Server Order Preference is selected.&lt;/li&gt;
	&lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-1.10" name="Configure the latest SSL Security Policies for Web Tier ELB" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Elastic Load Balancing uses an Secure Socket Layer (SSL) negotiation configuration, known as a security policy, to negotiate SSL/TLS connections between a client and the load balancer. A security policy is a combination of SSL/TLS protocols, ciphers, and the Server Order Preference option. &lt;/p&gt;





 Elastic Load Balancing supports configuring your load balancer to use either predefined or custom security policies. 





 Secure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic protocols that are used to encrypt confidential data over insecure networks such as the Internet. The TLS protocol is a newer version of the SSL protocol. In the Elastic Load Balancing documentation, we refer to both SSL and TLS protocols as the SSL protocol. 





 Note: an SSL certificate configured on the ELB and an SSL Security Policy is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 





 Making sure the latest ELB SSL Security Policy is used will ensure the SSL/TLS connection will be negotiated using only the appropriate cryptographic protocols deemed safe with no proven vulnerabilities. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 


 (Note that you should replace &lt;web\_tier\_elb&gt; with your Web-tier ELB name, and &lt;em&gt;&lt;latest\_ssl\_policy&gt;&lt;/em&gt; with the proper policy name) 








 aws elb set-load-balancer-policies-of-listener &amp;#8212;load-balancer-name &lt;web_tier_elb&gt; &amp;#8212;load-balancer-port 443 &amp;#8212;policy-names &lt;latest_ssl_policy&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: describe load balancer policies" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancer-policies.html"/>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                        <reference name="Amazon docs: ELB listener policy" url="https://aws.amazon.com/premiumsupport/knowledge-center/elb-listener-policy-cli/"/>
                        <reference name="Amazon docs: ELB security policy options" url="http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-options.html"/>
                        <reference name="Amazon docs: set load balancer policies of listener" url="http://docs.aws.amazon.com/cli/latest/reference/elb/set-load-balancer-policies-of-listener.html"/>
                    </references>
                    <standards>
                        <standard ref="1.10" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;


 (Note that you should replace &lt;web_tier_elb&gt; with your Web-tier ELB name) 



 * Find all the SSL security policies associated with your load balancer listener: 





 aws elb describe-load-balancer-policies &amp;#8212;load-balancer-name &lt;web_tier_elb&gt; &amp;#8212;query &amp;#8216;PolicyDescriptions[?PolicyTypeName==`SSLNegotiationPolicyType`].{PolicyName:PolicyName,ReferenceSecurityPolicy:PolicyAttributeDescriptions&lt;sup class="footnote" id="fnrev051033897eca48858b823252b1b4dc3a-1"&gt;&lt;a href="#fn051033897eca48858b823252b1b4dc3a-1"&gt;0&lt;/a&gt;&lt;/sup&gt;.AttributeValue}&amp;#8217; &amp;#8212;output table 





 * Find which of the above policies is currently active, and check on AWS documentation if it is the latest (note that for the TCP listeners the PolicyNames element will be empty, but the TCP listener is still compliant when using SSL certificates on the back-end EC2 instances): 





 aws elb describe-load-balancers &amp;#8212;load-balancer-name &lt;web_tier_elb&gt; &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{CompliantListeners:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == &amp;#8216;TCP&amp;#8217;]}&amp;#8217; &amp;#8212;output table</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-1.13" name="Configure the latest SSL Security Policies for App Tier ELB" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Elastic Load Balancing uses an Secure Socket Layer (SSL) negotiation configuration, known as a security policy, to negotiate SSL/TLS connections between a client and the load balancer. A security policy is a combination of SSL/TLS protocols, ciphers, and the Server Order Preference option. &lt;/p&gt;





 Elastic Load Balancing supports configuring your load balancer to use either predefined or custom security policies. 





 Secure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic protocols that are used to encrypt confidential data over insecure networks such as the Internet. The TLS protocol is a newer version of the SSL protocol. In the Elastic Load Balancing documentation, we refer to both SSL and TLS protocols as the SSL protocol. 





 Note: an SSL certificate configured on the ELB and an SSL Security Policy is not mandatory if you are terminating SSL connections directly on the App Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 





 Making sure the latest ELB SSL Security Policy is used will ensure the SSL/TLS connection will be negotiated using only the appropriate cryptographic protocols deemed safe with no proven vulnerabilities. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 




 * (Note that you should replace &lt;app\_tier\_elb&gt; with your App-tier ELB name, and &lt;latest\_ssl\_policy&gt; with the proper policy name) 






 aws elb set-load-balancer-policies-of-listener &amp;#8212;load-balancer-name &lt;app_tier_elb&gt; &amp;#8212;load-balancer-port 443 &amp;#8212;policy-names &lt;latest_ssl_policy&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: describe load balancer policies" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancer-policies.html"/>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                        <reference name="Amazon docs: ELB listener policy" url="https://aws.amazon.com/premiumsupport/knowledge-center/elb-listener-policy-cli/"/>
                        <reference name="Amazon docs: ELB security policy options" url="http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-options.html"/>
                        <reference name="Amazon docs: set load balancer policies of listener" url="http://docs.aws.amazon.com/cli/latest/reference/elb/set-load-balancer-policies-of-listener.html"/>
                    </references>
                    <standards>
                        <standard ref="1.13" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;


 (Note that you should replace &lt;app_tier_elb&gt; with your App-tier ELB name) 



 * Find all the SSL security policies associated with your load balancer listener: 





 aws elb describe-load-balancer-policies &amp;#8212;load-balancer-name &lt;app_tier_elb&gt; &amp;#8212;query &amp;#8216;PolicyDescriptions[?PolicyTypeName==`SSLNegotiationPolicyType`].{PolicyName:PolicyName,ReferenceSecurityPolicy:PolicyAttributeDescriptions&lt;sup class="footnote" id="fnrev1fb4979fb7b04f04bb44edf6e7f591ed-1"&gt;&lt;a href="#fn1fb4979fb7b04f04bb44edf6e7f591ed-1"&gt;0&lt;/a&gt;&lt;/sup&gt;.AttributeValue}&amp;#8217; &amp;#8212;output table 





 * Find which of the above policies is currently active, and check on AWS documentation if it is the latest (note that for the TCP listeners the PolicyNames element will be empty, but the TCP listener is still compliant when using SSL certificates on the back-end EC2 instances): 





 aws elb describe-load-balancers &amp;#8212;load-balancer-name &lt;app_tier_elb&gt; &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{CompliantListeners:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == &amp;#8216;TCP&amp;#8217;]}&amp;#8217; &amp;#8212;output table</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-1.1" name="Use HTTPS listener for Web Tier ELB" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;A load balancer takes requests from clients and distributes them across the EC2 instances that are registered with the load balancer (also known as back-end instances). &lt;/p&gt;





 A listener is a process that checks for connection requests. It is configured with a protocol and a port for front-end (client to load balancer) connections 





 Note: an HTTPS listener configured on the ELB is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 





 Using an HTTPS Elastic Load Balancer listener will make sure the application traffic between the client and the Web Tier ELB is encrypted over the SSL\TLS channel. 





 &lt;b&gt;Remediation:&lt;/b&gt; 




 Using the Amazon unified command line interface: 



 * If the ListenerDescription field is missing, add a new HTTPS listener configured with a SSL\TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80): 









 aws elb create-load-balancer-listeners &amp;#8212;load-balancer-name &lt;web_tier_elb&gt; &amp;#8212;listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: create load balancer listeners" url="http://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer-listeners.html"/>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                        <reference name="Amazon docs: ELB listener configuration" url="http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-listener-config.html"/>
                    </references>
                    <standards>
                        <standard ref="1.1" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;


 (Note that you should replace &lt;web_tier_elb&gt; with your Web-tier ELB name) 



 * Check if the Web Tier ELB is using an HTTPS or TCP listener. Note if the ListenerDescription field is missing or not: 





 aws elb describe-load-balancers &amp;#8212;load-balancer-names &lt;web_tier_elb&gt; &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.Protocol == &amp;#8216;HTTPS&amp;#8217; || Listener.Protocol = &amp;#8216;TCP&amp;#8217;]}&amp;#8217; &amp;#8212;output table</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-1.14" name="Use HTTPS listener for App Tier ELB" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;A load balancer takes requests from clients and distributes them across the EC2 instances that are registered with the load balancer (also known as back-end instances). &lt;/p&gt;





 A listener is a process that checks for connection requests. It is configured with a protocol and a port for front-end (client to load balancer) connections. 





 Note: an HTTPS listener configured on the ELB is not mandatory if you are terminating SSL connections directly on the App Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 





 Using an HTTPS Elastic Load Balancer listener will make sure the application traffic between the client and the App Tier ELB is encrypted over the SSL\TLS channel. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 



 * If the ListenerDescription field is missing, add a new HTTPS listener configured with a SSL\TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80): 







 aws elb create-load-balancer-listeners &amp;#8212;load-balancer-name &lt;app_tier_elb&gt; &amp;#8212;listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: create load balancer listeners" url="http://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer-listeners.html"/>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                        <reference name="Amazon docs: ELB listener configuration" url="http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-listener-config.html"/>
                    </references>
                    <standards>
                        <standard ref="1.14" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;


 (Note that you should replace &lt;app_tier_elb&gt; with your App tier ELB name) 



 * Check if the App Tier ELB is using an HTTPS or TCP listener. Note if the ListenerDescription field is missing or not: 





 aws elb describe-load-balancers &amp;#8212;load-balancer-names &lt;app_tier_elb&gt; &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.Protocol  'HTTPS' || Listener.Protocol  &amp;#8216;TCP&amp;#8217;]}&amp;#8217; &amp;#8212;output table</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-3.12" name="Set a HTTPS connection from all CloudFront Distributions to the Web Tier ELB origin" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Configure the Origin Protocol Policy for the Web tier ELB origin either to require that CloudFront fetches objects from your origin by using HTTPS or to require that CloudFront uses the protocol that the viewer used to request the objects. For example, if you choose Match Viewer for the Origin Protocol Policy and the viewer uses HTTPS to request an object from CloudFront, CloudFront also uses HTTPS to forward the request to your origin. &lt;/p&gt;





 In order to use HTTPS, an SSL\TLS certificate must be attached. 





 To ensure that objects are encrypted from edge locations to the Web-Tier ELB origin according to the data classification policy, use Match Viewer. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 



 * For configuring &amp;#8216;OriginProtocolPolicy&amp;#8217;first save locally the current distribution config: 







 aws cloudfront get-distribution-config &amp;#8212;id application_cfn_distribution_id &amp;#8212;query &amp;#8216;DistributionConfig&amp;#8217; &gt; /tmp/cf-distribution.json 









 Edit and replace &amp;#8216;OriginProtocolPolicy&amp;#8217;element in /tmp/cf-distribution.json with the below section: 


 &amp;#8216;OriginProtocolPolicy&amp;#8217;: &amp;#8216;https-only&amp;#8217;, 



 * Retrieve the current ETag of your CloudFront distribution: 







 aws cloudfront get-distribution-config &amp;#8212;id &lt;application_cfn_distribution_id&gt; &amp;#8212;query &amp;#8216;ETag&amp;#8217; 







 * Update the CloudFront distribution using the edited config and the above Etag: 







 aws cloudfront update-distribution &amp;#8212;id &lt;application_cfn_distribution_id&gt; &amp;#8212;distribution-config file:///tmp/cf-distribution.json &amp;#8212;if-match &lt;application_cfn_distribution_etag&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: CloudFront get streaming configuration" url="http://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-streaming-distribution-config.html"/>
                        <reference name="Amazon docs: CloudFront list distributions" url="http://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
                        <reference name="Amazon docs: secure connections - CloudFront" url="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html"/>
                        <reference name="Amazon docs: update CloudFront distribution" url="http://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
                    </references>
                    <standards>
                        <standard ref="3.12" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;



 * Check the &amp;#8216;OriginProtocolPolicy&amp;#8217; used by application Cloudfront
 distributions (it should be set as https-only):





 aws cloudfront list-distributions &amp;#8212;query &amp;#8216;DistributionList.Items[*].{Id:Id,
 OriginProtocolPolicy:Origins.Items[*].CustomOriginConfig.OriginProtocolPolicy}&amp;#8217;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-3.1" name="Associate each Auto-Scaling Group to ELB" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC. &lt;/p&gt;





 It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC. 





 Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure. 





 Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling. 





 Through Auto-Scaling Group configuration you can define: 


 minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group 


 Availability Zones / subnets used 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 



 * List existing load balancers: 







 aws elb describe-load-balancers &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}&amp;#8217; 









 or 



 * Create new load balancer: 







 aws elb create-load-balancer &amp;#8212;load-balancer-name &lt;elb_name&gt; &amp;#8212;listeners &lt;listener_config&gt; &amp;#8212;subnets &lt;application_subnet&gt; &amp;#8212;security-groups &lt;application_security_groups&gt; 







 * Attached load balancer from previous steps to autoscaling group: 







 aws autoscaling attach-load-balancers &amp;#8212;load-balancer-names &lt;elb_name&gt; &amp;#8212;auto-scaling-group-name &lt;autoscaling_group_name&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: attach load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-load-balancers.html"/>
                        <reference name="Amazon docs: create load balancer" url="http://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
                        <reference name="Amazon docs: describe auto-scaling groups" url="http://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
                        <reference name="Amazon docs: describe autoscaling load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-load-balancers.html"/>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                    </references>
                    <standards>
                        <standard ref="3.1" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;



 * Identify Autoscaling Group Name and associated ELB name: 





 aws autoscaling describe-auto-scaling-groups &amp;#8212;query &amp;#8216;AutoScalingGroups[*].{ELB:LoadBalancerNames, ASGName:AutoScalingGroupName}&amp;#8217; 





 * Identify current status of the ELB: 





 aws autoscaling describe-load-balancers &amp;#8212;auto-scaling-group-name &lt;autoscaling_group_name&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-3.13" name="Associate Web Tier Auto-Scaling Group to ELB" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC. &lt;/p&gt;





 It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC. 





 Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure. 





 Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling. 





 Through Auto-Scaling Group configuration you can define: 


 minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group 


 Availability Zones / subnets used 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 



 * List existing load balancers: 







 aws elb describe-load-balancers &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}&amp;#8217; 






 or 



 * Create new load balancer: 







 aws elb create-load-balancer &amp;#8212;load-balancer-name &lt;web_tier_elb&gt; &amp;#8212;listeners &lt;listener_config&gt; &amp;#8212;subnets &lt;web_tier_elb_subnet1&gt; &lt;web_tier_elb_subnet2&gt; &amp;#8212;security-groups &lt;web_tier_elb_security_group&gt; 







 * Attached load balancer from previous steps to autoscaling group: 







 aws autoscaling attach-load-balancers &amp;#8212;load-balancer-names &lt;web_tier_elb&gt; &amp;#8212;auto-scaling-group-name &lt;web_tier_autoscaling_group_name&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: attach load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-load-balancers.html"/>
                        <reference name="Amazon docs: create load balancer" url="http://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
                        <reference name="Amazon docs: describe auto-scaling groups" url="http://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                        <reference name="Amazon docs: describe load balancers auto-scaling" url="http://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-load-balancers.html"/>
                    </references>
                    <standards>
                        <standard ref="3.13" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;



 * Identify Autoscaling Group Name and associated ELB name: 





 aws autoscaling describe-auto-scaling-groups &amp;#8212;query &amp;#8216;AutoScalingGroups[*].{ELB:LoadBalancerNames, ASGName:AutoScalingGroupName}&amp;#8217; 





 * Identify current status of the ELB: 





 aws autoscaling describe-load-balancers &amp;#8212;auto-scaling-group-name &lt;web_tier_autoscaling_group_name&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-3.14" name="Associate App Tier Auto-Scaling Group to ELB" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC. &lt;/p&gt;





 It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC. 





 Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure. 





 Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling. 





 Through Auto-Scaling Group configuration you can define: 


 minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group 


 Availability Zones / subnets used 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 



 * List existing load balancers: 







 aws elb describe-load-balancers &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}&amp;#8217; 









 or 



 * Create new load balancer: 







 aws elb create-load-balancer &amp;#8212;load-balancer-name &lt;app_tier_elb&gt; &amp;#8212;scheme internal &amp;#8212;listeners &lt;listener_config&gt; &amp;#8212;subnets &lt;app_tier_subnet1&gt; &lt;app_tier_subnet2&gt; &amp;#8212;security-groups &lt;app_tier_elb_security_group&gt; 







 * Attached load balancer from previous steps to autoscaling group: 







 aws autoscaling attach-load-balancers &amp;#8212;load-balancer-names &lt;app_tier_elb&gt; &amp;#8212;auto-scaling-group-name &lt;app_tier_autoscaling_group_name&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: attach load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-load-balancers.html"/>
                        <reference name="Amazon docs: create load balancer" url="http://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
                        <reference name="Amazon docs: describe auto-scaling groups" url="http://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                        <reference name="Amazon docs: describe load balancers auto-scaling" url="http://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-load-balancers.html"/>
                    </references>
                    <standards>
                        <standard ref="3.14" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;



 * Identify Autoscaling Group Name and associated ELB name: 





 aws autoscaling describe-auto-scaling-groups &amp;#8212;query &amp;#8216;AutoScalingGroups[*].{ELB:LoadBalancerNames, ASGName:AutoScalingGroupName}&amp;#8217; 





 * Identify current status of the ELB: 





 aws autoscaling describe-load-balancers &amp;#8212;auto-scaling-group-name &lt;app_tier_autoscaling_group_name&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-6.18" name="Do not use Web tier ELB Security Group in the Auto Scaling launch configuration of any other tier (Web, App)" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When you use the AWS Management Console to create a load balancer in a VPC, you can choose an existing security group for the VPC or create a new security group for the VPC. If you choose an existing security group, it must allow traffic in both directions to the listener and health check ports for the load balancer. If you choose to create a security group, the console automatically adds rules to allow all traffic on these ports. &lt;/p&gt;





 Be sure to review the security group rules to ensure that they allow traffic on the listener and health check ports for the new load balancer. When you delete your load balancer, this security group is not deleted automatically. 





 If you add a listener to an existing load balancer, you must review your security groups to ensure they allow traffic on the new listener port in both directions. 





 The web-tier ELB is the only one that is public facing and should have rules to allow inbound traffic to the application ports (ex: HTTP and HTTPS) from any IP source (0.0.0.0/0). 





 The outbound security group rules for the web-tier ELB should be restricted to only the backend web-server instances for the appropriate application ports. 





 Associating the web-tier ELB security group to any other instances that shouldn&amp;#8217;t be publicly accessible exposes them to unauthorized access. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 



 * Create new launch configuration using the correct security groups for Web and/or App tier: 







 aws autoscaling create-launch-configuration &amp;#8212;launch-configuration-name &lt;web_tier_launch_config&gt; &amp;#8212;image-id &lt;web_tier_ami&gt; &amp;#8212;key-name &lt;your_key_pair&gt; &amp;#8212;security-groups &lt;web_tier_security_group&gt;/&lt;app_tier_security_group --instance-type &lt;desired_instance_type&gt; &amp;#8212;iam-instance-profile &lt;web_tier_instance_profile&gt;/&lt;app_tier_instance_profile&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: autoscaling create launch configuration" url="http://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
                        <reference name="Amazon docs: describe launch configuration" url="http://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                    </references>
                    <standards>
                        <standard ref="6.18" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;



 * List the security group associated with the Web tier ELB: 





 aws elb describe-load-balancers &amp;#8212;load-balancer-name &lt;web_tier_elb&gt; &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{DNSName:DNSName, WebTierELBSecurityGroups:SecurityGroups, SourceSecurityGroup:SourceSecurityGroup}&amp;#8217; &amp;#8212;output table 







 note the &amp;#8216;WebTierELBSecurityGroups&amp;#8217; from the output 



 * List the security groups associated with all Autoscaling launch configurations and make sure that the above Web tier ELB security group is not present: 





 aws autoscaling describe-launch-configurations &amp;#8212;query &amp;#8216;LaunchConfigurations[*].{SecurityGroups:SecurityGroups, LaunchConfigurationName:LaunchConfigurationName}&amp;#8217;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-6.26" name="Create the App tier ELB as Internal" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;An internal load balancer routes traffic to your EC2 instances in private subnets using private IP addresses. &lt;/p&gt;





 Create an internal load balancer and register the database servers with it. The web servers receive requests from the Internet-facing load balancer and send requests for the database servers to the internal load balancer. The database servers receive requests from the internal load balancer. 





 When an internal load balancer is created, it receives a public DNS name with the following form: 






 internal-name-123456789.region.elb.amazonaws.com 






 The DNS servers resolve the DNS name of your load balancer to the private IP addresses of the load balancer nodes for your internal load balancer. Each load balancer node is connected to the private IP addresses of the back-end instances that are in its Availability Zone using elastic network interfaces. 





 Creating the App tier ELB as internal will prevent access to the app tier from the Internet and will allow access from the Web tier instances. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 



 * Create new internal ELB for your App tier: 







 aws elb create-load-balancer &amp;#8212;load-balancer-name app_tier_elb &amp;#8212;scheme internal &amp;#8212;listeners listener_config &amp;#8212;subnets app_tier_subnet1 app_tier_subnet2 &amp;#8212;security-groups app_tier_elb_security_group 







 * Register App tier instances with the new App tier ELB: 







 aws elb register-instances-with-load-balancer &amp;#8212;load-balancer-name app_tier_elb &amp;#8212;instances &lt;app_tier_instance1&gt; &lt;app_tier_instance2&gt; &lt;app_tier_instance3&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: create load balancer" url="http://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                        <reference name="Amazon docs: ELB internal load balancers" url="http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-internal-load-balancers.html"/>
                        <reference name="Amazon docs: register instances with load balancer" url="http://docs.aws.amazon.com/cli/latest/reference/elb/register-instances-with-load-balancer.html"/>
                    </references>
                    <standards>
                        <standard ref="6.26" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;



 * Check the Scheme of your App tier ELB, and make sure it is &amp;#8216;internal&amp;#8217;: 





 aws elb describe-load-balancers &amp;#8212;load-balancer-name &lt;app_tier_elb&gt; &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, Scheme:Scheme}&amp;#8217;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-6.5" name="Create subnets for the Web Tier ELB" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can add
 one or more subnets in each Availability Zone. Each subnet must reside entirely within one
 Availability Zone and cannot span zones. Availability Zones are distinct locations that are
 engineered to be isolated from failures in other Availability Zones. By launching instances in
 separate Availability Zones, you can protect your applications from the failure of a single
 location. AWS assigns a unique ID to each subnet.&lt;/p&gt;





 When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a subnet
 shouldn&amp;#8217;t be the same as the CIDR block for the VPC (for a single subnet in the VPC). The
 allowed block size is between a /28 netmask and /16 netmask. If you create more than one subnet
 in a VPC, the CIDR blocks of the subnets must not overlap.





 Some AWS regions have more than 2 availability zones and it is recommended to use more than 2
 where possible.





 At least 2 subnets in 2 different availability zones (AZ) should be created in order to have
 fault tolerance and high availability from the perspective of resource deployment.





 &lt;b&gt;Remediation:&lt;/b&gt;



 Using the Amazon unified command line interface:



 * Create subnets for Web tier ELB, and note the subnet id:







 aws ec2 create-subnet &amp;#8212;vpc-id application_vpc
 &amp;#8212;cidr-block desired_cidr







 * Tag the above subnets with the Web tier ELB tags:







 aws ec2 create-tags &amp;#8212;resources web_tier_elb_subnet1
 web_tier_elb_subnet2 &amp;#8212;tags Key=public_tier_tag,Value=public_tier_tag_value</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: create subnet" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html"/>
                        <reference name="Amazon docs: create tags" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html"/>
                        <reference name="Amazon docs: describe subnets" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
                    </references>
                    <standards>
                        <standard ref="6.5" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;



 * List the subnets associated with the Web tier ELB: 





 aws elb describe-load-balancers &amp;#8212;load-balancer-name &lt;web_tier_elb&gt; &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].Subnets&amp;#8217; 







 OR 





 Using the Amazon unified command line interface: 



 * List the subnets created for the Web tier ELB: 





 aws ec2 describe-subnets &amp;#8212;filters Name=tag:public_tier_tag,Values=public_tier_tag_value &amp;#8212;query &amp;#8216;Subnets[*].SubnetId&amp;#8217;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-6.1" name="Set Root Domain Alias Record to ELB" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Amazon Route 53 translates friendly domains names like www.example.com into IP addresses like 192.0.2.1. Amazon Route 53 responds to DNS queries using a global network of authoritative DNS servers, which reduces latency. &lt;/p&gt;





 When someone enters your domain name in a browser, a DNS request is forwarded to the nearest Amazon Route 53 DNS server in a global network of authoritative DNS servers. Amazon Route 53 responds with the IP address that you specified. 





 Each domain has an associated hosted zone which contains the resource records pointing to each layer of the application. 





 A private hosted zone is a container that holds information about how you want to route traffic for a domain and its subdomains within the Amazon Virtual Private Cloud (Amazon VPC). To begin, you create a private hosted zone and specify the Amazon VPCs that you want to associate with the hosted zone. You then create resource record sets that determine how Amazon Route 53 responds to queries for your domain and subdomains within and among your Amazon VPCs. 





 Route53 provides special record type called Alias that allows creation of an A record for the root domain and points it to the fully qualified domain of the Elastic Load Balancer (ELB) associated with the web-server layer or Amazon CloudFront. 





 In the same way records for all other layers should be created in order to allow flexibility in the application design and not hard-code the FQDN of a resource. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 



 * Create a hosted zone for YourDomain.com: 







 aws route53 create-hosted-zone &amp;#8212;name &lt;your_domain.com&gt; &amp;#8212;caller-reference &lt;any_string&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: about hosted zones" url="http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/AboutHostedZones.html"/>
                        <reference name="Amazon docs: create hosted zones" url="http://docs.aws.amazon.com/cli/latest/reference/route53/create-hosted-zone.html"/>
                        <reference name="Amazon docs: list hosted zones" url="http://docs.aws.amazon.com/cli/latest/reference/route53/list-hosted-zones.html"/>
                    </references>
                    <standards>
                        <standard ref="6.1" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;



 * List all the hosted zones and check if the domain name used by the application is
 present among them:





 aws route53 list-hosted-zones &amp;#8212;query &amp;#8216;HostedZones[*].{Name:Name, Id:Id}&amp;#8217; &amp;#8212;output table</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-6.13" name="Allow connectivity to the VPC Internet Gateway (IGW) and associate the Routing Table with Web tier ELB subnet (by default route (0.0.0.0/0))" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;A route table contains a set of rules, called routes, that are used to determine where network traffic is directed. &lt;/p&gt;





 Each subnet in your VPC must be associated with a route table; the table controls the routing for the subnet. A subnet can only be associated with one route table at a time, but you can associate multiple subnets with the same route table. 





 The default route (0.0.0.0/0) should be pointing to the Internet Gateway in order to provide internet connectivity for the Web tier ELB. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 



 * For the above route tables, if the default route (0.0.0.0/0) exists but it doesn&amp;#8217;t have an IGW configured as gateway: 







 aws ec2 replace-route &amp;#8212;route-table-id &lt;route_table_id&gt; &amp;#8212;destination-cidr-block 0.0.0.0/0 &amp;#8212;gateway-id &lt;vpc_igw&gt; 







 * For the above route tables, if the default route (0.0.0.0/0) doesn&amp;#8217;t exist: 







 aws ec2 create-route &amp;#8212;route-table-id &lt;route_table_id&gt; &amp;#8212;destination-cidr-block 0.0.0.0/0 &amp;#8212;gateway-id &lt;vpc_igw&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon dccs: EC2 create route" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                        <reference name="Amazon docs: EC2 describe routes" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
                        <reference name="Amazon docs: EC2 replace route" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/replace-route.html"/>
                    </references>
                    <standards>
                        <standard ref="6.13" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;



 * List the subnets associated with the Web tier ELB: 





 aws elb describe-load-balancers &amp;#8212;load-balancer-name &lt;web_tier_elb&gt; &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].Subnets&amp;#8217; 





 * List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has an IGW configured as gateway: 





 aws ec2 describe-route-tables &amp;#8212;filters Name=association.subnet-id,Values=&lt;web_tier_elb_subnet1&gt;,&lt;web_tier_elb_subnet2&gt; &amp;#8212;query &amp;#8216;RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}&amp;#8217;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-6.17" name="Use a Web-Tier ELB Security Group to accept only HTTP/HTTPS " platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don&amp;#8217;t specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC. &lt;/p&gt;





 For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic. 





 The SG associated with the Web tier ELB should allow connectivity from any source IP (0.0.0.0/0) only for the HTTP (TCP 80) and HTTPS (TCP 443) ports. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 



 * First remove all the ingress rules for the security group associated with the Web tier ELB: 







 aws ec2 describe-security-groups &amp;#8212;group-id &lt;security_group_id&gt; &amp;#8212;query &amp;#8216;SecurityGroups&lt;sup class="footnote" id="fnrev331b37835c474d0ebc78cc3eb0aa2ee7-1"&gt;&lt;a href="#fn331b37835c474d0ebc78cc3eb0aa2ee7-1"&gt;0&lt;/a&gt;&lt;/sup&gt;.IpPermissions&amp;#8217; &gt; /tmp/IpPermissions.json 











 aws ec2 revoke-security-group-ingress &amp;#8212;group-id &lt;security_group_id&gt; &amp;#8212;ip-permissions file:///tmp/IpPermissions.json 







 * create locally the below json file containing ingress rules for any source IP (0.0.0.0/0) only for the HTTP (TCP 80) and HTTPS (TCP 443) ports and name it IpPermissions.json: 







 [ 






 { 






 &amp;#8216;PrefixListIds&amp;#8217;: [], 






 &amp;#8216;FromPort&amp;#8217;: 80, 






 &amp;#8216;IpRanges&amp;#8217;: [ 






 { 






 &amp;#8216;CidrIp&amp;#8217;: &amp;#8217;0.0.0.0/0&amp;#8217; 






 } 






 ], 






 &amp;#8216;ToPort&amp;#8217;: 80, 






 &amp;#8216;IpProtocol&amp;#8217;: &amp;#8216;tcp&amp;#8217;, 






 &amp;#8216;UserIdGroupPairs&amp;#8217;: [] 






 }, 






 { 






 &amp;#8216;PrefixListIds&amp;#8217;: [], 






 &amp;#8216;FromPort&amp;#8217;: 443, 






 &amp;#8216;IpRanges&amp;#8217;: [ 






 { 






 &amp;#8216;CidrIp&amp;#8217;: &amp;#8217;0.0.0.0/0&amp;#8217; 






 } 






 ], 






 &amp;#8216;ToPort&amp;#8217;: 443, 






 &amp;#8216;IpProtocol&amp;#8217;: &amp;#8216;tcp&amp;#8217;, 






 &amp;#8216;UserIdGroupPairs&amp;#8217;: [] 






 } 






 ] 







 * Add to the security group associated with the Web tier ELB the above ingress rules: 







 aws ec2 authorize-security-group-ingress &amp;#8212;group-id &lt;security_group_id&gt; &amp;#8212;ip-permissions file:///PathTo/IpPermissions.json</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="6.17" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;



 * List the security group associated with the Web tier ELB: 





 aws elb describe-load-balancers &amp;#8212;load-balancer-name &lt;your_web_tier_elb&gt; &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{DNSName:DNSName, SecurityGroups:SecurityGroups, SourceSecurityGroup:SourceSecurityGroup}&amp;#8217; &amp;#8212;output table 









 note the security group id from the output 



 * List the ingress rules for the above security group, and make sure that only HTTP (TCP 80) and HTTPS (TCP 443) traffic is allowed from any source IP (0.0.0.0/0)any source IP (0.0.0.0/0): 





 aws ec2 describe-security-groups &amp;#8212;group-ids &lt;security_group_id&gt; &amp;#8212;query &amp;#8216;SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}&amp;#8217; &amp;#8212;output table</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-6.21" name="Create the App tier ELB Security Group to only accept HTTP/HTTPS" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound
 traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the
 instance to up to five security groups. Security groups act at the instance level, not the
 subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different
 set of security groups. If you don&amp;#8217;t specify a particular group at launch time, the instance is
 automatically assigned to the default security group for the VPC.&lt;/p&gt;





 For each security group, you add rules that control the inbound traffic to instances, and a
 separate set of rules that control the outbound traffic.





 The SG associated with the App tier ELB should allow connectivity from the security group
 associated with Web tier instances only for the HTTP (TCP 80) and HTTPS (TCP 443) ports.





 The defaults for HTTP and HTTPS are used as an example, any other ports would apply depending on
 the application design.





 &lt;b&gt;Remediation:&lt;/b&gt;



 Using the Amazon unified command line interface:



 * First remove all the ingress rules for the security group associated with the App tier
 ELB:







 aws ec2 describe-security-groups &amp;#8212;group-id app_tier_elb_security_group
 &amp;#8212;query &amp;#8216;SecurityGroups&lt;sup class="footnote" id="fnrev8d15fe1b4a9540a5a12572ea1eb10f66-1"&gt;&lt;a href="#fn8d15fe1b4a9540a5a12572ea1eb10f66-1"&gt;0&lt;/a&gt;&lt;/sup&gt;.IpPermissions&amp;#8217; &gt; /tmp/IpPermissions.json











 aws ec2 revoke-security-group-ingress &amp;#8212;group-id app_tier_elb_security_group
 &amp;#8212;ip-permissions file:///tmp/IpPermissions.json







 * create locally the below json file containing ingress rules for HTTP (TCP 80) and
 HTTPS (TCP 443) ports only from and name it IpPermissions.json:







 [






 {






 &amp;#8216;PrefixListIds&amp;#8217;: [],






 &amp;#8216;FromPort&amp;#8217;: 80,






 &amp;#8216;IpRanges&amp;#8217;: [],






 &amp;#8216;ToPort&amp;#8217;: 80,






 &amp;#8216;IpProtocol&amp;#8217;: &amp;#8216;tcp&amp;#8217;,






 &amp;#8216;UserIdGroupPairs&amp;#8217;: [






 {






 &amp;#8216;UserId&amp;#8217;:
 &amp;#8216;&lt;&lt;em&gt;aws_account_number&gt;&lt;/em&gt;&amp;#8217;,






 &amp;#8216;GroupId&amp;#8217;:
 &amp;#8216;&lt;span style='font-style: italic;'&gt;&lt;&lt;span
 style=&amp;#8216;font-style: italic;&amp;#8217;&gt;web_tier_security_group&amp;#8217;






 }






 ]






 },






 {






 &amp;#8216;PrefixListIds&amp;#8217;: [],






 &amp;#8216;FromPort&amp;#8217;: 443,






 &amp;#8216;IpRanges&amp;#8217;: [],






 &amp;#8216;ToPort&amp;#8217;: 443,






 &amp;#8216;IpProtocol&amp;#8217;: &amp;#8216;tcp&amp;#8217;,






 &amp;#8216;UserIdGroupPairs&amp;#8217;: [






 {






 &amp;#8216;UserId&amp;#8217;:
 &amp;#8216;&lt;&lt;em&gt;aws_account_number&gt;&lt;/em&gt;&amp;#8217;,






 &amp;#8216;GroupId&amp;#8217;:
 &amp;#8216;&lt;span style='font-style: italic;'&gt;&lt;&lt;span
 style=&amp;#8216;font-style: italic;&amp;#8217;&gt;web_tier_security_group&gt;&amp;#8217;






 }






 ]






 }






 ]







 * Add to the security group associated with the App tier ELB the above ingress rules:







 aws ec2 authorize-security-group-ingress &amp;#8212;group-id app_tier_elb_security_group
 &amp;#8212;ip-permissions file:///PathTo/IpPermissions.json</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: authorize security group ingress" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                        <reference name="Amazon docs: describe security groups" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
                        <reference name="Amazon docs: revoke seucrity group ingress" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
                    </references>
                    <standards>
                        <standard ref="6.21" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;



 * List the security group associated with the App tier ELB: 





 aws elb describe-load-balancers &amp;#8212;load-balancer-name &lt;app_tier_elb&gt; &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{DNSName:DNSName, AppTierELBSecurityGroups:SecurityGroups, SourceSecurityGroup:SourceSecurityGroup}&amp;#8217; &amp;#8212;output table 







 note the &amp;#8216;AppTierELBSecurityGroups&amp;#8217; from the output 



 * List the ingress rules for the above security group, and make sure that only HTTP (TCP 80) and HTTPS (TCP 443) traffic is allowed from Web tier Security Group: 





 aws ec2 describe-security-groups &amp;#8212;group-ids &lt;app_tier_elb_security_group&gt; &amp;#8212;query &amp;#8216;SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}&amp;#8217; &amp;#8212;output table</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:18">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-6.22" name="Create the App tier Security Group to allow inbound connections from App tier ELB Security Group for explicit ports" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound
 traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the
 instance to up to five security groups. Security groups act at the instance level, not the
 subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different
 set of security groups. If you don&amp;#8217;t specify a particular group at launch time, the instance is
 automatically assigned to the default security group for the VPC.&lt;/p&gt;





 For each security group, you add rules that control the inbound traffic to instances, and a
 separate set of rules that control the outbound traffic.





 This is required for both the configured port and protocol for the listener on the back-end
 instance and the port and protocol used for the health check.





 This protects the App-server tier from unauthorized access, it is recommended to add inbound
 security group rules that allow traffic for the specific application protocol and ports by
 referencing as source the security group associated with the App tier ELB.





 &lt;b&gt;Remediation:&lt;/b&gt;



 Using the Amazon unified command line interface:



 * First remove all the ingress rules for the App tier security group (use the &amp;#8216;AppTierSecurityGroup&amp;#8217;
 element from Audit procedure):







 aws ec2 describe-security-groups &amp;#8212;group-id app_tier_security_group
 &amp;#8212;query &amp;#8216;SecurityGroups&lt;sup class="footnote" id="fnrev9433c0f9df8c47b0b99a1b4264d0b088-1"&gt;&lt;a href="#fn9433c0f9df8c47b0b99a1b4264d0b088-1"&gt;0&lt;/a&gt;&lt;/sup&gt;.IpPermissions&amp;#8217; &gt; /tmp/IpPermissions.json











 aws ec2 revoke-security-group-ingress &amp;#8212;group-id app_tier_security_group
 &amp;#8212;ip-permissions file:///tmp/IpPermissions.json







 * Add an ingress rule for a specific port, using &amp;#8212;source-group option to specify the
 App tier ELB security group as the source of the connections:







 aws ec2 authorize-security-group-ingress &amp;#8212;group-id app_tier_security_group
 &amp;#8212;protocol tcp &amp;#8212;port specific_port
 &amp;#8212;source-group app_tier_elb_security_group</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: authorize security groups ingress" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
                        <reference name="Amazon docs: describe launch configurations" url="http://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
                        <reference name="Amazon docs: describe security groups" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
                        <reference name="Amazon docs: revoke security group ingress" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
                    </references>
                    <standards>
                        <standard ref="6.22" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;



 * List the ingress rules for the above security group, and make sure that allows
 connections only from App tier ELB security group on specific ports:





 aws ec2 describe-security-groups &amp;#8212;filters Name=tag:app_tier_tag,Values=app_tier_tag_value
 &amp;#8212;query &amp;#8216;SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions,
 AppTierSecurityGroup:GroupId}&amp;#8217; &amp;#8212;output table</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-5.2" name="Enable the ELB logging" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances in the a VPC. It enables you to achieve greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic. &lt;/p&gt;





 AWS Elastic Load Balancers (ELBs) can record all incoming requests sent to the load balancer and store within logs on S3. This allows for diagnosing application failures and analyzing web traffic and security analysis of incoming traffic 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified CLI: 



 * Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ElbLogs.json: 







 { 






 &amp;#8216;AccessLog&amp;#8217;: { 






 &amp;#8216;Enabled&amp;#8217;: true, 






 &amp;#8216;S3BucketName&amp;#8217;: &amp;#8216;string&amp;#8217;, 






 &amp;#8216;EmitInterval&amp;#8217;: integer, 






 &amp;#8216;S3BucketPrefix&amp;#8217;: &amp;#8216;string&amp;#8217; 






 } 






 } 







 * Update the Load Balancer attributes: 







 aws elb modify-load-balancer-attributes &amp;#8212;load-balancer-name &lt;elb_name&gt; &amp;#8212;load-balancer-attributes file:///tmp/ElbLogs.json</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: describe load balancer attributes" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancer-attributes.html"/>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                        <reference name="Amazon docs: elb describe tags" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-tags.html"/>
                        <reference name="Amazon docs: enable access logs" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/enable-access-logs.html"/>
                        <reference name="Amazon docs: modify load balancer attributes" url="http://docs.aws.amazon.com/cli/latest/reference/elb/modify-load-balancer-attributes.html"/>
                    </references>
                    <standards>
                        <standard ref="5.2" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Via Amazon unified CLI: &lt;/p&gt;



 * List all ELB&amp;#8217;s: 





 aws elb describe-load-balancers &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName}&amp;#8217; 





 * Confirm correct ELB is selected by review ELB tags: 





 aws elb describe-tags &amp;#8212;load-balancer-names &lt;elb_name&gt; 





 * Review selected ELB attributes and ensure Access Log is enabled: 





 aws elb describe-load-balancer-attributes &amp;#8212;load-balancer-name &lt;elb_name&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-3.8" name="Configure Health Check for Web Tier ELB" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;By default, an Auto-Scaling Group periodically uses the results of the EC2 instance status checks to determine the health status of each instance. If an instance fails the EC2 instance status checks, Auto-Scaling marks the instance as unhealthy and replaces the instance. &lt;/p&gt;





 However, if you have attached one or more Elastic Load Balancing (ELB) load balancers to your Auto-Scaling Group and the instance fails the ELB health checks, Auto-Scaling does not replace the instance. 





 Amazon ELB will periodically sends pings, attempt connections, or sends requests to test the EC2 instances, these tests are called health checks. 





 The status of the instances that are healthy at the time of the health check is InService. 





 The status of any instances that are unhealthy at the time of the health check is OutOfService. 





 The load balancer performs health checks on all registered instances, whether the instance is in a healthy state or an unhealthy state. The load balancer routes requests only to the healthy instances. When the load balancer determines that an instance is unhealthy, it stops routing requests to that instance. The load balancer resumes routing requests to the instance when it has been restored to a healthy state 





 Ensure availability of back-end EC2 instances associated with an Amazon ELB through application layer health check (ex: http) instead of TCP health checks. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified CLI: 



 * Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ELBhealthcheck.json: 







 { 






 &amp;#8216;Target&amp;#8217;: &amp;#8216;&lt;string&gt;&amp;#8217;, 






 &amp;#8216;Interval&amp;#8217;: &lt;integer&gt;, 






 &amp;#8216;Timeout&amp;#8217;: &lt;integer&gt;, 






 &amp;#8216;UnhealthyThreshold&amp;#8217;: &lt;integer&gt;, 






 &amp;#8216;HealthyThreshold&amp;#8217;: &lt;integer&gt; 






 } 







 * Modify Web tier ELB to include appropriate health check: 







 aws elb configure-health-check &amp;#8212;load-balancer-name &lt;web_tier_elb&gt; &amp;#8212;health-check file:///tmp/ELBhealthcheck.json</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: configure health check" url="http://docs.aws.amazon.com/cli/latest/reference/elb/configure-health-check.html"/>
                        <reference name="Amazon docs: describe auto scaling groups" url="http://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                    </references>
                    <standards>
                        <standard ref="3.8" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified CLI: &lt;/p&gt;



 * Identify if health check is in place on the Web tier ELB: 





 aws elb describe-load-balancers &amp;#8212;load-balancer-names &lt;web_tier_elb&gt; &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{ELBName:LoadBalancerName,HealthCheck:HealthCheck}&amp;#8217;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-3.9" name="Configure Health Check for App Tier ELB" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;By default, an Auto-Scaling Group periodically uses the results of the EC2 instance status checks to determine the health status of each instance. If an instance fails the EC2 instance status checks, Auto-Scaling marks the instance as unhealthy and replaces the instance. &lt;/p&gt;





 However, if you have attached one or more Elastic Load Balancing (ELB) load balancers to your Auto-Scaling Group and the instance fails the ELB health checks, Auto-Scaling does not replace the instance. 





 Amazon ELB will periodically sends pings, attempts connections, or sends requests to test the EC2 instances, these tests are called health checks. 





 The status of the instances that are healthy at the time of the health check is InService. 





 The status of any instances that are unhealthy at the time of the health check is OutOfService. 





 The load balancer performs health checks on all registered instances, whether the instance is in a healthy state or an unhealthy state. The load balancer routes requests only to the healthy instances. When the load balancer determines that an instance is unhealthy, it stops routing requests to that instance. The load balancer resumes routing requests to the instance when it has been restored to a healthy state 





 Ensures availability of back-end EC2 instances associated with an Amazon ELB through application layer health check (ex: http) instead of TCP health checks. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified CLI: 



 * Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ELBhealthcheck.json: 







 { 






 &amp;#8216;Target&amp;#8217;: &amp;#8216;&lt;string&gt;&amp;#8217;, 






 &amp;#8216;Interval&amp;#8217;: &lt;integer&gt;, 






 &amp;#8216;Timeout&amp;#8217;: &lt;integer&gt;, 






 &amp;#8216;UnhealthyThreshold&amp;#8217;: &lt;integer&gt;, 






 &amp;#8216;HealthyThreshold&amp;#8217;: &lt;integer&gt; 






 } 







 * Modify App tier ELB to include appropriate health check: 







 aws elb configure-health-check &amp;#8212;load-balancer-name &lt;app_tier_elb&gt; &amp;#8212;health-check file:///tmp/ELBhealthcheck.json</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: configure health check" url="http://docs.aws.amazon.com/cli/latest/reference/elb/configure-health-check.html"/>
                        <reference name="Amazon docs: describe auto-scaling groups" url="http://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
                        <reference name="Amazon docs: describe load balancers" url="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
                        <reference name="Amazon docs: ELB healthchecks" url="http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-healthchecks.html"/>
                    </references>
                    <standards>
                        <standard ref="3.9" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified CLI: &lt;/p&gt;



 * Identify if health check is in place on the App tier ELB: 





 aws elb describe-load-balancers &amp;#8212;load-balancer-names &lt;app_tier_elb&gt; &amp;#8212;query &amp;#8216;LoadBalancerDescriptions[*].{ELBName:LoadBalancerName,HealthCheck:HealthCheck}&amp;#8217;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="AMAZON WEB SERVICES" name="Amazon Web Services" desc="" library="">
                    <threats>
                        <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data." state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Eavesdropping on communication is a network attack that captures small packets
 transmitted by other computers and reads the data content. This type of network attack
 is most effective when weak encryption services are used. An attacker could eavesdrop on
 the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="aws-tier-1.12" mitigation="12"/>
                                <control ref="aws-tier-1.9" mitigation="11"/>
                                <control ref="Hydras-AWS-ELB-01" mitigation="11"/>
                                <control ref="Hydras-AWS-ELB-02" mitigation="11"/>
                                <control ref="aws-tier-1.10" mitigation="11"/>
                                <control ref="aws-tier-1.13" mitigation="11"/>
                                <control ref="aws-tier-1.1" mitigation="11"/>
                                <control ref="aws-tier-1.14" mitigation="11"/>
                                <control ref="aws-tier-3.12" mitigation="11"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-295">
                                    <controls>
                                        <control ref="aws-tier-1.12" mitigation="12"/>
                                        <control ref="aws-tier-1.9" mitigation="11"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-326">
                                    <controls>
                                        <control ref="Hydras-AWS-ELB-01" mitigation="11"/>
                                        <control ref="Hydras-AWS-ELB-02" mitigation="11"/>
                                        <control ref="aws-tier-1.10" mitigation="11"/>
                                        <control ref="aws-tier-1.13" mitigation="11"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-311">
                                    <controls>
                                        <control ref="aws-tier-1.1" mitigation="11"/>
                                        <control ref="aws-tier-1.14" mitigation="11"/>
                                        <control ref="aws-tier-3.12" mitigation="11"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized connection to the resources" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain an unauthorized connection to the resources through
 misconfigured ports or security network configurations.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="aws-tier-3.1" mitigation="10"/>
                                <control ref="aws-tier-3.13" mitigation="9"/>
                                <control ref="aws-tier-3.14" mitigation="9"/>
                                <control ref="aws-tier-6.18" mitigation="9"/>
                                <control ref="aws-tier-6.26" mitigation="9"/>
                                <control ref="aws-tier-6.5" mitigation="9"/>
                                <control ref="aws-tier-6.1" mitigation="9"/>
                                <control ref="aws-tier-6.13" mitigation="9"/>
                                <control ref="aws-tier-6.17" mitigation="9"/>
                                <control ref="aws-tier-6.21" mitigation="9"/>
                                <control ref="aws-tier-6.22" mitigation="9"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-Network-5.2">
                                    <controls>
                                        <control ref="aws-tier-3.1" mitigation="10"/>
                                        <control ref="aws-tier-3.13" mitigation="9"/>
                                        <control ref="aws-tier-3.14" mitigation="9"/>
                                        <control ref="aws-tier-6.18" mitigation="9"/>
                                        <control ref="aws-tier-6.26" mitigation="9"/>
                                        <control ref="aws-tier-6.5" mitigation="9"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-Network-5.1">
                                    <controls>
                                        <control ref="aws-tier-6.1" mitigation="9"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-NET-01">
                                    <controls>
                                        <control ref="aws-tier-6.13" mitigation="9"/>
                                        <control ref="aws-tier-6.17" mitigation="9"/>
                                        <control ref="aws-tier-6.21" mitigation="9"/>
                                        <control ref="aws-tier-6.22" mitigation="9"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="UNAUDITABLE-CHANGES-RESOURCES-AWS" name="Attackers make undetected and unaudited changes in the resources" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;If audit trails in the resources are not enabled or not protected, attackers could gain
 access to the system and modify or delete data from the resources and the changes are
 not detected.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="aws-tier-5.2" mitigation="34"/>
                                <control ref="aws-tier-3.8" mitigation="33"/>
                                <control ref="aws-tier-3.9" mitigation="33"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-Logging-3.4">
                                    <controls>
                                        <control ref="aws-tier-5.2" mitigation="34"/>
                                    </controls>
                                </weakness>
                                <weakness ref="unknown-resource-status">
                                    <controls>
                                        <control ref="aws-tier-3.8" mitigation="33"/>
                                        <control ref="aws-tier-3.9" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="HYDRAS-AWS-IAM" name="AWS Identity and Access Management" desc="" tags="" position="3" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="AWS-IAM-2.2" name="Excessive use of administrator accounts" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The administrator accounts are used for all actions, not only for administrative actions. This
 is because these users have not got a personal or a user account to do the daily actions.</desc>
                </weakness>
                <weakness ref="AWS-IAM-2.1" name="The Authentication Method for Administrator Accounts is not configured" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The authentication method 'Multi-factor Authentication' for the Administrator
 accounts are not configured.</desc>
                </weakness>
                <weakness ref="LOST-ACCESS-ROOT-01" name="The Root Account is misconfigured" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The administrator account is misconfigured. The security question to recover or reset the
 password and the authentication method are not configured.</desc>
                </weakness>
                <weakness ref="LOST-SECURITY-ALERTS" name="The Security Contact details are not configured" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The security contact details for the Amazon subscription are not properly configured.</desc>
                </weakness>
                <weakness ref="AWS-IAM-2.8" name="Lack of 2FA" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Access to sensitive systems without using MFA to log into the systems.</desc>
                </weakness>
                <weakness ref="AWS-IAM-2.6" name="The User Account is not configured" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Key security settings such as resetting the password and other password controls are not
 configured.</desc>
                </weakness>
                <weakness ref="AWS-IAM-2.9" name="The security policies are exposed in the resources" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The security policies are not configured and the security configurations are exposed for the
 attackers.</desc>
                </weakness>
                <weakness ref="AWS-IAM-1.21" name="The access keys are generated when the setup of the users is started" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The system doesn't require additional steps to create access keys, the access keys are
 generating when the process to create an user is starting. The problem is that these keys can be
 in use somewhere in the organization and maybe these keys are not necessary for the user.</desc>
                </weakness>
                <weakness ref="AWS-IAM-2.7" name="The credentials for the groups and roles are not configured" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The credentials for the groups and roles are not correctly configured and there are user
 accounts with more privileges than the necessary.</desc>
                </weakness>
                <weakness ref="AWS-EXPIRATION-DATE" name="The password expiration is not established" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The password expiration is not configured and users are not obliged to change their passwords.
 Not change frequently the passwords gives facilities to attackers to obtain them.</desc>
                </weakness>
                <weakness ref="AWS-IAM-2.12" name="The rotation keys is not configured" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The rotation keys are not configured to avoid to use old keys.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="Hydras-AWS-IAM-2.1" name="Avoid the use of the root account unless absolutely necessary" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The root account is the one which was used to open the AWS account with Amazon. Therefore it has full unrestricted access to all resources within the account including billing information. Reducing the use of this account and instead using personalized accounts with restricted permissions ensures the principles of least privilege and can help prevent accidental disclosure of credentials or unintended changes. &lt;/p&gt;

	&lt;p&gt;				&lt;ul&gt;
				&lt;/ul&gt;&lt;/li&gt;&lt;/p&gt;

 &lt;b&gt;Remediation:&lt;/b&gt; 
 Follow the remediation in &amp;#8216;Create Individual Accounts&amp;#8217;. 


 Content provided by 
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.1" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;aws iam create-credential-report&lt;/p&gt;


 aws iam get-credential-report &amp;#8212;query &amp;#8216;Content&amp;#8217; &amp;#8212;output text | base64 -D | cut -d,
 -f1,5,11,16 | grep -B1 &amp;#8216;&lt;root_account&gt;&amp;#8217;


 From the above determine the &amp;#8216;password_last_used&amp;#8217; time In
 addition to the above set up a metric filter as described elsewhere in this library to
 determine ad-hoc use of root.

 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-IAM-2.3" name="Create Individual Accounts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;By creating individual IAM users for people accessing your account, you can give each IAM user a unique set of security credentials. You can also grant different permissions to each IAM user. If necessary, you can change or revoke an IAM user&amp;#8217;s permissions any time. (If you give out your AWS root credentials, it can be difficult to revoke them, and it is impossible to restrict their permissions.). &lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt; 


 # Login to the AWS Management Console as an administrator. 
 # Select IAM. 
 # Select Users. 
 # Click &amp;#8216;Create New Users&amp;#8217;. 
 # Complete the required information. 
 # Uncheck &amp;#8216;Create access key for users&amp;#8217;. 
 # Click &amp;#8216;Create&amp;#8217;. 
 # Select the user. 
 # Click &amp;#8216;Manage Password&amp;#8217;. 
 # Select the required options and click &amp;#8216;apply&amp;#8217;. 
 # Select &amp;#8216;Show User Security Credentials&amp;#8217;. 
 # Securely supply the password to your user. 
 Content provided by 
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that each user has got the corresponding account with the corresponding
 credentials.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-IAM-2.2" name="Enable MFA for root accounts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Root is highly privileged and therefore using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their user name and password) and the OTP. The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for the root account is to use a hardware based device as it has a smaller attack surface and cannot be duplicated. &lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt; 


 # Login to the AWS Management Console as root. 
 # Select &amp;#8216;Dashboard&amp;#8217; and under &amp;#8216;Security Status&amp;#8217; choose &amp;#8216;Activate MFA&amp;#8217; on your root account. 
 # Select Activate MFA&amp;#8217;. 
 # In the wizard, choose &amp;#8216;A hardware MFA&amp;#8217; device and then select Next Step. 
 # In the Serial Number box, enter the serial number that is found on the back of the MFA device. 
 # In the Authentication Code 1 box, enter the six-digit number displayed by the MFA device. 
 # Wait until the device refreshes the code, and then enter the next six-digit number into the Authentication Code 2 box. 
 # Select &amp;#8216;Next Step&amp;#8217;. 
 The MFA device is now associated with the AWS account. 



 Content provided by 
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.13" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                        <standard ref="1.14" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Run: aws iam get-account-summary
 # Ensure the AccountMFAEnabled property is 1.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-IAM-2.5" name="Ensure root does not have API keys" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;You use an access key (an access key ID and secret access key) to make programmatic requests to AWS. However, do not use your AWS account (root) access key. The access key for your AWS account gives full access to all your resources for all AWS services, including your billing information. You cannot restrict the permissions associated with your AWS account access key. &lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt; 


 # Sign in to the AWS Management Console as Root. 
 # Click on Account Name at the top left and select Security Credentials. 
 # On the pop up screen Click on Continue to Security Credentials. 
 # Click on Access Keys. 
 # Under the Status column if there are any Keys which are &amp;#8216;Active&amp;#8217;. 
 # Click on &amp;#8216;Make Inactive&amp;#8217; and click &amp;#8216;Delete&amp;#8217;. 
 Content provided by 
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.12" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report
 # Run the following command: aws iam get-credential-report &amp;#8212;query &amp;#8216;Content&amp;#8217;
 &amp;#8212;output text | base64 -D | egrep &amp;#8216;root|access&amp;#8217; | awk -F, &amp;#8216;{print
 $1,$9,$14}&amp;#8217;
 # For the &lt;root_account&gt; user ensure access_key_1_active and
 access_key_2_active are false.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Gov-1.1" name="Configure the security challenge questions within the AWS Account" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When an AWS account is initially created it is configured with a top level account known as the &amp;#8216;root&amp;#8217; account that has full administration access to all resources. In the event that the password or MFA device associated with this account is lost AWS support may recover it by asking you to answer the security questions. &lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt; 


 # Login to the AWS Account as root. 
 # Click account name on the top right of the management console. 
 # Select &amp;#8216;My Account&amp;#8217;. 
 # Scroll down to &amp;#8216;Configure Security Challenge Questions&amp;#8217;. 
 # Click on Edit. 
 # For each question: 

 * Select an appropriate question. 
 * Enter an appropriate answer. 
 * Follow the above process for all 3 questions. 

 # Click Update when complete. 
 # We recommend to store the questions and answers in a secure location such as a safe where they can be used in case recovery is required. 
 Content provided by 
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.15" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Login to the AWS Account as root.
 # Click account name on the top right of the management console.
 # Select &amp;#8216;My Account&amp;#8217;.
 # Scroll down to &amp;#8216;Configure Security Challenge Questions&amp;#8217;.
 # Confirm whether questions and answers have been saved.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Gov-1.2" name="Register a Security contact for your AWS account." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;AWS will occasionally send security advisories and alerts to the account holder. By default this will go to the email address that the account is registered under. However if a security contact is specified these alerts will be sent here instead. Therefore this provides the means of ensuring these advisories are routed to the security team, especially if a distribution email address is used. &lt;/p&gt;



 &lt;b&gt;Remediation:&lt;/b&gt; 


 # Login to the AWS Account as root. 
 # Click account name on the top right of the management console. 
 # Select &amp;#8216;My Account&amp;#8217;. 
 # Scroll down to &amp;#8216;Alternate Contacts&amp;#8217; section. 
 # Click on Edit. 
 # In the &amp;#8216;Security&amp;#8217; section complete the requested contact information. 
 # Click update when complete. 
 Content provided by 
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.17" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                        <standard ref="1.18" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Login to the AWS Account as root.
 # Click account name on the top right of the management console.
 # Select &amp;#8216;My Account&amp;#8217;.
 # Scroll down to &amp;#8216;Alternate Contacts&amp;#8217; section.
 # Confirm whether a contact has been set for &amp;#8216;Security&amp;#8217;.
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-IAM-2.4" name="Enable MFA for IAM console users" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Using a multi-factor authentication (MFA) device enhances the security of the login process.
 With MFA, users have a device that generates a unique authentication code (a one-time password,
 or OTP) and users must provide both their normal credentials (like their user name and password)
 and the OTP.&lt;/p&gt;




 The MFA device can either be a special piece of hardware, or it can be a virtual device. The
 recommendation for all console login accounts is to use MFA to increase the level of security of
 the login process.



 &lt;b&gt;Remediation:&lt;/b&gt;


 # Login to the AWS Management Console as an administrator.
 # Select IAM.
 # Select Users.
 # For each user:

 * Select the user.
 * Under &amp;#8216;Sign-In Credentials&amp;#8217; if &amp;#8216;Password&amp;#8217; is set
 to &amp;#8216;Yes&amp;#8217;.
 * Select &amp;#8216;Manage MFA Device&amp;#8217;.
 * Choose the type of MFA.
 * Either scan the code or enter your device secret key.
 * Enter the Authentication code in &amp;#8216;Authentication Code 1&amp;#8217; box.
 * Wait for the code to change and enter the next code in &amp;#8216;Authentication Code 2&amp;#8217;
 box.
 * Click Activate MFA.

 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.2" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report
 # The following command displays a list of all IAM users along with their password
 and MFA status: aws iam get-credential-report &amp;#8212;output text | base64 -D | cut &amp;#8211; d, -f1,4,8
 # For any column having password_enabled set to true ensure mfa_active is also set
 to true.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-IAM-2.6" name="Create a Password Policy enforcing strong passwords" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Enforcing a strong password policy increases resiliency and reduces the chances of the password
 being compromised either through brute force attempts, keystroke logging tools or stolen
 credentials amongst others.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;


 # Login to AWS Console (ensure you have permissions to update IAM).
 # Go to IAM Service on the AWS Console.
 # Click on Account Settings.
 # Set &amp;#8216;Minimum password length&amp;#8217; to 8 or greater.
 # Check &amp;#8216;Require at least one uppercase letter&amp;#8217;.
 # Check &amp;#8216;Require at least one lowercase letter&amp;#8217;.
 # Check &amp;#8216;Require at least one number&amp;#8217;.
 # Check &amp;#8216;Require at least one non-alphanumeric character&amp;#8217;
 # Check &amp;#8216;Enable password expiration&amp;#8217; and set the period to at least 90
 days.
 # Check &amp;#8216;Prevent password reuse&amp;#8217; and set the number to at least 10.
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.10" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                        <standard ref="1.11" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                        <standard ref="1.4" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                        <standard ref="1.5" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                        <standard ref="1.6" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                        <standard ref="1.7" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                        <standard ref="1.8" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                        <standard ref="1.9" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that exists a mechanisms to ensure that the created passwords are enough strong.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-IAM-2.9" name="Enforce employee lifecycle policies" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Regular reviews of accounts on the system should be conducted to ensure that stale accounts
 cannot be abused either by those former employees using them or compromised by attackers.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;
 At least every 90 days complete the following:



 # Sign in to the AWS Management Console (with IAM update privileges).
 # Go to IAM Service on the AWS Console.
 # Click on Users.
 # For any user that should no longer exist:

 * select the user,
 * click &amp;#8216;User Actions&amp;#8217;,
 * click &amp;#8216;Delete&amp;#8217;.

 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Obtain a list of IAM users by: aws iam list-users &amp;#8212;query &amp;#8216;Users[*].UserName&amp;#8217;
 &amp;#8212;output text
 # Ensure all users are valid users.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-IAM-2.10" name="Enable setting MFA for sensitive API calls" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;To the extent that it is practical consider enforcing MFA access for sensitive API calls. For
 example, you can require that a user has authenticated with an MFA device in order to be allowed
 to terminate an Amazon EC2 instance. This ensures that such high level changes to your AWS
 environment are protected with an extra layer of security thus helping to prevent accidental or
 malicious damage.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;
 The following is an example of how to create a policy that enforces MFA to terminate
 EC2 instances:


 * Sign in to the AWS Management Console (with IAM update privileges).
 * Go to IAM Service on the AWS Console.
 * Select &amp;#8216;Policies&amp;#8217;.
 * Select &amp;#8216;Create Policy&amp;#8217;.
 * Select &amp;#8216;Create your own policy&amp;#8217;.
 * Provide a policy name and description.
 * In the policy document add the following:




 &lt;i&gt; {&lt;/i&gt;


 &lt;i&gt; &amp;#8216;Version&amp;#8217;: &amp;#8217;2012-10-17&amp;#8217;,&lt;/i&gt;


 &lt;i&gt; &amp;#8216;Statement&amp;#8217;: [{&lt;/i&gt;


 &lt;i&gt; &amp;#8216;Effect&amp;#8217;: &amp;#8216;Allow&amp;#8217;,&lt;/i&gt;


 &lt;i&gt; &amp;#8216;Action&amp;#8217;: [&lt;/i&gt;


 &lt;i&gt; &amp;#8216;ec2:StopInstances&amp;#8217;,&lt;/i&gt;


 &lt;i&gt; &amp;#8216;ec2:TerminateInstances&amp;#8217;&lt;/i&gt;


 &lt;i&gt; ],&lt;/i&gt;


 &lt;i&gt; &amp;#8216;Resource&amp;#8217;: [&amp;#8216;*&amp;#8217;],&lt;/i&gt;


 &lt;i&gt; &amp;#8216;Condition&amp;#8217;: {&amp;#8216;Bool&amp;#8217;: {&amp;#8216;aws:MultiFactorAuthPresent&amp;#8217;:
 &amp;#8216;true&amp;#8217;}}&lt;/i&gt;


 &lt;i&gt; }]&lt;/i&gt;


 &lt;i&gt;}&lt;/i&gt;




 * Click &amp;#8216;Create policy&amp;#8217;.
 * The policy may now be added to a group by following the outlines in &amp;#8216;Use RBAC
 with pre-defined policies added into groups or roles&amp;#8217;.
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;The following checks that MFA is forced on a policy:&lt;/p&gt;


 # Sign in to the AWS Management Console (with IAM update privileges).
 # Go to IAM Service on the AWS Console.
 # Select &amp;#8216;Policies&amp;#8217;.
 # In the filter select &amp;#8216;Customer Managed Policies&amp;#8217;.
 # Select the policy to check.
 # In the policy document check for the presence of the line: &amp;#8216;Condition&amp;#8217;:
 {&amp;#8216;Bool&amp;#8217;: {&amp;#8216;aws:MultiFactorAuthPresent&amp;#8217;: &amp;#8216;true&amp;#8217;}}</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-IAM-1.21" name="Do not setup access keys during initial user setup for all IAM users that have a console password" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;&lt;span style=" , Arial;"&gt;&lt;span style=""&gt;AWS console defaults the checkbox for
 creating access keys to enabled. This results in many access keys being generated unnecessarily.
 In addition to unnecessary credentials, it also generates unnecessary management work in
 auditing and rotating these keys.&lt;span style=&amp;#8221;
 font-weight: bold;&amp;#8221;&gt;Remediation:&lt;span style=""&gt;Perform the
 following to delete access keys that do not pass the audit.&lt;/p&gt;




 # Login to the AWS Management Console.
 # Click Services.
 # Click IAM.
 # Click on Users.
 # Click on Security Credentials.
 # As an Administrator.

 * Click on Delete for keys that were created at the same time as the user profile but
 have not been used.

 # As an IAM User.

 * Click on Delete for keys that were created at the same time as the user profile but
 have not been used.


 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;Via CLI:





 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;aws iam delete-access-key</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.21" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;&lt;span style=""&gt;Perform the following to determine if access keys are rotated as
 prescribed:&lt;/p&gt;

 # Login to the AWS Management Console
 # Click Services
 # Click IAM
 # Click on a User
 # Compare the user creation date to the key 1 creation date.
 # For any that match, the key was created during initial user setup.
 Keys that were created at the same time as the user profile and do not have a
 last used date should be deleted.Via the CLI:

 * Run the following command (OSX/Linux/UNIX) to generate a list of all IAM users
 along with their access keys utilization:



 &lt;span style=""&gt;aws iam generate-credential-report


 &lt;span style=""&gt;


 &lt;span style=""&gt;aws iam get-credential-report &amp;#8212;query &amp;#8216;Content&amp;#8217; &amp;#8212;output text | base64
 -d | cut -d, -f1,4,9,11,14,16


 &lt;span style=""&gt;

 * The output of this command will produce a table similar to the following:



 &lt;span style=""&gt;user,password_enabled,access_key_1_active,access_key_1_last_used_date,access_


 &lt;span style=""&gt;key_2_active,access_key_2_last_used_date


 &lt;span style=""&gt;elise,false,true,2015-04-16T15:14:00+00:00,false,N/A


 &lt;span style=""&gt;brandon,true,true,N/A,false,N/A


 &lt;span style=""&gt;rakesh,false,false,N/A,false,N/A


 &lt;span style=""&gt;helene,false,true,2015-11-18T17:47:00+00:00,false,N/A


 &lt;span style=""&gt;paras,true,true,2016-08-28T12:04:00+00:00,true,2016-03-04T10:11:00+00:00


 &lt;span style=""&gt;anitha,true,true,2016-06-08T11:43:00+00:00,true,N/A


 &lt;span style=""&gt;

 * For any user having access_key_last_used_date set to N/A , ensure that access key
 is deleted</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-EC2-6.3" name="Apply IAM roles for EC2 instances IAM roles for EC2 instances" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Applications that run on an Amazon EC2 instance need credentials in order to access other AWS
 services. To provide credentials to the application in a secure way, use IAM roles. A role is an
 entity that has its own set of permissions, but that isn&amp;#8217;t a user or group. Roles also don&amp;#8217;t
 have their own permanent set of credentials the way IAM users do. In the case of Amazon EC2, IAM
 dynamically provides temporary credentials to the EC2 instance, and these credentials are
 automatically rotated for you.&lt;/p&gt;

 When you launch an EC2 instance, you can specify a role for the instance as a launch
 parameter. Applications that run on the EC2 instance can use the role&amp;#8217;s credentials when they
 access AWS resources. The role&amp;#8217;s permissions determine what the application is allowed to do. It
 is recommended that all EC2 instances be launched with a role, even if the role has no
 permissions (as they can be added later if desired).


 &lt;b&gt;Remediation:&lt;/b&gt;


 # Login to the AWS Management Console.
 # Select EC2 from the services menu.
 # Select &amp;#8216;Launch Instance&amp;#8217;.
 # Complete the wizard until step 3 at which point ensure an IAM role is selected for the
 &amp;#8216;IAM role&amp;#8217; option (note the role must already exist).
 # Complete the wizard to launch the instance.
 NB: You cannot add a role to an instance that has been launched without one. In these
 cases create an AMI from an existing instance and launch a new instance, assigning an IAM role
 as detailed above.


 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.19" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Login to the AWS Management Console.
 # Select EC2 from the services menu.
 # Select &amp;#8216;Instances&amp;#8217; from the left hand menu.
 # For each instance in the list:&lt;/li&gt;
	&lt;/ol&gt;

 * select the instance
 * in the preview pane confirm the instance has an &amp;#8216;IAM Role&amp;#8217;
 assigned (if a hyphen &amp;#8216;-&amp;#8217; is shown then your instance has no role
 assigned).</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-IAM-1.20" name="Create an IAM role for managing incidents with AWS" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;&lt;span style=" , Arial;"&gt;&lt;span style=""&gt;AWS provides a support center that can be
 used for incident notification and response, as well as technical support and customer services.
 Create an IAM Role to allow authorized users to manage incidents with AWS Support.&lt;br
 /&gt;&lt;span style=" font-weight: bold;"&gt;Remediation:&lt;span
 style=&amp;#8221;&amp;#8220;&gt;Using the Amazon unified command line interface, create an IAM role for managing
 incidents with AWS:&lt;/p&gt;

 * Create a trust relationship policy document that allows &lt;iam_user&gt; to
 manage AWS incidents, and save it locally as /tmp/TrustPolicy.json:



 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;{




 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;&amp;#8217;Version&amp;#8217;: &amp;#8217;2012-10-17&amp;#8217;,


 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;&amp;#8217;Statement&amp;#8217;: [





 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;{




 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;&amp;#8217;Effect&amp;#8217;: &amp;#8216;Allow&amp;#8217;,




 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;&amp;#8217;Principal&amp;#8217;: {







 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;&amp;#8217;AWS&amp;#8217;: &amp;#8216;&lt;span
 style=&amp;#8216;font-style: italic;&amp;#8217;&gt;&lt;iam_user&gt;&amp;#8217;








 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;},






 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;&amp;#8217;Action&amp;#8217;: &amp;#8216;sts:AssumeRole&amp;#8217;





 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;}




 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;]





 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;}



 * Create the IAM role using the above trust policy:



 aws iam create-role &amp;#8212;role-name &lt;aws_support_iam_role&gt;
 &amp;#8212;assume-role-policy-document file:///tmp/TrustPolicy.json



 * Attach &amp;#8216;AWSSupportAccess&amp;#8217; managed policy to the created IAM role:



 aws iam attach-role-policy &amp;#8212;policy-arn &lt;iam_policy_arn&gt; &amp;#8212;role-name &lt;aws_support_iam_role&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: attach role policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/attach-role-policy.html"/>
                        <reference name="Amazon docs: list entities for policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-entities-for-policy.html"/>
                        <reference name="Amazon docs: list policies" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-policies.html"/>
                        <reference name="Amazon docs: managed policies and inline policies" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html"/>
                    </references>
                    <standards>
                        <standard ref="1.20" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;&lt;span style=" , Arial;"&gt;Using the Amazon unified command line interface:&lt;/p&gt;

 * List IAM policies, filter for the &amp;#8216;AWSSupportAccess&amp;#8217; managed policy, and note the
 &amp;#8216;Arn&amp;#8217; element value:



 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;aws iam list-policies &amp;#8212;query &amp;#8216;Policies[?PolicyName
 == &amp;#8216;AWSSupportAccess&amp;#8217;]&amp;#8217;


 &lt;span style=" , Arial;"&gt;

 * Check if the &amp;#8216;AWSSupportAccess&amp;#8217; is attached to any IAM user, group or role:



 &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;aws iam list-entities-for-policy
 &amp;#8212;policy-arn &lt;iam_policy_arn&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-IAM-2.7" name="Enforce Least Privilege" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Granting least privilege ensures that users only have the permissions required to complete
 their jobs rather than additional privileges that are not required. Following this model ensures
 that, should an account be compromised, the blast radius of damage is limited.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;


 * Allocate privileges via groups or roles via the recommendation in &amp;#8216;Use RBAC
 with pre-defined policies added into groups or roles&amp;#8217;.
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.22" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Follow the audit check in &amp;#8216;Use RBAC with pre-defined policies added into
 groups or roles&amp;#8217;.
 # Ensure the privileges granted to these groups or roles only give the user the
 ability to perform their and no more.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-IAM-2.8" name="Apply RBAC with pre-defined policies added into groups or roles" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Instead of defining permissions for individual IAM users, it&amp;#8217;s usually more convenient to
 create groups that relate to job functions (administrators, developers, accounting, etc.),
 define the relevant permissions for each group, and then assign IAM users to those groups. All
 the users in an IAM group inherit the permissions assigned to the group. That way, you can make
 changes for everyone in a group in just one place. As people move around in your company, you
 can simply change what IAM group their IAM user belongs to. This method is know as Role Based
 Access Control (RBAC).&lt;/p&gt;


 **Remediation:**Remove privilege granted directly to a user:


 # Sign in to the AWS Management Console (with IAM update privileges).
 # Go to IAM Service on the AWS Console.
 # Click on Users.
 # For each user complete the following:

 * Select the user.
 * Click on the Permissions tab.
 * Expand &amp;#8216;Managed Policies&amp;#8217;.
 * Click &amp;#8216;Detach Policy&amp;#8217;.
 * Expand &amp;#8216;Inline Policies&amp;#8217;.
 * Click &amp;#8216;Remove Policy&amp;#8217;.

 Create a Group and add a user:


 # Sign in to the AWS Management Console (with IAM update privileges).
 # Go to IAM Service on the AWS Console.
 # Select Groups and click Create New Group.
 # In the Group Name box, type the name of the group and click Next Step.
 # In the list of policies, select the check box for each policy that you want to apply
 to all members of the group. Click Next Step.
 # Click Create Group.
 # Click the new Group and select the &amp;#8216;Users&amp;#8217; tab.
 # Click &amp;#8216;Add Users to Group&amp;#8217;.
 # Select the users and click &amp;#8216;Add Users&amp;#8217;.
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.16" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                        <standard ref="1.22" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Obtain a list of IAM users by: aws iam list-users &amp;#8212;query &amp;#8216;Users[*].UserName&amp;#8217;
 &amp;#8212;output text
 # Run the following to determine if they have policies directly attached:&lt;/li&gt;
	&lt;/ol&gt;




 aws iam list-attached-user-policies &amp;#8212;user-name user









 aws iam list-user-policies &amp;#8212;user-name user</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-IAM-2.11" name="Configure password expiration" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Change access keys regularly, and make sure that all IAM users in your account do as well.
 That way, if an access key is compromised without your knowledge, you limit how long the
 credentials can be used to access your resources. Credential reports can be used to determine
 how long access keys have been active for.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;


 # Sign in to the AWS Management Console (with IAM update privileges).
 # Go to IAM Service on the AWS Console.
 # Click on Users.
 # Select the user you wish to rotate the key for.
 # Under access keys click &amp;#8216;Create Access Key&amp;#8217; (do not touch the
 existing key yet).
 # Click &amp;#8216;Download credentials&amp;#8217; or &amp;#8216;Show credentials&amp;#8217;
 so that you have a record of them.
 # Update any applications with the new credentials and test (we recommend to leave a few
 days or a week for testing).
 # Once complete complete 1-4 above and for the key which needs rotating click &amp;#8216;Make
 Inactive | Delete&amp;#8217; and click &amp;#8216;Deactive&amp;#8217;.
 # Once you are confident you will no longer need the key (wait several more days) repeat
 1-4 and select &amp;#8216;Delete&amp;#8217; for the inactive key.



 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.3" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Generate a credential report: aws iam generate-credential-report
 # Check the access keys created time: aws iam get-credential-report &amp;#8212;query
 &amp;#8216;Content&amp;#8217; &amp;#8212;output text | base64 -D | awk -F, &amp;#8216;{print $1,$9,$10,$14,$15}&amp;#8217;
 # For each access_key_1_active and access_key_9_active that is set to True ensure
 the created date is within the last 90 days.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-IAM-2.12" name="Rotate KMS CMK Keys at least every year" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Rotating keys regularly reduces the impact of a compromised key being used to access data
 since old keys cannot be used once rotated.&lt;/p&gt;



 &lt;b&gt;Remediation:&lt;/b&gt;


 # List keys with: &amp;#8216;aws kms list-keys&amp;#8217;.
 # For each key enable rotation: &amp;#8216;aws kms enable-key-rotation &amp;#8212;key-id &lt;key_id&gt;&amp;#8217;.



 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="2.8" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;List keys with: aws kms list-keys
 # For each key check for rotation:aws kms get-key-rotation-status &amp;#8212;key-id
 &lt;key_id&gt;&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="">
                    <threats>
                        <threat ref="AWS-LOST-ACCESS-ROOT" name="Attackers gain unauthorized access to the root account due to the lack of configuration of the account" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain unauthorized access to the administrator account due to the lack of
 the account and its security mechanisms, like modifying credentials and adding/removing
 user accounts.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="Hydras-AWS-IAM-2.1" mitigation="17"/>
                                <control ref="Hydras-AWS-IAM-2.3" mitigation="17"/>
                                <control ref="Hydras-AWS-IAM-2.2" mitigation="17"/>
                                <control ref="Hydras-AWS-IAM-2.5" mitigation="17"/>
                                <control ref="Hydras-AWS-Gov-1.1" mitigation="16"/>
                                <control ref="Hydras-AWS-Gov-1.2" mitigation="16"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-IAM-2.2">
                                    <controls>
                                        <control ref="Hydras-AWS-IAM-2.1" mitigation="17"/>
                                        <control ref="Hydras-AWS-IAM-2.3" mitigation="17"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-IAM-2.1">
                                    <controls>
                                        <control ref="Hydras-AWS-IAM-2.2" mitigation="17"/>
                                        <control ref="Hydras-AWS-IAM-2.5" mitigation="17"/>
                                    </controls>
                                </weakness>
                                <weakness ref="LOST-ACCESS-ROOT-01">
                                    <controls>
                                        <control ref="Hydras-AWS-Gov-1.1" mitigation="16"/>
                                    </controls>
                                </weakness>
                                <weakness ref="LOST-SECURITY-ALERTS">
                                    <controls>
                                        <control ref="Hydras-AWS-Gov-1.2" mitigation="16"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="AWS-LOST-ACCESS-USER" name="Attackers gain unauthorized access to the user account due to the lack of configuration of the account" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain unauthorized access to the user account due to the lack of
 configuration of the account, like the security question to reset the password was
 configured incorrectly.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="Hydras-AWS-IAM-2.4" mitigation="34"/>
                                <control ref="Hydras-AWS-IAM-2.6" mitigation="33"/>
                                <control ref="Hydras-AWS-IAM-2.9" mitigation="33"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-IAM-2.8">
                                    <controls>
                                        <control ref="Hydras-AWS-IAM-2.4" mitigation="34"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-IAM-2.6">
                                    <controls>
                                        <control ref="Hydras-AWS-IAM-2.6" mitigation="33"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-IAM-2.9">
                                    <controls>
                                        <control ref="Hydras-AWS-IAM-2.9" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="">
                    <threats>
                        <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due of the
 user accounts or role groups are not well defined and configured. Therefore, attackers
 can make changes without the root approval.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="Hydras-AWS-IAM-2.10" mitigation="13"/>
                                <control ref="Hydras-AWS-IAM-1.21" mitigation="13"/>
                                <control ref="Hydras-AWS-EC2-6.3" mitigation="13"/>
                                <control ref="Hydras-AWS-IAM-1.20" mitigation="13"/>
                                <control ref="Hydras-AWS-IAM-2.7" mitigation="12"/>
                                <control ref="Hydras-AWS-IAM-2.8" mitigation="12"/>
                                <control ref="Hydras-AWS-IAM-2.11" mitigation="12"/>
                                <control ref="Hydras-AWS-IAM-2.12" mitigation="12"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-IAM-2.8">
                                    <controls>
                                        <control ref="Hydras-AWS-IAM-2.10" mitigation="13"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-IAM-1.21">
                                    <controls>
                                        <control ref="Hydras-AWS-IAM-1.21" mitigation="13"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-IAM-2.7">
                                    <controls>
                                        <control ref="Hydras-AWS-EC2-6.3" mitigation="13"/>
                                        <control ref="Hydras-AWS-IAM-1.20" mitigation="13"/>
                                        <control ref="Hydras-AWS-IAM-2.7" mitigation="12"/>
                                        <control ref="Hydras-AWS-IAM-2.8" mitigation="12"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-EXPIRATION-DATE">
                                    <controls>
                                        <control ref="Hydras-AWS-IAM-2.11" mitigation="12"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-IAM-2.12">
                                    <controls>
                                        <control ref="Hydras-AWS-IAM-2.12" mitigation="12"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="HYDRAS-AWS-LOG" name="AWS Logging" desc="" tags="" position="4" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="AWS-Logging-3.3" name="Audit logs are accesible" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The audit logs are not encrypted and they can be accessed by attackers and obtain sensitive data
 in clear text.</desc>
                </weakness>
                <weakness ref="AWS-Logging-3.1" name="Non-auditable API calls in all regions" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The API call to the resources is not audited and the actions are not recorded into the logs.</desc>
                </weakness>
                <weakness ref="AWS-Logging-3.4" name="Non-auditable actions in the resources" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The actions in the resources are not audited and not recorded in the logs.</desc>
                </weakness>
                <weakness ref="AWS-Logging-3.8" name="Non-centrality audit logs" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The audit logs are not stored in a central system. Therefore, the audit logs cannot be
 exploited correctly by the security personnel.</desc>
                </weakness>
                <weakness ref="AWS-Logging-3.7" name="Unaudited connections with the resources" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The connections with the applications and with the databases cannot be audited and not
 detected.</desc>
                </weakness>
                <weakness ref="AWS-Logging-3.9" name="Unaudited resources changes" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The changes in the applications and in the databases and these changes are not detected and
 not audited.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="Hydras-AWS-Logging-3.3" name="Ensure CloudTrail logs are not publically available" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Since cloudtrail logs capture all API calls for the AWS account they should be stored in an S3
 bucket that is not accessible to the public. Applying the correct bucket policy helps ensure the
 confidentiality of the data.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;



 # Sign in to the AWS Management Console (with s3 update privileges).
 # Select s3 from the services list.
 # Right-click on the bucket you have used for &amp;#8216;cloudtrail&amp;#8217; and click
 &amp;#8216;Properties&amp;#8217;.
 # In the Properties pane, click the Permissions tab.
 # Select the row that grants permission to &amp;#8216;Everyone&amp;#8217; or &amp;#8216;Any
 Authenticated User&amp;#8217;.
 # Uncheck all the permissions granted to Everyone or Any Authenticated User.
 # Click Save to save the ACL.
 # If the Edit bucket policy button is present, click it.
 # Remove any Statement having an Effect set to Allow and a Principal set to *.
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="2.3" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Obtain the bucket name of the cloudtrail:aws cloudtrail describe-trails
 &amp;#8212;query &amp;#8216;trailList[*].S3BucketName&amp;#8217;
 # Ensure &amp;#8216;AllUsers&amp;#8217; is not granted access to the bucket:aws
 s3api get-bucket-acl &amp;#8212;bucket &lt;bucket_name&gt; &amp;#8212;query
 &amp;#8216;Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/AllUsers`]&amp;#8217;
 # Ensure &amp;#8216;Authenticated Users&amp;#8217; is not granted access to the
 bucket: aws s3api get-bucket-acl &amp;#8212;bucket &lt;bucket_name&gt; &amp;#8212;query
 &amp;#8216;Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/Authenticated Users`]&amp;#8217;
 # Validate the bucket policy does not grant access to all:aws s3api
 get-bucket-policy &amp;#8212;bucket &lt;bucket_name&gt;
 # Check that the above command does not provide a principal of *, with EFFECT set to
 ALLOW.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Logging-3.5" name="Encrypt CloudTrail logs using KMS" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;By default, the log files delivered by CloudTrail to your bucket are encrypted by Amazon
 server-side encryption with Amazon S3-managed encryption keys (SSE-S3). To provide a security
 layer that is directly manageable, you can instead use server-side encryption with AWS
 KMS–managed
 keys (SSE-KMS) for your CloudTrail log files. This provides several advantages:&lt;/p&gt;


 * You can create and manage the CMK encryption keys yourself.
 * You can use a single CMK to encrypt and decrypt log files for multiple accounts across
 all regions.
 * You have control over who can use your key for encrypting and decrypting CloudTrail
 log files.
 * You can assign permissions for the key to the users in your organization according to
 your requirements.
 * You have enhanced security. With this feature, in order to read log files, you now
 need to meet two conditions:

 * you must have S3 read permission on the bucket, and
 * you must be granted decrypt permission by the CMK policy.

 Because S3 automatically decrypts the log files for requests from users authorized to
 use the CMK, SSE-KMS encryption for CloudTrail log files is backward compatible with existing
 applications that read CloudTrail log data.


 &lt;b&gt;Remediation:&lt;/b&gt;


 # Sign in to the AWS Management Console (with cloudtrail update permissions).
 # Select CloudTrail from the services menu.
 # Select &amp;#8216;Trails&amp;#8217;.
 # Click on a Trail.
 # Under the S3 section click on the edit button.
 # Click Advanced.
 # Set &amp;#8216;Encrypt Log Files&amp;#8217; to &amp;#8216;Yes&amp;#8217;.
 # Set &amp;#8216;Create a new KMS key&amp;#8217; to &amp;#8216;Yes&amp;#8217;.
 # In &amp;#8216;KMS key&amp;#8217; type a name for your key.
 # Click &amp;#8216;Save&amp;#8217;.
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="2.7" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;aws cloudtrail describe-trails
 Check that KMS is enabled if the &amp;#8216;KmsKeyId&amp;#8217; property is
 set.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Logging-3.1" name="Enable Cloudtrail in all regions" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Cloudtrail records events of all API calls made within a AWS account. This enables security
 analysis, resource change tracking, and compliance auditing. Cloudtrail should be enabled in all
 regions, even if they are not being used, to identify unintended or accidental changes.&lt;/p&gt;


 &lt;b&gt;Remediation&lt;/b&gt;:
 Create a global trail using a previously created S3 bucket:


 aws cloudtrail create-trail &amp;#8212;name &lt;trail_name&gt; &amp;#8212;s3-bucket-name &lt;s3-bucket-name&gt;
 &amp;#8212;is-multi-region-trail

 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="2.1" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Run: aws cloudtrail describe-trails
 # Ensure &amp;#8216;IsMultiRegionTrail&amp;#8217; = TRUE&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Logging-3.2" name="Enable CloudTrail log file validation" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Enabling log file validation will provide additional integrity checking of CloudTrail as it
 creates a digest for each log file it writes to S3. These digests can then be used to determine
 if a log has been modified since being written&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;

 aws cloudtrail update-trail &amp;#8212;name &lt;trail_name&gt; &amp;#8212;enable-log-file-validation

 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="2.2" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;aws cloudtrail describe-trails
 Ensure LogFileValidationEnabled = true (for each trail)&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Logging-3.4" name="Integrate the CloudTail logs into Cloudwatch logs" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;One way to work with cloudtrail logs is to send them to cloudwatch logs which allows you to
 define metric filters for alerting and monitoring. This allows you to take immediate action if a
 certain threshold has been met. Enabling this provides the opportunity to monitor for sensitive
 account activity.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;


 # Sign in to the AWS Management Console (with cloudtrail update permission).
 # Select Cloudtrail from the services list.
 # Under All Buckets select the target bucket you want to check.
 # Select &amp;#8216;Properties&amp;#8217; then &amp;#8216;Trails&amp;#8217;.
 # Click on each trail where no CloudWatch Logs are defined.
 # Go to the &amp;#8216;CloudWatch Logs&amp;#8217; section and click on &amp;#8216;Configure&amp;#8217;.
 # Define a new or select an existing log group and click &amp;#8216;Continue&amp;#8217;.
 # Configure the IAM Role which will deliver CloudTrail events to CloudWatch Logs.
 # Create/Select an IAM Role and Policy Name.
 # Click Allow.
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="2.4" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;aws cloudtrail get-trail-status &amp;#8212;name &lt;trail_name&gt;
 Ensure the &amp;#8216;LatestcloudwatchLogdDeliveryTime&amp;#8217; property
 is set to a recent time (ie within the latest day or so).&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Logging-3.6" name="Enable S3 Bucket logging" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;S3 Bucket Access Logging generates log files that contain access records for each request made
 to an S3 bucket. By enabling this it is possible to capture events relating to the objects
 within that bucket thus helping to capture potential security issues or identifying threats. It
 is recommended to enable S3 bucket logging on any S3 bucket that contains sensitive data and
 stored the logs in a separate bucket for security analysis.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;

 # Sign in to the AWS Management Console (with S3 update access).
 # Select S3 from the services menu.
 # Under All Buckets click on the S3 bucket you wish to enable logging.
 # Click on Properties in the top right of the console.
 # Under Bucket:&lt;bucket_name&gt; click on Logging.
 # Click on the &amp;#8216;Enabled&amp;#8217; checkbox.
 # Select a &amp;#8216;Target Bucket&amp;#8217; to store the logs.
 # Select a &amp;#8216;Target Prefix&amp;#8217; for the logs.
 # Click &amp;#8216;Save&amp;#8217;.
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="2.6" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Sign in to the AWS Management Console (with S3 update access).
 # Select S3 from the services menu.
 # Under All Buckets click on the S3 bucket you wish to enable logging.
 # Click on Properties in the top right of the console.
 # Under Bucket:&lt;bucket_name&gt; click on Logging.
 # Ensure &amp;#8216;Enabled&amp;#8217; is checked.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Logging-3.8" name="Export EC2 OS logs to cloudwatch logs" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Cloudwatch logs is an AWS service that allows you to send logs from an EC2 instance to
 cloudwatch via an agent installed locally on the machine. The logs are then stored centrally
 within cloudwatch logs and metric alerts can be configured so that security incidents can be
 reported to the security team. It is recommended to enable cloudwatch log monitoring on all EC2
 servers.&lt;/p&gt;


 **Remediation:**Follow the directions provided in &amp;#8216;http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/EC2NewInstanceCWL.html&amp;#8217;
 to install and enable Cloudwatch Logs on a new EC2 instance.

 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Sign into the management console.
 # Select Cloudwatch from the services menu.
 # In the left pane click &amp;#8216;Logs&amp;#8217;.
 # Click on your log group.
 # Click on your log stream.
 # Ensure event data is being captured as per the logs on your machine.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Logging-3.7" name="Enable VPC flow logs" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;VPC Flow logs enable the capture of IP traffic that traverses the network interfaces within a
 VPC. These logs are captured and sent to cloudtrail logs enabling you to detect security
 incidents that may be occurring across the network.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;


 # Sign into the management console.
 # Select VPC from the services menu.
 # In the left pane click &amp;#8216;Your VPCs&amp;#8217;.
 # Select a VPC.
 # Select the Flow Logs tab from the preview panel.
 # Select &amp;#8216;Create Flow Log&amp;#8217;.
 # Choose a role (note this must be pre-created. Follow the link provided in the text
 underneath &amp;#8216;Role&amp;#8217; for help).
 # Select a &amp;#8216;Destination Log Group&amp;#8217;.
 # Click &amp;#8216;Create flow Log&amp;#8217;.
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="2.9" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Sign into the management console.
 # Select VPC from the services menu.
 # In the left pane click &amp;#8216;Your VPCs&amp;#8217;.
 # Select a VPC.
 # Select the Flow Logs tab from the preview panel.
 # Ensure a Log Flow exists that has Active in the Status column.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Logging-3.9" name="Enable AWS Config across all regions" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;AWS Config tracks configuration changes to resources as they occur and is therefore a good
 source of identifying whether unintentional or malicious changes have occurred to resources with
 the AWS account.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;


 # Sign in to the AWS Management Console (with Config update permissions).
 # Select Config from the services menu.
 # Define which resources you want to record in the selected region.
 # Choose to include global resources (IAM resources).
 # Specify an S3 bucket.
 # Create an SNS Topic
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="2.5" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Sign in to the AWS Management Console (with Config update permissions)
 # Select Config from the services menu
 # If presented with Setup AWS Config follow the procedure highlighted in the
 remediation section
 # On the Resource inventory page, Click on &amp;#8216;edit&amp;#8217;
 # Ensure 1 or both check-boxes under &amp;#8216;All Resources&amp;#8217; is checked.&lt;/li&gt;
	&lt;/ol&gt;

 * Include global resources related to IAM resources
 * which needs to be enabled in 1 region only.

 # Ensure the correct S3 bucket has been defined.
 # Ensure the correct SNS topic has been defined.
 # Repeat steps 2 to 7 for each region (you&amp;#8217;ll need to change region in the top right
 corner of the AWS management console to do this).</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="API LOGGING AND AUDITING" name="API Logging and Auditing" desc="" library="">
                    <threats>
                        <threat ref="UNAUDITABLE-CHANGES-AWS" name="Attackers make undetected and unaudited changes to system configurations" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;If audit trails are not properly protected, an attacker could gain access to the system,
 modify the status of the resources or exfiltrate sensitive data without being noticed.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="Hydras-AWS-Logging-3.3" mitigation="20"/>
                                <control ref="Hydras-AWS-Logging-3.5" mitigation="20"/>
                                <control ref="Hydras-AWS-Logging-3.1" mitigation="20"/>
                                <control ref="Hydras-AWS-Logging-3.2" mitigation="20"/>
                                <control ref="Hydras-AWS-Logging-3.4" mitigation="20"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-Logging-3.3">
                                    <controls>
                                        <control ref="Hydras-AWS-Logging-3.3" mitigation="20"/>
                                        <control ref="Hydras-AWS-Logging-3.5" mitigation="20"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-Logging-3.1">
                                    <controls>
                                        <control ref="Hydras-AWS-Logging-3.1" mitigation="20"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-Logging-3.4">
                                    <controls>
                                        <control ref="Hydras-AWS-Logging-3.2" mitigation="20"/>
                                        <control ref="Hydras-AWS-Logging-3.4" mitigation="20"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="AWS RESOURCE LOGGING" name="AWS Resource Logging" desc="" library="">
                    <threats>
                        <threat ref="UNAUDITABLE-CHANGES-RESOURCES-AWS" name="Attackers make undetected and unaudited changes in the resources" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;If audit trails in the resources are not enabled or not protected, attackers could gain
 access to the system and modify or delete data from the resources and the changes are
 not detected.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="Hydras-AWS-Logging-3.6" mitigation="25"/>
                                <control ref="Hydras-AWS-Logging-3.8" mitigation="25"/>
                                <control ref="Hydras-AWS-Logging-3.7" mitigation="25"/>
                                <control ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-Logging-3.4">
                                    <controls>
                                        <control ref="Hydras-AWS-Logging-3.6" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-Logging-3.8">
                                    <controls>
                                        <control ref="Hydras-AWS-Logging-3.8" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-Logging-3.7">
                                    <controls>
                                        <control ref="Hydras-AWS-Logging-3.7" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-Logging-3.9">
                                    <controls>
                                        <control ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="HYDRAS-AWS-MON" name="AWS Monitoring" desc="" tags="" position="5" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="AWS-Monitoring-4.5" name="Brute force attempts on the Amazon management console cannot be detected" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The failure connection attempts (brute force) must be audited and monitored and the
 correspondent personnel must be alerted and informed.</desc>
                </weakness>
                <weakness ref="AWS-Monitoring-4.4" name="Changes in the security configurations can be not detected" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Monitoring and alerting for security configurations are not configured and changes cannot be
 detected.</desc>
                </weakness>
                <weakness ref="AWS-Monitoring-4.2" name="Excessive use of administrator accounts" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The administrator accounts are used for all actions, not only for administrative actions. This
 is because these users have not got a personal or a user account to do the daily actions.</desc>
                </weakness>
                <weakness ref="AWS-Monitoring-4.3" name="Lack of 2FA" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Login to the console without using the Multi-factor Authentication (MFA) and they are not
 detected. The connection without the MFA must be audited and monitored, the correct security
 group must be informed and they must validate this connection.</desc>
                </weakness>
                <weakness ref="AWS-Monitoring-4.7" name="Changes in the data encryption configuration cannot be detected" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The changes on the database encryption must be audited and monitored. When there are changes
 on the database encryption, the security group must be alerted.</desc>
                </weakness>
                <weakness ref="AWS-Monitoring-4.10" name="Changes in the security groups cannot be detected" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The changes in the security groups must be audited and monitored and the correspondent
 personnel must approve these changes. If the situation is not the correct, attackers can access
 to security systems.</desc>
                </weakness>
                <weakness ref="AWS-Monitoring-4.12" name="Changes in the network configuration cannot be detected" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The changes in the network configurations (NACLs, route and gateway tables) are not detected
 because the monitorization and alerts of the network configuration are not configured to detect
 these changes.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="Hydras-AWS-Monitoring-4.5" name="Create management console login failure alerts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
 to identify suspicious API activity. One such activity that should be monitored is management
 console login failures. The management console is the AWS account GUI where administration
 activity is performed and is therefore a primary target for brute force attempts. To identify
 these attempts alerts for login failures should be enabled as this can highlight suspicious
 activity.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;

 # Create a metric filter that checks for console login failures: aws logs
 put-metric-filter &amp;#8212;log-group-name &lt;group&gt; &amp;#8212;filter-name &lt;name&gt;
 &amp;#8212;metric- transformations &lt;value&gt; &amp;#8212;filter-pattern &amp;#8216;{ ($.eventName = ConsoleLogin)
 &amp;amp;&amp;amp; ($.errorMessage = &amp;#8216;Failed authentication&amp;#8217;) }&amp;#8217;
 # Create an SNS topic for notifications: aws sns create-topic &amp;#8212;name &lt;topic_name&gt;
 # Create an SNS subscription to the topic created above: aws sns subscribe &amp;#8212;topic-arn
 &lt;topic_arn&gt; &amp;#8212;protocol email &amp;#8212;notification-endpoint &lt;email@example.com&gt;
 # Create an alarm based on the above steps: aws cloudwatch put-metric-alarm &amp;#8212;alarm-name
 &lt;value&gt; &amp;#8212;metric-name &lt;metric_filter_name&gt; &amp;#8212;statistic Sum &amp;#8212;period
 300 &amp;#8212;threshold 1 &amp;#8212;comparison-operator GreaterThanOrEqualToThreshold &amp;#8212;evaluation-periods 1
 &amp;#8212;namespace &lt;CloudTrailMetrics&gt; &amp;#8212;alarm-actions &lt;topic_arn&gt;
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="3.6" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Identify the log group name: aws cloudtrail describe-trails
 # Note the &lt;group&gt; value associated with CloudWatchLogsLogGroupArn.
 # Get a list of all associated metric filters for this &lt;group&gt;: aws
 logs describe-metric-filters &amp;#8212;log-group-name &amp;#8216;&lt;group&gt;&amp;#8217;
 # Ensure the output contains the following:&amp;#8216;filterPattern&amp;#8217;:
 &amp;#8216;{ ($.eventName = ConsoleLogin) &amp;amp;&amp;amp; ($.errorMessage = \&amp;#8216;Failed
 authentication\&amp;#8217;) }&amp;#8217;
 # Note the metricName value associated with the filterPattern found in step 4.
 # Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
 aws cloudwatch describe-alarms &amp;#8212;query &amp;#8216;MetricAlarms[?MetricName==`&lt;metricName&gt;`]&amp;#8217;
 # Note the AlarmActions value &amp;#8211; this will provide the SNS topic ARN value.
 # Ensure there is at least one subscriber to the SNS topic: aws sns
 list-subscriptions-by-topic &amp;#8212;topic-arn &lt;topic_arm&gt;&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Monitoring-4.1" name="Create billing alerts to identify unusual spend" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;By setting billing alarms you can monitor your AWS spend and be alerted if it exceeds certain
 thresholds thus protecting you from accruing unnecessary charges.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;


 # Sign in to the AWS Management Console and open the Billing and Cost Management console
 at https://console.aws.amazon.com/billing/home#/.
 # On the navigation pane, choose Preferences.
 # Select the Receive Billing Alerts check box.
 # Choose Save preferences.
 # Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
 # If necessary, change the region on the navigation bar to US East (N. Virginia). The
 billing metric data is stored in this region, even for resources in other regions.
 # On the navigation pane, under &amp;#8216;Metrics&amp;#8217;, choose &amp;#8216;Billing&amp;#8217;.
 # In the list of billing metrics, select the check box next to Currency USD, for the
 metric named EstimatedCharges. Define the alarm as follows:

 * If you want the alarm to trigger as soon as you go over the free tier, set &amp;#8216;When
 my total AWS charges for the month exceed&amp;#8217; to $.01. This means that you&amp;#8217;ll receive a
 notification as soon as you incur a charge. Otherwise, set it to the amount you want to trigger
 the alarm, and you will be notified when you go over that amount.
 * Choose the &amp;#8216;New list&amp;#8217; link next to the &amp;#8216;send a notification
 to&amp;#8217; box.
 * When prompted, enter your email address or choose your Amazon SNS notification from
 the drop down.
 * Choose &amp;#8216;Create Alarm&amp;#8217;.

 # In the &amp;#8216;Confirm new email addresses&amp;#8217; dialog box, confirm the email
 address or choose &amp;#8216;I will do it later&amp;#8217;. If you don&amp;#8217;t confirm the email address
 now, the alarm remains in the Pending confirmation status until you do so, and does not send an
 alert. To view the status of your alarm, choose &amp;#8216;Alarms&amp;#8217; in the navigation
 panel.
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Sign in to the AWS Management Console and open the Billing and Cost Management
 console at https://console.aws.amazon.com/billing/home#/.
 # On the navigation pane, choose Preferences.
 # Ensure the &amp;#8216;Receive Billing Alerts&amp;#8217; check box is checked.
 # Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.
 # If necessary, change the region on the navigation bar to US East (N. Virginia).
 The billing metric data is stored in this region, even for resources in other regions.
 # On the navigation pane, under &amp;#8216;Alarms&amp;#8217;, check for one called
 &amp;#8216;Billing&amp;#8217;.
 # Click on the alert if it exists and select the checkbox in the first column.
 # In the preview pane check that the &amp;#8216;EstimatedCharges&amp;#8217; threshold
 is set to the correct value and that the &amp;#8216;Actions&amp;#8217; is send an alarm to a
 valid email address.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Monitoring-4.4" name="Create cloudtrail configuration changes alerts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
 to identify suspicious API activity. One such activity that should be monitored is changes to
 cloudtrail. Since cloudtrail is the actual utility logging API calls it&amp;#8217;s security is paramount
 to ensuring that this continues. Therefore alerting on changes to cloudtrail activity can
 prevent a malicious user switching off the logging in order to carry out untracked activities.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;


 # Identify the log group name: aws cloudtrail describe-trails
 # Note the &lt;group&gt; value associated with CloudWatchLogsLogGroupArn
 # Get a list of all associated metric filters for this &lt;group&gt;:aws
 logs describe-metric-filters &amp;#8212;log-group-name &amp;#8216;&lt;group&gt;&amp;#8217;
 # Ensure the output contains the following: &amp;#8216;filterPattern&amp;#8217;: &amp;#8216;{
 ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) ||
 ($.eventName = StartLogging) || ($.eventName = StopLogging) }&amp;#8217;
 # Note the metricName value associated with the filterPattern found in step 4.
 # Get a list of CloudWatch alarms and filter on the metricName captured in step 4: aws
 cloudwatch describe-alarms &amp;#8212;query &amp;#8216;MetricAlarms[?MetricName==`&lt;metricName&gt;`]&amp;#8217;
 # Note the AlarmActions value &amp;#8211; this will provide the SNS topic ARN value.
 # Ensure there is at least one subscriber to the SNS topic: aws sns
 list-subscriptions-by-topic &amp;#8212;topic-arn &lt;topic_arm&gt;



 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="3.1" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                        <standard ref="3.5" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Identify the log group name: aws cloudtrail describe-trails
 # Note the &lt;group&gt; value associated with CloudWatchLogsLogGroupArn.
 # Get a list of all associated metric filters for this &lt;group&gt;: aws
 logs describe-metric-filters &amp;#8212;log-group-name &amp;#8216;&lt;group&gt;&amp;#8217;
 # Ensure the output contains the following:&amp;#8216;filterPattern&amp;#8217;:
 &amp;#8216;{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName =
 DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }&amp;#8217;
 # Note the metricName value associated with the filterPattern found in step 4.
 # Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
 aws cloudwatch describe-alarms &amp;#8212;query &amp;#8216;MetricAlarms[?MetricName==`&lt;metricName&gt;`]&amp;#8217;
 # Note the AlarmActions value &amp;#8211; this will provide the SNS topic ARN value.
 # Ensure there is at least one subscriber to the SNS topic: aws sns
 list-subscriptions-by-topic &amp;#8212;topic-arn &lt;topic_arm&gt;&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Monitoring-4.9" name="Create AWS Config configuration change alerts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
 to identify suspicious API activity. One such activity that should be monitored is AWS Config
 changes. AWS config tracks configuration changes within the environment and is a useful change
 management tool. Therefore alerting on config changes ensures the continued visibility of AWS
 configuration items.&lt;/p&gt;



 &lt;b&gt;Remediation:&lt;/b&gt;


 * Create a metric filter that checks for AWS Config changes:





 aws logs put-metric-filter







 &amp;#8212;log-group-name &lt;group&gt;


 &amp;#8212;filter-name &lt;name&gt;


 &amp;#8212;metric- transformations &lt;value&gt;


 &amp;#8212;filter-pattern &amp;#8216;{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
 (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
 tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}&amp;#8217;






 * Create an SNS topic for notifications: aws sns create-topic &amp;#8212;name &lt;topic_name&gt;
 * Create an SNS subscription to the topic created above: aws sns subscribe &amp;#8212;topic-arn
 &lt;topic_arn&gt; &amp;#8212;protocol email &amp;#8212;notification-endpoint &lt;email@example.com&gt;
 * Create an alarm based on the above steps:





 aws cloudwatch put-metric-alarm







 &amp;#8212;alarm-name &lt;value&gt;


 &amp;#8212;metric-name &lt;metric_filter_name&gt;


 &amp;#8212;statistic Sum


 &amp;#8212;period 300


 &amp;#8212;threshold 1


 &amp;#8212;comparison-operator GreaterThanOrEqualToThreshold


 &amp;#8212;evaluation-periods 1


 &amp;#8212;namespace &lt;CloudTrailMetrics&gt;


 &amp;#8212;alarm-actions &lt;topic_arn&gt;












 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="3.9" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ul&gt;
		&lt;li&gt;Identify the log group name: aws cloudtrail describe-trails
 * Note the &lt;group&gt; value associated with CloudWatchLogsLogGroupArn.
 * Get a list of all associated metric filters for this &lt;group&gt;: aws
 logs describe-metric-filters &amp;#8212;log-group-name &amp;#8216;&lt;group&gt;&amp;#8217;
 * Ensure the output contains the following:&lt;/li&gt;
	&lt;/ul&gt;



 &amp;#8216;filterPattern&amp;#8217;: &amp;#8216;{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
 (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
 tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}&amp;#8217;



 * Note the metricName value associated with the filterPattern found in step 4.
 * Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
 aws cloudwatch describe-alarms &amp;#8212;query &amp;#8216;MetricAlarms[?MetricName==`&lt;metricName&gt;`]&amp;#8217;
 * Note the AlarmActions value &amp;#8211; this will provide the SNS topic ARN value.
 * Ensure there is at least one subscriber to the SNS topic: aws sns
 list-subscriptions-by-topic &amp;#8212;topic-arn &lt;topic_arm&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Monitoring-4.2" name="Create root account usage alerts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
 to identify suspicious API activity. One such activity that should be monitored is usage of the
 root account. This account should not be used on a day to day basis due to its full unrestricted
 privilege therefore usage should be by exception. Monitoring this usage should capture any
 suspicious activity used on the account.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;


 # Identify the log group name: aws cloudtrail describe-trails
 # Note the &lt;group&gt; value associated with CloudWatchLogsLogGroupArn.
 # Get a list of all associated metric filters for this &lt;group&gt;: aws logs
 describe-metric-filters &amp;#8212;log-group-name &amp;#8216;&lt;group&gt;&amp;#8217;
 # Ensure the output contains the following: &amp;#8216;filterPattern&amp;#8217;: &amp;#8216;{
 $.userIdentity.type = \&amp;#8216;Root\&amp;#8217; &amp;amp;&amp;amp; $.userIdentity.invokedBy NOT
 EXISTS &amp;amp;&amp;amp; $.eventType != \&amp;#8216;AwsServiceEvent\&amp;#8217; } &amp;#8216;
 # Note the metricName value associated with the filterPattern found in step 4.
 # Get a list of CloudWatch alarms and filter on the metricName captured in step 4: aws
 cloudwatch describe-alarms &amp;#8212;query &amp;#8216;MetricAlarms[?MetricName==`&lt;metricName&gt;`]&amp;#8217;
 # Note the AlarmActions value &amp;#8211; this will provide the SNS topic ARN value.
 # Ensure there is at least one subscriber to the SNS topic: aws sns
 list-subscriptions-by-topic &amp;#8212;topic-arn &lt;topic_arm&gt;



 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="3.3" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Identify the log group name: aws cloudtrail describe-trails
 # Note the &lt;group&gt; value associated with CloudWatchLogsLogGroupArn.
 # Get a list of all associated metric filters for this &lt;group&gt;: aws
 logs describe-metric-filters &amp;#8212;log-group-name &amp;#8216;&lt;group&gt;&amp;#8217;
 # Ensure the output contains the following: &amp;#8216;filterPattern&amp;#8217;: &amp;#8216;{
 $.userIdentity.type = \&amp;#8216;Root\&amp;#8217; &amp;amp;&amp;amp; $.userIdentity.invokedBy
 NOT EXISTS &amp;amp;&amp;amp; $.eventType != \&amp;#8216;AwsServiceEvent\&amp;#8217; } &amp;#8216;
 # Note the metricName value associated with the filterPattern found in step 4.
 # Get a list of CloudWatch alarms and filter on the metricName captured in step 4:aws
 cloudwatch describe-alarms &amp;#8212;query &amp;#8216;MetricAlarms[?MetricName==`&lt;metricName&gt;`]&amp;#8217;
 # Note the AlarmActions value &amp;#8211; this will provide the SNS topic ARN value.
 # Ensure there is at least one subscriber to the SNS topic: aws sns
 list-subscriptions-by-topic &amp;#8212;topic-arn &lt;topic_arm&gt;&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:19">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Monitoring-4.3" name="Create management console login alerts when MFA is not used" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
 to identify suspicious API activity. One such activity that should be monitored is login on the
 console without MFA. Since logging on at the console should be restricted to only those users
 with an active MFA this alert will highlight those with password only access. This helps to
 capture weaker login procedures (password only) as they occur.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;


 # Create a metric filter that checks for console login without MFA: aws logs
 put-metric-filter &amp;#8212;log-group-name &lt;cloudwatch-logs-group&gt; &amp;#8212;filter-name &lt;name&gt;
 &amp;#8212;metric- transformations &lt;value&gt; &amp;#8212;filter-pattern &amp;#8216;{
 $.userIdentity.sessionContext.attributes.mfaAuthenticated != &amp;#8216;true&amp;#8217; }&amp;#8217;
 # Create an SNS topic for notifications: aws sns create-topic &amp;#8212;name &lt;topic_name&gt;
 # Create an SNS subscription to the topic created above: aws sns subscribe &amp;#8212;topic-arn
 &lt;topic_arn&gt; &amp;#8212;protocol email &amp;#8212;notification-endpoint &lt;email@example.com&gt;
 # Create an alarm based on the above steps: aws cloudwatch put-metric-alarm &amp;#8212;alarm-name
 &lt;value&gt; &amp;#8212;metric-name &lt;metric_filter_name&gt; &amp;#8212;statistic Sum &amp;#8212;period
 300 &amp;#8212;threshold 1 &amp;#8212;comparison-operator GreaterThanOrEqualToThreshold &amp;#8212;evaluation-periods 1
 &amp;#8212;namespace &lt;CloudTrailMetrics&gt; &amp;#8212;alarm-actions &lt;topic_arn&gt;
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="3.2" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Identify the log group name: aws cloudtrail describe-trails
 # Note the &lt;group&gt; value associated with CloudWatchLogsLogGroupArn
 # Get a list of all associated metric filters for this &lt;group&gt;:
 aws logs describe-metric-filters &amp;#8212;log-group-name &amp;#8216;&lt;group&gt;&amp;#8217;
 # Ensure the output contains the following:&amp;#8216;filterPattern&amp;#8217;:
 &amp;#8216;{ $.userIdentity.sessionContext.attributes.mfaAuthenticated != &amp;#8216;true&amp;#8217;
 }&amp;#8217;
 # Note the metricName value associated with the filterPattern found in step 4.
 # Get a list of CloudWatch alarms and filter on the metricName captured in step 4:aws
 cloudwatch describe-alarms &amp;#8212;query &amp;#8216;MetricAlarms[?MetricName==`&lt;metricName&gt;`]&amp;#8217;
 # Note the AlarmActions value &amp;#8211; this will provide the SNS topic ARN value.
 # Ensure there is at least one subscriber to the SNS topic: aws sns
 list-subscriptions-by-topic &amp;#8212;topic-arn &lt;topic_arm&gt;&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Monitoring-4.7" name="Create KMS CMK Deletion alerts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
 to identify suspicious API activity. One such activity that should be monitored is KMS CMK
 deletions or deactivation. KMS CMK can be used as the master keys for encrypting data and these
 keys are stored within AWS. However if these keys are disabled or deactivated then the data that
 was encrypted with them cannot be accessed. Therefore any scheduled deletions or deactivation of
 keys should be monitored.&lt;/p&gt;




 &lt;b&gt;Remediation:&lt;/b&gt;


 # Create a metric filter that checks for KMS CMK disables or deletions: aws logs
 put-metric-filter &amp;#8212;log-group-name &lt;group&gt; &amp;#8212;filter-name &lt;name&gt;
 &amp;#8212;metric- transformations &lt;value&gt; &amp;#8212;filter-pattern &amp;#8216;{($.eventSource =
 kms.amazonaws.com) &amp;amp;&amp;amp;
 (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))}&amp;#8217;
 # Create an SNS topic for notifications: aws sns create-topic &amp;#8212;name &lt;topic_name&gt;
 # Create an SNS subscription to the topic created above: aws sns subscribe &amp;#8212;topic-arn
 &lt;topic_arn&gt; &amp;#8212;protocol email &amp;#8212;notification-endpoint &lt;email@example.com&gt;
 # Create an alarm based on the above steps: aws cloudwatch put-metric-alarm &amp;#8212;alarm-name
 &lt;value&gt; &amp;#8212;metric-name &lt;metric_filter_name&gt; &amp;#8212;statistic Sum &amp;#8212;period
 300 &amp;#8212;threshold 1 &amp;#8212;comparison-operator GreaterThanOrEqualToThreshold &amp;#8212;evaluation-periods 1
 &amp;#8212;namespace &lt;CloudTrailMetrics&gt; &amp;#8212;alarm-actions &lt;topic_arn&gt;
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="3.7" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Identify the log group name: aws cloudtrail describe-trails
 # Note the &lt;group&gt; value associated with CloudWatchLogsLogGroupArn.
 # Get a list of all associated metric filters for this &lt;group&gt;: aws
 logs describe-metric-filters &amp;#8212;log-group-name &amp;#8216;&lt;group&gt;&amp;#8217;
 # Ensure the output contains the following:&amp;#8216;filterPattern&amp;#8217;:
 &amp;#8216;{($.eventSource = kms.amazonaws.com) &amp;amp;&amp;amp;
 (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))} }&amp;#8217;
 # Note the metricName value associated with the filterPattern found in step 4.
 # Get a list of CloudWatch alarms and filter on the metricName captured in step 4:aws
 cloudwatch describe-alarms &amp;#8212;query &amp;#8216;MetricAlarms[?MetricName==`&lt;metricName&gt;`]&amp;#8217;
 # Note the AlarmActions value &amp;#8211; this will provide the SNS topic ARN value.
 # Ensure there is at least one subscriber to the SNS topic: aws sns
 list-subscriptions-by-topic &amp;#8212;topic-arn &lt;topic_arm&gt;&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Monitoring-4.6" name="Create IAM Policy change alerts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
 to identify suspicious API activity. One such activity that should be monitored is management
 IAM policy changes. IAM manages authorization and authentication controls with AWS and
 therefore it is vital that unauthorised changes are detected. Enabling monitoring of these
 changes ensures that these policies remain intact and as desired.&lt;/p&gt;


 &lt;b&gt;Remediation:&lt;/b&gt;



 # Create a metric filter that checks for IAM policy changes: aws logs put-metric-filter
 &amp;#8212;log-group-name &lt;group&gt; &amp;#8212;filter-name &lt;name&gt; &amp;#8212;metric-
 transformations &lt;value&gt; &amp;#8212;filter-pattern
 &amp;#8216;{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=Delete
 UserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=P
 utUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=Cr
 eatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)|
 |($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUs
 erPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}&amp;#8217;
 # Create an SNS topic for notifications: aws sns create-topic &amp;#8212;name &lt;topic_name&gt;
 # Create an SNS subscription to the topic created above:aws sns subscribe &amp;#8212;topic-arn
 &lt;topic_arn&gt; &amp;#8212;protocol email &amp;#8212;notification-endpoint &lt;email@example.com&gt;
 # Create an alarm based on the above steps: aws cloudwatch put-metric-alarm &amp;#8212;alarm-name
 &lt;value&gt; &amp;#8212;metric-name &lt;metric_filter_name&gt; &amp;#8212;statistic Sum &amp;#8212;period
 300 &amp;#8212;threshold 1 &amp;#8212;comparison-operator GreaterThanOrEqualToThreshold &amp;#8212;evaluation-periods 1
 &amp;#8212;namespace &lt;CloudTrailMetrics&gt; &amp;#8212;alarm-actions &lt;topic_arn&gt;
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="3.4" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Identify the log group name: aws cloudtrail describe-trails
 # Note the &lt;group&gt; value associated with CloudWatchLogsLogGroupArn.
 # Get a list of all associated metric filters for this &lt;group&gt;: aws
 logs describe-metric-filters &amp;#8212;log-group-name &amp;#8216;&lt;group&gt;&amp;#8217;
 # Ensure the output contains the following: &amp;#8216;filterPattern&amp;#8217;: &amp;#8216;{($.eventSource
 = kms.amazonaws.com) &amp;amp;&amp;amp;
 (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))} }&amp;#8217;
 # Note the metricName value associated with the filterPattern found in step 4.
 # Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
 aws cloudwatch describe-alarms &amp;#8212;query &amp;#8216;MetricAlarms[?MetricName==`&lt;metricName&gt;`]&amp;#8217;
 # Note the AlarmActions value &amp;#8211; this will provide the SNS topic ARN value.
 # Ensure there is at least one subscriber to the SNS topic: aws sns
 list-subscriptions-by-topic &amp;#8212;topic-arn &lt;topic_arm&gt;&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Monitoring-4.8" name="Create s3 bucket policy change alerts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
 to identify suspicious API activity. One such activity that should be monitored is S3 bucket
 policy changes. S3 bucket policies are a resource based policy that provide authorizations on S3
 buckets.&lt;/p&gt;




 Making sure that their integrity remains intact is vital in ensuring the data within the S3
 bucket remains secure and authorizations intact. Therefore s3 bucket policy changes should be
 alerted upon




 &lt;b&gt;Remediation:&lt;/b&gt;


 * Create a metric filter that checks for S3 Bucket policy changes:





 aws logs put-metric-filter &amp;#8212;log-group-name &lt;group&gt; &amp;#8212;filter-name &lt;value&gt;
 &amp;#8212;metric- transformations &lt;value&gt; &amp;#8212;filter-pattern &amp;#8216;{ ($.eventSource =
 s3.amazonaws.com) &amp;amp;&amp;amp; (($.eventName = PutBucketAcl) || ($.eventName =
 PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) ||
 ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName =
 DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName =
 DeleteBucketReplication)) }&amp;#8217;





 * Create an SNS topic for notifications:





 aws sns create-topic &amp;#8212;name &lt;topic_name&gt;





 * Create an SNS subscription to the topic created above





 aws sns subscribe &amp;#8212;topic-arn &lt;topic_arn&gt; &amp;#8212;protocol email &amp;#8212;notification-endpoint
 &lt;email@example.com&gt;





 * Create an alarm based on the above steps:





 aws cloudwatch put-metric-alarm &amp;#8212;alarm-name &lt;value&gt; &amp;#8212;metric-name &lt;metric_filter_name&gt;
 &amp;#8212;statistic Sum &amp;#8212;period 300 &amp;#8212;threshold 1 &amp;#8212;comparison-operator GreaterThanOrEqualToThreshold
 &amp;#8212;evaluation-periods 1 &amp;#8212;namespace &lt;CloudTrailMetrics&gt; &amp;#8212;alarm-actions &lt;topic_arn&gt;









 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="3.8" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Identify the log group name: aws cloudtrail describe-trails
 # Note the &lt;group&gt; value associated with CloudWatchLogsLogGroupArn.
 # Get a list of all associated metric filters for this &lt;group&gt;:
 aws logs describe-metric-filters &amp;#8212;log-group-name &amp;#8216;&lt;group&gt;&amp;#8217;
 # Ensure the output contains the following: &amp;#8216;filterPattern&amp;#8217;: &amp;#8216;{
 ($.eventSource = s3.amazonaws.com) &amp;amp;&amp;amp; (($.eventName = PutBucketAcl) ||
 ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName =
 PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName =
 DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName =
 DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }&amp;#8217;
 # Note the metricName value associated with the filterPattern found in step 4.
 # Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
 aws cloudwatch describe-alarms &amp;#8212;query &amp;#8216;MetricAlarms[?MetricName==`&lt;metricName&gt;`]&amp;#8217;
 # Note the AlarmActions value &amp;#8211; this will provide the SNS topic ARN value.
 # Ensure there is at least one subscriber to the SNS topic: aws sns
 list-subscriptions-by-topic &amp;#8212;topic-arn &lt;topic_arm&gt;&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Monitoring-4.10" name="Create security group change alerts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
 to identify suspicious API activity. One such activity that should be monitored is security
 group changes. Security groups are analogous to firewalls and therefore protect inbound and
 outbound access to &amp;amp; from AWS resources such as ec2 instances and RDS databases (amongst
 other things. Therefore alerting on changes to security groups helps ensure that the resources
 protected by them are not exposed.&lt;/p&gt;



 &lt;b&gt;Remediation:&lt;/b&gt;


 # Create a metric filter that checks for security group changes: aws logs
 put-metric-filter &amp;#8212;log-group-name &lt;group&gt; &amp;#8212;filter-name &lt;name&gt;
 &amp;#8212;metric- transformations &lt;value&gt; &amp;#8212;filter-pattern &amp;#8216;{ ($.eventName =
 AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName =
 RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName =
 CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup)}&amp;#8217;
 # Create an SNS topic for notifications: aws sns create-topic &amp;#8212;name &lt;topic_name&gt;
 # Create an SNS subscription to the topic created above: aws sns subscribe &amp;#8212;topic-arn
 &lt;topic_arn&gt; &amp;#8212;protocol email &amp;#8212;notification-endpoint &lt;email@example.com&gt;
 # Create an alarm based on the above steps: aws cloudwatch put-metric-alarm &amp;#8212;alarm-name
 &lt;value&gt; &amp;#8212;metric-name &lt;metric_filter_name&gt; &amp;#8212;statistic Sum &amp;#8212;period
 300 &amp;#8212;threshold 1 &amp;#8212;comparison-operator GreaterThanOrEqualToThreshold &amp;#8212;evaluation-periods 1
 &amp;#8212;namespace &lt;CloudTrailMetrics&gt; &amp;#8212;alarm-actions &lt;topic_arn&gt;
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="3.10" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Identify the log group name: aws cloudtrail describe-trails
 # Note the &lt;group&gt; value associated with CloudWatchLogsLogGroupArn.
 # Get a list of all associated metric filters for this &lt;group&gt;: aws
 logs describe-metric-filters &amp;#8212;log-group-name &amp;#8216;&lt;group&gt;&amp;#8217;
 # Ensure the output contains the following: &amp;#8216;filterPattern&amp;#8217;: &amp;#8216;{
 ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName =
 AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName
 = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName =
 DeleteSecurityGroup)}&amp;#8217;
 # Note the metricName value associated with the filterPattern found in step 4.
 # Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
 aws cloudwatch describe-alarms &amp;#8212;query &amp;#8216;MetricAlarms[?MetricName==`&lt;metricName&gt;`]&amp;#8217;
 # Note the AlarmActions value &amp;#8211; this will provide the SNS topic ARN value.
 # Ensure there is at least one subscriber to the SNS topic: aws sns
 list-subscriptions-by-topic &amp;#8212;topic-arn &lt;topic_arm&gt;&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Monitoring-4.11" name="Create VPC NACL change alerts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
 to identify suspicious API activity. One such activity that should be monitored is VPC NACL
 changes. Network Access Control Lists (NACLS) control inbound and outbound access to &amp;amp;
 from AWS subnets and work like packet filters to protect the network. Therefore alerting on
 changes to NACLS helps ensure that the subnets protected by them are not exposed.&lt;/p&gt;



 &lt;b&gt;Remediation:&lt;/b&gt;


 # Create a metric filter that checks for NACL changes: aws logs put-metric-filter
 &amp;#8212;log-group-name &lt;group&gt; &amp;#8212;filter-name &lt;name&gt; &amp;#8212;metric-
 transformations &lt;value&gt; &amp;#8212;filter-pattern &amp;#8216;{ ($.eventName = CreateNetworkAcl) ||
 ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName =
 DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName =
 ReplaceNetworkAclAssociation) }&amp;#8217;
 # Create an SNS topic for notifications: aws sns create-topic &amp;#8212;name &lt;topic_name&gt;
 # Create an SNS subscription to the topic created above: aws sns subscribe &amp;#8212;topic-arn
 &lt;topic_arn&gt; &amp;#8212;protocol email &amp;#8212;notification-endpoint &lt;email@example.com&gt;
 # Create an alarm based on the above steps: aws cloudwatch put-metric-alarm &amp;#8212;alarm-name
 &lt;value&gt; &amp;#8212;metric-name &lt;metric_filter_name&gt; &amp;#8212;statistic Sum &amp;#8212;period
 300 &amp;#8212;threshold 1 &amp;#8212;comparison-operator GreaterThanOrEqualToThreshold &amp;#8212;evaluation-periods 1
 &amp;#8212;namespace &lt;CloudTrailMetrics&gt; &amp;#8212;alarm-actions &lt;topic_arn&gt;
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="3.11" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                        <standard ref="3.14" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Identify the log group name: aws cloudtrail describe-trails
 # Note the &lt;group&gt; value associated with CloudWatchLogsLogGroupArn.
 # Get a list of all associated metric filters for this &lt;group&gt;: aws
 logs describe-metric-filters &amp;#8212;log-group-name &amp;#8216;&lt;group&gt;&amp;#8217;
 # Ensure the output contains the following:&amp;#8216;filterPattern&amp;#8217;:
 &amp;#8216;{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) ||
 ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName =
 ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }&amp;#8217;
 # Note the metricName value associated with the filterPattern found in step 4.
 # Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
 aws cloudwatch describe-alarms &amp;#8212;query &amp;#8216;MetricAlarms[?MetricName==`&lt;metricName&gt;`]&amp;#8217;
 # Note the AlarmActions value &amp;#8211; this will provide the SNS topic ARN value.
 # Ensure there is at least one subscriber to the SNS topic: aws sns
 list-subscriptions-by-topic &amp;#8212;topic-arn &lt;topic_arm&gt;&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Monitoring-4.12" name="Create VPC route table change alerts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
 to identify suspicious API activity. One such activity that should be monitored is VPC route
 table changes. VPC route tables provide a means of routing network traffic between subnets and
 via gateways and ensures traffic flows via the correct path. Therefore alerting on changes to
 route tables ensuring traffic continues to flow as expected.&lt;/p&gt;



 &lt;b&gt;Remediation:&lt;/b&gt;

 # Create a metric filter that checks for VPC route table changes: aws logs
 put-metric-filter &amp;#8212;log-group-name &lt;group&gt; &amp;#8212;filter-name &lt;name&gt;
 &amp;#8212;metric- transformations &lt;value&gt; &amp;#8212;filter-pattern &amp;#8216;{ ($.eventName = CreateRoute)
 || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName =
 ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute)
 || ($.eventName = DisassociateRouteTable) }&amp;#8217;
 # Create an SNS topic for notifications: aws sns create-topic &amp;#8212;name &lt;topic_name&gt;
 # Create an SNS subscription to the topic created above: aws sns subscribe &amp;#8212;topic-arn
 &lt;topic_arn&gt; &amp;#8212;protocol email &amp;#8212;notification-endpoint &lt;email@example.com&gt;
 # Create an alarm based on the above steps: aws cloudwatch put-metric-alarm &amp;#8212;alarm-name
 &lt;value&gt; &amp;#8212;metric-name &lt;metric_filter_name&gt; &amp;#8212;statistic Sum &amp;#8212;period
 300 &amp;#8212;threshold 1 &amp;#8212;comparison-operator GreaterThanOrEqualToThreshold &amp;#8212;evaluation-periods 1
 &amp;#8212;namespace &lt;CloudTrailMetrics&gt; &amp;#8212;alarm-actions &lt;topic_arn&gt;
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="3.13" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Identify the log group name: aws cloudtrail describe-trails
 # Note the &lt;group&gt; value associated with CloudWatchLogsLogGroupArn.
 # Get a list of all associated metric filters for this &lt;group&gt;: aws
 logs describe-metric-filters &amp;#8212;log-group-name &amp;#8216;&lt;group&gt;&amp;#8217;
 # Ensure the output contains the following:&amp;#8216;filterPattern&amp;#8217;:
 &amp;#8216;{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName
 = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName =
 DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }&amp;#8217;
 # Note the metricName value associated with the filterPattern found in step 4.
 # Get a list of CloudWatch alarms and filter on the metricName captured in step 4:aws
 cloudwatch describe-alarms &amp;#8212;query &amp;#8216;MetricAlarms[?MetricName==`&lt;metricName&gt;`]&amp;#8217;
 # Note the AlarmActions value &amp;#8211; this will provide the SNS topic ARN value.
 # Ensure there is at least one subscriber to the SNS topic: aws sns
 list-subscriptions-by-topic &amp;#8212;topic-arn &lt;topic_arm&gt;&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Monitoring-4.13" name="Create VPC gateway change alerts" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
 to identify suspicious API activity. One such activity that should be monitored is VPC gateway
 changes. VPC gateways are used as a means of sending traffic outside of a VPC (ie to the
 internet) and are vital in ensuring traffic flows to the correct destination. Therefore alerting
 on changes to VPC gateways ensuring traffic continues to flow as expected via the correct
 gateway.&lt;/p&gt;



 &lt;b&gt;Remediation:&lt;/b&gt;



 # Create a metric filter that checks for VPC gateway changes: aws logs put-metric-filter
 &amp;#8212;log-group-name &lt;group&gt; &amp;#8212;filter-name &lt;name&gt; &amp;#8212;metric-
 transformations &lt;value&gt; &amp;#8212;filter-pattern &amp;#8216;{ ($.eventName = CreateCustomerGateway)
 || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) ||
 ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName =
 DetachInternetGateway) }&amp;#8217;
 # Create an SNS topic for notifications: aws sns create-topic &amp;#8212;name &lt;topic_name&gt;
 # Create an SNS subscription to the topic created above: aws sns subscribe &amp;#8212;topic-arn
 &lt;topic_arn&gt; &amp;#8212;protocol email &amp;#8212;notification-endpoint &lt;email@example.com&gt;
 # Create an alarm based on the above steps: aws cloudwatch put-metric-alarm &amp;#8212;alarm-name
 &lt;value&gt; &amp;#8212;metric-name &lt;metric_filter_name&gt; &amp;#8212;statistic Sum &amp;#8212;period
 300 &amp;#8212;threshold 1 &amp;#8212;comparison-operator GreaterThanOrEqualToThreshold &amp;#8212;evaluation-periods 1
 &amp;#8212;namespace &lt;CloudTrailMetrics&gt; &amp;#8212;alarm-actions &lt;topic_arn&gt;



 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="3.12" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Identify the log group name: aws cloudtrail describe-trails
 # Note the &lt;group&gt; value associated with CloudWatchLogsLogGroupArn
 # Get a list of all associated metric filters for this &lt;group&gt;: aws
 logs describe-metric-filters &amp;#8212;log-group-name &amp;#8216;&lt;group&gt;&amp;#8217;
 # Ensure the output contains the following: &amp;#8216;filterPattern&amp;#8217;: &amp;#8216;{
 ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) ||
 ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) ||
 ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }&amp;#8217;
 # Note the metricName value associated with the filterPattern found in step 4.
 # Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
 aws cloudwatch describe-alarms &amp;#8212;query &amp;#8216;MetricAlarms[?MetricName==`&lt;metricName&gt;`]&amp;#8217;
 # Note the AlarmActions value &amp;#8211; this will provide the SNS topic ARN value.
 # Ensure there is at least one subscriber to the SNS topic: aws sns
 list-subscriptions-by-topic &amp;#8212;topic-arn &lt;topic_arm&gt;&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="CLOUDWATCH METRIC ALERTS" name="Cloudwatch Metric Alerts" desc="" library="">
                    <threats>
                        <threat ref="UNAUTHORIZED_ACCESS_SYSTEMS_AWS" name="Attackers access to the systems without being detected" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers gain access to the systems and they are not detected and the changes of the
 attackers could not be detected and audited.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="Hydras-AWS-Monitoring-4.5" mitigation="17"/>
                                <control ref="Hydras-AWS-Monitoring-4.1" mitigation="17"/>
                                <control ref="Hydras-AWS-Monitoring-4.4" mitigation="17"/>
                                <control ref="Hydras-AWS-Monitoring-4.9" mitigation="17"/>
                                <control ref="Hydras-AWS-Monitoring-4.2" mitigation="16"/>
                                <control ref="Hydras-AWS-Monitoring-4.3" mitigation="16"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-Monitoring-4.5">
                                    <controls>
                                        <control ref="Hydras-AWS-Monitoring-4.5" mitigation="17"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-Monitoring-4.4">
                                    <controls>
                                        <control ref="Hydras-AWS-Monitoring-4.1" mitigation="17"/>
                                        <control ref="Hydras-AWS-Monitoring-4.4" mitigation="17"/>
                                        <control ref="Hydras-AWS-Monitoring-4.9" mitigation="17"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-Monitoring-4.2">
                                    <controls>
                                        <control ref="Hydras-AWS-Monitoring-4.2" mitigation="16"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-Monitoring-4.3">
                                    <controls>
                                        <control ref="Hydras-AWS-Monitoring-4.3" mitigation="16"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="UNAUTHORIZED-ACCESS-SECURITY-SYSTEMS-AWS" name="Attackers gain undetected access to the security system configurations" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain undetected access to the security configurations and the changes of
 the attackers could not be detected and audited.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="Hydras-AWS-Monitoring-4.7" mitigation="25"/>
                                <control ref="Hydras-AWS-Monitoring-4.6" mitigation="25"/>
                                <control ref="Hydras-AWS-Monitoring-4.8" mitigation="25"/>
                                <control ref="Hydras-AWS-Monitoring-4.10" mitigation="25"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-Monitoring-4.7">
                                    <controls>
                                        <control ref="Hydras-AWS-Monitoring-4.7" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-Monitoring-4.4">
                                    <controls>
                                        <control ref="Hydras-AWS-Monitoring-4.6" mitigation="25"/>
                                        <control ref="Hydras-AWS-Monitoring-4.8" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-Monitoring-4.10">
                                    <controls>
                                        <control ref="Hydras-AWS-Monitoring-4.10" mitigation="25"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="UNAUTHORIZED-ACCESS-NETWORK-AWS" name="Sensitive data is compromised through undetected network access" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers gain undetected access to the network systems and the changes of the attackers
 could not be audited or detected.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="Hydras-AWS-Monitoring-4.11" mitigation="34"/>
                                <control ref="Hydras-AWS-Monitoring-4.12" mitigation="33"/>
                                <control ref="Hydras-AWS-Monitoring-4.13" mitigation="33"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-Monitoring-4.12">
                                    <controls>
                                        <control ref="Hydras-AWS-Monitoring-4.11" mitigation="34"/>
                                        <control ref="Hydras-AWS-Monitoring-4.12" mitigation="33"/>
                                        <control ref="Hydras-AWS-Monitoring-4.13" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="HYDRAS-AWS-NET" name="AWS Networking" desc="" tags="" position="6" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmentated." state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Resources in the same VNet are compromised because when one of them is attacked and the
 attackers gain access, they also gain access to all resources.</desc>
                </weakness>
                <weakness ref="AWS-Network-5.1" name="Non-identify the resources" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Resources are not registered in the safety net systems, and there are more unidentified
 resources. This can be a problem because these unidentified resources can have unknown
 weaknesses.</desc>
                </weakness>
                <weakness ref="AWS-Network-5.8" name="The access to the routing tables are not restricted" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Being highly selective in peering routing tables is a very effective way of minimizing the
 impact of breach as resources outside of these routes are inaccessible to the peered VPC.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="Hydras-AWS-EC2-6.1" name="Launch EC2 instances into a VPC" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;AWS virtual private cloud is the de-facto standard for networking AWS as it provides
 additional security controls such as Security Groups, Network Access Control Lists (NACL&amp;#8217;s) and
 routing. However the use of VPC is not compulsory and resources such as EC2 can be created
 outside of VPC (usingEC2 Classic). It is the recommendation to make all resources a member of
 a VPC if possible to benefit from the increased security controls they offer and reduce undue
 network exposure.&lt;/p&gt;



 &lt;b&gt;Remediation:&lt;/b&gt;


 # Login to the AWS Management Console.
 # Select EC2 from the services menu.
 # Select &amp;#8216;Launch Instance&amp;#8217;.
 # Complete the wizard until step 3 at which point ensure a VPC ID is selected for the
 &amp;#8216;Network&amp;#8217; option, choose an appropriate &amp;#8216;Subnet&amp;#8217; and &amp;#8216;Auto-assign
 Public IP&amp;#8217; option.
 # Complete the wizard to launch the instance.
 NB: If you want to migrate an already running instance you will need to convert the
 image into an AMI and then launch a new instance using the AMI and placing in a VPC as per the
 steps above

 Content provided by &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Login to the AWS Management Console.
 # Select EC2 from the services menu.
 # Select &amp;#8216;Instances&amp;#8217; from the left hand menu.
 # For each instance in the list:&lt;/li&gt;
	&lt;/ol&gt;

 * select the instance
 * in the preview pane confirm the instance has a &amp;#8216;VPC ID&amp;#8217;. If a
 hyphen &amp;#8216;-&amp;#8217; is shown then your instance is running in EC2-Classic mode.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Network-5.2" name="Seperate VPC into zones  by function" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;AWS virtual private cloud is the de-facto standard for networking AWS as it provides
 additional security controls such as Security Groups, Network Access Control Lists (NACL&amp;#8217;s) and
 routing. It is recommended that resources be placed into VPC&amp;#8217;s according to use case (ie
 dev/test/prod) and that appropriate security levels be set on these VPC&amp;#8217;s. Placing such
 resources accordingly ensures that a resource of a higher security level is not exposed by the
 security settings of a lower labeled VPC.&lt;/p&gt;



 &lt;b&gt;Remediation:&lt;/b&gt;


 # Identify the resources that exist within an incorrect VPC.
 # Migrate or move them to the correct VPC.



 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Ensure that each AWS resource added to a VPC is isolated according to its designation (ie
 test/dev/prod).&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Network-5.1" name="Use AWS VPC for networking" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;AWS virtual private cloud is the de-facto standard for networking AWS as it provides
 additional security controls such as Security Groups, Network Access Control Lists (NACL&amp;#8217;s) and
 routing.&lt;/p&gt;




 However the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC
 (usingEC2 Classic). It is the recommendation to make all resources a member of a VPC if
 possible to benefit from the increased security controls they offer and reduce undue network
 exposure.



 **Remediation:**Move or migrate the resources to a VPC.


 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Ensure that each AWS resource you own that is able to exist in a VPC does so.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-Network-5.8" name='Ensure routing tables for VPC peering are "least access"' platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Once a VPC peering connection is established, routing tables must be updated to establish any
 connections between the peered VPCs. These routes can be as specific as desired &amp;#8211; even peering a
 VPC to only a single host on the other side of the connection.&lt;/p&gt;





 ** Rationale: **


 Being highly selective in peering routing tables is a very effective way of minimizing the
 impact of breach as resources outside of these routes are inaccessible to the peered VPC.





 ** Remediation: **


 Remove and add route table entries to ensure that the least number of subnets or hosts as is
 required to accomplish the purpose for peering are routable.





 Via CLI:



 * For each &lt;route_table_id&gt; containing routes non compliant with your
 routing policy (which grants more than desired &amp;#8216;&amp;#8216;least access&amp;#8217;&amp;#8216;),
 delete the non compliant route:





 aws ec2 delete-route &amp;#8212;route-table-id &lt;route_table_id&gt; &amp;#8212;destination-cidr-block
 &lt;non_compliant_destination_CIDR&gt;








 * Create a new compliant route:





 aws ec2 create-route &amp;#8212;route-table-id &lt;route_table_id&gt; &amp;#8212;destination-cidr-block
 &lt;compliant_destination_CIDR&gt; &amp;#8212;vpc-peering-connection-id &lt;peering_connection_id&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Configurations with Specific Routes" url="https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/peering-configurations-partial-access.html"/>
                    </references>
                    <standards>
                        <standard ref="4.4" supportedStandardRef="CIS Amazon Web Services Foundations Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;&lt;span style=" , Arial;"&gt;Review routing tables of peered VPCs for whether they route
 all subnets of each VPC and whether that is necessary to accomplish the intended purposes
 for peering the VPCs.**Via CLI:**List all
 the route tables from a VPC and check if &amp;#8216;GatewayId&amp;#8217; is pointing to a
 &lt;peering_connection_id&gt; (e.g. pcx-1a2b3c4d) and if &amp;#8216;DestinationCidrBlock&amp;#8217;
 is as specific as desired.&lt;/p&gt;

 &lt;span style=" , Arial;"&gt;aws ec2 describe-route-tables &amp;#8212;filter &amp;#8216;Name=vpc-id,Values=&lt;vpc_id&gt;&amp;#8217;
 &amp;#8212;query &amp;#8216;RouteTables[*].{RouteTableId:RouteTableId, VpcId:VpcId, Routes:Routes,
 AssociatedSubnets:Associations[*].SubnetId}&amp;#8217;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="VIRTUAL PRIVATE CLOUD (VPC) NETWORK" name="Virtual Private Cloud (VPC) Network" desc="" library="">
                    <threats>
                        <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized connection to the resources" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain an unauthorized connection to the resources through
 misconfigured ports or security network configurations.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="Hydras-AWS-EC2-6.1" mitigation="25"/>
                                <control ref="Hydras-AWS-Network-5.2" mitigation="25"/>
                                <control ref="Hydras-AWS-Network-5.1" mitigation="25"/>
                                <control ref="Hydras-AWS-Network-5.8" mitigation="25"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-Network-5.2">
                                    <controls>
                                        <control ref="Hydras-AWS-EC2-6.1" mitigation="25"/>
                                        <control ref="Hydras-AWS-Network-5.2" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-Network-5.1">
                                    <controls>
                                        <control ref="Hydras-AWS-Network-5.1" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-Network-5.8">
                                    <controls>
                                        <control ref="Hydras-AWS-Network-5.8" mitigation="25"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="HYDRAS-AWS-RDS" name="AWS RDS" desc="" tags="" position="7" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="AWS-EC2-6.2" name="The instances are not patched" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The instances are not patched with the last updates for the correspondent Operative System
 (OS), and the instances have got weaknesses which are solved in the last updates.</desc>
                </weakness>
                <weakness ref="AWS-IAM-2.7" name="The credentials for the groups and roles are not configured" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The credentials for the groups and roles are not correctly configured and there are user
 accounts with more privileges than the necessary.</desc>
                </weakness>
                <weakness ref="database-publically-accesible" name="Database is publically accesible" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Everyone can access the RDS database and obtain the data.</desc>
                </weakness>
                <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmentated." state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Resources in the same VNet are compromised because when one of them is attacked and the
 attackers gain access, they also gain access to all resources.</desc>
                </weakness>
                <weakness ref="no-access-control-onrds" name="Not access control on RDS databases" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>There are no access control mechanisms on the RDS database resources and any user can gain access
 to them and exfiltrate the data.</desc>
                </weakness>
                <weakness ref="no-notification-incident" name="No notification when an incident occurs" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>There are no notifications when a security incident occurs. Therefore, we do not know when an
 attacker gains access to our systems and/or security systems</desc>
                </weakness>
                <weakness ref="NOT_BACKUP_POLICIES" name="Not backup retention policies" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>There are no data backup retention policies.</desc>
                </weakness>
                <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Sensitive data is not encrypted and is exposed.</desc>
                </weakness>
                <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Sensitive data is not encrypted in transit with HTTPS or SSL, and this data is accessible
 whilst traversing the network.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="aws-tier-3.6" name="Enable Auto Minor Version Upgrade on RDS" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. &lt;br /&gt;
There are 6 database engines available for customers to run their database workloads on: &lt;/p&gt;

 * Amazon Aurora (MySQL Compatible) 
 * MySQL 
 * MariaDB 
 * Oracle 
 * Microsoft SQL Server 
 * PostgreSQL 

	&lt;p&gt;If the database engine used by your application supports it, ensure that the RDS Instances have Auto Minor Version Upgrade Enabled. &lt;br /&gt;
&lt;b&gt;Remediation:&lt;/b&gt; &lt;br /&gt;
Using the Amazon unified command line interface: &lt;/p&gt;


 * Modify each DB instance with auto-minor-version-upgrade set to False, and enable auto-minor-version-upgrade: 




 aws rds modify-db-instance &amp;#8212;db-instance-identifier &lt;your_db_instance&gt; &amp;#8212;auto-minor-version-upgrade</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: describe db instances" url="http://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
                        <reference name="Amazon docs: modify db instances" url="http://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
                    </references>
                    <standards>
                        <standard ref="3.6" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;



 * Check if your application DB instances have Auto Minor Version Upgrade enabled:





 aws rds describe-db-instances &amp;#8212;filters Name=tag:data_tier_tag,Values=data_tier_tag_value
 &amp;#8212;query &amp;#8216;DBInstances[*].{AutoMinorVersionUpgrade:AutoMinorVersionUpgrade,
 DBInstanceIdentifier:DBInstanceIdentifier}&amp;#8217;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-RDS-02" name="Assign to IAM roles the permissions for RDS instances" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The following AWS managed policies, which you can attach to users in your account, are
 specific to Amazon RDS:&lt;/p&gt;


 * &lt;b&gt;AmazonRDSReadOnlyAccess:&lt;/b&gt; Grants read-only access to all Amazon RDS
 resources for the root AWS account.
 * &lt;b&gt;AmazonRDSFullAccess:&lt;/b&gt; Grants full access to all Amazon RDS resources
 for the root AWS account.
 You can also create custom IAM policies that allow users to access the required
 Amazon RDS API actions and resources. You can attach these custom policies to the IAM users or
 groups that require those permissions.

 The permissions above shall be assigned to roles or groups:


 * The roles or groups only do calls to the API to get information, the
 AmazonRDSReadOnlyAccess permission shall be assigned.
 * The roles or groups who are responsible of managing the RDS instances shall be
 assigned the AmazonRDSFullAccess permission.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ul&gt;
		&lt;li&gt;Review the IAM roles and groups.
 * Check that all roles or groups have got the AmazonRDSReadOnlyAccess permission.
 * Check that only the appropriate personnel have got AmazonRDSFullAccess permissions
 to manage the RDS instances.&lt;/li&gt;
	&lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-6.30" name="Do not allow the  RDS database to be publically accessible" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. &lt;/p&gt;





 There are 6 database engines available for customer to run their database workloads on: 



 * Amazon Aurora (MySQL Compatible) 
 * MySQL 
 * MariaDB 
 * Oracle 
 * Microsoft SQL Server 
 * PostgreSQL 
 Customers can deploy RDS databases within a VPC through the configuration of: 



 * Subnet Group for RDS, this group will be used for deployment of single or Multi-AZ RDS instances. 
 * Network access through configuration of Security Groups for RDS 
 * Access from outside the VPC hosting the DB instance by enabling/disabling a Public IP address 






 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 



 * Modify each publicly accessible DB instance, and make it private: 







 aws rds modify-db-instance &amp;#8212;db-instance-identifier &lt;your_db_instance&gt; &amp;#8212;no-publicly-accessible</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: describe db instances" url="http://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
                        <reference name="Amazon docs: modify db instance" url="http://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
                    </references>
                    <standards>
                        <standard ref="6.30" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;



 * Check if your application DB instances are publicly available:





 aws rds describe-db-instances &amp;#8212;filters Name=tag:data_tier_tag,Values=data_tier_tag_value
 &amp;#8212;query &amp;#8216;DBInstances[*].{PubliclyAccessible:PubliclyAccessible,
 DBInstanceIdentifier:DBInstanceIdentifier}&amp;#8217;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-3.5" name="Enable Multi-AZ on RDS" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. &lt;/p&gt;





 There are 6 database engines available for customer to run their database workloads on: 



 * Amazon Aurora (MySQL Compatible) 
 * MySQL 
 * MariaDB 
 * Oracle 
 * Microsoft SQL Server 
 * PostgreSQL 







 Provides AWS managed high availability of the Database Tier across 2 availability zones within a region through asynchronous replication at the data layer. 






 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 



 * Modify each no-multi-az DB instance, and make it Multi-AZ enabled: 







 aws rds modify-db-instance &amp;#8212;db-instance-identifier &lt;your_db_instance&gt; &amp;#8212;multi-az</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: describe db instances" url="http://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
                        <reference name="Amazon docs: modify db instances" url="http://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
                    </references>
                    <standards>
                        <standard ref="3.5" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;



 * Check if your application DB instances are Multi-AZ enabled:





 aws rds describe-db-instances &amp;#8212;filters Name=tag:data_tier_tag,Values=data_tier_tag_value
 &amp;#8212;query &amp;#8216;DBInstances[*].{MultiAZ:MultiAZ,
 DBInstanceIdentifier:DBInstanceIdentifier}&amp;#8217;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-6.34" name="Configure RDS database to leverage the Data Tier Security Group" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. &lt;/p&gt;





 There are 6 database engines available for customer to run their database workloads on: 



 * Amazon Aurora (MySQL Compatible) 
 * MySQL 
 * MariaDB 
 * Oracle 
 * Microsoft SQL Server 
 * PostgreSQL 



 Customers can deploy RDS databases within a VPC through the configuration of: 



 * Subnet Group for RDS, this group will be used for deployment of single or Multi-AZ RDS instances. 
 * Network access through configuration of Security Groups for RDS 
 * Access from outside the VPC hosting the DB instance by enabling/disabling a Public IP address 
 * Network access to the managed Data-Tier must be tightly controlled using Security Groups for RDS and non local accessibility of the DB instance. 






 **Remediation: ** 



 Using the Amazon unified command line interface: 



 * Modify each non-compliant DB instance, and configure it to use the Data Tier Security Group: 







 aws rds modify-db-instance &amp;#8212;db-instance-identifier &lt;your_db_instance&gt; &amp;#8212;vpc-security-group-ids &lt;data_tier_security_group&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: describe db instances" url="http://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
                        <reference name="Amazon docs: modify db instances" url="http://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
                    </references>
                    <standards>
                        <standard ref="6.34" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;



 * Check if your application DB instances are configured to use the Data Tier
 Security Group:





 aws rds describe-db-instances &amp;#8212;filters Name=tag:data_tier_tag,Values=data_tier_tag_value
 &amp;#8212;query &amp;#8216;DBInstances[*].{VpcSecurityGroups:VpcSecurityGroups,
 DBInstanceIdentifier:DBInstanceIdentifier}&amp;#8217;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-4.3" name="Enable Event subscriptions for Instance level events on RDS" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;AWS Relational Database Services offers customers a managed database engine solution for hosting customer created databases which can allow for a reduction in operational burden on customers. &lt;/p&gt;





 RDS event subscriptions provide notification of selected event changes at DataBase engine level such as: 



 * Deletion 
 * Failure 
 * Failover 
 * Low Storage 
 * Maintenance 



 Event subscriptions are designed to provide incident notification of events which may affect the availability of a RDS database instance. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified CLI: 



 * Create a new event subscription for DB instance level events: 







 aws rds create-event-subscription &amp;#8212;subscription-name &lt;rds_event_subscription&gt; &amp;#8212;sns-topic-arn sns_topic_arn &amp;#8212;source-type &lt;db-instance&gt; &amp;#8212;event-categories &lt;rds_events&gt; &amp;#8212;source-ids &lt;events_source_ids&gt; &amp;#8212;enabled</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: create event subscription" url="http://docs.aws.amazon.com/cli/latest/reference/rds/create-event-subscription.html"/>
                        <reference name="Amazon docs: describe event subcriptions" url="http://docs.aws.amazon.com/cli/latest/reference/rds/describe-event-subscriptions.html"/>
                        <reference name="Amazon docs: user event messages" url="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html#USER_Events.Messages"/>
                    </references>
                    <standards>
                        <standard ref="4.3" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified CLI:&lt;/p&gt;



 * List all present event subscriptions and review the value of &amp;#8216;db-instance&amp;#8217;
 associated with &amp;#8216;SourceType&amp;#8217; element:





 aws rds describe-event-subscriptions &amp;#8212;query
 &amp;#8216;EventSubscriptionsList[*].{SourceType:SourceType, SourceIdsList:SourceIdsList,
 EventCategoriesList:EventCategoriesList}&amp;#8217;







 &amp;#8216;EventCategoriesList&amp;#8217; will list all event categories which will be
 reported on


 &amp;#8216;SourceIdsList&amp;#8217; will list all RDS DB instances included (null=all
 instances)</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-4.4" name="Enable event subscriptions for DataBase security on RDS" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;AWS Relational Database Services offers customers a managed database engine solution
 for hosting customer created databases which can allow for a reduction in operational burden on
 customers.
 RDS event subscriptions provide notification of selected event changes at a DB security
 group level.
 Event subscriptions are designed to provide incident notification of events which may
 affect the network availability of the RDS instance.
 &lt;b&gt;Remediation:&lt;/b&gt;
 Using the Amazon unified CLI:&lt;/p&gt;


 * Create a new event subscription for DB Security Group events:





 aws rds create-event-subscription &amp;#8212;subscription-name rds_event_subscription
 &amp;#8212;sns-topic-arn
 sns_topic_arn
 &amp;#8212;source-type db-security-group &amp;#8212;event-categories rds_events
 &amp;#8212;source-ids events_source_ids &amp;#8212;enabled</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="4.4" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified CLI:&lt;/p&gt;



 * List all present event subscriptions and review the value of &amp;#8216;db-security-group&amp;#8217;
 associated with &amp;#8216;SourceType&amp;#8217; element:





 aws rds describe-event-subscriptions &amp;#8212;query
 &amp;#8216;EventSubscriptionsList[*].{SourceType:SourceType, SourceIdsList:SourceIdsList,
 EventCategoriesList:EventCategoriesList}&amp;#8217;







 &amp;#8216;EventCategoriesList&amp;#8217; will list all event categories which will be
 reported on


 &amp;#8216;SourceIdsList&amp;#8217; will list all RDS DB instances included (null=all
 instances)</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-3.7" name="Set Backup retention policy on RDS" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. &lt;/p&gt;





 There are 6 database engines available for customer to run their database workloads on: 



 * Amazon Aurora (MySQL Compatible) 
 * MySQL 
 * MariaDB 
 * Oracle 
 * Microsoft SQL Server 
 * PostgreSQL 




 Provides a managed backup function of the RDS Database, it is possible to define the backup window and retention period of the backup. Each customer should have a retention policy set for the type of data being stored. It is recommended to set this to at least 7. 





 Possible values are from 0 to 35 days. 






 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified command line interface: 



 * Modify each DB instance witha Backup Retention Period of 0, and set a desired Backup Retention Period in days (recommended value = 7): 







 aws rds modify-db-instance &amp;#8212;db-instance-identifier &lt;your_db_instance&gt; &amp;#8212;backup-retention-period &lt;backup_retention_period&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: describe db instances" url="http://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
                        <reference name="Amazon docs: modify db instances" url="http://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
                    </references>
                    <standards>
                        <standard ref="3.7" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;



 * Check if your application DB instances have a Backup Retention Period set (0 =
 there is no backup retention in place, 7 = there are 7 daily backups retained):





 aws rds describe-db-instances &amp;#8212;filters Name=tag:data_tier_tag,Values=data_tier_tag_value
 &amp;#8212;query &amp;#8216;DBInstances[*].{BackupRetentionPeriod:BackupRetentionPeriod,
 DBInstanceIdentifier:DBInstanceIdentifier}&amp;#8217;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-1.4" name="Enable encryption at rest for Databases running on RDS" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Amazon RDS instances and snapshots can be encrypted at rest by enabling the encryption option on
 the Amazon RDS DB instance. Data that is encrypted at rest includes the underlying storage for a
 DB instance, its automated backups, read replicas, and snapshots. Encryption at rest should
 be enabled.&lt;/p&gt;





 &lt;b&gt;Remediation:&lt;/b&gt;


 Using the Amazon unified CLI:



 * Perform a snapshot of the DB instance:





 aws rds create-db-snapshot &amp;#8212;db-snapshot-identifier db_snapshot
 &amp;#8212;db-instance-identifier your_db_instance





 * Confirm created snapshot is available (once snapshot process has completed):





 aws rds describe-db-snapshots &amp;#8212;query
 &amp;#8216;DBSnapshots[*].{DBSnapshotIdentifier:DBSnapshotIdentifier,
 DBInstanceIdentifier:DBInstanceIdentifier, Snapshotstatus:Status}&amp;#8217;





 * List all KMS Customer Managed Keys:





 aws kms list-aliases





 * Copy to source RDS snapshot (from previous step) to a destination snapshot which will
 be encrypted:




 aws rds copy-db-snapshot &amp;#8212;source-db-snapshot-identifier db_snapshot
 &amp;#8212;target-db-snapshot-identifier encrypted_db_snapshot
 &amp;#8212;kms-key-id data_tier_kms_key



 * Restore a snapshot to the target DB instance(from previous step) with the same values as
 original db instance with additional encrypted storage values:




 aws rds restore-db-instance-from-db-snapshot &amp;#8212;db-instance-identifier your_db_instance
 &amp;#8212;db-snapshot-identifier encrypted_db_snapshot</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: copy db snapshot" url="http://docs.aws.amazon.com/cli/latest/reference/rds/copy-db-snapshot.html"/>
                        <reference name="Amazon docs: copy snapshot" url="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html"/>
                        <reference name="Amazon docs: create db instances" url="http://docs.aws.amazon.com/cli/latest/reference/rds/create-db-instance.html"/>
                        <reference name="Amazon docs: create db snapshots" url="http://docs.aws.amazon.com/cli/latest/reference/rds/create-db-snapshot.html"/>
                        <reference name="Amazon docs: describe db instances" url="http://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
                        <reference name="Amazon docs: describe db snapshots" url="http://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-snapshots.html"/>
                        <reference name="Amazon docs: encryption" url="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html"/>
                        <reference name="Amazon docs: list aliases" url="http://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
                    </references>
                    <standards>
                        <standard ref="1.4" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified CLI:&lt;/p&gt;

 * List all current RDS instances and review the encryption status of the DB
 instance:



 aws rds describe-db-instances &amp;#8212;query &amp;#8216;DBInstances[*].{DBName:DBName,
 EncryptionEnabled:StorageEncrypted, CMK:KmsKeyId}&amp;#8217;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-RDS-01" name="Use SSL to Encrypt the connection to a DB Instance" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Use SSL from your application to encrypt a connection to a DB instance running MySQL, MariaDB,
 Amazon Aurora, SQL Server, Oracle, or PostgreSQL. Each DB engine has its own process for
 implementing SSL. To learn how to implement SSL for your particular DB instance, please see link
 provided in &amp;#8216;References&amp;#8217; section.&lt;/p&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that the SSL protocol is used to encrypt the data in transit.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="AMAZON WEB SERVICES" name="Amazon Web Services" desc="" library="">
                    <threats>
                        <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorised access to data on EC2 instances" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers cloud gain access to data on EC2 instances through the weaknesses
 in non-updated systems.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="aws-tier-3.6" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-EC2-6.2">
                                    <controls>
                                        <control ref="aws-tier-3.6" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due of the
 user accounts or role groups are not well defined and configured. Therefore, attackers
 can make changes without the root approval.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="Hydras-AWS-RDS-02" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-IAM-2.7">
                                    <controls>
                                        <control ref="Hydras-AWS-RDS-02" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized connection to the resources" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain an unauthorized connection to the resources through
 misconfigured ports or security network configurations.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="aws-tier-6.30" mitigation="34"/>
                                <control ref="aws-tier-3.5" mitigation="33"/>
                                <control ref="aws-tier-6.34" mitigation="33"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="database-publically-accesible">
                                    <controls>
                                        <control ref="aws-tier-6.30" mitigation="34"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-Network-5.2">
                                    <controls>
                                        <control ref="aws-tier-3.5" mitigation="33"/>
                                    </controls>
                                </weakness>
                                <weakness ref="no-access-control-onrds">
                                    <controls>
                                        <control ref="aws-tier-6.34" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="UNAUTHORIZED-ACCESS-SECURITY-SYSTEMS-AWS" name="Attackers gain undetected access to the security system configurations" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers could gain undetected access to the security configurations and the changes of
 the attackers could not be detected and audited.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="aws-tier-4.3" mitigation="50"/>
                                <control ref="aws-tier-4.4" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="no-notification-incident">
                                    <controls>
                                        <control ref="aws-tier-4.3" mitigation="50"/>
                                        <control ref="aws-tier-4.4" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Data can be deleted intentionally or accidentally, and the data cannot be
 recovered as there are no recovery systems and the data is easy
 to delete it.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="aws-tier-3.7" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="NOT_BACKUP_POLICIES">
                                    <controls>
                                        <control ref="aws-tier-3.7" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text,
 or when the data is stored without encryption.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="aws-tier-1.4" mitigation="50"/>
                                <control ref="Hydras-AWS-RDS-01" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-S3-7.4">
                                    <controls>
                                        <control ref="aws-tier-1.4" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-S3-7.3">
                                    <controls>
                                        <control ref="Hydras-AWS-RDS-01" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="HYDRAS-AWS-S3" name="AWS S3" desc="" tags="" position="8" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="AWS-S3-7.1" name="Backup is not created" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The sensitive data cannot be recovered because there is not any method to do a backup or to do
 versions of the data.</desc>
                </weakness>
                <weakness ref="AWS-S3-7.2" name="Data is easily removed" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Someone without credentials can remove sensitive data, the remove function is not protected
 for an MFA.</desc>
                </weakness>
                <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Sensitive data is not encrypted and is exposed.</desc>
                </weakness>
                <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Sensitive data is not encrypted in transit with HTTPS or SSL, and this data is accessible
 whilst traversing the network.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="Hydras-AWS-S3-7.1" name="Configure S3 bucket versioning for sensitive data" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale
 computing easier for developers.&lt;/p&gt;

 Amazon S3 has a simple web services interface that you can use to store and retrieve
 any amount of data, at any time, from anywhere on the web. It gives any developer access to the
 same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses
 to run its own global network of web sites.

 To add an extra layer of security to data stored within S3 it is possible to enable
 object versioning. Object versioning enables the recovery of objects from accidental overwrite
 or accidental deletion. If an object is deleted, instead of being removed, S3 write a delete
 marker which becomes the current version that means previous versions can always be recovered.
 It is recommended that versioning be enabled for buckets storing sensitive data.


 &lt;b&gt;Remediation:&lt;/b&gt;



 aws s3api put-bucket-versioning &amp;#8212;bucket my-bucket &amp;#8212;versioning-configuration Status=Enabled



 Content provided by &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;aws s3api get-bucket-versioning &amp;#8212;bucket my-bucket
 If you don&amp;#8217;t see &amp;#8216;Status&amp;#8217;: &amp;#8216;Enabled&amp;#8217;
 then your bucket has no versioning enabled.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-S3-7.2" name="Use S3 MFA to delete sensitive information" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale
 computing easier for developers.&lt;/p&gt;

 Amazon S3 has a simple web services interface that you can use to store and retrieve
 any amount of data, at any time, from anywhere on the web. It gives any developer access to the
 same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses
 to run its own global network of web sites.

 To add an extra layer of security to data stored within S3 the account owner (root)
 can enable MFA Delete which means that buckets and the objects within them can only be deleted
 with the use of Multi-factor authentication device. It is recommended to enable MFA Delete on
 any buckets containing sensitive data to protect against accidental deletion
 Remediation
 1. aws s3api put-bucket-versioning &amp;#8212;bucket my-bucket &amp;#8212;versioning-configuration
 Status=Enabled,MFADelete=Enabled

 Content provided by &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;aws s3api get-bucket-versioning &amp;#8212;bucket my-bucket&lt;/p&gt;


 If you don&amp;#8217;t see &amp;#8216;MFADelete&amp;#8217;: &amp;#8216;Enabled&amp;#8217; then your bucket
 has no MFA delete enabled.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-S3-7.4" name="Encrypt sensitive data at rest with KMS" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale
 computing easier for developers.&lt;/p&gt;

 Amazon S3 has a simple web services interface that you can use to store and retrieve
 any amount of data, at any time, from anywhere on the web. It gives any developer access to the
 same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses
 to run its own global network of web sites.

 To ensure that sensitive data is encrypted at rest you can use AWS KMS–managed
 keys (SSE-KMS). This provides several advantages:

 * You can create and manage the CMK encryption keys yourself.
 * You can use a single CMK to encrypt and decrypt log files for multiple accounts across
 all regions.
 * You have control over who can use your key for encrypting and decrypting CloudTrail
 log files. You can assign permissions for the key to the users in your organization according to
 your requirements.
 * You have enhanced security. With this feature, in order to read log files, you now
 need to meet two conditions: 1) you must have S3 read permission on the bucket, and 2) you must
 be granted decrypt permission by the CMK policy.

 It is recommended to encrypt all sensitive data with SSE-KMS to avoid undue
 disclosure of information and provide an extra layer of security.


 &lt;b&gt;Remediation:&lt;/b&gt;
 The following example shows how to upload data using AWS KMS Encryption:




 aws s3api put-object &amp;#8212;bucket &lt;my_bucket&gt; &amp;#8212;server-side-encryption aws:kms
 &amp;#8212;ssekms-key-id &lt;kms_key_id&gt; &amp;#8212;key &lt;object_to_upload&gt;



 Content provided by &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;aws s3api head-object &amp;#8212;bucket &lt;my_bucket&gt; &amp;#8212;key &lt;my_key&gt;
 Look for the line &amp;#8216;ServerSideEncryption&amp;#8217; and verify
 that it is set to &amp;#8216;aws:kms&amp;#8217; which indicates KMS Encryption.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-S3-7.3" name="Enforce HTTPS for sensitive information" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale
 computing easier for developers.&lt;/p&gt;

 Amazon S3 has a simple web services interface that you can use to store and retrieve
 any amount of data, at any time, from anywhere on the web. It gives any developer access to the
 same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses
 to run its own global network of web sites.

 To ensure that data is only accessible via HTTPS (as opposed to both HTTP and HTTPS)
 it is possible to add a condition to the S3 bucket policy. It is recommended to enable this for
 any bucket containing sensitive data to ensure that data is encrypted in transit.


 **Remediation:**The following is an example of how to create an S3
 bucket policy that enforces HTTPS/SSL only


 * Sign in to the AWS Management Console (with S3 update privileges)
 * Go to the S3 Service on the AWS Console
 * Select a bucket under &amp;#8216;All buckets&amp;#8217;
 * Click the properties tab
 * Under the permissions select &amp;#8216;Add a bucket policy&amp;#8217;
 * Add the following policy to ensure all objects are accessed via https only





 &lt;i&gt; {&lt;/i&gt;






 &lt;i&gt; &amp;#8216;Statement&amp;#8217;:[&lt;/i&gt;
 &lt;i&gt;{&lt;/i&gt;








 &lt;i&gt; &amp;#8216;Action&amp;#8217;: &amp;#8216;s3:*&amp;#8217;,&lt;/i&gt;


 &lt;i&gt;&amp;#8217;Effect&amp;#8217;:&amp;#8216;Allow&amp;#8217;,&lt;/i&gt;


 &lt;i&gt;&amp;#8217;Principal&amp;#8217;: &amp;#8216;*&amp;#8217;,&lt;/i&gt;


 &lt;i&gt;&amp;#8217;Resource&amp;#8217;:&amp;#8216;arn:aws:s3:::bucketname/*&amp;#8217;,&lt;/i&gt;


 &lt;i&gt;&amp;#8217;Condition&amp;#8217;:{&lt;/i&gt;












 &lt;i&gt;&amp;#8217;Bool&amp;#8217;:&lt;/i&gt;















 &lt;i&gt;{&lt;/i&gt;
















 &lt;i&gt;&amp;#8217;aws:SecureTransport&amp;#8217;: true&lt;/i&gt;
















 &lt;i&gt;}&lt;/i&gt;














 &lt;i&gt;}&lt;/i&gt;











 &lt;i&gt; }&lt;/i&gt;
 &lt;i&gt;]&lt;/i&gt;








 &lt;i&gt;} &lt;/i&gt;





 * Click &amp;#8216;&amp;#8216;Save&amp;#8217;

 Content provided by &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;The following checks that HTTPS is forced on a bucket policy:&lt;/p&gt;


 # Sign in to the AWS Management Console (with S3 update privileges).
 # Go to the S3 Service on the AWS Console.
 # Select the S3 bucket under &amp;#8216;All buckets&amp;#8217;.
 # Click the &amp;#8216;properties&amp;#8217; tab.
 # Click &amp;#8216;edit bucket policy&amp;#8217;.
 # In the policy document check for the presence of the line &amp;#8216;Condition&amp;#8217;:
 {&amp;#8216;Bool&amp;#8217;: {&amp;#8216;aws:SecureTransport&amp;#8217;: &amp;#8216;true&amp;#8217;}}
 # In the same statement as &amp;#8216;Effect&amp;#8217;:&amp;#8216;Allow&amp;#8217;,</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="AMAZON WEB SERVICES" name="Amazon Web Services" desc="" library="">
                    <threats>
                        <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Data can be deleted intentionally or accidentally, and the data cannot be
 recovered as there are no recovery systems and the data is easy
 to delete it.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="Hydras-AWS-S3-7.1" mitigation="50"/>
                                <control ref="Hydras-AWS-S3-7.2" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-S3-7.1">
                                    <controls>
                                        <control ref="Hydras-AWS-S3-7.1" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-S3-7.2">
                                    <controls>
                                        <control ref="Hydras-AWS-S3-7.2" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text,
 or when the data is stored without encryption.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="Hydras-AWS-S3-7.4" mitigation="50"/>
                                <control ref="Hydras-AWS-S3-7.3" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="AWS-S3-7.4">
                                    <controls>
                                        <control ref="Hydras-AWS-S3-7.4" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-S3-7.3">
                                    <controls>
                                        <control ref="Hydras-AWS-S3-7.3" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="HYDRAS-AWS-SNS" name="AWS SNS" desc="" tags="" position="9" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="log-actions-sending-out-notifications" name="Log the actions to send out notifications" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The sensitive data is not encrypted in transit with HTTPS or SSL, and the data is accessible
 in the canal.</desc>
                </weakness>
                <weakness ref="AWS-SNS-01" name="Notifications are not centralized" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The notifications are not centralized; therefore, the control of these notifications and who
 receives them is not easily managed.</desc>
                </weakness>
                <weakness ref="no-access-control-publish-sns-topics" name="No access control to publish on SNS topics" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The notifications are not centralized; therefore, the control of these notifications and who
 receives them is not easily managed.</desc>
                </weakness>
                <weakness ref="no-access-control-subscribe-sns-topics" name="No access control to subscribe on SNS topics" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The notifications are not centralized; therefore, the control of these notifications and who
 receives them is not easily managed.</desc>
                </weakness>
                <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Sensitive data is not encrypted in transit with HTTPS or SSL, and this data is accessible
 whilst traversing the network.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="aws-tier-4.1" name="Create a SNS topic for sending out notifications from Cloudtwatch Alarms" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;For the Cloudwatch alarms and Auto-Scaling Groups to be able to send out notifications, a SNS topic should be created. &lt;/p&gt;





 Amazon Simple Notification Service (Amazon SNS) is a web service that coordinates and manages the delivery or sending of messages to subscribing endpoints or clients. 





 When using Amazon SNS, you (as the owner) create a topic and control access to it by defining policies that determine which publishers and subscribers can communicate with the topic. 





 Cloudwatch alarms and certain actions inside Auto-Scaling Groups needs to be sent out to administrators, in order to be acted upon. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified CLI: 



 * Create a new topic, and note the topic-arn value: 







 aws sns create-topic &amp;#8212;name &lt;sns_topic_name&gt; 







 * Create a subscription to the new topic: 







 aws sns subscribe &amp;#8212;topic-arn &lt;sns_topic_arn&gt; &amp;#8212;protocol &lt;protocol_for_sns&gt; &amp;#8212;notification-endpoint &lt;sns_subscription_endpoints&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: sns get topic attributes" url="http://docs.aws.amazon.com/cli/latest/reference/sns/get-topic-attributes.html"/>
                        <reference name="Amazon docs: sns list subscriptions" url="http://docs.aws.amazon.com/cli/latest/reference/sns/list-subscriptions-by-topic.html"/>
                        <reference name="Amazon docs: sns set topic attributes" url="http://docs.aws.amazon.com/cli/latest/reference/sns/create-topic.html"/>
                        <reference name="Amazon docs: sns subscribe" url="http://docs.aws.amazon.com/cli/latest/reference/sns/subscribe.html"/>
                    </references>
                    <standards>
                        <standard ref="4.1" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified CLI: &lt;/p&gt;



 * List all cloudwatch alarms and filter by alarm action (review &amp;#8216;AlarmActions&amp;#8217;: []): 





 aws cloudwatch describe-alarms &amp;#8212;query &amp;#8216;MetricAlarms[*].{AlarmName:AlarmName, AlarmActions:AlarmActions, Dimensions:Dimensions}&amp;#8217; 





 * List SNS topic attributes: 





 aws sns list-topic-attributes &amp;#8212;topic-arn &lt;sns_topic_arn&gt; 





 * List SNS topic subscriptions (endpoint which receives messages captured by the SNS topic): 





 aws sns list-subscriptions-by-topic &amp;#8212;topic-arn &lt;sns_topic_arn&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-4.2" name="Create a SNS topic for sending out notifications from RDS events" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;For the RDS event subscriptions to be able to send out notifications, a SNS topic should be created. &lt;/p&gt;





 Amazon Simple Notification Service (Amazon SNS) is a web service that coordinates and manages the delivery or sending of messages to subscribing endpoints or clients. 





 When using Amazon SNS, you (as the owner) create a topic and control access to it by defining policies that determine which publishers and subscribers can communicate with the topic. 





 RDS events generated through defined RDS event subscriptions needs to be sent out to administrators, in order to be acted upon. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Using the Amazon unified CLI: 



 * Create a new topic, and note the topic-arn value: 







 aws sns create-topic &amp;#8212;name &lt;sns_topic_name&gt; 







 * Create a subscription to the new topic: 







 aws sns subscribe &amp;#8212;topic-arn &lt;sns_topic_arn&gt; &amp;#8212;protocol &lt;protocol_for_sns&gt; &amp;#8212;notification-endpoint &lt;sns_subscription_endpoints&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: sns get topic attributes" url="http://docs.aws.amazon.com/cli/latest/reference/sns/get-topic-attributes.html"/>
                        <reference name="Amazon docs: sns list subscriptions by topic" url="http://docs.aws.amazon.com/cli/latest/reference/sns/list-subscriptions-by-topic.html"/>
                        <reference name="Amazon docs: sns set topic attributes" url="http://docs.aws.amazon.com/cli/latest/reference/sns/create-topic.html"/>
                        <reference name="Amazon docs: sns subscribe" url="http://docs.aws.amazon.com/cli/latest/reference/sns/subscribe.html"/>
                    </references>
                    <standards>
                        <standard ref="4.2" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified CLI: &lt;/p&gt;



 * List all RDS event subscriptions in order to capture the topic-arn: 





 aws rds describe-event-subscriptions &amp;#8212;query &amp;#8216;EventSubscriptionsList[*].{SourceType:SourceType, SourceIdsList:SourceIdsList, EventCategoriesList:EventCategoriesList}&amp;#8217; 





 * List SNS topic attributes: 





 aws sns list-topic-attributes &amp;#8212;topic-arn &lt;sns_topic_arn&gt; 





 * List SNS topic subscriptions (endpoint which receives messages captured by the SNS topic): 





 aws sns list-subscriptions-by-topic &amp;#8212;topic-arn &lt;sns_topic_arn&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-SNS-01" name="Use Amazon SNS to centralize notifications" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Configure all alerts from the Amazon environment with the Amazon Simple Notification Service
 (SNS) to have centralized notifications and control over who receives these notifications, in
 the same place.&lt;/p&gt;


 ** &lt;b&gt;Remediation:&lt;/b&gt; **


 # Go to CoudWatch alarms.
 # Edit each alarm and change the notification configuration to the SNS service.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Check that all alerts from the Amazon environment are configured with the Amazon Simple
 Notification Service (SNS).&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-2.9" name="Do not permit ‘Everyone’ to publish SNS topics" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Amazon Simple Notification Service (Amazon SNS) is a web service that coordinates and manages the delivery or sending of messages to subscribing endpoints or clients. In Amazon SNS, there are two types of clients &amp;#8211; publishers and subscribers &amp;#8211; also referred to as producers and consumers. Publishers communicate asynchronously with subscribers by producing and sending a message to a topic, which is a logical access point and communication channel. Subscribers (i.e., web servers, email addresses, Amazon SQS queues, AWS Lambda functions) consume or receive the message or notification over one of the supported protocols (i.e., Amazon SQS, HTTP/S, email, SMS, Lambda) when they are subscribed to the topic. &lt;/p&gt;





 The entities who can publish messages to a SNS topic can be controlled by modifying the topic policy, and they can be: 



 * The topic owner 
 * Everyone 
 * Specific AWS users or resources 
 From the above message publisher options you should make sure that &amp;#8216;Everyone&amp;#8217; is not used with any SNS topic in the AWS account. 





 If an SNS topic policy allows &amp;#8216;Everyone&amp;#8217; to publish messages to a specific topic, this could pose a security risk as any unauthenticated entity could send malicious messages to all the topic subscribers. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Edit your existing policy by deleting the above snippet or replacing &amp;#8216;Principal&amp;#8217;:{&amp;#8216;AWS&amp;#8217; : &amp;#8216;*&amp;#8217;} with &amp;#8216;Principal&amp;#8217;:{&amp;#8216;AWS&amp;#8217; : &amp;#8216;&amp;#8217;}, and save it locally as a .json file named policy.json. 





 Using the Amazon unified command line interface: 



 * Set the new policy to the SNS topic 







 aws sns set-topic-attributes &amp;#8212;topic-arn sns_topic_arn &amp;#8212;attribute-name Policy &amp;#8212;attribute-value file://policy.json 





 ****</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: sns get topic attributes" url="http://docs.aws.amazon.com/cli/latest/reference/sns/get-topic-attributes.html"/>
                        <reference name="Amazon docs: sns list topics" url="http://docs.aws.amazon.com/cli/latest/reference/sns/list-topics.html"/>
                        <reference name="Amazon docs: sns set topic attributes" url="http://docs.aws.amazon.com/cli/latest/reference/sns/set-topic-attributes.html"/>
                        <reference name="Amazon docs: Using IAM with SNS" url="http://docs.aws.amazon.com/sns/latest/dg/UsingIAMwithSNS.html#ExamplePolicies_SNS"/>
                    </references>
                    <standards>
                        <standard ref="2.9" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;



 * List all the SNS topics from your AWS account: 





 aws sns list-topics 





 * For each topic in step 1, list the topic attributes: 





 aws sns get-topic-attributes &amp;#8212;topic-arn &lt;sns_topic_arn&gt; 





 * Check the Policy field for the presence of: 





 { 






 &amp;#8216;Effect&amp;#8217;:&amp;#8216;Allow&amp;#8217;, 




 &amp;#8216;Principal&amp;#8217;:{ 








 &amp;#8216;AWS&amp;#8217;:&amp;#8217;*&amp;#8217; 








 }, 








 &amp;#8216;Action&amp;#8217;:&amp;#8216;SNS:Publish&amp;#8217;, 




 &amp;#8216;Resource&amp;#8217;:&amp;#8217;&lt;sns_topic_arn&gt;&amp;#8217; 




 }</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="aws-tier-2.10" name="Do not permit 'Everyone' to subscribe on SNS topics" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Amazon Simple Notification Service (Amazon SNS) is a web service that coordinates and manages the delivery or sending of messages to subscribing endpoints or clients. In Amazon SNS, there are two types of clients &amp;#8211; publishers and subscribers &amp;#8211; also referred to as producers and consumers. Publishers communicate asynchronously with subscribers by producing and sending a message to a topic, which is a logical access point and communication channel. Subscribers (i.e., web servers, email addresses, Amazon SQS queues, AWS Lambda functions) consume or receive the message or notification over one of the supported protocols (i.e., Amazon SQS, HTTP/S, email, SMS, Lambda) when they are subscribed to the topic. &lt;/p&gt;





 The entities who can subscribe to a SNS topic can be controlled by modifying the topic policy, and they can be: 



 * The topic owner 
 * Everyone 
 * Specific AWS users or resources 
 * Users whose endpoint URL,protocol, email address, or ARN from a Subscribe request match a specified value 



 From the above topic subscribers, you should make sure that &amp;#8216;Everyone&amp;#8217; is not used with any SNS topic in the AWS account. 





 If a SNS topic policy allows &amp;#8216;Everyone&amp;#8217; to subscribe to a specific topic, this could pose a security risk as any unauthenticated entity could subscribe and receive messages from the topic publishers, messages that should be destined only to specific, known subscribers. 





 &lt;b&gt;Remediation:&lt;/b&gt; 



 Edit your existing policy by deleting the above snippet or replacing &amp;#8216;Principal&amp;#8217;:{&amp;#8216;AWS&amp;#8217; : &amp;#8216;*&amp;#8217;} with &amp;#8216;Principal&amp;#8217;:{&amp;#8216;AWS&amp;#8217; : &amp;#8216;&amp;#8217;}, and save it locally as a .json file named policy.json. 





 Using the Amazon unified command line interface: 



 * Set the new policy to the SNS topic 







 aws sns set-topic-attributes &amp;#8212;topic-arn sns_topic_arn &amp;#8212;attribute-name Policy &amp;#8212;attribute-value file://policy.json</desc>
                    <implementations/>
                    <references>
                        <reference name="Amazon docs: sns get topic attributes" url="http://docs.aws.amazon.com/cli/latest/reference/sns/get-topic-attributes.html"/>
                        <reference name="Amazon docs: sns list topics" url="http://docs.aws.amazon.com/cli/latest/reference/sns/list-topics.html"/>
                        <reference name="Amazon docs: sns set topic attributes" url="http://docs.aws.amazon.com/cli/latest/reference/sns/set-topic-attributes.html"/>
                        <reference name="Amazon docs: using IAM with SNS" url="http://docs.aws.amazon.com/sns/latest/dg/UsingIAMwithSNS.html#ExamplePolicies_SNS"/>
                    </references>
                    <standards>
                        <standard ref="2.10" supportedStandardRef="CIS Amazon Web Services Three-tier Web Architecture Benchmark"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Using the Amazon unified command line interface: &lt;/p&gt;



 * List all the SNS topics from your AWS account: 





 aws sns list-topics 





 * For each topic in step 1, list the topic attributes: 





 aws sns get-topic-attributes &amp;#8212;topic-arn &lt;sns_topic_arn&gt; 





 * Check the Policy field for the presence of: 





 { 




 &amp;#8216;Effect&amp;#8217;:&amp;#8216;Allow&amp;#8217;, 




 &amp;#8216;Principal&amp;#8217;:{ 








 &amp;#8216;AWS&amp;#8217;:&amp;#8217;*&amp;#8217; 








 }, 








 &amp;#8216;Action&amp;#8217;: [ 








 &amp;#8216;SNS:Subscribe&amp;#8217;, 








 &amp;#8216;SNS:Receive&amp;#8217; 










 ], 








 &amp;#8216;Resource&amp;#8217;:&amp;#8217;&lt;sns_topic_arn&gt;&amp;#8217; 




 }</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="Hydras-AWS-SNS-02" name="Enforce HTTPS to encrypt notifications" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;To send messages to an HTTPS endpoint through a topic, you must subscribe the endpoint to the
 Amazon SNS topic. You specify the endpoint using its URL. To subscribe to a topic, you can use
 the Amazon SNS console, the sns-subscribe command, or the Subscribe API action.&lt;/p&gt;


 ** &lt;b&gt;Remediation:&lt;/b&gt; **


 # Sign in to the AWS Management Console and open the Amazon SNS console at
 https://console.aws.amazon.com/sns/v2/home.
 # In the left navigation pane, click Topics and then select the topic.
 # Click the Other actions drop-down list and select Subscribe to topic.
 # In the Protocol drop-down list, select HTTPS.
 # In the Endpoint box, paste in the URL for the endpoint that you want the topic to send
 messages to and then click Create subscription.
 # For the Subscription request received! message, click Close.
 # Your new subscription&amp;#8217;s Subscription ID displays PendingConfirmation. When you confirm
 the subscription, Subscription ID will display the subscription ID.
 Content provided by
 &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;ol&gt;
		&lt;li&gt;Sign in to the AWS Management Console and open the Amazon SNS console at
 https://console.aws.amazon.com/sns/v2/home.
 # In the left navigation panel, click Topics and then select the topic.
 # Click the Other actions drop-down list and select Subscribe to topic.I
 # In the Protocol drop-down list, check that the protocol HTTPS is selected.&lt;/li&gt;
	&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-11T13:11:20">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="CLOUDWATCH METRIC ALERTS" name="Cloudwatch Metric Alerts" desc="" library="">
                    <threats>
                        <threat ref="AWS-LOST-CONTROL-NOTIFICATION" name="Sensitive data is compromised through notifications" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers can gain access to the resources sensitive data if the system notifications
 and alerts are not configured properly and the notifications are not received by the
 appropriate personnel.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="aws-tier-4.1" mitigation="34"/>
                                <control ref="aws-tier-4.2" mitigation="33"/>
                                <control ref="Hydras-AWS-SNS-01" mitigation="33"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="log-actions-sending-out-notifications">
                                    <controls>
                                        <control ref="aws-tier-4.1" mitigation="34"/>
                                        <control ref="aws-tier-4.2" mitigation="33"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-SNS-01">
                                    <controls>
                                        <control ref="Hydras-AWS-SNS-01" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="VIRTUAL PRIVATE CLOUD (VPC) NETWORK" name="Virtual Private Cloud (VPC) Network" desc="" library="">
                    <threats>
                        <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text,
 or when the data is stored without encryption.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="aws-tier-2.9" mitigation="34"/>
                                <control ref="aws-tier-2.10" mitigation="33"/>
                                <control ref="Hydras-AWS-SNS-02" mitigation="33"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="no-access-control-publish-sns-topics">
                                    <controls>
                                        <control ref="aws-tier-2.9" mitigation="34"/>
                                    </controls>
                                </weakness>
                                <weakness ref="no-access-control-subscribe-sns-topics">
                                    <controls>
                                        <control ref="aws-tier-2.10" mitigation="33"/>
                                    </controls>
                                </weakness>
                                <weakness ref="AWS-S3-7.3">
                                    <controls>
                                        <control ref="Hydras-AWS-SNS-02" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
    </components>
    <rules>
        <rule name="Q: AWS - SNS" module="component" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="amazon-web-services-environment">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project="" value="deployment.publicCloud.aws.useSNS_::_Amazon Web Services_::_Do you use Amazon Simple Notification Services (SNS) for the notifications?_::_6510_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
        </rule>
        <rule name="Q: AWS - SNS - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="deployment.publicCloud.aws.useSNS">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="aws.sns.no_::_No_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
        </rule>
        <rule name="nan" module="nan" generatedByGui="true"/>
        <rule name="Q: Deployed - Public Cloud &amp; AWS &amp; Client" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="aws">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="aws.sns.yes_::_Yes_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="deployment.publicCloud.aws._::_Deployment_::_Which AWS Services?_::_6509_::_true_::_true_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; AWS &amp; Client - *" module="nan" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-CLIENT">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="deployment.publicCloud.aws.">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="aws.ec2_::_Elastic Compute Cloud - EC2_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; AWS &amp; Datastore" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-CLIENT">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="aws">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="deployment.publicCloud.aws._::_Deployment_::_Which AWS Services?_::_6509_::_true_::_true_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; AWS &amp; Datastore - *" module="nan" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATASTORE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="deployment.publicCloud.aws.">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="aws.ec2_::_Elastic Compute Cloud - EC2_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; AWS &amp; Datastore other - Cloud Storage" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATASTORE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="deployment.publicCloud.aws.">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="aws.s3_::_Simple Storage Service - S3_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; AWS &amp; Datastore SQL - *" module="nan" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_CLOUD-STORAGE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="deployment.publicCloud.aws.">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="aws.rds_::_Relational Database Service - RDS_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; AWS &amp; Load Balancer" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATABASE-SQL">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="load-balancer">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project="" value="deployment.publicCloud.aws._::_Deployment_::_Which AWS Services?_::_6509_::_true_::_true_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; AWS &amp; Load Balancer - *" module="nan" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="aws">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="load-balancer">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project="" value="aws.ec2_::_Elastic Compute Cloud - EC2_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; AWS &amp; Service" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="deployment.publicCloud.aws.">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="aws">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="aws.elb_::_Elastic Load Balancing - ELB_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="deployment.publicCloud.aws._::_Deployment_::_Which AWS Services?_::_6509_::_true_::_true_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; AWS &amp; Service - *" module="nan" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="deployment.publicCloud.aws.">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="aws.ec2_::_Elastic Compute Cloud - EC2_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; AWS &amp; Web UI" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="aws">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="deployment.publicCloud.aws._::_Deployment_::_Which AWS Services?_::_6509_::_true_::_true_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud &amp; AWS &amp; Web UI - *" module="nan" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="aws">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="deployment.publicCloud.aws._::_Deployment_::_Which AWS Services?_::_6509_::_true_::_true_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
        </rule>
        <rule name="Q: Deployed - Public Cloud - Add AWS" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="publicCloud">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="aws_::_Amazon Web Services_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
        </rule>
        <rule name="Risk Pattern: AWS - EC2" module="nan" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="Public Cloud">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="aws.ec2">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="Hydras-AWS-Foundation" value="Hydras-AWS-Foundation_::_HYDRAS-AWS-EC2" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
        </rule>
        <rule name="Risk Pattern: AWS - ELB" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="aws.elb">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="Hydras-AWS-Foundation" value="Hydras-AWS-Foundation_::_HYDRAS-AWS-ELB" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
        </rule>
        <rule name="Risk Pattern: AWS - RDS" module="nan" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="aws.rds">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="Hydras-AWS-Foundation" value="Hydras-AWS-Foundation_::_HYDRAS-AWS-RDS" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
        </rule>
        <rule name="Risk Pattern: AWS - S3" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="aws.s3">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="Hydras-AWS-Foundation" value="Hydras-AWS-Foundation_::_HYDRAS-AWS-S3" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
        </rule>
        <rule name="Risk Pattern: AWS - SNS" module="nan" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="aws.sns.yes">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="Hydras-AWS-Foundation" value="Hydras-AWS-Foundation_::_HYDRAS-AWS-SNS" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
        </rule>
        <rule name="Set Answer: Amazon Environment --&gt; Public Cloud" module="component" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="amazon-web-services-environment">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project="" value="Public Cloud_::_true_::_true" name="Answer Question" type="drools-without-variable-type">
                <pattern name="Action of answer question" pattern='$questionToAnswer : Question(id == "${value-1}", answer != ${value-2}); eval(!${value-3} || !$questionToAnswer.isManuallyModified());_:::_modify($questionToAnswer) { setAnswer(${value-2}), setCanBeManuallyModified(${value-3}) };'/>
            </action>
        </rule>
        <rule name="Set Answer: Set Public Cloud when AWS EC2 is selected" module="nan" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="ec2">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project="" value="Public Cloud_::_true_::_true" name="Answer Question" type="drools-without-variable-type">
                <pattern name="Action of answer question" pattern='$questionToAnswer : Question(id == "${value-1}", answer != ${value-2}); eval(!${value-3} || !$questionToAnswer.isManuallyModified());_:::_modify($questionToAnswer) { setAnswer(${value-2}), setCanBeManuallyModified(${value-3}) };'/>
            </action>
        </rule>
        <rule name="Set Answer: Set Public Cloud when AWS ELB is selected" module="component" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="load-balancer">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project="" value="Public Cloud_::_true_::_true" name="Answer Question" type="drools-without-variable-type">
                <pattern name="Action of answer question" pattern='$questionToAnswer : Question(id == "${value-1}", answer != ${value-2}); eval(!${value-3} || !$questionToAnswer.isManuallyModified());_:::_modify($questionToAnswer) { setAnswer(${value-2}), setCanBeManuallyModified(${value-3}) };'/>
            </action>
        </rule>
        <rule name="Set Answer: Set Public Cloud when AWS RDS is selected" module="nan" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="rds">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project="" value="Public Cloud_::_true_::_true" name="Answer Question" type="drools-without-variable-type">
                <pattern name="Action of answer question" pattern='$questionToAnswer : Question(id == "${value-1}", answer != ${value-2}); eval(!${value-3} || !$questionToAnswer.isManuallyModified());_:::_modify($questionToAnswer) { setAnswer(${value-2}), setCanBeManuallyModified(${value-3}) };'/>
            </action>
        </rule>
        <rule name="Set Answer: Set Public Cloud when AWS S3 is selected" module="component" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="s3">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project="" value="Public Cloud_::_true_::_true" name="Answer Question" type="drools-without-variable-type">
                <pattern name="Action of answer question" pattern='$questionToAnswer : Question(id == "${value-1}", answer != ${value-2}); eval(!${value-3} || !$questionToAnswer.isManuallyModified());_:::_modify($questionToAnswer) { setAnswer(${value-2}), setCanBeManuallyModified(${value-3}) };'/>
            </action>
        </rule>
        <rule name="Set Answer: Set Public Cloud when AWS SNS is selected" module="nan" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="sns">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project="" value="Public Cloud_::_true_::_true" name="Answer Question" type="drools-without-variable-type">
                <pattern name="Action of answer question" pattern='$questionToAnswer : Question(id == "${value-1}", answer != ${value-2}); eval(!${value-3} || !$questionToAnswer.isManuallyModified());_:::_modify($questionToAnswer) { setAnswer(${value-2}), setCanBeManuallyModified(${value-3}) };'/>
            </action>
        </rule>
    </rules>
</project>
