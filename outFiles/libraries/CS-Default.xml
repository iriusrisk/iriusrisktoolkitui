<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (c) 2012-2019 Continuum Security.  All rights reserved.
The content of this library is the property of Continuum Security SL and may only be used in whole or in part with a valid license for IriusRisk. -->
<project ref="CS-Default" name="CS-Default" revision="85" type="LIBRARY" status="OPEN" enabled="true" priority="0" tags="">
    <desc>This library provides a set of development requirements that help comply with&amp;nbsp;OWASP Application Security Verification Standard (ASVS) [Level1/Level2/Level3].</desc>
    <categoryComponents>
        <categoryComponent ref="docker-category" name="Docker"/>
        <categoryComponent ref="service-side" name="Server-side"/>
        <categoryComponent ref="amazon-web-services" name="Amazon Web Services"/>
        <categoryComponent ref="client-side" name="Client-side"/>
        <categoryComponent ref="data-store" name="Data store"/>
        <categoryComponent ref="on-premises-architecture" name="On Premises Architecture"/>
        <categoryComponent ref="microsoft-azure" name="Microsoft Azure"/>
        <categoryComponent ref="google-cloud-platform" name="Google Cloud Platform"/>
    </categoryComponents>
    <componentDefinitions>
        <componentDefinition ref="docker-environment" name="Docker Environment" desc="" categoryRef="docker-category">
            <riskPatterns>
                <riskPattern ref="DEPLOYMENT-ENVIRONMENT"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="rest-full-web-service" name="RESTful Web Service" desc="The server side RESTful web services that uses HTTP/S as the transport" categoryRef="service-side">
            <riskPatterns>
                <riskPattern ref="restful-web-service"/>
                <riskPattern ref="WEB-SERVICE"/>
                <riskPattern ref="GENERIC-SERVICE"/>
                <riskPattern ref="untrusted-data-received"/>
                <riskPattern ref="LOGS-POLICY"/>
                <riskPattern ref="HTTP-SERVICE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="soap-web-service" name="SOAP Web Service" desc="The server side SOAP web services that uses HTTP/S as the transport" categoryRef="service-side">
            <riskPatterns>
                <riskPattern ref="WEB-SERVICE"/>
                <riskPattern ref="soap-web-service"/>
                <riskPattern ref="untrusted-data-received"/>
                <riskPattern ref="HTTP-SERVICE"/>
                <riskPattern ref="LOGS-POLICY"/>
                <riskPattern ref="GENERIC-SERVICE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="graphql-web-service" name="GraphQL Web Service" desc="The server side GraphQL web services that uses HTTP/S as the transport" categoryRef="service-side">
            <riskPatterns>
                <riskPattern ref="LOGS-POLICY"/>
                <riskPattern ref="graphql"/>
                <riskPattern ref="GENERIC-SERVICE"/>
                <riskPattern ref="WEB-SERVICE"/>
                <riskPattern ref="untrusted-data-received"/>
                <riskPattern ref="HTTP-SERVICE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="amazon-web-services-environment" name="AWS Account Environment" desc="Amazon Web Services Environment. Only select this if the security of the AWS environment will be managed in this product." categoryRef="amazon-web-services">
            <riskPatterns>
                <riskPattern ref="DEPLOYMENT-ENVIRONMENT"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="generic-service" name="Generic Service" desc="Any service that listens for connections on a network" categoryRef="service-side">
            <riskPatterns>
                <riskPattern ref="LOGS-POLICY"/>
                <riskPattern ref="GENERIC-SERVICE"/>
                <riskPattern ref="untrusted-data-received"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="web-application-server-side" name="Web Application - Server side" desc="The server side web application that services HTML/JS content" categoryRef="service-side">
            <riskPatterns>
                <riskPattern ref="LOGS-POLICY"/>
                <riskPattern ref="WEB-APP"/>
                <riskPattern ref="untrusted-data-received"/>
                <riskPattern ref="HTTP-SERVICE"/>
                <riskPattern ref="GENERIC-SERVICE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="web-service" name="Web Service" desc="The server side web services or API that uses HTTP/S as the transport" categoryRef="service-side">
            <riskPatterns>
                <riskPattern ref="untrusted-data-received"/>
                <riskPattern ref="HTTP-SERVICE"/>
                <riskPattern ref="GENERIC-SERVICE"/>
                <riskPattern ref="LOGS-POLICY"/>
                <riskPattern ref="WEB-SERVICE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="adobe-flash" name="Adobe Flash" desc="A client side component that uses Adobe Flash" categoryRef="client-side">
            <riskPatterns>
                <riskPattern ref="CLIENT:FLASH"/>
                <riskPattern ref="non-standard-w3c-client-technology"/>
                <riskPattern ref="GENERIC-CLIENT"/>
                <riskPattern ref="CLIENT:THICK"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="generic-client" name="Generic Client" desc="Any type of client that makes connections to a service" categoryRef="client-side">
            <riskPatterns>
                <riskPattern ref="GENERIC-CLIENT"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="java-applet" name="Java Applet" desc="A Java Applet that runs within a browser" categoryRef="client-side">
            <riskPatterns>
                <riskPattern ref="non-standard-w3c-client-technology"/>
                <riskPattern ref="CLIENT:APPLET"/>
                <riskPattern ref="CLIENT:THICK"/>
                <riskPattern ref="GENERIC-CLIENT"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="java-web-start" name="Java Web Start" desc="A Java Web Start application that is launched from a URL but runs locally" categoryRef="client-side">
            <riskPatterns>
                <riskPattern ref="GENERIC-CLIENT"/>
                <riskPattern ref="CLIENT:THICK"/>
                <riskPattern ref="CLIENT:WEBSTART"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="microsoft-silverlight" name="Microsoft Silverlight" desc="A client side component that uses Microsofts Silverlight" categoryRef="client-side">
            <riskPatterns>
                <riskPattern ref="non-standard-w3c-client-technology"/>
                <riskPattern ref="GENERIC-CLIENT"/>
                <riskPattern ref="CLIENT:THICK"/>
                <riskPattern ref="CLIENT:SILVERLIGHT"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="rich-client" name="Rich Client" desc="A client-side component with many of its resources installed on the client side itself" categoryRef="client-side">
            <riskPatterns>
                <riskPattern ref="CLIENT:THICK"/>
                <riskPattern ref="GENERIC-CLIENT"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="web-client" name="Web Client" desc="Generic HTTPS Web Client" categoryRef="client-side">
            <riskPatterns>
                <riskPattern ref="WEB-CLIENT"/>
                <riskPattern ref="GENERIC-CLIENT"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="web-ui" name="Web UI" desc="An HTML/JavaScript interface viewed by a browser" categoryRef="client-side">
            <riskPatterns>
                <riskPattern ref="GENERIC-CLIENT"/>
                <riskPattern ref="3rd-partly-web-libraries"/>
                <riskPattern ref="BROWSER"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="informix" name="Informix" desc="" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
                <riskPattern ref="DATASTORE"/>
                <riskPattern ref="DATABASE-SQL"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="microsoft-sql-server" name="Microsoft SQL Server" desc="" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="DATASTORE"/>
                <riskPattern ref="DATABASE-SQL"/>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="mysql" name="MySQL" desc="" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="DATABASE-SQL"/>
                <riskPattern ref="DATASTORE"/>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="oracle-db" name="Oracle DB" desc="" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
                <riskPattern ref="DATABASE-SQL"/>
                <riskPattern ref="DATASTORE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="postgresql" name="PostgreSQL" desc="" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="DATABASE-SQL"/>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
                <riskPattern ref="DATASTORE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="sqlite" name="SQLite" desc="" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="DATABASE-SQL"/>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
                <riskPattern ref="DATASTORE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="other-sql-database" name="Other SQL Database" desc="Any other SQL database not listed" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
                <riskPattern ref="DATABASE-SQL"/>
                <riskPattern ref="DATASTORE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="cassandra-nosql" name="Cassandra NoSQL" desc="" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="DATASTORE"/>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
                <riskPattern ref="DATABASE-NOSQL"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="mongodb-nosql" name="MongoDB NoSQL" desc="" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="DATABASE-NOSQL"/>
                <riskPattern ref="DATASTORE"/>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="riak-nosql" name="Riak NoSQL" desc="" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="DATASTORE"/>
                <riskPattern ref="DATABASE-NOSQL"/>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="other-nosql-key-value-store" name="Other NoSQL key-value store" desc="Any other NoSQL database not listed" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="DATASTORE"/>
                <riskPattern ref="DATABASE-NOSQL"/>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="active-directory" name="Active Directory" desc="" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="LDAP-STORE"/>
                <riskPattern ref="DATASTORE-OTHER"/>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
                <riskPattern ref="DATASTORE"/>
                <riskPattern ref="ACTIVE-DIRECTORY"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="ldap-directory" name="LDAP Directory" desc="" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="DATASTORE"/>
                <riskPattern ref="LDAP-STORE"/>
                <riskPattern ref="DATASTORE-OTHER"/>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="cloud-storage" name="Cloud Storage" desc="File storage on the cloud, such as S3 or similar" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
                <riskPattern ref="DATASTORE-OTHER"/>
                <riskPattern ref="CLOUD-STORAGE"/>
                <riskPattern ref="DATASTORE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="file-system" name="File system" desc="Storage a local or networked file system" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
                <riskPattern ref="DATASTORE-OTHER"/>
                <riskPattern ref="DATASTORE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="other-database" name="Other data store" desc="" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="DATASTORE"/>
                <riskPattern ref="DATASTORE-OTHER"/>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="other" name="Other database" desc="" categoryRef="data-store">
            <riskPatterns>
                <riskPattern ref="DATASTORE"/>
                <riskPattern ref="GENERIC-OTS-SERVICE"/>
                <riskPattern ref="DATASTORE-OTHER"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="internal-server" name="Internal Server" desc="" categoryRef="on-premises-architecture">
            <riskPatterns>
                <riskPattern ref="DEPLOYMENT-ENVIRONMENT"/>
                <riskPattern ref="INF-SERVER"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="microsoft-azure-environment" name="Microsoft Azure Environment" desc="Microsoft Azure. Only select this if the security of the Microsoft Azure environment will be managed in this product." categoryRef="microsoft-azure">
            <riskPatterns>
                <riskPattern ref="DEPLOYMENT-ENVIRONMENT"/>
            </riskPatterns>
        </componentDefinition>
        <componentDefinition ref="google-cloud-platform-environment" name="Google Cloud Platform Environment" desc="Only select this if the security of the Google Cloud Platform environment will be managed in this product." categoryRef="google-cloud-platform">
            <riskPatterns>
                <riskPattern ref="DEPLOYMENT-ENVIRONMENT"/>
            </riskPatterns>
        </componentDefinition>
    </componentDefinitions>
    <udts/>
    <supportedStandards>
        <supportedStandard ref="nist-800-63" name="NIST 800-63"/>
        <supportedStandard ref="OWASP-MASVS-L1+R" name="OWASP-MASVS-L1+R"/>
        <supportedStandard ref="OWASP-MASVS-L2+R" name="OWASP-MASVS-L2+R"/>
        <supportedStandard ref="hipaa-addressable" name="HIPAA Addressable"/>
        <supportedStandard ref="OWASP-MASVS-L1" name="OWASP-MASVS-L1"/>
        <supportedStandard ref="OWASP-MASVS-L2" name="OWASP-MASVS-L2"/>
        <supportedStandard ref="EU-GDPR" name="EU-GDPR"/>
        <supportedStandard ref="hipaa-required" name="HIPAA Required"/>
        <supportedStandard ref="iotsf-class-0" name="IoTSF Class 0"/>
        <supportedStandard ref="iotsf-class-1" name="IoTSF Class 1"/>
        <supportedStandard ref="iotsf-class-2" name="IoTSF Class 2"/>
        <supportedStandard ref="ISO/IEC 27002:2013" name="ISO/IEC 27002:2013"/>
        <supportedStandard ref="owasp-top-10-2017" name="OWASP Top 10 2017"/>
        <supportedStandard ref="owasp-asvs4-level-2" name="OWASP-ASVS4-Level-2"/>
        <supportedStandard ref="owasp-asvs4-level-3" name="OWASP-ASVS4-Level-3"/>
        <supportedStandard ref="owasp-asvs4-level-1" name="OWASP-ASVS4-Level-1"/>
        <supportedStandard ref="NIST 800-53" name="NIST 800-53"/>
    </supportedStandards>
    <components>
        <component ref="EXT-LIBRARIES" name="3rd Party Libraries" desc="External libraries used by both client and server side components." tags="" position="2" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-359" name="Exposure of Private Information ('Privacy Violation')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T12:56:29.803000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not properly prevent private data (such as
					credit card numbers) from being accessed by actors who either (1) are not
					explicitly authorized to access the data or (2) do not have the implicit consent
					of the people to which the data is related.</desc>
                </weakness>
                <weakness ref="CWE-829" name="Inclusion of Functionality from Untrusted Control Sphere" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-04T16:07:02.203000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software imports, requires, or includes executable
					functionality (such as a library) from a source that is outside of the intended
					control sphere.</desc>
                </weakness>
                <weakness ref="CWE-511" name="Logic/Time Bomb" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T13:01:11.658000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software contains code that is designed to disrupt the
					legitimate operation of the software (or its environment) when a certain time
					passes, or when a certain logical condition is met.</desc>
                </weakness>
                <weakness ref="CWE-353" name="Missing Support for Integrity Check" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T13:05:59.984000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software uses a transmission protocol that does not include
					a mechanism for verifying the integrity of the data during transmission, such as
					a checksum.</desc>
                </weakness>
                <weakness ref="CWE-937" name="Third party libraries contain security weaknesses" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP Top 10 - A9" url="https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:11.657000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>In theory, it ought to be easy to figure out if you are currently using any vulnerable
                        components or libraries. Unfortunately, vulnerability reports for commercial or open source
                        software do not always specify exactly which versions of a component are vulnerable in a
                        standard, searchable way. Further, not all libraries use an understandable version numbering
                        system. Worst of all, not all vulnerabilities are reported to a central clearinghouse that is
                        easy to search, although sites like CVE and NVD are becoming easier to search.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;Determining if you are vulnerable requires searching these databases, as well as
                        keeping abreast of project mailing lists and announcements for anything that might be a
                        vulnerability. If one of your components does have a vulnerability, you should carefully
                        evaluate whether you are actually vulnerable by checking to see if your code uses the part of
                        the component with the vulnerability and whether the flaw could result in an impact you care
                        about.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;Component vulnerabilities can cause almost any type of risk imaginable, ranging from
                        the trivial to sophisticated malware designed to target a specific organization. Components
                        almost always run with the full privilege of the application, so flaws in any component can be
                        serious.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-507" name="Trojan Horse" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T13:01:06.295000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software appears to contain benign or useful functionality,
					but it also contains code that is hidden from normal operation that violates the
					intended security policy of the user or the system
					administrator.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="apply-patches-to-server" name="Apply required security patches" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Vendors and other maintainers of software release patches in response to security flaws and other bugs in their products. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Apply patches and other software updates in a timely manner to prevent unexpected failures or exploitation.&lt;/li&gt; 
  &lt;li&gt;Clearly define an approach for testing and applying patches, in particular security patches, with expected timescales.&amp;nbsp; There is often a small window between release of a patch, and potentially malicious actors reverse-engineering the patch to identify and exploit the flaw.&lt;/li&gt; 
  &lt;li&gt;Use a threat intelligence, vulnerability scanning, or other alerting service to ensure the project team is aware of issues within the project or its components promptly.&lt;/li&gt; 
  &lt;li&gt;If the application has a client or server with the auto-update feature, updates shall be obtained over secure channels and digitally signed. Also, the update code shall validate the digital signature of the updated before installing or executing the update.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="CM-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="10.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="10.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="10.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Verify there is a process for identifying, categorizing, and prioritizing security and other patches.&lt;/li&gt; 
  &lt;li&gt;Review the testing and release process.&lt;/li&gt; 
  &lt;li&gt;Verify patches are applied in a timely manner, in line with the policies and taking into account the associated risk.&lt;/li&gt; 
  &lt;li&gt;Verify that the updates are obtained over secure channel and digitally signed. And the digital signature was validated.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-09-30T08:42:47.422000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="PATCH-SERVER" name="Apply required security patches" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Vendors and other maintainers of software release patches in response to security flaws and
                        other bugs in their products.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Apply patches and other software updates in a timely manner to prevent unexpected
                        failures or exploitation.&lt;/li&gt;
                        &lt;li&gt;Clearly define an approach for testing and applying patches, in particular security
                        patches, with expected timescales. &amp;nbsp;There is often a small window between release of a
                        patch, and potentially malicious actors reverse-engineering the patch to identify and exploit
                        the flaw.&lt;/li&gt;
                        &lt;li&gt;Use a threat intelligence, vulnerability scanning, or other alerting service to ensure
                        the project team is aware of issues within the project or its components promptly.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="CM-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Verify there is a processes for identifying, categorizing, and prioritizing
                            security and other patches.&lt;/li&gt;
                            &lt;li&gt;Review the testing and release process.&lt;/li&gt;
                            &lt;li&gt;Verify patches are applied in a timely manner, in line with the policies and
                            taking into account the associated risk.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.535000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="lib-management" name="Have an accurate inventory of all third-party components and keep traceability to the components' repository of origin" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Secure coding libraries and software frameworks with embedded security help software developers guard against security-related design and implementation flaws. A developer writing an application from scratch might not have sufficient knowledge, time, or budget to properly implement or maintain security features. Leveraging security frameworks helps accomplish security goals more efficiently and accurately. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When incorporating third party libraries or frameworks into your software, it is important to consider the following best practices: 
&lt;/div&gt; 
&lt;div&gt;
  1.- Use libraries and frameworks from trusted sources that are actively maintained and widely used by many applications. 
&lt;/div&gt; 
&lt;div&gt;
  2.- Create and maintain an inventory catalog of all the third party libraries. 
&lt;/div&gt; 
&lt;div&gt;
  3.- Proactively keep libraries and components up to date. Use a tool like OWASP Dependency Check and Retire.JS to identify project dependencies and check if there are any known, publicly disclosed vulnerabilities for all third party code. 
&lt;/div&gt; 
&lt;div&gt;
  4.- Reduce the attack surface by encapsulating the library and expose only the required behavior into your software. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="C2: Leverage Security Frameworks and Libraries" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c2-leverage-security-frameworks-libraries.html"/>
                        <reference name="Component Analysis" url="https://www.owasp.org/index.php/Component_Analysis"/>
                    </references>
                    <standards>
                        <standard ref="14.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.2.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="14.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
  Some things to consider when evaluating the health of an open source project: 
&lt;/div&gt; 
&lt;div&gt;
  - Quality Controls and Metrics - The overall quality and controls for achieving and maintaining high-quality components may be a factor in risk evaluation. For software components, this refers to the use of unit and integration tests, linters and static analysis tools, the percentage of coverage, and results from various tools. 
&lt;/div&gt; 
&lt;div&gt;
  - Community Engagement - The current and historical trend for a project and its maintainers to accept pull requests, answer defect and enhancement requests, and engage in productive collaboration with the community may be a factor in risk evaluation. 
&lt;/div&gt; 
&lt;div&gt;
  - Vulnerability Analysis - Analyzing current and historical security vulnerabilities for timeline trends and for root-cause patterns may signify a projects ability to protect the community from future (and similar) issues. This activity may be a factor in risk evaluation.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP Dependency-Check" url="https://www.owasp.org/index.php/OWASP_Dependency_Check"/>
                            <reference name="Retire.js" url="https://retirejs.github.io/retire.js/"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-04T16:08:23.414000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-937" name="Regularly check for known vulnerabilities in the dependencies of your project" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Vulnerabilities in common popular and shared libraries are published and recorded in a number of
                        online databases and services, including the MITRE CVE and CWE databases.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Perform regular checks for published vulnerabilities in third party components and the
                        IDE.&lt;/li&gt;
                        &lt;li&gt;Test and apply appropriate recommended patches and mitigations.&lt;/li&gt;
                        &lt;li&gt;Use subscription threat intelligence and alerting services to ensure timely
                        notification of possible threats&lt;/li&gt;
                        &lt;li&gt;Use automated vulnerability scanning tools to identify and test for security threats
                        to the project.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;ul&gt;
                        &lt;/ul&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="Common Vulnerabilities and Exposures (CVE) Database" url="https://cve.mitre.org/"/>
                        <reference name="Common Weakness Enumeration (CWE) Database" url="https://cwe.mitre.org"/>
                    </references>
                    <standards>
                        <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SA-15" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="14.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.14.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.14.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="14.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Ensure a process is in place to regularly check for vulnerabilities in software
                            components and libraries. Sources should include:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Vendor notifications&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Threat intelligence feeds&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Vulnerability scanning.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Verify that processes exist to respond to vulnerabilities to research, test, and
                            deploy appropriate patches.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            The following tools can help in automating dependencies checks:
                            &lt;ul&gt;
                            &lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_Dependency_Check"&gt;OWASP
                            Dependency Check&lt;/a&gt;&amp;nbsp;for Java and .NET.&lt;/li&gt;
                            &lt;li&gt;&lt;a href="http://retirejs.github.io/retire.js/"&gt;Retire.js&lt;/a&gt;&amp;nbsp;with
                            support to scan several different of the most popular JS libraries andframeworks.&lt;/li&gt;
                            &lt;li&gt;&lt;a href="https://nodesecurity.io/opensource"&gt;nodesecurity.io&lt;/a&gt;&amp;nbsp;which
                            focuses on node packages and libraries' security.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-10-11T10:33:59.664000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="remove-function-collect-privacy-data-without-consent" name="Remove any functionality to collect privacy data without user's permissions and consent" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Review the application code and third party libraries and ensure that there is not any functionality to collect privacy data collection (like phone numbers, email address, ...) before the user's permissions and consent. If there is some functionality to collect privacy data, you shall remove this functionality or the third party library.</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="10.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="10.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Verify that the application source code and third party libraries do not contain unauthorized phone home or data collection capabilities.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T12:58:07.553000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="scan-antivirus" name="Scan the application and systems with antivirus software" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Scan periodically with an antivirus software, the application and the systems related to the application. With this procedure, we ensure that there is not any Malicious code, such as Trojan, Worms, Bomb Logic, ...</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Verify that the antivirus software is updated to the last version.&lt;/li&gt; 
  &lt;li&gt;Verify that the antivirus software doesn't throw any alert about malicious code.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T13:04:22.090000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="integrity-protections" name="Use integrity protections" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Subresource Integrity (SRI) is a security feature that enables browsers to verify that resources they fetch (for example, from a CDN) are delivered without unexpected manipulation. It works by allowing you to provide a cryptographic hash that a fetched resource must match. 
&lt;/div&gt; 
&lt;div&gt;
  Using Content Delivery Networks (CDNs) to host files such as scripts and stylesheets that are shared among multiple sites can improve site performance and conserve bandwidth. However, using CDNs also comes with a risk, in that if an attacker gains control of a CDN, the attacker can inject arbitrary malicious content into files on the CDN (or replace the files completely) and thus can also potentially attack all sites that fetch files from that CDN. 
&lt;/div&gt; 
&lt;div&gt;
  Subresource Integrity enables you to mitigate some risks of attacks such as this, by ensuring that the files your web application or web document fetches (from a CDN or anywhere) have been delivered without a third-party having injected any additional content into those files - and without any other changes of any kind at all having been made to those files. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Use Content Security Policy to configure your server to mandate that specific types of files require the use of Subresource Integrity, such as loading includes, modules, plugins, code, or libraries from untrusted sources or the Internet. 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="MDN web docs: Sub-resource integrity" url="https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity"/>
                    </references>
                    <standards>
                        <standard ref="10.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="10.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="10.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="14.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>The application must not load or execute code from untrusted sources, such as loading includes, modules, plugins, code, or libraries from untrusted sources or the Internet.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T13:07:26.440000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="GENERAL" name="General" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-464" name="An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places to include: Standard HTTP Cookies, Local Shared Objects (Flash Cookies), Silverlight Isolated Storage, Storing cookies in RGB values of auto-generated, force-cached, PNGs using HTML5 Canvas tag to read pixels (cookies) back out, Storing cookies in Web History, Storing cookies in HTTP ETags, Storing cookies in Web cache, window.name caching, Internet Explorer userData storage, HTML5 Session Storage, HTML5 Local Storage, HTML5 Global Storage, HTML5 Database Storage via SQLite, among others. 
&lt;br /&gt;When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="remove-function-collect-privacy-data-without-consent" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-359">
                                    <controls>
                                        <control ref="remove-function-collect-privacy-data-without-consent" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-175" name="An attacker exploits a weakness in input validation on the target to force arbitrary code to be retrieved from a remote location and executed" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker exploits a weakness in input validation on the target to force arbitrary code to be retrieved from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application. One example of this sort of attack is PHP file include attacks where the parameter of an include() function is set by a variable that an attacker is able to control. The result is that arbitrary code could be loaded into the PHP application and executed. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="lib-management" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-829">
                                    <controls>
                                        <control ref="lib-management" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-467" name="An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the &amp;quot;remember me&amp;quot; feature to keep his or her session with the social networking site active. An attacker induces a payload to execute in the victim's browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing). 
&lt;br /&gt;In one example of an attack, an attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in his or her browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site. There are many other ways in which the attacker may get the payload to execute in the victim's browser mainly by finding a way to hide it in some reputable site that the victim visits. The attacker could also send the link to the victim in an e-mail and trick the victim into clicking on the link. 
&lt;br /&gt;This attack is basically a cross site request forgery attack with two main differences. First, there is no action that is performed on behalf of the user aside from harvesting information. So standard CSRF protection may not work in this situation. Second, what is important in this attack pattern is the nature of the data being harvested, which is identifying information that can be obtained and used in context. This real time harvesting of identifying information can be used as a prelude for launching real time targeted social engineering attacks on the victim. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="remove-function-collect-privacy-data-without-consent" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-359">
                                    <controls>
                                        <control ref="remove-function-collect-privacy-data-without-consent" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-389" name="An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="integrity-protections" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-353">
                                    <controls>
                                        <control ref="integrity-protections" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CWE-937" name="Attackers gain unauthorised access to data or services by exploiting weaknesses in third party libraries" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Applications typically make extensive use of 3rd party libraries to provide common
                                functions. Attackers could target vulnerabilities in these libraries in order to gain
                                unauthorized access to data or services.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;div&gt;
                                Since the use of particular libraries and even versions of those libraries can often be
                                determined remotely, attackers can sometimes employ automated scanning tools to identify
                                vulnerable software. This increases the likelihood of attack.
                                &lt;/div&gt;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CWE-937" mitigation="50"/>
                                <control ref="PATCH-SERVER" mitigation="50"/>
                                <control ref="apply-patches-to-server" mitigation="10"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-937">
                                    <controls>
                                        <control ref="CWE-937" mitigation="50"/>
                                        <control ref="PATCH-SERVER" mitigation="50"/>
                                        <control ref="apply-patches-to-server" mitigation="10"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-14" name="Client-side Injection-induced Buffer Overflow" state="Expose" source="MANUAL" owner="" library="">
                            <desc>This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="integrity-protections" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-353">
                                    <controls>
                                        <control ref="integrity-protections" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-190" name="Reverse Engineer an Executable to Expose Assumed Hidden Functionality or Content" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker analyzes a binary file or executable for the purpose of discovering the structure, function, and possibly source-code of the file by using a variety of analysis techniques to effectively determine how the software functions and operates. This type of analysis is also referred to as Reverse Code Engineering, as techniques exist for extracting source code from an executable. 
&lt;br /&gt;Several techniques are often employed for this purpose, both black box and white box. The use of computer bus analyzers and packet sniffers allows the binary to be studied at a level of interactions with its computing environment, such as a host OS, inter-process communication, and/or network communication. This type of analysis falls into the 'black box' category because it involves behavioral analysis of the software without reference to source code, object code, or protocol specifications. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="scan-antivirus" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-511">
                                    <controls>
                                        <control ref="scan-antivirus" mitigation="100"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-507">
                                    <controls>
                                        <control ref="scan-antivirus" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="3rd-partly-web-libraries" name="3rd Party Web Libraries" desc="JavaScript or other external libraries dynamically included in web content" tags="" position="73" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-830" name="Inclusion of Web Functionality from an Untrusted Source" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-11-18T14:51:05.701000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software includes web functionality (such as a web widget)
                        from another domain, which causes it to operate within the domain of the
                        software, potentially granting total access and control of the software to the
                        untrusted source.
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="ASSETS-HOSTED-BY-APP" name="Ensure that all application assets are hosted by the application" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Review periodically all assets which are accessed by the application and ensure that these
                        assets are hosted by the application. If this is not the case and there are assets in external
                        providers or a CDN, you shall move these assets to be hosted by the application and remove them
                        from external providers or CDNs.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="SI-7" supportedStandardRef="NIST 800-53"/>
                        <standard ref="14.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that all assets are hosted by the application, and not by external providers.
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T11:44:50.541000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="general" name="General" desc="" library="">
                    <threats>
                        <threat ref="CWE-937-WEB" name="Attackers gain unauthorised access to data by compromising third party web resources" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Web applications typically make extensive use of 3rd party web resources such as
                                JavaScript and CSS files.&amp;nbsp; Should attackers gain access to the source code
                                repositories, or even Content Delivery Networks that host these libraries, then they
                                could gain access to applications that use this content.
                                &lt;div&gt;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="ASSETS-HOSTED-BY-APP" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-830">
                                    <controls>
                                        <control ref="ASSETS-HOSTED-BY-APP" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="BINARY" name="Binary" desc="A component that uses binary, i.e. unmanaged code" tags="" position="3" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-120" name="Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')" url="http://cwe.mitre.org/data/definitions/120.html"/>
                            <reference name="Smashing The Stack For Fun And Profit" url="http://insecure.org/stf/smashstack.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:12.896000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The program copies an input buffer to an output buffer without verifying that the size of the
                        input buffer is less than the size of the output buffer, leading to a buffer overflow.
                        &lt;br /&gt;A buffer overflow condition exists when a program attempts to put more data in a
                        buffer than it can hold, or when a program attempts to put data in a memory area outside of the
                        boundaries of a buffer. The simplest type of error, and the most common cause of buffer
                        overflows, is the &amp;quot;classic&amp;quot; case in which the program copies the buffer
                        without restricting how much is copied. Other variants exist, but the existence of a classic
                        overflow strongly suggests that the programmer is not considering even the most basic of
                        security protections.
                        &lt;br /&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-494" name="Download of Code Without Integrity Check" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-26T13:40:10.695000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.</desc>
                </weakness>
                <weakness ref="CWE-359" name="Exposure of Private Information ('Privacy Violation')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T12:59:36.675000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not properly prevent private data (such as
					credit card numbers) from being accessed by actors who either (1) are not
					explicitly authorized to access the data or (2) do not have the implicit consent
					of the people to which the data is related.</desc>
                </weakness>
                <weakness ref="CWE-511" name="Logic/Time Bomb" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T13:05:11.873000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software contains code that is designed to disrupt the
					legitimate operation of the software (or its environment) when a certain time
					passes, or when a certain logical condition is met.</desc>
                </weakness>
                <weakness ref="CWE-265" name="Privilege or Sandbox Issues" state="0" impact="75">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE CATEGORY: Privilege / Sandbox Issues" url="https://cwe.mitre.org/data/definitions/265.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-26T16:42:20.878000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Weaknesses in this category occur with improper enforcement of sandbox environments, or the improper handling, assignment, or management of privileges. 
&lt;br /&gt;</desc>
                </weakness>
                <weakness ref="CWE-507" name="Trojan Horse" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T13:05:11.876000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software appears to contain benign or useful functionality,
					but it also contains code that is hidden from normal operation that violates the
					intended security policy of the user or the system
					administrator.</desc>
                </weakness>
                <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Identify the areas of the application that can be affected by the following causes:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Misconfiguration.&lt;/li&gt;
                            &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                            behavior.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Perform testing on them to look for a security problem.&amp;nbsp;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-2: Unexpected Environment Condition" url="https://cwe.mitre.org/data/definitions/2.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-26T16:00:00.084000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>This is a generic weakness that includes several different situations, they are all related to
                        unexpected environmental conditions and they could be related to:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Misconfiguration.&lt;/li&gt;
                        &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                        behavior.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-120-RANDOM" name="Enable and enforce Address Space Layout Randomisation (ASLR)" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Modern operating systems offer randomization of process address space to reduce the
                        predictability of the location of code elements in memory, and inhibit exploitation of overflow
                        vulnerabilities.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        However, it is often possible to disable or otherwise at least partially opt out of these
                        protections at a system or process level.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure ASLR is enabled and enforced at the operating system level where possible.&lt;/li&gt;
                        &lt;li&gt;Enable ASLR controls in the project.&lt;/li&gt;
                        &lt;li&gt;Review dependencies to ensure they utilize ASLR, and if not, consider alternatives
                        that do.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;&lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="14.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Confirm the Operating System has ASLR enabled, for example:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Linux: Check&amp;nbsp;/proc/sys/kernel/randomize_va_space which must contain &amp;quot;2&amp;quot;&lt;/li&gt;
                            &lt;li&gt;Windows: it is enabled by default starting from Windows Vista. &amp;nbsp;The
                            Enhanced Mitigation Experience Toolkit (EMET) tool from Microsoft can be used to check
                            system ASLR status, as can the registry key&amp;nbsp;&lt;code&gt;HKLM\SYSTEM\CurrentControlSet\Control\Session
                            Manager\Memory Management\MoveImages&lt;/code&gt;.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;
                            &lt;li&gt;On Windows, binaries can be set to not use ASLR with the&amp;nbsp;/DYNAMICBASE:NO
                            compiler flag. Check the binary has not been compiled that way.&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Tools including Process Explorer and PowerShell command PowerShell Get-PESecurity
                            can be used to confirm ASLR for individual binaries.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="ASLR - Definition" url="https://en.wikipedia.org/wiki/Address_space_layout_randomization"/>
                            <reference name="ASLR in Windows" url="https://msdn.microsoft.com/en-us/library/bb384887.aspx"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:12.931000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-120-STACK" name="Enforce stack and heap protection measures, including disabling stack execution" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Many modern operating systems offer protections to disallow code from executing from the
                        stack, inhibiting overflow attacks which rely on executing user code on the stack.
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Enable stack protection at the operating system level, and verify opt out is not
                        permitted.&lt;/li&gt;
                        &lt;li&gt;Ensure project components are developed with DEP / NX or equivalent stack protections.&lt;/li&gt;
                        &lt;li&gt;Review all libraries and dependencies to ensure they also enforce stack protection,
                        and if not, consider alternatives that do.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;&lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="14.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            Stack and Heap protection measures apply to the Operating System (OS), and to the binaries
                            themselves.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Verify the OS supports Non eXecutable stack (NX) protection and it is enabled:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Old processors do not support this feature.&amp;nbsp; As a result, some Linux
                            distributions (for example Ubuntu) enable or disable the NX bit depending on the processor
                            support.&lt;/li&gt;
                            &lt;li&gt;On Windows, NX is enabled by default from Windows XP SP2 and Windows Server 2003
                            SP1.&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure the binary has NOT been complied with flags that disable stack protection;
                            e.g. check for:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;-fno-stack-protector on gcc&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Security Protections on Buffers on Microsoft Visual C/C++ for Windows&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="Data Execution Prevention" url="https://en.wikipedia.org/wiki/Executable_space_protection"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:12.917000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="APP-SANDBOX" name="Ensure that application deployments adequately sandbox, containerize and/or isolate at the network level" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Ensure that application deployments adequately sandbox, containerize and/or isolate at the network level to delay and deter attackers from attacking other applications, especially when they are performing sensitive or dangerous actions such as deserialization. 
&lt;br /&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="(C5) OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                        <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
                    </references>
                    <standards>
                        <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.14.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.14.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="14.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;p&gt;Serialization may be used in applications for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt; 
 &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt; 
 &lt;li&gt;Caching/Persistence&lt;/li&gt; 
 &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt; 
 &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Applications and APIs will be vulnerable if they deserialize hostile or tampered objects supplied by an attacker.&amp;nbsp;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Verify if there are classes available to the application that can change behavior during or after deserialization.&lt;/li&gt; 
 &lt;li&gt;Verify if it's possible to modify application logic using access-control-related attacks where existing data structures are used but the content is changed.&lt;/li&gt; 
&lt;/ul&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Java Unmarshaller Security - Turning your data into code execution" url="https://github.com/mbechler/marshalsec"/>
                            <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-26T16:44:03.366000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-494-BINSIG" name="Ensure that if deploying binaries to untrusted devices makes use of binary signatures, trusted connections, and verified endpoints." platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  It may be helpful to use tools or frameworks to perform integrity checking on the transmitted code. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;When providing the code that is to be downloaded, such as for automatic updates of the software, then use cryptographic signatures for the code and modify the download clients to verify the signatures. Ensure that the implementation does not contain CWE-295, CWE-320, CWE-347, and related weaknesses.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use code signing technologies such as Authenticode. See references [REF-454] [REF-455] [REF-456]. &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Introduction to Code Signing" url="https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms537361(v=vs.85)"/>
                        <reference name="Top 25 Series - Rank 20 - Download of Code Without Integrity Check" url="https://software-security.sans.org/blog/2010/04/05/top-25-series-rank-20-download-code-integrity-check/"/>
                    </references>
                    <standards>
                        <standard ref="1.14.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.14.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. 
&lt;br /&gt; 
&lt;br /&gt;Attach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking. 
&lt;br /&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP Windows Binary Executable Files Security Checks Project" url="https://www.owasp.org/index.php/OWASP_Windows_Binary_Executable_Files_Security_Checks_Project"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-26T13:46:53.764000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="SEC-DEPLOY" name="Ensure that the build pipeline contains a build step to automatically build and verify the secure deployment of the application" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Ensure that the build pipeline contains a build step to automatically build and verify the secure deployment of the application, particularly if the application infrastructure is software defined, such as cloud environment build scripts.</desc>
                    <implementations/>
                    <references>
                        <reference name="Secure development and deployment guidance" url="https://www.ncsc.gov.uk/collection/developers-collection?curPage=/collection/developers-collection/principles/secure-the-build-and-deployment-pipeline"/>
                    </references>
                    <standards>
                        <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Understanding the deployed configuration of the server hosting the web application is almost as important as the application security testing itself. After all, an application chain is only as strong as its weakest link. Application platforms are wide and varied, but some key platform configuration errors can compromise the application in the same way an unsecured application can compromise the server. 
&lt;br /&gt; 
&lt;br /&gt;In order to evaluate the readiness of the application platform, testing for configuration management includes the following sections: 
&lt;br /&gt; 
&lt;br /&gt;4.3.1 Test Network/Infrastructure Configuration (OTG-CONFIG-001) 
&lt;br /&gt;4.3.2 Test Application Platform Configuration (OTG-CONFIG-002) 
&lt;br /&gt;4.3.3 Test File Extensions Handling for Sensitive Information (OTG-CONFIG-003) 
&lt;br /&gt;4.3.4 Review Old, Backup and Unreferenced Files for Sensitive Information (OTG-CONFIG-004) 
&lt;br /&gt;4.3.5 Enumerate Infrastructure and Application Admin Interfaces (OTG-CONFIG-005) 
&lt;br /&gt;4.3.6 Test HTTP Methods (OTG-CONFIG-006) 
&lt;br /&gt;4.3.7 Test HTTP Strict Transport Security (OTG-CONFIG-007) 
&lt;br /&gt;4.3.8 Test RIA cross domain policy (OTG-CONFIG-008) 
&lt;br /&gt;4.3.9 Test File Permission (OTG-CONFIG-009) 
&lt;br /&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Testing for configuration management" url="https://www.owasp.org/index.php/Testing_for_configuration_management"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-26T16:08:42.940000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ENV-USE" name="Ensure there are no environmental security weaknesses" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Application security can be undermined by misconfiguration of the underlying server or
                        development environment.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Ensure that vendor and best-practice guidelines have been applied, in particular affecting areas
                        such as:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Cryptographic strength of elements such as session tokens, GUIDs, and protection of
                        data in transit and at rest.&lt;/li&gt;
                        &lt;li&gt;Removal of debugging and compiler options and artifacts used during development.&lt;/li&gt;
                        &lt;li&gt;Configuration of error trapping and use of generic error messages and pages (e.g.
                        stack traces should not be returned to users).&lt;/li&gt;
                        &lt;li&gt;Appropriate access controls over software components, variables (e.g. EJBs and
                        methods).&lt;/li&gt;
                        &lt;li&gt;Insecure or inappropriate storage of data in configuration files or other data
                        structures (e.g. passwords in config files).&lt;/li&gt;
                        &lt;li&gt;Use of compilation/build features or security enhancements provided by the IDE&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;&lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;table&gt;
                            &lt;tbody&gt;
                            &lt;tr&gt;
                            &lt;td&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            Identify the areas of the application that can be affected by the following causes:&amp;nbsp;
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Misconfiguration.&lt;/li&gt;
                            &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                            behavior.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Verify they are correctly implemented.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;&lt;/td&gt;
                            &lt;/tr&gt;
                            &lt;/tbody&gt;
                            &lt;/table&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-19T10:25:59.986000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="memory-safe-ops" name="Implement input validation techniques to prevent memory overflows" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold or when a program attempts to put data in a memory area past a buffer. In this case, a buffer is a sequential section of memory allocated to contain anything from a character string to an array of integers. Writing outside the bounds of a block of allocated memory can corrupt data, crash the program, or cause the execution of malicious code. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A number of general techniques can be used to prevent memory overflows: 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The most secure control against memory attack is to use a language that does not allow you to directly manipulate memory or contains exception handling where you might attempt to do something harmful. For instance, Java, .Net and PHP are all secure against memory tampering as long as you do not use them to call extensions written in C/C++ or equivalent low-level languages.&lt;br /&gt;&lt;/li&gt; 
  &lt;li&gt;Use memory-safe string, safer memory copy and pointer arithmetic to detect or prevent stack, buffer, or heap overflows.&lt;/li&gt; 
  &lt;li&gt;Make sure format strings do not take potentially hostile input, and are constant.&lt;/li&gt; 
  &lt;li&gt;Use sign, range, and input validation techniques to prevent integer overflows.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Buffer Overflows" url="https://www.owasp.org/index.php/Buffer_Overflows"/>
                        <reference name="Reviewing Code for Buffer Overruns and Overflows" url="https://www.owasp.org/index.php/Reviewing_Code_for_Buffer_Overruns_and_Overflows"/>
                    </references>
                    <standards>
                        <standard ref="5.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Search for calls to insecure library functions like gets(), strcpy(), strcat() etc which do not validate the length of source strings and blindly copy data into fixed size buffers. 
&lt;div&gt;
  Static code analysis tools can also help in locating heap related vulnerabilities such as "double free" etc. A variety of tools like RATS, Flawfinder and ITS4 are available for analyzing C-style languages. 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Testing for Buffer Overflow (OTG-INPVAL-014)" url="https://www.owasp.org/index.php/Testing_for_Buffer_Overflow_(OTG-INPVAL-014)"/>
                            <reference name="Testing for Format String" url="https://www.owasp.org/index.php/Testing_for_Format_String"/>
                            <reference name="Testing for Heap Overflow" url="https://www.owasp.org/index.php/Testing_for_Heap_Overflow"/>
                            <reference name="Testing for Stack Overflow" url="https://www.owasp.org/index.php/Testing_for_Stack_Overflow"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-01T11:25:26.340000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="remove-function-collect-privacy-data-without-consent" name="Remove any functionality to collect privacy data without user's permissions and consent" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Review the application code and third party libraries and ensure that there is not any functionality to collect privacy data collection (like phone numbers, email address, ...) before the user's permissions and consent. If there is some functionality to collect privacy data, you shall remove this functionality or the third party library.</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="10.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="10.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Verify that the application source code and third party libraries do not contain unauthorized phone home or data collection capabilities.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T12:58:07.553000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="scan-antivirus" name="Scan the application and systems with antivirus software" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Scan periodically with an antivirus software, the application and the systems related to the application. With this procedure, we ensure that there is not any Malicious code, such as Trojan, Worms, Bomb Logic, ...</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Verify that the antivirus software is updated to the last version.&lt;/li&gt; 
  &lt;li&gt;Verify that the antivirus software doesn't throw any alert about malicious code.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T13:04:22.090000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="DEPLOYMENT" name="Deployment" desc="Deploying binaries to devices" library="">
                    <threats>
                        <threat ref="7k-CWE-Environment" name="Attackers gain unauthorised access to the application through an environment flaw" state="Expose" source="MANUAL" owner="" library="">
                            <desc>This section includes everything that is outside of the source code but is still critical to the security of the product that is being created. Because the issues covered by this kingdom are not directly related to source code, we separated it from the rest of the kingdoms.&amp;nbsp;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="APP-SANDBOX" mitigation="10"/>
                                <control ref="ENV-USE" mitigation="100"/>
                                <control ref="SEC-DEPLOY" mitigation="10"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-265">
                                    <controls>
                                        <control ref="APP-SANDBOX" mitigation="10"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-2">
                                    <controls>
                                        <control ref="ENV-USE" mitigation="100"/>
                                        <control ref="SEC-DEPLOY" mitigation="10"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-184" name="Software Integrity Attack" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="CWE-494-BINSIG" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-494">
                                    <controls>
                                        <control ref="CWE-494-BINSIG" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="GENERAL" name="General" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-464" name="An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places to include: Standard HTTP Cookies, Local Shared Objects (Flash Cookies), Silverlight Isolated Storage, Storing cookies in RGB values of auto-generated, force-cached, PNGs using HTML5 Canvas tag to read pixels (cookies) back out, Storing cookies in Web History, Storing cookies in HTTP ETags, Storing cookies in Web cache, window.name caching, Internet Explorer userData storage, HTML5 Session Storage, HTML5 Local Storage, HTML5 Global Storage, HTML5 Database Storage via SQLite, among others. 
&lt;br /&gt;When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="remove-function-collect-privacy-data-without-consent" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-359">
                                    <controls>
                                        <control ref="remove-function-collect-privacy-data-without-consent" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-467" name="An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the &amp;quot;remember me&amp;quot; feature to keep his or her session with the social networking site active. An attacker induces a payload to execute in the victim's browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing). 
&lt;br /&gt;In one example of an attack, an attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in his or her browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site. There are many other ways in which the attacker may get the payload to execute in the victim's browser mainly by finding a way to hide it in some reputable site that the victim visits. The attacker could also send the link to the victim in an e-mail and trick the victim into clicking on the link. 
&lt;br /&gt;This attack is basically a cross site request forgery attack with two main differences. First, there is no action that is performed on behalf of the user aside from harvesting information. So standard CSRF protection may not work in this situation. Second, what is important in this attack pattern is the nature of the data being harvested, which is identifying information that can be obtained and used in context. This real time harvesting of identifying information can be used as a prelude for launching real time targeted social engineering attacks on the victim. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="remove-function-collect-privacy-data-without-consent" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-359">
                                    <controls>
                                        <control ref="remove-function-collect-privacy-data-without-consent" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-100" name="Attackers gain unauthorised access to the application through buffer overflow flaws" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Buffer Overflow attacks target improper or missing bounds checking on buffer
                                operations, typically triggered by input injected by an attacker. As a consequence, an
                                attacker is able to write past the boundaries of allocated buffer regions in memory,
                                causing a program crash or potentially redirection of execution as per the attackers'
                                choice.
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="1" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="CWE-120-RANDOM" mitigation="20"/>
                                <control ref="CWE-120-STACK" mitigation="20"/>
                                <control ref="memory-safe-ops" mitigation="60"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-120">
                                    <controls>
                                        <control ref="CWE-120-RANDOM" mitigation="20"/>
                                        <control ref="CWE-120-STACK" mitigation="20"/>
                                        <control ref="memory-safe-ops" mitigation="60"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-190" name="Reverse Engineer an Executable to Expose Assumed Hidden Functionality or Content" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker analyzes a binary file or executable for the purpose of discovering the structure, function, and possibly source-code of the file by using a variety of analysis techniques to effectively determine how the software functions and operates. This type of analysis is also referred to as Reverse Code Engineering, as techniques exist for extracting source code from an executable. 
&lt;br /&gt;Several techniques are often employed for this purpose, both black box and white box. The use of computer bus analyzers and packet sniffers allows the binary to be studied at a level of interactions with its computing environment, such as a host OS, inter-process communication, and/or network communication. This type of analysis falls into the 'black box' category because it involves behavioral analysis of the software without reference to source code, object code, or protocol specifications. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="scan-antivirus" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-511">
                                    <controls>
                                        <control ref="scan-antivirus" mitigation="100"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-507">
                                    <controls>
                                        <control ref="scan-antivirus" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="CWE-7-KINGDOMS" name="CWE 7 Kingdoms" desc="" tags="" position="59" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-388" name="An error condition is not properly handled (Error Handling)" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Test the Error Management strategy and implementation of the application.&lt;/li&gt;
                            &lt;li&gt;Try to force the application to behave unexpectedly.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Consider fuzzing and pattern search as a testing strategy.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-13T15:23:17.773000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>&lt;div&gt;
                        Errors and error handling represent a class of API. Errors related to error handling are so
                        common that they deserve a special kingdom of their own. As with API Abuse, there are two ways
                        to introduce an error-related security vulnerability: the most common one is handling errors
                        poorly (or not at all). The second is producing errors that either give out too much information
                        (to possible attackers) or are difficult to handle
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-227" name="Improper Fulfillment of API Contract (API Abuse)" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the areas in which the application uses the API.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check if the sequence of calls follow the API specs.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-13T15:22:14.411000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>&lt;div&gt;
                        The software uses an API in a manner contrary to its intended use.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;p&gt;An API is a contract between a caller and a callee. The most common forms of API misuse
                        occurs when the caller does not honor its end of this contract. For example, if a program does
                        not call chdir() after calling chroot(), it violates the contract that specifies how to change
                        the active root directory in a secure fashion. Another good example of library abuse is
                        expecting the callee to return trustworthy DNS information to the caller. In this case, the
                        caller misuses the callee API by making certain assumptions about its&amp;nbsp;behavior&amp;nbsp;(that
                        the return value can be used for&amp;nbsp;authentication&amp;nbsp;purposes). One can also
                        violate the caller-callee contract from the other side. For example, if a coder subclasses
                        SecureRandom and returns a non-random value, the contract is violated.&lt;/p&gt;
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-361" name="Improper management of Time and state" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify resources that are candidates to be accessed/used concurrently.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check for unexpected behavior when testing simultaneous access to those.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-13T15:20:27.016000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>&lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This weakness is related to the&amp;nbsp;improper&amp;nbsp;management of time and state in an
                        environment that supports simultaneous or near-simultaneous computation by multiple systems,
                        processes, or threads.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;p&gt;Distributed computation is about time and state. That is, in order for more than one
                        component to communicate, state must be shared, and all that takes time. Most programmers
                        anthropomorphize their work. They think about one thread of control carrying out the entire
                        program in the same way they would if they had to do the job themselves. Modern computers,
                        however, switch between tasks very quickly, and in multi-core, multi-CPU, or distributed
                        systems, two events may take place at exactly the same time. Defects rush to fill the gap
                        between the programmer's model of how a program executes and what happens in reality. These
                        defects are related to&amp;nbsp;unexpected&amp;nbsp;interactions between threads, processes,
                        time, and information. These interactions happen through shared state: semaphores, variables,
                        the file system, and, basically, anything that can store information.&lt;/p&gt;
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-485" name="The application does not define isolated boundaries (Insufficient Encapsulation)" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify boundaries on the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that the application adequately enforces access control across those
                            boundaries. &amp;nbsp;For example, does it require some form of authentication at the
                            boundary? &amp;nbsp;Or does it prevent access across the boundary entirely?&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-13T15:21:22.047000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>&lt;div&gt;
                        The application does not sufficiently encapsulate critical data or functionality.
                        &lt;/div&gt;
                        &lt;p&gt;Encapsulation is about drawing strong boundaries. In a web browser that might mean
                        ensuring that your mobile code cannot be abused by other mobile code. On the server it might
                        mean differentiation between validated data and unvalidated data, between one user's data and
                        another's, or between data users are allowed to see and data that they are not.&lt;/p&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-398" name="The application has not been securely developed" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Review the code for standard violations or unsafe behaviors.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-19T10:33:44.996000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>&lt;div&gt;
                        The code has features that do not directly introduce a&amp;nbsp;weakness&amp;nbsp;or&amp;nbsp;vulnerability,
                        but indicate that the product has not been carefully developed or maintained.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;p&gt;Programs are more likely to be secure when good development practices are followed. If
                        a program is complex, difficult to maintain, not portable, or shows evidence of neglect, then
                        there is a higher likelihood that&amp;nbsp;weaknesses&amp;nbsp;are buried in the code.&lt;/p&gt;
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-254" name="The application lacks key security features" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Check the overall design of the application.&lt;/li&gt;
                            &lt;li&gt;Check for flaws or mechanisms that should be there but they are not from a
                            security point of view.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-13T15:20:53.314000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>&lt;div&gt;
                        Software security is not security software. Here we're concerned with topics like
                        authentication, access control, confidentiality, cryptography, and privilege management.&amp;nbsp;
                        &lt;div&gt;
                        &lt;b&gt;Insecure Randomness.&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Standard pseudo-random number generators cannot withstand cryptographic attacks.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Least Privilege Violation.&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The elevated privilege level required to perform operations such as chroot() should be
                        dropped immediately after the operation is performed.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Missing Access Control.&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The program does not perform access control checks in a consistent manner across all
                        potential execution paths.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Password Management.&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Storing a password in plaintext may result in a system compromise.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Empty Password in Config File. Using an empty string as a password is insecure.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Hard-Coded Password.&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Hard coded passwords may compromise system security in a way that cannot be easily
                        remedied.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Password in Config File. Storing a password in a configuration file may result in
                        system compromise.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Weak Cryptography.&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Obscuring a password with a trivial encoding does not protect the password.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Privacy Violation.&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Mishandling private information, such as customer passwords or social security
                        numbers, can compromise user privacy and is often illegal.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Identify the areas of the application that can be affected by the following causes:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Misconfiguration.&lt;/li&gt;
                            &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                            behavior.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Perform testing on them to look for a security problem.&amp;nbsp;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-2: Unexpected Environment Condition" url="https://cwe.mitre.org/data/definitions/2.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-13T15:23:41.031000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>This is a generic weakness that includes several different situations, they are all related to
                        unexpected environmental conditions and they could be related to:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Misconfiguration.&lt;/li&gt;
                        &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                        behavior.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="ERR-HAND" name="Ensure application error handling is securely and consistently implemented" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Verbose error messages can reveal information of use to an attacker, particularly in the case of
                        debug messages or stack traces. &amp;nbsp;Even small variations in errors returned to the user
                        can be used to infer how the application operates, or enforces security controls.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        To prevent a malicious user using error conditions to determine how the application functions in
                        order to subvert it:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Trap and log all known error conditions at the server-side&lt;/li&gt;
                        &lt;li&gt;Create a generic trap for unexpected errors&lt;/li&gt;
                        &lt;li&gt;Ensure the error message returned to the user is generic, or contains only an
                        obfuscated reference that can be correlated with the logged errors at the server-side. &amp;nbsp;In
                        the case of applications delivered over HTTP, the HTTP header should also be generic to prevent
                        enumeration (e.g. all error pages should produce a consistent HTTP 500 error)&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Use a fuzzer to produce unexpected input to the application.&lt;/li&gt;
                            &lt;li&gt;Also provide selected input to the application with the aim of create error
                            conditions. &lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Inspect the output generated by all those inputs and make sure error messages are
                            not revealing sensitive information.&lt;br /&gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-19T10:27:01.352000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ENV-USE" name="Ensure there are no environmental security weaknesses" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Application security can be undermined by misconfiguration of the underlying server or
                        development environment.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Ensure that vendor and best-practice guidelines have been applied, in particular affecting areas
                        such as:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Cryptographic strength of elements such as session tokens, GUIDs, and protection of
                        data in transit and at rest.&lt;/li&gt;
                        &lt;li&gt;Removal of debugging and compiler options and artifacts used during development.&lt;/li&gt;
                        &lt;li&gt;Configuration of error trapping and use of generic error messages and pages (e.g.
                        stack traces should not be returned to users).&lt;/li&gt;
                        &lt;li&gt;Appropriate access controls over software components, variables (e.g. EJBs and
                        methods).&lt;/li&gt;
                        &lt;li&gt;Insecure or inappropriate storage of data in configuration files or other data
                        structures (e.g. passwords in config files).&lt;/li&gt;
                        &lt;li&gt;Use of compilation/build features or security enhancements provided by the IDE&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;&lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;table&gt;
                            &lt;tbody&gt;
                            &lt;tr&gt;
                            &lt;td&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            Identify the areas of the application that can be affected by the following causes:&amp;nbsp;
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Misconfiguration.&lt;/li&gt;
                            &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                            behavior.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Verify they are correctly implemented.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;&lt;/td&gt;
                            &lt;/tr&gt;
                            &lt;/tbody&gt;
                            &lt;/table&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-19T10:25:59.986000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="TIME-STATE" name="Verify concurrent systems does not introduce unexpected behaviour" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Failure to enforce proper access and locking of resources can result in race-conditions, where
                        concurrent calls can subvert the security controls or logical flow within an application. For
                        example, in a financial system, parallel threads may simultaneously check an account balance
                        before making a withdrawal to ensure adequate funds are present, before both conduct a
                        transaction and take the account overdrawn.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Verify that controls related to the proper management of time and state in an
                        environment that supports simultaneous or near-simultaneous computation by multiple systems,
                        processes, or threads are properly implemented.&lt;/li&gt;
                        &lt;li&gt;Verify the safeguards in place, and the logical sequence of checking, locking, and
                        transacting are resistant to race-conditions.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.11.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.11.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the areas of the application where concurrent access to resources can
                            happen.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify that unexpected input, timing or action sequence is not causing unexpected
                            behavior on the system.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-19T10:45:00.395000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="API-USE" name="Verify that the application is using the API following the specifications" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Insecure API implementations may allow subversion of application controls or safeguards.
                        Furthermore, use of the API in an undocumented manner can result in issues if bugs or
                        functionality are remediated in the future.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The application must follow the specifications of the API, even where workarounds or
                        shortcuts have been identified.&lt;/li&gt;
                        &lt;li&gt;The API should be properly implemented and safely handle unexpected input and use, but
                        this should not be relied upon by the client.&lt;/li&gt;
                        &lt;li&gt;The application should following standard call sequences and logical flow to support
                        security and functionality of the API implementation&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the areas of the application that uses the API.&lt;/li&gt;
                            &lt;li&gt;Verify the call sequence is compliant with the standard specification.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-19T10:23:11.571000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="SEC-FEATURES" name="Verify the application correctly implements the security features needed according to its security level" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        The security controls in place will in part be defined by the nature of the application. A low
                        security unauthenticated application will have different requirements to an application
                        providing transactional capabilities in a finance system, for example.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Features around security like authentication, access control, confidentiality,
                        cryptography, and privilege management should be correctly implemented and appropriate to the
                        application - 'fit for purpose'.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Verify the application implementation against the design and security feature
                            needs.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-19T10:36:58.517000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="INS-ENC" name="Verify the application implements strong logical boundaries" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        It is important to compartmentalize or encapsulate critical data and functionality within the
                        application. This paradigm mitigates the threat from a malicious application accessing code or
                        data from the victim application, or from low-privileged users gaining access to sensitive
                        functionality or data.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Define and enforce strong logical boundaries, for example:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;In a web browser that might mean ensuring that mobile code cannot be abused by other
                        mobile code.&lt;/li&gt;
                        &lt;li&gt;On the server it might mean differentiation between validated data and unvalidated
                        data, between one user's data and another's, or between data users are allowed to see and data
                        that they are not.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify critical data or features on the application (i.e. Authentication,
                            Payments, etc.)&lt;/li&gt;
                            &lt;li&gt;Verify the used data and the feature is isolated.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-19T10:30:15.466000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="SEC-CODING" name="Verify the code has been developed accordingly to secure coding standards" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Secure development should be an integral part of any development process to ensure robust,
                        secure, and stable systems are built. Functional and non-functional security requirements, and
                        supporting coding standards and guidelines should be in place and enforced. If the application
                        does not follow secure coding practices, there is a higher chance that an attacker could exploit
                        this fact to gain access to the application.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Confirm secure coding standards are in place, integrated into the development
                        lifecycle, and are sufficient to protect the application.&lt;/li&gt;
                        &lt;li&gt;Verify the code has been developed accordingly to secure coding standards&lt;/li&gt;
                        &lt;li&gt;The code should be developed with security in mind.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Do a code review.&lt;/li&gt;
                            &lt;li&gt;Check security concerns against corporate standards or well-known ones.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Static Application Security Testing could help to find some vulnerabilities on an
                            automated way.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="CERT Secure Coding Standards" url="https://www.securecoding.cert.org/confluence/display/seccode/SEI+CERT+Coding+Standards"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-19T10:34:30.960000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="GENERAL" name="General" desc="" library="">
                    <threats>
                        <threat ref="7k-CWE-SecF" name="Attackers gain unauthorised access to the application because of  inadequate security features" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Software security is not security software. Here we're concerned with topics like
                                authentication, access control, confidentiality, cryptography, and privilege management.&amp;nbsp;
                                &lt;div&gt;
                                &lt;b&gt;Insecure Randomness.&amp;nbsp;&lt;/b&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;ul&gt;
                                &lt;li&gt;Standard pseudo-random number generators cannot withstand cryptographic
                                attacks.&lt;/li&gt;
                                &lt;/ul&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;b&gt;Least Privilege Violation.&amp;nbsp;&lt;/b&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;ul&gt;
                                &lt;li&gt;The elevated privilege level required to perform operations such as chroot()
                                should be dropped immediately after the operation is performed.&lt;/li&gt;
                                &lt;/ul&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;b&gt;Missing Access Control.&amp;nbsp;&lt;/b&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;ul&gt;
                                &lt;li&gt;The program does not perform access control checks in a consistent manner
                                across all potential execution paths.&lt;/li&gt;
                                &lt;/ul&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;b&gt;Password Management.&amp;nbsp;&lt;/b&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;ul&gt;
                                &lt;li&gt;Storing a password in plaintext may result in a system compromise.&amp;nbsp;&lt;/li&gt;
                                &lt;li&gt;Empty Password in Config File. Using an empty string as a password is
                                insecure.&lt;/li&gt;
                                &lt;/ul&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;b&gt;Hard-Coded Password.&amp;nbsp;&lt;/b&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;ul&gt;
                                &lt;li&gt;Hard coded passwords may compromise system security in a way that cannot be
                                easily remedied.&amp;nbsp;&lt;/li&gt;
                                &lt;li&gt;Password in Config File. Storing a password in a configuration file may result
                                in system compromise.&amp;nbsp;&lt;/li&gt;
                                &lt;/ul&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;b&gt;Weak Cryptography.&lt;/b&gt;&amp;nbsp;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;ul&gt;
                                &lt;li&gt;Obscuring a password with a trivial encoding does not protect the password.&lt;/li&gt;
                                &lt;/ul&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;b&gt;Privacy Violation.&amp;nbsp;&lt;/b&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;ul&gt;
                                &lt;li&gt;Mishandling private information, such as customer passwords or social security
                                numbers, can compromise user privacy and is often illegal.&amp;nbsp;&lt;/li&gt;
                                &lt;/ul&gt;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="SEC-FEATURES" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-254">
                                    <controls>
                                        <control ref="SEC-FEATURES" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="7k-CWE-TimeState" name="Attackers gain unauthorised access to the application because of time and state management issues" state="Expose" source="MANUAL" owner="" library="">
                            <desc>&lt;div&gt;
                                This weakness is related to the&amp;nbsp;improper&amp;nbsp;management of time and state
                                in an environment that supports simultaneous or near-simultaneous computation by
                                multiple systems, processes, or threads.
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;p&gt;Distributed computation is about time and state. That is, in order for more
                                than one component to communicate, state must be shared, and all that takes time. Most
                                programmers anthropomorphize their work. They think about one thread of control carrying
                                out the entire program in the same way they would if they had to do the job themselves.
                                Modern computers, however, switch between tasks very quickly, and in multi-core,
                                multi-CPU, or distributed systems, two events may take place at exactly the same time.
                                Defects rush to fill the gap between the programmer's model of how a program executes
                                and what happens in reality. These defects are related to&amp;nbsp;unexpected&amp;nbsp;interactions
                                between threads, processes, time, and information. These interactions happen through
                                shared state: semaphores, variables, the file system, and, basically, anything that can
                                store information.&lt;/p&gt;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="TIME-STATE" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-361">
                                    <controls>
                                        <control ref="TIME-STATE" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="7k-CWE-InsufE" name="Attackers gain unauthorised access to the application through a lack of boundaries" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Encapsulation is about drawing strong boundaries. In a web browser that might mean
                                ensuring that your mobile code cannot be abused by other mobile code. On the server it
                                might mean differentiation between validated data and unvalidated data, between one
                                user's data and another's, or between data users are allowed to see and data that they
                                are not.&amp;nbsp;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="INS-ENC" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-485">
                                    <controls>
                                        <control ref="INS-ENC" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="7k-CWE-Environment" name="Attackers gain unauthorised access to the application through an environment flaw" state="Expose" source="MANUAL" owner="" library="">
                            <desc>This section includes everything that is outside of the source code but is still
                                critical to the security of the product that is being created. Because the issues
                                covered by this kingdom are not directly related to source code, we separated it from
                                the rest of the kingdoms.&amp;nbsp;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="ENV-USE" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-2">
                                    <controls>
                                        <control ref="ENV-USE" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="7k-CWE-ErrorH" name="Attackers gain unauthorised access to the application through an error handling flaw" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Errors and error handling represent a class of API. Errors related to error handling
                                are so common that they deserve a special kingdom of their own. As with API Abuse, there are two ways to introduce an error-related security vulnerability: the most common
                                one is handling errors poorly (or not at all). The second is producing errors that either give out too much information (to possible attackers) or are difficult to handle.
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="ERR-HAND" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-388">
                                    <controls>
                                        <control ref="ERR-HAND" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="7k-CWE-API" name="Attackers gain unauthorised access to the application through API Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An API is a contract between a caller and a callee. The most common forms of API abuse
                                are caused by the caller failing to honor its end of this contract. For example, if a
                                program fails to call chdir() after calling chroot(), it violates the contract that
                                specifies how to change the active root directory in a secure fashion. Another good
                                example of library abuse is expecting the callee to return trustworthy DNS information
                                to the caller. In this case, the caller abuses the callee API by making certain
                                assumptions about its behavior (that the return value can be used for authentication
                                purposes). One can also violate the caller-callee contract from the other side. For
                                example, if a coder subclasses SecureRandom and returns a non-random value, the contract
                                is violated.&amp;nbsp;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="API-USE" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-227">
                                    <controls>
                                        <control ref="API-USE" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="7k-CWE-PoorCQ" name="Attackers gain unauthorised access to the application through a Poor Code Quality flaw" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Poor code quality leads to unpredictable behavior. From a user perspective that
                                often manifests itself as poor usability. For an adversary it provides an opportunity to
                                stress the system in unexpected ways.
                            </desc>
                            <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="SEC-CODING" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-398">
                                    <controls>
                                        <control ref="SEC-CODING" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="DATASTORE" name="Datastore" desc="" tags="" position="47" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-05-29T09:16:00.986000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="RESTRICT-ACCESS-DATABASE" name="Access the data store from an account with the least privileges necessary" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Use an account with only the minimum set of permissions required to access the data store.&amp;nbsp;
                        The account should not be able to perform operations that are not explicitly required by the
                        component that performs these operations.
                        &lt;div&gt;
                        For example, if a web application needs to read data from certain tables and insert and update
                        data from others, then a database account with only those specific permissions should be used by
                        the application server.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the user account used by external components to access this data store&lt;/li&gt;
                            &lt;li&gt;Check which permissions are assigned to this user account&lt;/li&gt;
                            &lt;li&gt;Verify that they are the minimum set of permissions necessary and no unnecessary
                            permissions are assigned&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-11-20T18:23:44.319000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="authentication" name="Authentication" desc="" library="">
                    <threats>
                        <threat ref="AUTH-DATASTORE-LEAST-PRIV" name="Attackers who compromise the application or application server could directly access and modify the data store" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If attackers gain access to the application or the application server, then they could
                                directly access the data store using the privilege assigned to the application.
                                &lt;div&gt;
                                If the data store user account used by the application has elevated privileges then this
                                could allow attackers to perform unauthorized operations such as dropping tables,
                                modifying the database schema or modifying data.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="1" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-250">
                                    <controls>
                                        <control ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GENERIC-CLIENT" name="Generic Client" desc="Generic client component, e.g. thick client, client to an API or web service" tags="" position="5" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-311" name="A connection to an external system is performed in plain text" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-22T09:56:18.574000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Connections made in plain text are not only target for interception but, even when the component is not dealing with sensitive data, a man in the middle attack is possible and the attacker could pretend to be, i.e. an authentication system to gain the user's credentials.</desc>
                </weakness>
                <weakness ref="CWE-798, CWE-603" name="Client side code stores secret keys, sensitive business logic or other proprietary information" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-602: client-side Enforcement of Server-Side Security" url="https://cwe.mitre.org/data/definitions/602.html"/>
                            <reference name="CWE-603: Use of client-side Authentication" url="https://cwe.mitre.org/data/definitions/603.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-28T12:50:39.802000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Client side code is fully controlled by the user, a malicious user could read the code or
                        reverse engineer it if it is compiled on any form.&amp;nbsp;&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;If the client side code includes secret keys, sensitive business logic &amp;nbsp;(like
                        client authentication) or proprietary information, all of this is directly exposed to the user,
                        allowing him to get the sensitive information or study the business logic with the aim of
                        bypassing it. Some examples of this which are Vulnerabilities are:
                        &lt;ul&gt;
                        &lt;li&gt;Perform an authentication on the client side without server side validation.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Make privileged calls from the client based solely on client side conditions (i.e. a
                        cash check on client side and then to place a buy on an e-commerce platform).&lt;/li&gt;
                        &lt;li&gt;Hard-coding keys and secrets on client side to make client-to-client calls without a
                        proxy.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-749" name="Exposed Dangerous Method or Function" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T12:50:36.614000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software provides an Applications Programming Interface
					(API) or similar interface for interaction with external actors, but the
					interface includes a dangerous method or function that is not properly
					restricted.</desc>
                </weakness>
                <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories" url="https://cwe.mitre.org/data/definitions/312.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-05-30T14:52:04.610000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>API keys, passwords or secrets included in the source code or in the configuration files can be leaked to users with access to the code. This access can be incidentally granted by publishing the source code on a package-form or an online, public repository.

          The unauthorized access to any of those secrets could lead to a compromise of sensitive data or a system.</desc>
                </weakness>
                <weakness ref="CWE-327" name="The component uses a weak TLS implementeation" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-22T10:04:19.860000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The use of an unverified TLS library could lead to the use of weak or faulty implementations
                        of the TLS protocol and cipher suites.
                        &lt;br /&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-798" name="Use of Hard-coded Credentials" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-25T15:25:30.264000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software contains hard-coded credentials, such as a
					password or cryptographic key, which it uses for its own inbound authentication,
					outbound communication to external components, or encryption of internal
					data.</desc>
                </weakness>
                <weakness ref="CWE-477" name="Use of Obsolete Function" state="0" impact="75">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-477: Use of Obsolete Function" url="https://cwe.mitre.org/data/definitions/477.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-27T09:48:50.678000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained. 
&lt;br /&gt;</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Data passed between the client and server should be protected by encryption in transit.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Implement cryptographically strong TLS end-to-end encryption between the client and
                        server, terminating within a secure environment on the server-side.&lt;/li&gt;
                        &lt;li&gt;Consider use of client certificates to prevent interception of (or man-in-the-middle
                        attacks on) the encrypted connection.&lt;/li&gt;
                        &lt;li&gt;Alternatively, asymmetric (public-key) encryption could be utilized, although a
                        recognized, proven, and tested implementation/library should be used&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Check the client to server connections use and enforce established encryption
                            protocols, e.g. TLSv1.2.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Verify only strong cipher suites are in use and permitted.&lt;/li&gt;
                            &lt;li&gt;Ensure attempts to use unencrypted transport are rejected or redirected (e.g. HTTP
                            instead of HTTPS)&lt;/li&gt;
                            &lt;li&gt;Review configuration of protocols and services against best-practice guidelines.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.133000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="INS-CLIENT" name="Ensure that application does not use unsupported, insecure, or deprecated client-side technologies " platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Ensure that application does not use unsupported, insecure, or deprecated client-side technologies such as NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or client-side Java applets.</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ul&gt; 
 &lt;li&gt;Test the presence of any client side applet such as Flash, ActiveX and Silverlight.&lt;/li&gt; 
&lt;/ul&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Testing Information Gathering" url="https://www.owasp.org/index.php/Testing_Information_Gathering"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-27T10:10:41.554000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CS-CLIENT-SECRET" name="Implement sensitive logic and data validation on the server-side" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        All data and functionality at the client-side must be considered tainted and subject to
                        manipulation by a malicious actor, regardless of the controls in place (e.g. encryption or
                        obfuscation of client-side code or content). &amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This includes application logic decisions, such as access controls, and data considered
                        sensitive or secret, such as encryption keys.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        While controls may be duplicated at the client-side to improve the user experience, it is
                        important these are enforced at the server-side.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Business logic, in particular access controls, must be implemented at the server-side.
                        &amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Secret data should be stored at the server-side, and only that which is explicitly
                        required be duplicated at the client-side.&lt;/li&gt;
                        &lt;li&gt;All data provided from the client-side (even from binary clients) should be considered
                        tainted, and security decisions should not be made solely on this data.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        For example, an insecure implementation could include a compiled application (e.g. Flash!)
                        performing authentication at the client-side against a stored password. &amp;nbsp;Decompilation
                        of the binary (in this case flv file) or interception and modification of controls between the
                        client and server could expose the password or allow unauthorized access to the authenticated
                        application content.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify where critical decisions are made on the application. Key areas include:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;authentication&lt;/li&gt;
                            &lt;li&gt;input validation&lt;/li&gt;
                            &lt;li&gt;access to resources&lt;/li&gt;
                            &lt;li&gt;state bypasses&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure those decisions are made or validated at the server side, particularly
                            where client-side controls are implemented.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Review sensitive data passed to the client side is appropriate, and ensure no
                            inappropriate data is stored or hard-coded into client-side components, for example&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;ul&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Personally Identifiable Information.&lt;/li&gt;
                            &lt;li&gt;Financial data, in particular cardholder data (as defined by the PCI Council).&lt;/li&gt;
                            &lt;li&gt;Application secrets - such as symmetric encryption keys or passwords.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;&lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;&lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;&lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP Web Application Security Testing" url="https://www.owasp.org/index.php/Web_Application_Security_Testing_Cheat_Sheet"/>
                            <reference name="Testing for Business Logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-28T12:52:08.060000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CSD-CLIENT-SECRET" name="Review code, configuration, and online repositories for secrets and sensitive information systemically" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Secret or sensitive information should not be exposed in the source-code or client-side
                        software.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Code and online repositories must not contain secrets or sensitive information.&lt;/li&gt;
                        &lt;li&gt;Configuration files at the client- and server-side must not contain hard-coded
                        credentials or other sensitive data.&lt;/li&gt;
                        &lt;li&gt;Online repositories, services, and other associated restricted content must have
                        appropriate access controls in place.&lt;/li&gt;
                        &lt;li&gt;Where sensitive information must be stored at the server side, it should be in memory
                        for transient data, or encrypted if persistent. &amp;nbsp;Depending on the use case, this
                        encryption may be asymmetric or public key, or symmetric using a shared secret. Note however
                        that reversible encryption at the client-side and in-memory storage are still susceptible to
                        client-side attacks.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;&lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AU-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Use automated tools to regularly search for keywords or regular expression
                            patterns within the code, configuration and other files exposed at the client and
                            server-side, and any remote repositories.&lt;/li&gt;
                            &lt;li&gt;The scanning process must be triggered before the code is published (in particular
                            for public/open source code) as once published it is likely to be archived (and any
                            disclosed secrets would be exposed and/or have to be changed)&lt;/li&gt;
                            &lt;li&gt;Review criteria and requirements for any temporary or persistent storage of
                            sensitive or secret data at the client-side, and the protections in place.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="Amazon git-secrets" url="https://github.com/awslabs/git-secrets"/>
                            <reference name="Microsoft Exchange 2016 Sensitive Information Patterns" url="https://technet.microsoft.com/en-us/library/jj150541(v=exchg.160).aspx"/>
                            <reference name="Seekret" url="https://github.com/apuigsech/seekret"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-29T17:54:26.128000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="use-analysis-static-code" name="Scan the code with static code analysis tools" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T12:53:45.100000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  In situations where the verifier and CSP are separate entities, communications between RA (Registration Authority) and CSP (Credential Service Provider), shall be authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS connection, using approved cryptographic algorithms. 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Verify that the CSP and RA are communicated securely with a secure channel, for example with TLS.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-30T08:44:22.165000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-295-CLIENT" name="Validate the certificate presented by the server" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Certificates presented by the server must be valid, provable, and cryptographically secure in
                        order to derive the benefits of TLS encrypted communications.&amp;nbsp; Invalid certificates
                        expose the application and its users to spoofing attacks such as Man In The Middle (MITM) where
                        data may be intercepted or redirected to a malicious site, and undermine confidence in the site.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;
                        &lt;div&gt;
                        Validate that the certificate presented by the server is signed by a trusted Certificate
                        Authority.
                        &lt;/div&gt;&lt;/li&gt;
                        &lt;li&gt;
                        &lt;div&gt;
                        Ensure the certificate chain of trust is legitimate and secure.
                        &lt;/div&gt;&lt;/li&gt;
                        &lt;li&gt;
                        &lt;div&gt;
                        Verify cryptographically secure ciphers are in use throughout the chain, in particular strong
                        hashing algorithms are in use for certificate signatures.&amp;nbsp;
                        &lt;/div&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SC-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-17" supportedStandardRef="NIST 800-53"/>
                        <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Verify that a client conducting appropriate checks will receive positive responses
                            about the validity and quality of the site certificate.&lt;/li&gt;
                            &lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;
                            &lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;
                            &lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;li&gt;Remediate all security issues and warnings relating to the server certificate, and
                            those in the trust chain.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:13.775000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-327" name="Validate the TLS implementation in use" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        There are a number of established open- and closed- source TLS implementations in use, which
                        have undergone extensive review and testing by the developers, as well as third-parties in the
                        development, security, and cryptography space. Typically, these widely used implementations have
                        a lower risk of exploitation to internally developed or less known implementations (although
                        vulnerabilities such as Heartbleed highlight that this is not universally true) due to this
                        additional scrutiny.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Identify the TLS and other cryptographic libraries, implementations, and technologies
                        in use.&lt;/li&gt;
                        &lt;li&gt;Verify the progeny of the implementations, and review third party validation together
                        with security advisories or best-practice relating to them.&lt;/li&gt;
                        &lt;li&gt;Some well-known TLS libraries are NSS from Mozilla, and OpenSSL.&lt;/li&gt;
                        &lt;li&gt;Where an unknown or unproven implementation is in use, review use of an established
                        option.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="Mozilla SSL Compatibility" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
                        <reference name="Mozilla SSL Config" url="https://ssl-config.mozilla.org/"/>
                    </references>
                    <standards>
                        <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Confirm the TLS layer in use is a secure, stable, release of a published
                            implementation that has been subject to expert analysis and review.&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;If not, assurance on the security of the implementation should be sought, or the
                            risk quantified.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Verify that a client connecting to the server will only be able to negotiate
                            cryptographically strong, secure ciphers.&lt;/li&gt;
                            &lt;li&gt;Confirm that a client can not downgrade to a weaker cipher after initial
                            negotiation.&lt;/li&gt;
                            &lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;
                            &lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;
                            &lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;li&gt;Remediate all security issues and warnings relating to the TLS/SSL ciphers,
                            protocols, and security mechanisms.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-22T10:05:11.074000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="GENERAL" name="General" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-191" name="An attacker engages in activities to discover any sensitive strings are present within the compiled code of an executable" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker engages in activities to discover any sensitive strings are present within the compiled code of an executable, such as literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis. 
&lt;br /&gt;One specific example of a sensitive string is a hard-coded password. Typical examples of software with hard-coded passwords include server-side executables which may check for a hard-coded password or key during a user's authentication with the server. Hard-coded passwords can also be present in client-side executables which utilize the password or key when connecting to either a remote component, such as a database server, licensing server, or otherwise, or a processes on the same host that expects a key or password. 
&lt;br /&gt;When analyzing an executable the attacker may search for the presence of such strings by analyzing the byte-code of the file itself. Example utilities for revealing strings within a file include 'strings,' 'grep,' or other variants of these programs depending upon the type of operating system used. These programs can be used to dump any ASCII or UNICODE strings contained within a program. Strings can also be searched for using a hex editors by loading the binary or object code file and utilizing native search functions such as regular expressions. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="CSD-CLIENT-SECRET" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-798">
                                    <controls>
                                        <control ref="CSD-CLIENT-SECRET" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CSD-CLIENT-SECRET" name="Attackers gain unauthorised access to data or services by accessing a client side secret" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Secrets stored in any client side components, such as a mobile application, thick
                                client application or in JavaScript used by a browser, can be accessed by
                                users/attackers who have access to this client.
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Attackers could then gain access to the data or services that are protected by this
                                secret, if no other credentials are required.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="100" integrity="50" availability="50" easeOfExploitation="75"/>
                            <references/>
                            <controls>
                                <control ref="CS-CLIENT-SECRET" mitigation="50"/>
                                <control ref="CSD-CLIENT-SECRET" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-798, CWE-603">
                                    <controls>
                                        <control ref="CS-CLIENT-SECRET" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-312">
                                    <controls>
                                        <control ref="CSD-CLIENT-SECRET" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="DEP-CLIENT-TECH" name="Attackers gain unauthorised access to the application by the use of deprecated client-side technologies" state="Expose" source="MANUAL" owner="" library="">
                            <desc>&lt;div&gt;
  As programming languages evolve, functions occasionally become obsolete due to: 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;Advances in the language.&lt;/li&gt; 
 &lt;li&gt;Improved understanding of how operations should be performed effectively and securely.&lt;/li&gt; 
 &lt;li&gt;Changes in the conventions that govern certain operations. &lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt;Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="INS-CLIENT" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-477">
                                    <controls>
                                        <control ref="INS-CLIENT" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-184" name="Software Integrity Attack" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="use-analysis-static-code" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-749">
                                    <controls>
                                        <control ref="use-analysis-static-code" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="NTW-MITM" name="Attackers could gain access to sensitive data through a man in the middle attack" state="Expose" source="MANUAL" owner="" library="">
                            <desc>This type of attack targets the communication between two components (typically client
                                and server). The attacker places himself in the communication channel between the two
                                components. Whenever one component attempts to communicate with the other (data flow,
                                authentication challenges, etc.), the data first goes to the attacker, who has the
                                opportunity to observe or alter it, and it is then passed on to the other component as
                                if it was never intercepted. This interposition is transparent leaving the two
                                compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identify between two components.
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="CWE-295-CLIENT" mitigation="34"/>
                                <control ref="CWE-319-TRANSPORT" mitigation="33"/>
                                <control ref="CWE-327" mitigation="33"/>
                                <control ref="secure-communication-ra-and-csp" mitigation="10"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-311">
                                    <controls>
                                        <control ref="CWE-295-CLIENT" mitigation="34"/>
                                        <control ref="CWE-319-TRANSPORT" mitigation="33"/>
                                        <control ref="secure-communication-ra-and-csp" mitigation="10"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-327">
                                    <controls>
                                        <control ref="CWE-327" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GENERIC-CLIENT:AUTHN" name="Generic Client: Authentication" desc="Authentication from a client component, such as web service or other API client" tags="" position="6" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-602" name="Client-side Enforcement of Server-Side Security" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-602: client-side Enforcement of Server-Side Security" url="http://cwe.mitre.org/data/definitions/602.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:13.660000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software is composed of a server that relies on the client to implement a mechanism that
                        is intended to protect the server.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;When the server relies on protection mechanisms placed on the client side, an
                        attacker can modify the client-side behavior to bypass the protection mechanisms resulting in
                        potentially unexpected interactions between the client and server. The consequences will vary,
                        depending on what the mechanisms are trying to protect.
                        &lt;/div&gt;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-592" name="Enforce authentication on the server-side" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        All data at the client-side must be considered tainted. &amp;nbsp;As such, decisions on
                        authentication (or Identification and Verification - ID&amp;amp;V) must be made or validated at
                        the server-side to prevent their subversion.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The server should compare the credentials with those stored at the server-side (e.g.
                        the hashed password compared against those stored for the claimed identity).&lt;/li&gt;
                        &lt;li&gt;Messages returned to the user during authentication, in particular when the process
                        fails, should not reveal to the user whether the username was valid. &amp;nbsp;Returning generic
                        errors prevents an attacker enumerating valid account IDs for subsequent attacks.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Proactive Controls [C10]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="1.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L1"/>
                        <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
                        <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;The authentication routine/business logic must be implemented server-side. Check
                            that credentials are gathered by the client, then securely sent to the server and it is the
                            server the component which validates them.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:13.734000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-21" name="Attackers bypass authentication implemented on the client side" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If a predictable token is used to authorize requests to read or post data, or if the
                                token can easily be compromised, then an attacker could use this token to impersonate
                                the user.&amp;nbsp;
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;In mobile applications, using seemingly unique values such as the IMEI or
                                UDID numbers to authorize users can be abused since any application on the device can
                                read these values.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CWE-592" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-602">
                                    <controls>
                                        <control ref="CWE-592" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GENERIC-OTS-SERVICE" name="Generic Off the Shelf Service" desc="An off the shelf service that was not developed internally.  The controls associated with this pattern are aimed at managing a service where the code cannot be changed." tags="" position="41" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:44">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</desc>
                </weakness>
                <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA" name="Missing Encryption of Sensitive Data" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-07T07:51:33.406000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>&lt;ul&gt;
              &lt;li&gt;Weak encryption algorithms&lt;/li&gt;
              &lt;li&gt;Loss of encryption keys&lt;/li&gt;
              &lt;li&gt;Compromised encryption keys&lt;/li&gt;
              &lt;li&gt;Revoked keys are still active (bad key lifecycle management)&lt;/li&gt;
              &lt;/ul&gt;
          </desc>
                </weakness>
                <weakness ref="CWE-284" name="The service contains vulnerabilities that could grant access to data" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP Top 10 - A9" url="https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-23T20:58:34.717000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The services may contain security vulnerabilities that can be exploited by attackers to gain unauthorized access to data or additional services.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="PATCH-SERVICE" name="Apply required security patches to the service" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        &lt;div&gt;
                        Vendors and other maintainers of software release patches in response to security flaws and
                        other bugs in their products.&amp;nbsp; The longer a system is exposed with a known security
                        vulnerability, the easier to compromise it is as the exploit became public, they get included
                        into automated exploitation suites like Metasploit and a wider audience is able to exploit them.&amp;nbsp;
                        &amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Apply patches and other software updates in a timely manner to prevent unexpected
                        failures or exploitation.&lt;/li&gt;
                        &lt;li&gt;Clearly define an approach for testing and applying patches, in particular security
                        patches, with expected timescales. &amp;nbsp;There is often a small window between release of a
                        patch, and potentially malicious actors reverse-engineering the patch to identify and exploit
                        the flaw.&lt;/li&gt;
                        &lt;li&gt;Use a threat intelligence, vulnerability scanning, or other alerting service to ensure
                        the project team is aware of issues within the project or its components promptly.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="CM-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Check with the software or service vendor whether security vulnerabilities and
                            their associated patches are available for the version deployed.&lt;/li&gt;
                            &lt;li&gt;Evaluate the criticality of the vulnerability and schedule a fix accordingly.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.535000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" name="Encrypt personal data" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="">
                    <desc>Implement encryption at rest (see guidance below) or give risk-based explanation why encryption was not implemented.&lt;br /&gt;&lt;br /&gt;Use well known encryption libraries, taking into account the data use, and do not invent your own. 
          &lt;br /&gt;
              &lt;ul&gt;
              &lt;li&gt;personal data must be encrypted&lt;/li&gt;
              &lt;li&gt;data that is not used by the application (e.g. passwords, ...) should be hashed so they cannot be recovered easily&lt;/li&gt;
              &lt;/ul&gt;
          </desc>
                    <implementations/>
                    <references>
                        <reference name="EU GDPR - EU Data Protection" url="http://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
                        <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
                    </references>
                    <standards>
                        <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
                        <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-1"/>
                        <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-2"/>
                        <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify user personal data processed by the application is encrypted at rest (eg databases).&lt;/li&gt;
                &lt;li&gt;If encryption is not being leveraged verify documentation exists outlining the reasoning for that decision.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;
            </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-01-18T14:44:50.785000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-306-SERVICE" name="Require authentication before presenting restricted data" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="">
                    <desc>&lt;div&gt;
              The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For less sensitive but still restricted data, simple verification of the location of the user may suffice
              (e.g. IP restrictions).
              &lt;/div&gt;
              &lt;div&gt;
              &lt;ul&gt;
              &lt;li&gt;For non-sensitive but non-public data, access could be restricted by IP address, for example limiting access to internal networks, workstations, or gateways&lt;/li&gt;
              &lt;li&gt;For more sensitive data, TLS client-side certificates may be appropriate&lt;/li&gt;
              &lt;li&gt;Where secret or other sensitive data is handled, a full authentication process to identify and validate users with single or multi-factor authentication may be required&lt;/li&gt;
              &lt;/ul&gt;
              &lt;/div&gt;
          </desc>
                    <implementations/>
                    <references>
                        <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                        <reference name="EU GDPR - EU Data Protection" url="http://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
                    </references>
                    <standards>
                        <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
                        <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-21" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-22" supportedStandardRef="NIST 800-53"/>
                        <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
                        <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
                        <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                &lt;li&gt;Identify which parts of the service present sensitive data.&amp;nbsp;&lt;/li&gt;
                &lt;li&gt;Try to obtain access to this information without any type of authentication, for example, attempt to navigate directly to URLs that present sensitive data.&lt;/li&gt;
                &lt;/ol&gt;
            </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:14.585000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="RESTRICT-SERVICE" name="Restrict access to the service at the network layer to reduce exposure" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Access to services should be restricted to expected sources, limiting exposure of the service
                        and its attack surface; and the likelihood of a malicious actor gaining access to the system.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Apply network layer security controls so that only the necessary and expected IP
                        addresses are permitted access to connect to the service.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Check that the network access to the service is only allowed for the components
                            which needs it.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;There should be a firewall protecting the network segment in which the service is
                            installed.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that the firewall restricts all access and only permits the minimum
                            connections required using the principal of least privilege.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-23T21:01:06.125000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="ACCESS SERVICE" name="Access service" desc="" library="">
                    <threats>
                        <threat ref="VULN-SERVICE" name="Attackers gain access to unauthorised data by exploiting vulnerabilities in the service" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attackers exploit vulnerabilities in the service and gain access to data, or to
                                services for which they are not authorized.
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="PATCH-SERVICE" mitigation="50"/>
                                <control ref="RESTRICT-SERVICE" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-284">
                                    <controls>
                                        <control ref="PATCH-SERVICE" mitigation="50"/>
                                        <control ref="RESTRICT-SERVICE" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-115" name="Attackers obtain unauthorised access by connecting directly to the service" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If the component does not require authentication then an attacker can simply connect
                                directly to the service to obtain the data.&amp;nbsp;
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;This risk may also apply to data that is not necessarily sensitive, but is
                                non-public. &amp;nbsp;For example, obtaining timely market information which is not
                                freely available through any other service.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CWE-306-SERVICE" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-306">
                                    <controls>
                                        <control ref="CWE-306-SERVICE" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Unauthorized party might access/breach the personal data of the
                                data subject.
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA">
                                    <controls>
                                        <control ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GENERIC-OTS-SERVICE:AUTHN-SF" name="Generic Off the Shelf Service: Single factor Authentication" desc="" tags="" position="42" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:45">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When a security-critical event occurs, the software either does not record the event or omits important details about the event when logging it.

When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds.  </desc>
                </weakness>
                <weakness ref="CWE-263" name="Password Aging with Long Expiration" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T12:29:06.934000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Allowing password aging to occur unchecked can result in the
					possibility of diminished password integrity.</desc>
                </weakness>
                <weakness ref="CWE-521" name="Poor quality passwords in use" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-521: Weak Password Requirements" url="https://cwe.mitre.org/data/definitions/521.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-25T21:10:35.879000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product does not enforce a strong password policy, which makes it easier for attackers to
                        compromise user accounts through brute force or dictionary based attacks.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;An authentication mechanism is only as strong as its credentials. For this reason,
                        it is important to require users to have strong passwords. Lack of password complexity
                        significantly reduces the search space when trying to guess user's passwords, making brute-force
                        attacks easier.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="UNRESTRICTED-NETWORK" name="Service is exposed to a wide attack surface" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-25T21:47:09.132000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product is exposed or reachable to an unnecessarily large group of potential attackers. An
                        over-exposure of a component increases the chance of an attacker gaining access to the system
                        through a vulnerability.
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CDS-USER-TRACK" name="Log details of user actions within the system" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;p&gt;To maintain proper accountability, logs should be maintained with sufficient
                        information to track user actions within the system. These logs should be forensically sound,
                        non-repudiable, and contain comprehensive details about activity. While the exact data for an
                        event may vary, the following should be captured at a minimum:&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Timestamps against a proven external source (e.g. an NTP server)&lt;/li&gt;
                        &lt;li&gt;Origin, with this field we mark if the logs are provided by a trusted or untrusted
                        source.&lt;/li&gt;
                        &lt;li&gt;Event, status, and/or&amp;nbsp;error codes (with sensitive data masked as appropriate
                        or not introduced in logs)&lt;/li&gt;
                        &lt;li&gt;Service, command, application or function name and details&lt;/li&gt;
                        &lt;li&gt;User or system account associated with an event&lt;/li&gt;
                        &lt;li&gt;Devices used (e.g. source and destination IPs, terminal session ID, web browser, etc)&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        Source:&amp;nbsp;&amp;nbsp;
                        &lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt;https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="Berkeley audit logging" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
                        <reference name="OWASP Proactive Controls [C7, C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="164.312(a)(1)(A)" supportedStandardRef="hipaa-required"/>
                        <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
                        <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-14" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
                        <standard ref="IR-5" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
                        <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Perform several different actions on the service.&lt;/li&gt;
                            &lt;li&gt;Inspect the log files to see if the format and content complies with the companies
                            policy.&lt;/li&gt;
                            &lt;li&gt;If there is no company policy, check that, at least the following data is
                            included: timestamp event, status, error codes, service/command/application username or
                            system account associated with an eventDevice used (e.g. source and destination IPs,
                            terminal session ID, web browser, etc) .&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Source:
                            &lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt;&amp;nbsp;https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="Security Audit Logging Guideline" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-24T13:07:20.403000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="require-use-strong-passwords" name="Require the use of strong passwords" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Passwords used either as a sole verification credentials, or as part of a multi-factor authentication, are a key aspect of application security, and strong password selection should be encouraged and enforced. The application should allow flexibility in user password selection, and enforce minimum criteria for password quality. This should include:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimum password length requirements, to mitigate brute-force and dictionary attacks.&lt;/li&gt; 
 &lt;li&gt;Encourage use of pass-phrases using multiple words, achieving longer passwords more resistant to attack.&lt;/li&gt; 
 &lt;li&gt;Enforce use of mixed case, numeric and/or special characters to increase complexity.&lt;/li&gt; 
 &lt;li&gt;Prevent or discourage use of dictionary words and common passwords through black-lists. For example, a set of commonly used passwords can be found on SecLists at &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords"&gt;https://github.com/danielmiessler/SecLists/tree/master/Passwords&amp;nbsp;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Password length:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Password length considers the minimum and maximum length of characters comprising the password of your users. For ease of changing this length, its implementation can be configurable possibly using a properties file or xml configuration file.&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;b&gt;Minimum length. &lt;/b&gt;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Memory secrets shall be at least 8 characters long. &lt;/li&gt; 
  &lt;li&gt;Memory secrets generated automatically shall be at least 6 numeric characters.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Maximum length. &lt;/b&gt;People tend to forget their passwords easily. The longer the password, the more likely people are to enter them incorrectly for the system. However, long pass-phrases can be easily remembered, and should not be prevented through unnecessarily strict upper restrictions on length. &lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Passwords with 64 characters or longer shall be permitted.&amp;nbsp;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;b&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Password Complexity:&lt;/span&gt;&lt;/p&gt;&lt;/b&gt; 
&lt;ul&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Passwords with consecutive multiple spaces shall be coalesced and converter into only one space. After this modification, the password length shall be at least 12 characters long.&lt;/li&gt; 
 &lt;li&gt;Unicode characters shall be allowed in the password. A single Unicode code point is considered a character.&lt;/li&gt; 
 &lt;li&gt;Reject those passwords whose are commonly used and they have been already been leaked in a previous compromise. You may choose to block the top 1000 or 10000 most common passwords which meet the above length requirements and are found in compromised password lists. The following link contains the most commonly found passwords: &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords"&gt;https://github.com/danielmiessler/SecLists/tree/master/Passwords&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Actual passwords must not be stored, to protect them against brute forcing if the database is compromised Screen reader support enabled.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Password Topologies:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ban commonly used password topologies.&lt;/li&gt; 
 &lt;li&gt;Force multiple users to use different password topologies.&lt;/li&gt; 
 &lt;li&gt;Require a minimum topology change between old and new passwords.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Additional Information:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure that every character the user types in is actually included in the password. We've seen systems that truncate the password at a length shorter than what the user provided (e.g., truncated at 15 characters when they entered 20).&lt;/li&gt; 
 &lt;li&gt;As application's require more complex password policies, they need to be very clear about what these policies are. The required policy needs to be explicitly stated on the password change page&lt;/li&gt; 
 &lt;li&gt;If the new password doesn't comply with the complexity policy, the error message should describe EVERY complexity rule that the new password does not comply with, not just the 1st rule it doesn't comply with.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
&lt;/ul&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Blacklist Top Leaked Passwords" url="https://github.com/danielmiessler/SecLists/tree/master/Passwords"/>
                        <reference name="NIST 800-63: Memorised secrets" url="https://pages.nist.gov/800-63-3/sp800-63b.html"/>
                        <reference name="Owasp CheatSheetSeries: Authentication" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md"/>
                        <reference name="OWASP Pro active controls [C6]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
                    </references>
                    <standards>
                        <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="A.3" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt; 
 &lt;li&gt;Verify the passwords comply with the company policy for strong passwords.&lt;/li&gt; 
 &lt;li&gt;If there is no policy, check the strength against industry standards as NIST or OWASP.&lt;/li&gt; 
&lt;/ol&gt;An example of strong password policy (&amp;nbsp; 
&lt;a href="https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Implement_Proper_Password_Strength_Controls"&gt;from the OWASP Authentication Cheat Sheet&lt;/a&gt;) is: Password must meet at least 3 out of the following 4 complexity rules: 
&lt;ul&gt; 
 &lt;li&gt;at least 1 uppercase character (A-Z)&lt;/li&gt; 
 &lt;li&gt;at least 1 lowercase character (a-z)&lt;/li&gt; 
 &lt;li&gt;at least 1 digit (0-9)&lt;/li&gt; 
 &lt;li&gt;at least 1 special character (punctuation). Do not forget to treat space as special characters too&lt;/li&gt; 
 &lt;li&gt;at least 10 characters&lt;/li&gt; 
 &lt;li&gt;at most 128 characters&lt;/li&gt; 
&lt;/ul&gt;not more than 2 identical characters in a row (e.g., 111 not allowed).</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T12:00:36.332000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="RESTRICT-SERVICE" name="Restrict access to the service at the network layer" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Access to APIs should be restricted to expected sources, limiting exposure of the service and
                        its attack surface, and therefore likelihood of a malicious party gaining access to the system.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Apply network layer security controls so that only the necessary and expected IP
                        addresses are permitted access to connect to the service.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Check that the network access to the service is only allowed for the components
                            which needs it.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;There should be a firewall protecting the network segment in which the service is
                            installed.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that the firewall restricts access to only the minimum required connections
                            using the principal of least privilege.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-23T21:01:06.125000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-662" name="Use a synchronised time source" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        In order to correlate logs and data from different internal and external systems, and to
                        preserve forensic quality of the logs, it is important a unified and trusted synchronized time
                        source is used throughout the environment.&amp;nbsp;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Servers should be synchronize to an internal or external NTP server&lt;/li&gt;
                        &lt;li&gt;The centralized source should in turn use (or be) a trusted central time source.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This control is critical in identifying application events (including attacks) through logging,
                        and in conduction post-event analysis, in particular to track the whole user (or attacker)
                        journey through the system should it be compromised.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        It is good practice to use the concept of Indicators of Compromise (IoC) should be used to
                        detect possible situations in which the system has been compromised and to give an appropriate
                        response.&amp;nbsp; IoCs are often tracked through logs, and accurate time is often essential.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="12.4.4" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AU-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
                        <standard ref="7.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Check that mechanisms are installed to keep the host's clock synchronized (i.e.
                            ntpd in Linux based systems).&lt;/li&gt;
                            &lt;li&gt;Inspect the logs created by the app and check they have the correct timestamp.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-24T13:05:33.389000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="">
                    <threats>
                        <threat ref="CWE-778-AUTH" name="Attacks against the authentication system may go undetected" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Automated attacks against many user accounts, or successful attacks against an account
                                require a response. &amp;nbsp;If audit logs are not kept of both successful and
                                unsuccessful authentication operations, then post attack forensics will be hampered.&amp;nbsp;&amp;nbsp;
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;Without a dynamic response to mass automated attacks against the
                                authentication system, attackers stand a greater chance of success.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CDS-USER-TRACK" mitigation="80"/>
                                <control ref="CWE-662" mitigation="20"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-778">
                                    <controls>
                                        <control ref="CDS-USER-TRACK" mitigation="80"/>
                                        <control ref="CWE-662" mitigation="20"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-16" name="Dictionary-based or brute force password attack" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker tries each of the words in a dictionary as passwords to gain access to
                                the system via some user's account. If the password chosen by the user was a word
                                within the dictionary, this attack will be successful (in the absence of other
                                mitigations). This is a specific instance of the password brute forcing attack
                                pattern.&lt;/br&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="RESTRICT-SERVICE" mitigation="50"/>
                                <control ref="require-use-strong-passwords" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-263">
                                    <controls>
                                        <control ref="require-use-strong-passwords" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-521">
                                    <controls>
                                        <control ref="require-use-strong-passwords" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="UNRESTRICTED-NETWORK">
                                    <controls>
                                        <control ref="RESTRICT-SERVICE" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GENERIC-SERVICE" name="Generic Service" desc="Generic Service" tags="" position="7" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-770" name="Allocation of Resources Without Limits or Throttling" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-06T16:44:45.790000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on how many resources can be allocated, in violation of the intended security policy for that actor.</desc>
                </weakness>
                <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:43">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
                </weakness>
                <weakness ref="CWE-502" name="Deserialization of Untrusted Data" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-28T17:36:36.898000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid.</desc>
                </weakness>
                <weakness ref="CWE-749" name="Exposed Dangerous Method or Function" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T12:54:55.706000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software provides an Applications Programming Interface
					(API) or similar interface for interaction with external actors, but the
					interface includes a dangerous method or function that is not properly
					restricted.</desc>
                </weakness>
                <weakness ref="CWE-754" name="Improper Check for Unusual or Exceptional Conditions" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-28T16:29:09.300000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not check or improperly checks for unusual or
					exceptional conditions that are not expected to occur frequently during day to
					day operation of the software.</desc>
                </weakness>
                <weakness ref="CWE-460" name="Improper Cleanup on Thrown Exception" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-09-02T15:18:22.543000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product does not clean up its state or incorrectly cleans
					up its state when an exception is thrown, leading to unexpected state or control
					flow.</desc>
                </weakness>
                <weakness ref="CWE-841" name="Improper Enforcement of Behavioral Workflow" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T10:02:51.060000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software supports a session in which more than one behavior
                        must be performed by an actor, but it does not properly ensure that the actor
                        performs the behaviors in the required sequence.
                    </desc>
                </weakness>
                <weakness ref="CWE-276" name="Incorrect Default Permissions" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-19T08:53:35.146000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.</desc>
                </weakness>
                <weakness ref="CWE-272" name="Least Privilege Violation" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-27T14:25:25.098000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.</desc>
                </weakness>
                <weakness ref="CWE-544" name="Missing Standardized Error Handling Mechanism" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-09-02T15:18:08.399000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not use a standardized method for handling
					errors throughout the code, which might introduce inconsistent error handling
					and resultant weaknesses.</desc>
                </weakness>
                <weakness ref="CWE-541" name="The service returns back-end source code without interpreting it" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-541: Information Exposure Through Include Source Code" url="https://cwe.mitre.org/data/definitions/541.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-08T12:42:59.317000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>If an include file source is accessible, the file can contain usernames and passwords, as well
                        as sensitive information pertaining to the application and system. The source code can also be
                        sent back to a client because of an error condition or an improperly configured handler.
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="deny-default-enf" name="Assure that the principle of deny by default exists for new users/roles" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Deny by default is the principle that if a request is not specifically allowed, it is denied. There are many ways that this rule will manifest in application code. Some examples of these are: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Assure that the principle of deny by default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.&lt;/li&gt; 
  &lt;li&gt;Application code may throw an error or exception while processing access control requests. In these cases access control should always be denied.&lt;/li&gt; 
  &lt;li&gt;When an administrator creates a new user or a user registers for a new account, that account should have minimal or no access by default until that access is configured.&lt;/li&gt; 
  &lt;li&gt;When a new feature is added to an application all users should be denied to use that feature until it's properly configured.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Proactive Controls [C7]: Enforce Access Controls" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html"/>
                    </references>
                    <standards>
                        <standard ref="4.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="4.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="4.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;b&gt;Testing for role/privilege manipulation&lt;/b&gt; 
&lt;br /&gt; In every portion of the application where a user can create information in the database (e.g., making a payment, adding a contact, or sending a message), can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Testing for Bypassing Authorization Schema (OTG-AUTHZ-002)" url="https://www.owasp.org/index.php/Testing_for_Bypassing_Authorization_Schema_(OTG-AUTHZ-002)"/>
                            <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-19T09:05:56.295000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="OTG-BUSLOGIC" name="Detect and notify the usage of automated tools or unusual behavior" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Don't allow users to manipulate a system or guess its behavior based on input or output timing
                        and detect the usage of automated tools or unusual behavior, such as actions not performed in
                        reasonable &amp;quot;human time&amp;quot; or other abnormal time patterns.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        When the usage of automated tools is detected, the application shall respond with denying the
                        access and notifying the security group.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP testing business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
                    </references>
                    <standards>
                        <standard ref="SI-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
                        <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Use several automated tools to perform normal user actions.&lt;/li&gt;
                            &lt;li&gt;Check that the applications detects these actions, denies the users access and
                            notifies the security group.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T10:11:35.026000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Data passed between the client and server should be protected by encryption in transit.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Implement cryptographically strong TLS end-to-end encryption between the client and
                        server, terminating within a secure environment on the server-side.&lt;/li&gt;
                        &lt;li&gt;Consider use of client certificates to prevent interception of (or man-in-the-middle
                        attacks on) the encrypted connection.&lt;/li&gt;
                        &lt;li&gt;Alternatively, asymmetric (public-key) encryption could be utilized, although a
                        recognized, proven, and tested implementation/library should be used&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Check the client to server connections use and enforce established encryption
                            protocols, e.g. TLSv1.2.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Verify only strong cipher suites are in use and permitted.&lt;/li&gt;
                            &lt;li&gt;Ensure attempts to use unencrypted transport are rejected or redirected (e.g. HTTP
                            instead of HTTPS)&lt;/li&gt;
                            &lt;li&gt;Review configuration of protocols and services against best-practice guidelines.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.133000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="LEAST-PRIV-ENF" name="Ensure enforcement of the principle of least privilege" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Ensure enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege.</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>In every portion of the application where a user can create information in the database (e.g., making a payment, adding a contact, or sending a message), can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-27T14:26:48.645000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection.</desc>
                    <implementations/>
                    <references>
                        <reference name="Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
                        <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
                        <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
                    </references>
                    <standards>
                        <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They may be used in applications for:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt; 
 &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt; 
 &lt;li&gt;Caching/Persistence&lt;/li&gt; 
 &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt; 
 &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Deserialization Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
                            <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-28T17:37:42.406000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="error-handling-centralized" name="Implement a centralized mechanisms to manage the errors and exceptions" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Create a functionality or mechanism to manage exceptions in a centralized manner and avoid to include duplicated try/catch blocks in the code. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A well-planned error/exception handling strategy is important for three reasons: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Good error handling does not give an attacker any information which is a means to an end, attacking the application&lt;/li&gt; 
  &lt;li&gt;A proper centralized error strategy is easier to maintain and reduces the chance of any uncaught errors "Bubbling up" to the front end of an application.&lt;/li&gt; 
  &lt;li&gt;Information leakage can lead to social engineering exploits&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Building an infrastructure for consistent error reporting proves more difficult than error handling. All exceptions shall be caught and convert them as events with the severity of the error. These events shall be logged. 
&lt;/div&gt; 
&lt;div&gt;
  The centralized system shall reorganize all events and throws with the corresponding error or system message in a consistent manner, depending on the severity of the error. 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Code Review: Error Handling" url="https://www.owasp.org/index.php/Codereview-Error-Handling"/>
                        <reference name="OWASP Error Handling" url="https://www.owasp.org/index.php/Error_Handling"/>
                        <reference name="OWASP Proactive Controls [C10]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ul&gt; 
 &lt;li&gt;Verify that it exists a centralized system to catch the errors and exceptions, and these errors are shown in a correct manner.&lt;/li&gt; 
 &lt;li&gt;Verify all errors are thrown from the centralized system and they are shown in a correct manner.&lt;/li&gt; 
&lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-09-02T15:20:46.813000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="implement-monitoring-unusual-activities" name="Implement and monitor Business Logic Limits for actions and transactions" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
 Implement in the application the appropriate limits for specific business actions and transactions, to enforce the correct use of the application for each user and they cannot bypass important steps in the flow. This business logic limits provide us the protection against likely business risks or threats, identified using threat modeling or similar methodologies. 
&lt;/div&gt; 
&lt;div&gt;
All business actions or transactions that exceed the established limits, shall be logged in the logs and monitored as unusual events and act against them.
&lt;/div&gt; </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Proactive controls (C9)" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
                        <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
                    </references>
                    <standards>
                        <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Verify the application has appropriate limits for specific business actions or transactions which are correctly enforced on a per user basis.&lt;/li&gt; 
   &lt;li&gt;Verify the application has business logic limits or validation to protect against likely business risks or threats, identified using threat modeling or similar methodologies.&lt;/li&gt; 
  &lt;li&gt;Verify the application monitors for unusual events or activity from a business logic perspective.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-28T16:02:57.670000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="network-rate-limit" name="Implement application and network rate limiting" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="">
                    <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and &lt;span class="caps"&gt;ISP&lt;/span&gt; environment may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks from multiple sources to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (&lt;span class="caps"&gt;WAF&lt;/span&gt;) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g. &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a &lt;span class="caps"&gt;CAPTCHA&lt;/span&gt;, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;font size="4"&gt;&lt;b&gt; Remediation:&amp;nbsp;&lt;/b&gt;&lt;/font&gt; 
&lt;div&gt;
  Implement the mechanisms to lockout accounts:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased per each new failed attempt until an hour as maximum,&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;When the application detects that an account is locked more times than usual, this account shall be disabled (no more than 100 failure attempts). A disabled account shall only be restored by an administrator.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;When the application detects active brute-force attacks, the application shall require a &lt;span class="caps"&gt;CAPTCHA&lt;/span&gt;, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt; 
  &lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt; 
  &lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
                    </references>
                    <standards>
                        <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="13.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;p&gt;Use tools like &lt;a href="https://www.thc.org/thc-hydra/"&gt;&lt;span class="caps"&gt;THC&lt;/span&gt;-Hydra&lt;/a&gt;, &lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;&lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;&lt;/a&gt; or &lt;a href="https://portswigger.net/burp/"&gt;Burp Suite&lt;/a&gt;to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Perform a simulation of the attack against the login function.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that the function is blocked for your source after n attempts.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that there is a log alerting function for an unusual amount of failed log in attempts, even if they originated from different sources.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:42">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="network-rate-limit-login" name="Implement application and network rate limiting on the login function" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="">
                    <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and &lt;span class="caps"&gt;ISP&lt;/span&gt; environment may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks from multiple sources to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (&lt;span class="caps"&gt;WAF&lt;/span&gt;) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g. &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a &lt;span class="caps"&gt;CAPTCHA&lt;/span&gt;, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;font size="4"&gt;&lt;b&gt; Remediation:&amp;nbsp;&lt;/b&gt;&lt;/font&gt; 
&lt;div&gt;
  Implement the mechanisms to lockout accounts:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased per each new failed attempt until an hour as maximum,&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;When the application detects that an account is locked more times than usual, this account shall be disabled (no more than 100 failure attempts). A disabled account shall only be restored by an administrator.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;When the application detects active brute-force attacks, the application shall require a &lt;span class="caps"&gt;CAPTCHA&lt;/span&gt;, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt; 
  &lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt; 
  &lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
                    </references>
                    <standards>
                        <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;p&gt;Use tools like &lt;a href="https://www.thc.org/thc-hydra/"&gt;&lt;span class="caps"&gt;THC&lt;/span&gt;-Hydra&lt;/a&gt;, &lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;&lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;&lt;/a&gt; or &lt;a href="https://portswigger.net/burp/"&gt;Burp Suite&lt;/a&gt;to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Perform a simulation of the attack against the login function.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that the function is blocked for your source after n attempts.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that there is a log alerting function for an unusual amount of failed log in attempts, even if they originated from different sources.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:42">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-541" name="Prevent unauthorised access to source code through the service" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Access to the source-code for the application can aid an attacker in determined bugs or
                        vulnerabilities in the code or logic. For closed-source projects it is therefore important to
                        control and restrict access to the source. Application services may unexpectedly expose code,
                        for example a service providing files to a user could be manipulated to access source code if
                        implemented insecurely.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure that source code is not inadvertently disclosed through misconfiguration or
                        vulnerabilities in the service.&lt;/li&gt;
                        &lt;li&gt;Check that configuration files are not downloadable directly from the service, and
                        cannot be read and viewed through the service itself.&lt;/li&gt;
                        &lt;li&gt;Ensure backups, operating system, and version control artifacts do not expose code.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Check that the source code of the application is never returned in case it cannot
                            be interpreted.&lt;/li&gt;
                            &lt;li&gt;Web Servers have a concept called handlers which manages the source code
                            interpretation before sending it to the client. If those handlers are not properly
                            configured, the plain source code would be sent as a default.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the handlers are correctly configured to support the types of languages your
                            server uses.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check also that the source code is not leaked in case of failure.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-08T12:43:53.588000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="OTG-BUSLOGIC-006" name="Restrict actions of users that follow unusual patterns." platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Restrict actions that users can do outside of the approved/required business process flow.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This is important because without this safeguard in place attackers may be able to bypass or
                        circumvent work-flows and checks allowing them to prematurely enter or skip required sections
                        of the application potentially allowing action/transaction to be completed without successfully
                        completing the entire business process, leaving the system with incomplete back-end tracking
                        information.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP testing business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
                        <reference name="OWASP testing for the circumvention of work flows" url="https://www.owasp.org/index.php/Testing_for_the_Circumvention_of_Work_Flows_(OTG-BUSLOGIC-006)"/>
                    </references>
                    <standards>
                        <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that the application will only process business logic flows in sequential step
                            order and in realistic human time.
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T10:04:15.073000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="use-analysis-static-code" name="Scan the code with static code analysis tools" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T12:53:45.100000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  In situations where the verifier and CSP are separate entities, communications between RA (Registration Authority) and CSP (Credential Service Provider), shall be authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS connection, using approved cryptographic algorithms. 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Verify that the CSP and RA are communicated securely with a secure channel, for example with TLS.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-30T08:44:22.165000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="GENERAL" name="General" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-1" name="Accessing Functionality Not Properly Constrained by ACLs" state="Expose" source="MANUAL" owner="" library="">
                            <desc>In applications, particularly web applications, access to functionality is mitigated by the authorization framework, whose job it is to map ACLs to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application or can run queries for data that he is otherwise not supposed to. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="deny-default-enf" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-276">
                                    <controls>
                                        <control ref="deny-default-enf" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-214" name="An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to cause the targeted application to return an error including a stack trace, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. The stack trace enumerates the chain of methods that led up to the point where the error was encountered. This can not only reveal the names of the methods (some of which may have known weaknesses) but possibly also the location of class files and libraries as well as parameter values. In some cases, the stack trace might even disclose sensitive configuration or user information. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="error-handling-centralized" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-460">
                                    <controls>
                                        <control ref="error-handling-centralized" mitigation="100"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-544">
                                    <controls>
                                        <control ref="error-handling-centralized" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="SOURCE-LEAK" name="Attackers gain control of the system through a source code leakage" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attackers gain unauthorized access to a service by reading raw source code returned by
                                the service, if this code contains confidential information such as authentication
                                credentials or other secrets that can be used to access the service.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Configuration files that can be downloaded from the service could also be used to gain
                                access to sensitive information.&amp;nbsp;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="CWE-541" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-541">
                                    <controls>
                                        <control ref="CWE-541" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-172" name="Attackers subvert the intended workflow of the application in order to perform unauthorised operations" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If an application enforces an order in workflows, then attackers could attempt to
                                bypass this order so that they can perform operations for which they are not authorized.
                                &lt;div&gt;
                                The technique can also be used to gain access to unauthorized data.&amp;nbsp;
                                &lt;br /&gt;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="OTG-BUSLOGIC" mitigation="50"/>
                                <control ref="OTG-BUSLOGIC-006" mitigation="50"/>
                                <control ref="implement-monitoring-unusual-activities" mitigation="10"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-754">
                                    <controls>
                                        <control ref="implement-monitoring-unusual-activities" mitigation="10"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-841">
                                    <controls>
                                        <control ref="OTG-BUSLOGIC" mitigation="50"/>
                                        <control ref="OTG-BUSLOGIC-006" mitigation="50"/>
                                        <control ref="implement-monitoring-unusual-activities" mitigation="10"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-130" name="Denial of service through resource exhaustion" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker causes the target to allocate excessive resources to servicing the
                                attackers' request, thereby reducing the resources available for legitimate services and
                                degrading or denying services. Usually, this attack focuses on memory allocation, but
                                any finite resource on the target could be the attacked, including bandwidth, processing
                                cycles, or other resources. This attack does not attempt to force this allocation
                                through a large number of requests (that would be Resource Depletion through Flooding)
                                but instead uses one or a small number of requests that are carefully formatted to force
                                the target to allocate excessive resources to service this request(s). Often this attack
                                takes advantage of a bug in the target to cause the target to allocate resources vastly
                                beyond what would be needed for a normal request. For example, using an Integer Attack,
                                the attacker could cause a variable that controls allocation for a request to hold an
                                excessively large value. Excessive allocation of resources can render a service degraded
                                or unavailable to legitimate users and can even lead to crashing of the target.
                                &lt;br /&gt;
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="implement-monitoring-unusual-activities" mitigation="33"/>
                                <control ref="network-rate-limit" mitigation="34"/>
                                <control ref="network-rate-limit-login" mitigation="33"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-770">
                                    <controls>
                                        <control ref="implement-monitoring-unusual-activities" mitigation="33"/>
                                        <control ref="network-rate-limit" mitigation="34"/>
                                        <control ref="network-rate-limit-login" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="LEAST-PRIV-ENF" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-272">
                                    <controls>
                                        <control ref="LEAST-PRIV-ENF" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-184" name="Software Integrity Attack" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="use-analysis-static-code" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-749">
                                    <controls>
                                        <control ref="use-analysis-static-code" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-586-SER" name="An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects." state="Expose" source="MANUAL" owner="" library="">
                            <desc>Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="SER-UNTRUST" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-502">
                                    <controls>
                                        <control ref="SER-UNTRUST" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-300" name="Attackers gain control of the connection through a Man In The Middle attack" state="Expose" source="MANUAL" owner="" library="">
                            <desc>&lt;div&gt;
                                This type of attack targets the communication between two components (typically client
                                and server). The attacker places himself in the communication channel between the two
                                components. Whenever one component attempts to communicate with the other (data flow,
                                authentication challenges, etc.), the data first goes to the attacker, who has the
                                opportunity to observe or alter it, and it is then passed on to the other component as
                                if it was never intercepted. This interposition is transparent leaving the two
                                compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identify between two components.&amp;nbsp; &amp;nbsp;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CWE-319-TRANSPORT" mitigation="100"/>
                                <control ref="secure-communication-ra-and-csp" mitigation="10"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-319">
                                    <controls>
                                        <control ref="CWE-319-TRANSPORT" mitigation="100"/>
                                        <control ref="secure-communication-ra-and-csp" mitigation="10"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GENERIC-SERVICE:AUTHN-2FA" name="Generic Service: 2-Factor Authentication" desc="" tags="" position="8" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-287" name="Improper Authentication" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T15:41:57.670000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When an actor claims to have a given identity, the software
					does not prove or insufficiently proves that the claim is
					correct.</desc>
                </weakness>
                <weakness ref="2FA-Token-compromise" name="There is no quick revocation mechanism in place" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-10-11T15:58:41.311000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When using a second factor authentication, an attacker who gains access to this second factor
                        and could guess the first one could gain persistent access to the system if there are no
                        mechanisms in place to avoid this.&amp;nbsp;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="revoke-compromised-authentication-tokens" name="Implement an effective process to revoke compromised authentication tokens" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;span&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Theft or loss of an authentication token can undermine security in any multi-factor authentication process. Loss of a physical token or mobile device with soft-tokens, or compromise of a client-side certificate could mean an attacker has all of the factors required to authenticate to a system and bypass the protections provided by multi-factor authentication.&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span&gt;Define an organization process to identify or report lost or compromised authentication tokens/factors. If&amp;nbsp;&lt;/span&gt;OTP or multi-factor authentication factors are lost, that evidence of identity proofing shall be performed at the same level as during enrollment.&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;Implement technical controls to suspend or revoke compromised tokens or accounts&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;These processes should be implementable in a timely manner to reduce the attack window&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;Implement the mechanisms to renew authentication tokens/factors with the sufficient time before they are revoked.&lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt;&lt;/span&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="5.2.8" supportedStandardRef="nist-800-63"/>
                        <standard ref="6.1.2.3" supportedStandardRef="nist-800-63"/>
                        <standard ref="6.1.4" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.5.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.5.7" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Verify that there is a working process in place to revoke a given token in a timely manner.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Verify that the renew of the authentication tokens/factors is doing with enough time.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T15:34:56.006000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="2FA-Token-compromise" name="Implement an effective process to revoke compromised authentication tokens" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Theft or loss of an authentication token can undermine security in any multi-factor
                        authentication process. Loss of a physical token or mobile device with soft-tokens, or
                        compromise of a client-side certificate could mean an attacker has all of the factors required
                        to authenticate to a system and bypass the protections provided by multi-factor authentication.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Define an organization process to identify or report lost or compromised
                        authentication tokens/factors&lt;/li&gt;
                        &lt;li&gt;Implement technical controls to suspend or revoke compromised tokens or accounts&lt;/li&gt;
                        &lt;li&gt;These processes should be implementable in a timely manner to reduce the attack window&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;&lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Verify that there is a working process in place to revoke a given token in a
                            timely manner.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-10-11T15:59:51.188000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-151" name="An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials. Alternatively, an attacker may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. Identity Spoofing attacks need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the adversary attempts to change the apparent identity. This attack differs from Content Spoofing attacks where the adversary does not wish to change the apparent identity of the message but instead wishes to change what the message says. In an Identity Spoofing attack, the adversary is attempting to change the identity of the content. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="revoke-compromised-authentication-tokens" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-287">
                                    <controls>
                                        <control ref="revoke-compromised-authentication-tokens" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="2FA-Token-compromise" name="Second authentication factor is compromised" state="Expose" source="MANUAL" owner="" library="">
                            <desc>The second authentication factor, such as the digital certificate or hardware or
                                software token is compromised by attackers. Attackers would additionally have to
                                compromise the first factor (e.g. the password) in order to completely compromise the
                                authentication system.
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="2FA-Token-compromise" mitigation="100"/>
                                <control ref="revoke-compromised-authentication-tokens" mitigation="10"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="2FA-Token-compromise">
                                    <controls>
                                        <control ref="2FA-Token-compromise" mitigation="100"/>
                                        <control ref="revoke-compromised-authentication-tokens" mitigation="10"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="CSD-GS-ADM" name="Generic Service: Administration" desc="" tags="" position="9" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="WEB-SRV-ADM" name="Access to management functions is not limited to web service administrators" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-306: Missing Authentication for Critical Function" url="https://cwe.mitre.org/data/definitions/306.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T22:36:04.498000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not perform any authentication for functionality that requires a provable
                        user identity or consumes a significant amount of resources, gives access to sensitive data or
                        sensitive business logic.
                        &lt;br /&gt;
                    </desc>
                </weakness>
                <weakness ref="CSD-ADM-OPEN" name="Access to the administration interfaces is open to untrusted parties" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-29T18:01:04.722000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The application does not restrict access to administration interfaces to untrusted parties.&amp;nbsp;
                        &lt;br /&gt;This fact could allow an attacker to chain vulnerabilities to gain unauthorized
                        access to the system.
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="WEB-SRV-ADM-AUTH" name="Restrict access to administrative functionality" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        If inadequate controls are in place, lower privileged users may be able to access higher
                        privilege or administrative functionality to subvert security within the application.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Restrict administration functions to designated administrators only through robust
                        access controls.&lt;/li&gt;
                        &lt;li&gt;Ensure this restriction is applied at the server-side; do not rely on 'secret' areas
                        of the application, menu hiding, or other client-side techniques to protect the functionality.&lt;/li&gt;
                        &lt;li&gt;Measures to prevent cross-site request forgery must be present on administrative
                        functions.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-30" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="13.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="13.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Try to access administration resources with a user who is not an administrator.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the access is forbidden.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T22:37:08.424000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CSD-ADM-TRUST" name="Restrict access to administrative interfaces" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;p&gt;Restrict access to administrative interfaces to trusted actors from trusted locations to reduce the application attack surface and likelihood of compromise.&lt;/p&gt; 
&lt;p&gt;Restrict administrative access to specific networks or hosts.&lt;/p&gt; 
&lt;div&gt;
  Use strong authentication for privileged access, for example a 2FA. 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="13.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="13.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;p&gt;Try to access the administrative interface from an untrusted location. For example, if you are using a Wordpress &lt;span class="caps"&gt;CMS&lt;/span&gt; you should restrict access to /wp-admin which should not be available from the internet but only from trusted networks or IP addresses.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:47">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="ADMINISTER SERVICE" name="Administer service" desc="" library="">
                    <threats>
                        <threat ref="CSD-ADM-IFACE" name="Attackers gain access to the system through an unprotected administration interface" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Administrative interfaces grant access to sensitive operations that can typically
                                affect key security mechanisms, like modifying credentials and adding/removing user
                                accounts.
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="CSD-ADM-TRUST" mitigation="50"/>
                                <control ref="WEB-SRV-ADM-AUTH" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="WEB-SRV-ADM">
                                    <controls>
                                        <control ref="WEB-SRV-ADM-AUTH" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CSD-ADM-OPEN">
                                    <controls>
                                        <control ref="CSD-ADM-TRUST" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GENERIC-SERVICE:AUTHN" name="Generic Service: Authentication" desc="A generic service that requires authentication" tags="" position="10" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-603" name="Authentication controls are enforced on the client side but not on server side" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-603: Use of client-side Authentication" url="http://cwe.mitre.org/data/definitions/603.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-28T13:01:17.406000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Open authenticated endpoints that rely on authentication performed by a client are easily
                        identifiable and exploitable by accessing them directly. Clients can be subverted as an attacker
                        usually has full control over them so they have to be treated as an untrusted component.
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;A client/server product that performs authentication within client code but not in
                        server code, allows server-side authentication to be bypassed via a modified client that omits
                        the authentication check. client-side authentication is extremely weak and may be breached
                        easily. Any attacker may read the source code and reverse-engineer the authentication mechanism
                        to access parts of the application which would otherwise be protected.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-362" name="Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" state="0" impact="75">
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;h2&gt;&lt;span class="mw-headline"&gt;&lt;font size="4"&gt;Black Box testing and example&lt;/font&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;Testing for race conditions is problematic due to their nature, and external influences on testing including server load, network latency, etc. will all play a part in the presence and detection of the condition. &lt;/p&gt; 
&lt;p&gt;However, testing can be focused on specific transactional areas of the application, where time-of-read to time-of-use of specific data variables could be adversely affected by concurrency issues. &lt;/p&gt; 
&lt;p&gt;Black Box testing attempts to force a race condition may include the ability to make multiple simultaneous requests while observing the outcome for unexpected behavior. &lt;/p&gt; 
&lt;p&gt;Examples of such areas are illustrated in the paper &amp;quot;On Race Vulnerabilities in Web Applications&amp;quot;, cited in the further reading section. The authors suggest that it may be possible in certain circumstances to: &lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; Create multiple user accounts with the same username.&lt;/li&gt; 
 &lt;li&gt; Bypass account lockouts against brute forcing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Testers should be aware of the security implications of race conditions and their factors surrounding their difficulty of testing. &lt;/p&gt; 
&lt;h2&gt;&lt;span class="mw-headline"&gt;&lt;font size="4"&gt;Gray Box testing and example&lt;/font&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;Code review may reveal likely areas of concern for concurrency issues. More information on reviewing code for concurrency issues can be seen at OWASP Code Review Guide's &lt;a href="https://www.owasp.org/index.php/Reviewing_Code_for_Race_Conditions" title="Reviewing Code for Race Conditions"&gt;Reviewing Code for Race Conditions&lt;/a&gt;&lt;/p&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Reviewing Code for Race Conditions" url="https://www.owasp.org/index.php/Reviewing_Code_for_Race_Conditions"/>
                            <reference name="Testing for Race Conditions (OWASP-AT-010)" url="https://www.owasp.org/index.php/Testing_for_Race_Conditions_(OWASP-AT-010)"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-21T14:13:58.014000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>&lt;div&gt;
  A race condition is a flaw that produces an unexpected result when the timing of actions impact other actions. An example may be seen on a multithreaded application where actions are being performed on the same data. Race conditions, by their very nature, are difficult to test for.&amp;nbsp; 
&lt;/div&gt;</desc>
                </weakness>
                <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-27T13:08:23.410000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
                </weakness>
                <weakness ref="CWE-923" name="Improper Restriction of Communication Channel to Intended Endpoints" state="0" impact="75">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-923: Improper Restriction of Communication Channel to Intended Endpoints" url="https://cwe.mitre.org/data/definitions/923.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-26T12:50:00.582000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint. 
&lt;br /&gt;</desc>
                </weakness>
                <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-27T12:08:02.127000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</desc>
                </weakness>
                <weakness ref="CWE-256" name="Plaintext Storage of a Password" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-11T07:51:20.329000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Storing a password in plaintext may result in a system
					compromise.</desc>
                </weakness>
                <weakness ref="CWE-367" name="Time-of-check Time-of-use (TOCTOU) Race Condition" state="0" impact="75">
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;h2&gt;&lt;span class="mw-headline"&gt;&lt;font size="4"&gt;Black Box testing and example&lt;/font&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;Testing for race conditions is problematic due to their nature, and external influences on testing including server load, network latency, etc. will all play a part in the presence and detection of the condition. &lt;/p&gt; 
&lt;p&gt;However, testing can be focused on specific transactional areas of the application, where time-of-read to time-of-use of specific data variables could be adversely affected by concurrency issues. &lt;/p&gt; 
&lt;p&gt;Black Box testing attempts to force a race condition may include the ability to make multiple simultaneous requests while observing the outcome for unexpected behavior. &lt;/p&gt; 
&lt;p&gt;Examples of such areas are illustrated in the paper &amp;quot;On Race Vulnerabilities in Web Applications&amp;quot;, cited in the further reading section. The authors suggest that it may be possible in certain circumstances to: &lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; Create multiple user accounts with the same username.&lt;/li&gt; 
 &lt;li&gt; Bypass account lockouts against brute forcing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Testers should be aware of the security implications of race conditions and their factors surrounding their difficulty of testing. &lt;/p&gt; 
&lt;h2&gt;&lt;span class="mw-headline"&gt;&lt;font size="4"&gt;Gray Box testing and example&lt;/font&gt;&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;Code review may reveal likely areas of concern for concurrency issues. More information on reviewing code for concurrency issues can be seen at OWASP Code Review Guide's &lt;a href="https://www.owasp.org/index.php/Reviewing_Code_for_Race_Conditions" title="Reviewing Code for Race Conditions"&gt;Reviewing Code for Race Conditions&lt;/a&gt;&lt;/p&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Reviewing Code for Race Conditions" url="https://www.owasp.org/index.php/Reviewing_Code_for_Race_Conditions"/>
                            <reference name="Testing for Race Conditions (OWASP-AT-010)" url="https://www.owasp.org/index.php/Testing_for_Race_Conditions_(OWASP-AT-010)"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-21T16:54:15.429000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the software to perform invalid actions when the resource is in an unexpected state.&amp;nbsp;</desc>
                </weakness>
                <weakness ref="CWE-523" name="Unprotected Transport of Credentials" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-11T07:49:08.926000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Login pages not using adequate measures to protect the user
					name and password while they are in transit from the client to the
					server.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-603" name="Enforce authentication on the server-side" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        All data at the client-side must be considered tainted. &amp;nbsp;As such, decisions on
                        authentication (or Identification and Verification - ID&amp;amp;V) must be made or validated at
                        the server-side to prevent their subversion.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure credentials are passed securely from the client-to server.&lt;/li&gt;
                        &lt;li&gt;The server should compare the credentials with those stored at the server-side (e.g.
                        the hashed password compared against those stored for the claimed identity).&lt;/li&gt;
                        &lt;li&gt;Implement controls to mitigate brute-force attacks; for example through rate-limiting,
                        account lockouts, or escalating timeouts.&lt;/li&gt;
                        &lt;li&gt;Once authenticated, a non-predictable and cryptographically secure token should be
                        passed securely to the client-side to validate further interaction with the server.&lt;/li&gt;
                        &lt;li&gt;Messages returned to the user during authentication, in particular when the process
                        fails, should not reveal to the user whether the username was valid. &amp;nbsp;Returning generic
                        errors prevents an attacker enumerating valid account IDs for subsequent attacks.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="164.312(d)" supportedStandardRef="hipaa-required"/>
                        <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.1.3.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.7.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.7.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify which functions the service provides which are authenticated or
                            performing a privileged action.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Try to access them without providing any type of authentication.&lt;/li&gt;
                            &lt;/ol&gt;A clear example of what you should look for would be an API endpoint which allows
                            a client to update a resource, you should check that call checks the authentication on the
                            server side (by checking the session having validated the authentication credentials
                            previously).&amp;nbsp;
                            &lt;br /&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-28T13:02:30.394000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-367-TOCTOU" name="Ensure that all high-value business logic flows, including authentication, session management and access control are thread safe and resistant to time-of-check and time-of-use race conditions." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;&lt;/div&gt; 
&lt;div&gt; 
 &lt;table width="98%"&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt; 
     &lt;div class="indent"&gt; 
      &lt;ul&gt; 
       &lt;li&gt;Do not perform a check before the use. This does not resolve the underlying issue of the execution of a function on a resource whose state and identity cannot be assured, but it does help to limit the false sense of security given by the check. &lt;/li&gt; 
      &lt;/ul&gt; 
     &lt;/div&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;p&gt;&lt;/p&gt; 
     &lt;ul&gt; 
      &lt;li&gt;When the file being altered is owned by the current user and group, set the effective gid and uid to that of the current user and group when executing this statement.&lt;/li&gt; 
     &lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;p&gt;&lt;/p&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Limit the interleaving of operations on files from multiple processes.&lt;/li&gt; 
     &lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;p&gt;&lt;/p&gt; 
     &lt;ul&gt; 
      &lt;li&gt;If you cannot perform operations atomically and you must share access to the resource between multiple processes or threads, then try to limit the amount of time (CPU cycles) between the check and use of the resource. This will not fix the problem, but it could make it more difficult for an attack to succeed.&lt;/li&gt; 
     &lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;p&gt;&lt;/p&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Recheck the resource after the use call to verify that the action was taken appropriately.&lt;/li&gt; 
     &lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;p&gt;&lt;/p&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Ensure that some environmental locking mechanism can be used to protect resources effectively. Ensure that locking occurs before the check, as opposed to afterwards, such that the resource, as checked, is the same as it is when in use.&amp;nbsp;&lt;/li&gt; 
     &lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="11.1.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.11.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="11.1.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the areas of the application where concurrent access to resources can
                            happen.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify that unexpected input, timing or action sequence is not causing unexpected
                            behavior on the system.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-19T10:45:00.395000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-923-SEGREG" name="Ensure that segregation of components of differing trust levels" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Ensure that segregation of components of differing trust levels through well-defined security controls, firewall rules, API gateways, reverse proxies, cloud-based security groups, or similar mechanisms.</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.14.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.14.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-26T12:52:09.260000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="SEC-FEATURES" name="Ensure that the application correctly implements the security features needed according to its security level" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt; 
 &lt;div&gt;
   The security controls in place will in part be defined by the nature of the application. A low security unauthenticated application will have different requirements to an application providing transactional capabilities in a finance system, for example. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Implement features around security like authentication, access control, confidentiality, cryptography, and privilege management based on the principle of 'fit for purpose' (appropriate to the application).&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Verify the application implementation against the design and security feature
                            needs.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-06-19T10:36:58.517000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-306-AUTH" name="Ensure that the application uses a single vetted authentication mechanism that is known to be secure" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;ul&gt; 
 &lt;li&gt;Ensure that the application uses a single vetted authentication mechanism that is known to be secure, can be extended to include strong authentication, and has sufficient logging and monitoring to detect account abuse or breaches.&lt;/li&gt; 
 &lt;li&gt;Ensure that all authentication pathways and identity management APIs implement consistent authentication security control strength, such that there are no weaker alternatives per the risk of the application.&lt;/li&gt; 
&lt;/ul&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="1.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="1.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
  Testing the authentication schema means understanding how the authentication process works and using that information to circumvent the authentication mechanism. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4.5.1 Testing for Credentials Transported over an Encrypted Channel (OTG-AUTHN-001) 
&lt;/div&gt; 
&lt;div&gt;
  4.5.2 Testing for default credentials (OTG-AUTHN-002) 
&lt;/div&gt; 
&lt;div&gt;
  4.5.3 Testing for Weak lock out mechanism (OTG-AUTHN-003) 
&lt;/div&gt; 
&lt;div&gt;
  4.5.4 Testing for bypassing authentication schema (OTG-AUTHN-004) 
&lt;/div&gt; 
&lt;div&gt;
  4.5.5 Test remember password functionality (OTG-AUTHN-005) 
&lt;/div&gt; 
&lt;div&gt;
  4.5.6 Testing for Browser cache weakness (OTG-AUTHN-006) 
&lt;/div&gt; 
&lt;div&gt;
  4.5.7 Testing for Weak password policy (OTG-AUTHN-007) 
&lt;/div&gt; 
&lt;div&gt;
  4.5.8 Testing for Weak security question/answer (OTG-AUTHN-008) 
&lt;/div&gt; 
&lt;div&gt;
  4.5.9 Testing for weak password change or reset functionalities (OTG-AUTHN-009) 
&lt;/div&gt; 
&lt;div&gt;
  4.5.10 Testing for Weaker authentication in alternative channel (OTG-AUTHN-010)&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Test For Authentication On All EndPoints. You can automate this process using DAST tools like OWASP ZAP. It includes an API scanning script to automate security scanning of APIs defined using OpenAPI/Swagger or SOAP.&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Usage: zap-api-scan.py -t &amp;lt;target&amp;gt; -f &amp;lt;format&amp;gt; [options] 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -t target&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;target API definition, currently only an OpenAPI URL, eg https://www.example.com/openapi.json 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -f format&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;either openapi or soap 
 &lt;/div&gt; 
 &lt;div&gt;
   Options: 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -h&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; print this help message 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -c config_file&amp;nbsp; &amp;nbsp; config file to use to INFO, IGNORE or FAIL warnings 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -u config_url&amp;nbsp; &amp;nbsp; &amp;nbsp;URL of config file to use to INFO, IGNORE or FAIL warnings 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -g gen_file&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;generate default config file (all rules set to WARN) 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -r report_html&amp;nbsp; &amp;nbsp; file to write the full ZAP HTML report 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -w report_md&amp;nbsp; &amp;nbsp; &amp;nbsp; file to write the full ZAP Wiki (Markdown) report 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -x report_xml&amp;nbsp; &amp;nbsp; &amp;nbsp;file to write the full ZAP XML report 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -J report_json&amp;nbsp; &amp;nbsp; file to write the full ZAP JSON document 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -a&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; include the alpha passive scan rules as well 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -d&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; show debug messages 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -P&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; specify listen port 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -D&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; delay in seconds to wait for passive scanning&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -i&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; default rules not in the config file to INFO 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -l level&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; minimum level to show: PASS, IGNORE, INFO, WARN or FAIL, use with -s to hide example URLs 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -n context_file&amp;nbsp; &amp;nbsp;context file which will be loaded prior to scanning the target 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -p progress_file&amp;nbsp; progress file which specifies issues that are being addressed 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -s&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; short output format - don't show PASSes or example URLs 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -S&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; safe mode this will skip the active scan and perform a baseline scan 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -T&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; max time in minutes to wait for ZAP to start and the passive scan to run 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -O&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; the hostname to override in the (remote) OpenAPI spec 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -z zap_options&amp;nbsp; &amp;nbsp; ZAP command line options e.g. -z &amp;quot;-config aaa=bbb -config ccc=ddd&amp;quot; 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; --hook&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; path to python file that define your custom hooks 
 &lt;/div&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP Testing Guide v4. Testing for authentication" url="https://www.owasp.org/index.php/Testing_for_authentication"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-27T12:09:07.600000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="">
                    <threats>
                        <threat ref="CSD-AUTH_BYPASS" name="Attackers gain access to user accounts by exploiting flaws in the authentication function" state="Expose" source="MANUAL" owner="" library="">
                            <desc>The authentication mechanism itself can be attacked to exploit flaws in its design or
                                implementation.
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CWE-306-AUTH" mitigation="50"/>
                                <control ref="CWE-603" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-603">
                                    <controls>
                                        <control ref="CWE-603" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-306">
                                    <controls>
                                        <control ref="CWE-306-AUTH" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="7k-CWE-TimeState" name="Attackers gain unauthorised access to the application because of time and state management issues" state="Expose" source="MANUAL" owner="" library="">
                            <desc>&lt;div&gt;
  This weakness is related to the&amp;nbsp;improper&amp;nbsp;management of time and state in an environment that supports simultaneous or near-simultaneous computation by multiple systems, processes, or threads. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;p&gt;Distributed computation is about time and state. That is, in order for more than one component to communicate, state must be shared, and all that takes time. Most programmers anthropomorphize their work. They think about one thread of control carrying out the entire program in the same way they would if they had to do the job themselves. Modern computers, however, switch between tasks very quickly, and in multi-core, multi-CPU, or distributed systems, two events may take place at exactly the same time. Defects rush to fill the gap between the programmer's model of how a program executes and what happens in reality. These defects are related to&amp;nbsp;unexpected&amp;nbsp;interactions between threads, processes, time, and information. These interactions happen through shared state: semaphores, variables, the file system, and, basically, anything that can store information.&lt;/p&gt; 
&lt;/div&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="CWE-367-TOCTOU" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-362">
                                    <controls>
                                        <control ref="CWE-367-TOCTOU" mitigation="100"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-367">
                                    <controls>
                                        <control ref="CWE-367-TOCTOU" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="SPOOF-ENDPOINT" name="Attackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint. 
&lt;br /&gt; 
&lt;br /&gt;While this issue frequently involves authentication between network-based clients and servers, other types of communication channels and endpoints can have this weakness. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="75"/>
                            <references/>
                            <controls>
                                <control ref="CWE-923-SEGREG" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-923">
                                    <controls>
                                        <control ref="CWE-923-SEGREG" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-551" name="Modify Existing Service" state="Expose" source="MANUAL" owner="" library="">
                            <desc>When an operating system starts, it also starts programs called services or daemons. Modifying existing services may break existing services or may enable services that are disabled/not commonly used. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="SEC-FEATURES" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-284">
                                    <controls>
                                        <control ref="SEC-FEATURES" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-102" name="Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. 
&lt;br /&gt;This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="CWE-603" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-256">
                                    <controls>
                                        <control ref="CWE-603" mitigation="100"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-523">
                                    <controls>
                                        <control ref="CWE-603" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GENERIC-SERVICE:DATA-SENS:AUTHZ" name="Generic Service: Authorization for sensitive data" desc="Server side access control for sensitive data" tags="" position="11" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-639" name="Authorization Bypass Through User-Controlled Key" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-639: Authorization Bypass Through User-Controlled Key" url="http://cwe.mitre.org/data/definitions/639.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:14.174000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The system's authorization functionality does not prevent one user from gaining access to
                        another user's data or record by modifying the key value identifying the data.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;Retrieval of a user record occurs in the system based on some key value that is
                        under user control. The key would typically identify a user related record stored in the system
                        and would be used to lookup that record for presentation to the user. It is likely that an
                        attacker would have to be an authenticated user in the system. However, the authorization
                        process would not properly check the data access operation to ensure that the authenticated user
                        performing the operation has sufficient entitlements to perform the requested data access, hence
                        bypassing any other authorization checks present in the system. One manifestation of this
                        weakness would be if a system used sequential or otherwise easily guessable session ids that
                        would allow one user to easily switch to another user's session and read/modify their data.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-28T17:26:25.410000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not restrict or incorrectly restricts access
					to a resource from an unauthorized actor.</desc>
                </weakness>
                <weakness ref="CWE-209" name="Information Exposure Through an Error Message" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-209: Information Exposure Through an Error Message" url="https://cwe.mitre.org/data/definitions/209.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-20T08:23:01.610000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software generates an error message that includes sensitive information about its
                        environment, users, or associated data.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;The sensitive information may be valuable information on its own (such as a
                        password), or it may be useful for launching other, more deadly attacks. If an attack fails, an
                        attacker may use error information provided by the server to launch another more focused attack.
                        For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full
                        pathname of the installed application. In turn, this could be used to select the proper number
                        of &amp;quot;..&amp;quot; sequences to navigate to the targeted file. An attack using SQL
                        injection (CWE-89) might not initially succeed, but an error message could reveal the malformed
                        query, which would expose query logic and possibly even passwords or other sensitive information
                        used within the query.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:44">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</desc>
                </weakness>
                <weakness ref="CWE-636" name="Not Failing Securely ('Failing Open')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-24T08:50:49.310000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When the product encounters an error condition or failure, its
                        design requires it to fall back to a state that is less secure than other
                        options that are available, such as selecting the weakest encryption algorithm
                        or using the most permissive access control restrictions.
                    </desc>
                </weakness>
                <weakness ref="CWE-275" name="Permission Issues" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-28T17:28:41.628000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Weaknesses in this category are related to improper assignment
					or handling of permissions.</desc>
                </weakness>
                <weakness ref="CWE-654" name="Reliance on a Single Factor in a Security Decision" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-654: Reliance on a Single Factor in a Security Decision" url="http://cwe.mitre.org/data/definitions/654.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:14.190000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.</desc>
                </weakness>
                <weakness ref="CWE-330" name="Use of Insufficiently Random Values" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-30T08:53:49.033000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software may use insufficiently random numbers or values in a security context that depends on unpredictable numbers.</desc>
                </weakness>
                <weakness ref="CWE-308" name="Use of Single-factor Authentication" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-30T08:47:05.562000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The use of single-factor authentication can lead to unnecessary
					risk of compromise when compared with the benefits of a dual-factor
					authentication scheme.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-285" name="Apply authorization checks to segregate and control access to user data" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        &lt;div&gt;
                        Applications protecting sensitive or otherwise restricted resources must ensure only appropriate
                        and authorized users may access the application data. It is important that an application
                        prevents unauthorized users gaining inappropriate access to each other's data; although user A
                        and user B may both be trusted to access data within the application, they may be authorized to
                        only access different subsets of the protected resources.&amp;nbsp; E.g. user A should not be
                        able to access user B's personal data by manipulating a request (typical examples are
                        manipulation of an ID value or other object reference sent in the URL or body of an HTTP
                        request).
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        It is not sufficient to rely on obscurity, for example obfuscated or secret URLs or filenames.
                        The application must validate each request for protected data against the proven identity of the
                        user. Before providing access to restricted resources the application must:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure the user has undergone appropriate authentication (identification and
                        verification, or ID&amp;amp;V). E.g. they must have provided their identity and confirmed this
                        with a password, token, or other verification. Typically this will be through checking the
                        validity of the session token issued after login.&lt;/li&gt;
                        &lt;li&gt;Confirm the user is entitled to access the data or resource they are requesting. E.g.
                        their confirmed identify checked against a server-side access control matrix to determine
                        whether they may access the requested resource.&lt;/li&gt;
                        &lt;li&gt;Access controls should be granular, and allow for access to individual resources to be
                        issued to individual users or roles.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        URL and asset based access control is provided by most web-frameworks, and it is preferable to
                        use an established and proven framework.
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
                        <standard ref="9.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.2.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-7" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
                        <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Using two different browsers configured with an intercepting proxy.&lt;/li&gt;
                            &lt;li&gt;Login as user A in browser A.&lt;/li&gt;
                            &lt;li&gt;Login as user B in browser B.&lt;/li&gt;
                            &lt;li&gt;For every operation that displays sensitive data belonging to user A:&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Perform the operation as user A and view their sensitive data&lt;/li&gt;
                            &lt;li&gt;Obtain the session ID of user B&lt;/li&gt;
                            &lt;li&gt;Configure the proxy to intercept&lt;/li&gt;
                            &lt;li&gt;Perform the operation as user A again, but this time intercept all the requests
                            and replace user A's session ID with that of user B&lt;/li&gt;
                            &lt;li&gt;Ensure that user A's sensitive data is &lt;b&gt;not &lt;/b&gt;visible&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:14.266000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-654" name="Authenticate users (multi- or two-factor authentication [2FA])" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  The application shall ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For more sensitive applications hosting data or functionality requiring greater assurance over the identification of users, a multi- or two-factor authentication process is recommended. Together with asserting their identity and a password/phrase/PIN (something you know), such systems require additional factors, such as biometric validation (something you are), user-initiated action such as a button press on a FIDO hardware key or a token (something you have). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Implement multi-factor authentication for applications providing access to sensitive data or functionality, and for highly privileged user access (e.g. administrators).&lt;/li&gt; 
  &lt;li&gt;This shall utilize a factor such as a soft or hard-token verification in addition to the secret password/pass-phrase for example.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt;&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="164.312(d)" supportedStandardRef="hipaa-required"/>
                        <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.2.3" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.2.5" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.2.9" supportedStandardRef="nist-800-63"/>
                        <standard ref="6.1.3" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt; 
 &lt;li&gt;Check for the authentication(s) functions of the component.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Check at least a combination of the following factors is used within the authentication process.&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Something that you are: mainly biometric characteristics of yourself as fingerprint, facial recognition, iris recognition, etc.)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Something that you know: a PIN, password, pass phrase, etc.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Something that you have: a hardware token, a card, a dongle, a mobile phone, etc.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
&lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:14.221000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ASVS-8.2" name="Deny access by default if a security control fails with an exception." platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        If a security control fails, the application shall not allow the user access to the application.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Therefore, if in the security control an exception is launched the system should stay in a
                        secure state, meaning access is denied to the user.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Conversely, access will only be granted if there is no security failure / exception.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Fail securely" url="https://www.owasp.org/index.php/Security_by_Design_Principles#Fail_securely"/>
                        <reference name="OWASP Fail securely" url="https://www.owasp.org/index.php/Fail_securely"/>
                    </references>
                    <standards>
                        <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="4.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="4.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="4.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check if the security controls fail, we cannot get access to the application.
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            Ensure that if a security control fails or throws an exception access is denied to the
                            application for the user
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-24T08:51:40.321000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ASVS-8.1" name="Ensure sensitive data is not revealed through error output messages." platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Ensure the application does not output error messages or stack traces containing sensitive
                        data that could assist an attacker, including session id, software/framework versions and
                        personal information.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that the application does not output error massages or stack traces containing
                            sensitive data.
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-24T08:48:30.802000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ACCESS-CONTROL-CENTRALIZED" name="Ensure that access control mechanisms are centralized" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The access control, authentication and authorization procedures shall be centralized, as all
                        roles, permissions, groups and users shall be controlled - or gain access - through this
                        mechanism.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        To ensure roles, groups and permissions are assigned properly to users, we need to have
                        centralized access control, to grant or deny access easily and securely.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that access control mechanisms are centralized.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-06T16:43:27.998000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="FEAT-ACC-CTRL" name="Ensure that attribute or feature-based access control is used" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Ensure that attribute or feature-based access control is used whereby the code checks the user's authorization for a feature/data item rather than just their role. Permissions should still be allocated using roles. 
&lt;br /&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="C7 OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="1.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-28T17:29:31.187000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="revoke-compromised-authentication-tokens" name="Implement an effective process to revoke compromised authentication tokens" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Theft or loss of an authentication token can undermine security in any multi-factor authentication process. Loss of a physical token or mobile device with soft-tokens, or compromise of a client-side certificate could mean an attacker has all of the factors required to authenticate to a system and bypass the protections provided by multi-factor authentication. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define an organization process to identify or report lost or compromised authentication tokens/factors&lt;/li&gt; 
  &lt;li&gt;Implement technical controls to suspend or revoke compromised tokens or accounts&lt;/li&gt; 
  &lt;li&gt;These processes should be implementable in a timely manner to reduce the attack window&lt;/li&gt; 
  &lt;li&gt;Implement the mechanisms to renew authentication tokens/factors with the sufficient time before they are revoked.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="5.2.8" supportedStandardRef="nist-800-63"/>
                        <standard ref="6.1.2.3" supportedStandardRef="nist-800-63"/>
                        <standard ref="6.1.4" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.5.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.5.7" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Verify that there is a working process in place to revoke a given token in a timely manner.&lt;/li&gt; 
  &lt;li&gt;Verify that the renew of the authentication tokens/factors is doing with enough time.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-30T08:48:14.931000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="look-up-secret-auth" name="Implement Look-Up Secret Authentication" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Verifiers of look-up secrets shall prompt the claimant for the next secret from their authenticator or for specific secret. A given secret from an authenticator shall be used successfully only once. If the look-up secret is derived from a grid card, each cell of the grid shall be used only once. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Verifiers shall store look-up secrets in a form that is resistant to offline attacks and they shall have: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;At least 112 bits entropy and it shall be hashed with an approval one-way function.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;With fewer than 112 bits of entropy, they shall be salted and hashed using a suitable one-way key derivation function, and the salt value shall be at least 32 bits in length and arbitrarily chosen so as to minimize salt value collisions among stored hashes.&lt;/li&gt; 
  &lt;li&gt;Less than 64 bits of entropy, the verifier shall implement a rate limiting mechanisms that effectively limits the number of failed authentication attempts that can be made on the subscriber's account&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="NIST 800-63-B: 5.1.2.2" url="https://pages.nist.gov/800-63-3/sp800-63b.html"/>
                    </references>
                    <standards>
                        <standard ref="5.1.2.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.6.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.6.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.6.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.6.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
  Verify that: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The look-up secret are able to be used only once.&lt;/li&gt; 
  &lt;li&gt;The random generation of the look-up secrets has got at least 112 bits of entropy.&lt;/li&gt; 
  &lt;li&gt;If the entropy is lower than&amp;nbsp; 112 but higher than 64 bits, it shall be used a hashed with a one-way key derivation function and salted with a salt value at least 32 bits in length.&lt;/li&gt; 
  &lt;li&gt;If the entropy is lower than 64 bits, a rate limiting mechanisms shall limit the number of failed authentication attempts.,&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-30T08:49:53.647000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="ACCESS SENSITIVE DATA" name="Access sensitive data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-232" name="Anonymous users could gain access to sensitive data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attackers could access data for which they are not authorized by connecting directly
                                to the resource, without authenticating. E.g.: GET /userdetails?ID=145 to gain direct
                                access to that user's personal information.
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
                            <references>
                                <reference name="OWASP Development Guide: Authorization" url="https://www.owasp.org/index.php/Guide_to_Authorization"/>
                                <reference name="OWASP Top Ten" url="https://www.owasp.org/index.php/Top_10_2007-Failure_to_Restrict_URL_Access"/>
                                <reference name="WASC-02" url="http://projects.webappsec.org/w/page/13246940/Insufficient%20Authorization"/>
                            </references>
                            <controls>
                                <control ref="CWE-285" mitigation="50"/>
                                <control ref="CWE-654" mitigation="50"/>
                                <control ref="look-up-secret-auth" mitigation="100"/>
                                <control ref="revoke-compromised-authentication-tokens" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-306">
                                    <controls>
                                        <control ref="CWE-285" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-654">
                                    <controls>
                                        <control ref="CWE-654" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-308">
                                    <controls>
                                        <control ref="look-up-secret-auth" mitigation="100"/>
                                        <control ref="revoke-compromised-authentication-tokens" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-215" name="Attackers gain access to services or data by sending malformed, or otherwise unexpected messages to a target application" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker sends random, malformed, or otherwise unexpected messages to a target
                                application and observes the application's log or error messages returned. Fuzzing
                                techniques involve sending random or malformed messages to a target and monitoring the
                                target's response. The attacker does not initially know how a target will respond to
                                individual messages but by attempting a large number of message variants they may find a
                                variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is
                                to observe the application's log and error messages, although fuzzing a target can also
                                sometimes cause the target to enter an unstable state, causing a crash. By observing
                                logs and error messages, the attacker can learn details about the configuration of the
                                target application and might be able to cause the target to disclose sensitive
                                information.
                                &lt;br /&gt;
                            </desc>
                            <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="ASVS-8.1" mitigation="50"/>
                                <control ref="ASVS-8.2" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-209">
                                    <controls>
                                        <control ref="ASVS-8.1" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-636">
                                    <controls>
                                        <control ref="ASVS-8.2" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-122" name="Authenticated attackers could gain unauthorised access to sensitive data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Users who have successfully authenticated to the application could manipulate
                                parameters in the requests to gain access to unauthorized data, such as data belonging
                                to other users.&amp;nbsp;
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;If the server side bases authorization decisions on predictable or
                                non-secret values sent from the client (such as the UDID or IMEI number in mobile
                                devices), then an attacker could guess or otherwise compromise such a value and
                                impersonate the user.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
                            <references>
                                <reference name="OWASP Developers Guide: Authorization" url="https://www.owasp.org/index.php/Guide_to_Authorization"/>
                                <reference name="WASC-02" url="http://projects.webappsec.org/w/page/13246940/Insufficient%20Authorization"/>
                            </references>
                            <controls>
                                <control ref="ACCESS-CONTROL-CENTRALIZED" mitigation="20"/>
                                <control ref="CWE-285" mitigation="80"/>
                                <control ref="FEAT-ACC-CTRL" mitigation="20"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-639">
                                    <controls>
                                        <control ref="ACCESS-CONTROL-CENTRALIZED" mitigation="20"/>
                                        <control ref="CWE-285" mitigation="80"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-284">
                                    <controls>
                                        <control ref="ACCESS-CONTROL-CENTRALIZED" mitigation="20"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-275">
                                    <controls>
                                        <control ref="FEAT-ACC-CTRL" mitigation="20"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-59" name="This attack targets predictable session ID in order to gain privileges" state="Expose" source="MANUAL" owner="" library="">
                            <desc>This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="look-up-secret-auth" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-330">
                                    <controls>
                                        <control ref="look-up-secret-auth" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="generic-service-dns-queries" name="Generic Service: DNS Queries" desc="" tags="" position="78" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-350" name="Reliance on Reverse DNS Resolution for a Security-Critical Action" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T13:10:51.240000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software performs reverse DNS resolution on an IP address
					to obtain the hostname and make a security decision, but it does not properly
					ensure that the IP address is truly associated with the
					hostname.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="identify-dns-domains" name="Identify the DNS domains periodically to update the information about them" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  The application shall have a protection from sub-domain takeovers if the application relies upon DNS entries or DNS sub-domains, such as expired domain names, out of date DNS pointers or CNAMEs, expired projects at public source code repos, or transient cloud APIs, serverless functions, or storage buckets (autogen-bucket-id.cloud.example.com) or similar. Protections can include ensuring that DNS names used by applications are regularly checked for expiry or change. 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Verify that the forward and reverse DNS lookups and identified and the names are equals are saved.&lt;/li&gt; 
  &lt;li&gt;Verify that the connection to the DNS was authenticated successfully by username/password or certificate and they are active.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T13:12:21.684000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="GENERAL" name="General" desc="" library="">
                    <threats>
                        <threat ref="hostile-subdomain-takeover " name="Attackers claim subdomains with the help of external services" state="Expose" source="MANUAL" owner="" library="">
                            <desc>&lt;div&gt;
  This attack vector utilizes DNS entries pointing to Service Providers where the pointed sub-domain is currently not in use. Depending on the DNS-entry configuration and which Service Provider it points to, some of these services will allow unverified users to claim these sub-domains as their own. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the not so rare case, the attacker can also "inherit" the Domain Owner's Wildcard SSL used inside the Service Provider. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Attack Scenario&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Your company starts using a new service, eg an external Support Ticketing-service.&lt;/li&gt; 
   &lt;li&gt;Your company points a sub-domain to the Support Ticketing-service, eg support.your-domain.com&lt;/li&gt; 
   &lt;li&gt;Your company stops using this service but does not remove the sub-domain redirection pointing to the ticketing system.&lt;/li&gt; 
   &lt;li&gt;Attacker signs up for the Service and claims the domain as theirs. No verification is done by the Service Provider, and the DNS-setup is already correctly setup.&lt;/li&gt; 
   &lt;li&gt;Attacker can now build a complete clone of the real site, add a login form, redirect the user, steal credentials (e.g. admin accounts), cookies and/or completely destroy business credibility for your company.&lt;/li&gt; 
  &lt;/ol&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references>
                                <reference name="Hostile Subdomain Takeover using Heroku/Github/Desk + more" url="https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/"/>
                            </references>
                            <controls>
                                <control ref="identify-dns-domains" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-350">
                                    <controls>
                                        <control ref="identify-dns-domains" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GENERIC-SERVICE:FILE-UPLOAD" name="Generic Service: File Upload" desc="A service that provides a file upload function" tags="" position="34" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-770" name="Allocation of Resources Without Limits or Throttling" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-04T13:19:07.758000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on how many resources can be allocated, in violation of the intended security policy for that actor.</desc>
                </weakness>
                <weakness ref="CWE-94" name="The application execute code retrieved from untrusted data sources" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T13:06:20.174000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The execution of untrusted code grants direct control over the application; allowing an
                        attacker to perform arbitrary operations, steal sensitive data, gain control over the system or
                        use the application to launch malicious attacks.&amp;nbsp;
                    </desc>
                </weakness>
                <weakness ref="UNTRUSTED-FILE-HANDLING" name="The system fails to validate file contents before processing it" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T12:50:39.193000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Files uploaded from untrusted sources could contain malicious data that subverts the loading
                        mechanism itself or grants unauthorized access to the system when executed.
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="WEB-EXEC-DATA" name="Do not execute files received from untrusted sources" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;&lt;/div&gt;
                        &lt;div&gt;
                        Untrusted file data sources could contain malicious software, data sources should not be
                        executed even if an anti-malware scanner has been run against the file.&amp;nbsp;&amp;nbsp;
                        &lt;/div&gt;This includes use of pre-processing that may result in execution (e.g. eval of
                        tainted content).
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.5.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.4.5" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the data entry points for the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the source of this data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify this data is not being executed or permanently stored at any point.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T13:06:44.055000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="WEB-FILE-DATA" name="Do not use untrusted client-side data in server-side file operations" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        The application may be required to base server-side file operations based on client-side
                        actions. This can expose the application to attack through remote or local file-inclusion, or
                        remote code execution attacks if unsafe data is used in file inclusion, class loader, or
                        reflection capabilities.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Tainted, untrusted, client-side data must not be used directly in server-side file
                        load operations.&lt;/li&gt;
                        &lt;li&gt;Where server-side operations are dependent on client-side input, this should be mapped
                        to pre-defined operations on the server-side rather than using tainted client-side input
                        directly.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify sources of data into the application. &lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Classify them into trusted and untrusted. &lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;if they are untrusted, make sure there is a validation and sanitization mechanism
                            before sending this data into another system (Database, Command, etc.).&lt;br /&gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T12:59:27.639000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="secure-file-storage" name="Ensure the application is implementing file storage protections for uploaded files" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Uploaded files represent a significant risk to applications. In this scenario one of the involved risks is related on how the application manage the file storage for the uploaded files. A cheap and easy way to perform a denial-of-service attack is to upload a very large file, in the hope that the server runs out of space. 
&lt;br /&gt;It is necessary to limit (per-user) the amount of resources that are accessible to unprivileged users and allow the system administrator to configure these limits. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;b&gt;Remediation: &lt;/b&gt; 
&lt;br /&gt;The application shall: 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;Not allow to accept large files that could fill up storage or cause a denial of service attack.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check compressed files to look for &amp;quot;zip bombs&amp;quot; - small input files that will decompress into huge files thus exhausting file storage limits.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Set a file size quota and maximum number of files per user is enforced to ensure that a single user cannot fill up the storage with too many files, or excessively large files.&lt;/li&gt; 
&lt;/ul&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Unrestricted File Upload" url="https://www.owasp.org/index.php/Unrestricted_File_Upload"/>
                    </references>
                    <standards>
                        <standard ref="12.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>In a preproduction environment: 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check if the application refuses to upload big files.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check if there exists a limit for the number of files a user can upload.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;If it's allowed to upload zip files, test if the zip bomb attack can be feasible.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Test Upload of Malicious Files (OTG-BUSLOGIC-009)" url="https://www.owasp.org/index.php/Test_Upload_of_Malicious_Files_(OTG-BUSLOGIC-009)"/>
                            <reference name="Test Upload of Unexpected File Types (OTG-BUSLOGIC-008)" url="https://www.owasp.org/index.php/Test_Upload_of_Unexpected_File_Types_(OTG-BUSLOGIC-008)"/>
                            <reference name="Zip bomb" url="https://github.com/AbhiAgarwal/notes/wiki/Zip-bomb"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-04T13:23:28.198000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="FILE-SCAN" name="Perform content scanning on untrusted files when uploaded" platform="" cost="2" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        The application should perform validation and sanitization on all tainted content from the
                        client-side, including uploaded files.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Content/malware scanning performed against the file (e.g. next generation anti-virus)
                        to detect suspicious, dangerous, or unexpected content.&lt;/li&gt;
                        &lt;li&gt;Content analysis should also be used to reject unexpected or dangerous file formats
                        that may harbor malicious code, for example encrypted word, pdf or other office documents or
                        archives, or other files with hidden or executable payloads.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.5.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Verify the component has the capability of scanning externally retrieved files
                            which are untrusted.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the component and verify this scanning is actually happening for all the
                            untrusted files which are received.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T12:54:43.303000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="FILE-DATA-CHECK" name="Validate the file format before processing" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Attackers may attempt to bypass controls on uploaded content by renaming, embedding, or
                        otherwise manipulating benign files with malicious content. As with client-side data, the
                        application should screen uploaded content before processing it.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;File contents and and file-system path data must to be checked for sanity.&lt;/li&gt;
                        &lt;li&gt;Consider directory traversal, local file inclusion, and OS injection attacks when
                        validating filenames.&lt;/li&gt;
                        &lt;li&gt;Verify MIME type is correct and appropriate, and matches content.&lt;/li&gt;
                        &lt;li&gt;Files with an structured format should be checked against the expected
                        format/definition (e.g. XML against a XSD or DTD).&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify structured data being processed by your component which is coming from
                            untrusted sources.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check there is a validation method for the format and the structure.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;Examples of this is to check JSON against a JSON schema, XML against a XSD or a
                            DTD, or checking that a received file which is supposed to be an image is actually an
                            image.&amp;nbsp;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T12:53:18.839000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="UPLOAD FILES" name="Upload Files" desc="" library="">
                    <threats>
                        <threat ref="FILE-MAL-UPLOAD" name="Attackers gain unauthorised access through malicious file upload" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Files that contain malicious content could cause the application to execute the
                                content and therefore grant unauthorized access to the service or the data it contains.
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="FILE-DATA-CHECK" mitigation="25"/>
                                <control ref="FILE-SCAN" mitigation="25"/>
                                <control ref="WEB-EXEC-DATA" mitigation="25"/>
                                <control ref="WEB-FILE-DATA" mitigation="25"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-94">
                                    <controls>
                                        <control ref="WEB-EXEC-DATA" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="UNTRUSTED-FILE-HANDLING">
                                    <controls>
                                        <control ref="FILE-DATA-CHECK" mitigation="25"/>
                                        <control ref="FILE-SCAN" mitigation="25"/>
                                        <control ref="WEB-FILE-DATA" mitigation="25"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-130" name="Denial of service through resource exhaustion" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request. For example, using an Integer Attack, the attacker could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="secure-file-storage" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-770">
                                    <controls>
                                        <control ref="secure-file-storage" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GENERIC-SERVICE:JSON" name="Generic Service: JSON processing" desc="" tags="" position="12" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="SRV-JSON-SIG" name="The application does not implement any integrity control on transmitted JSON data" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T22:53:35.709000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>If JSON data is not validated for authenticity and integrity then the application
                        functionality could be subverted which could lead to sensitive data leaks or bypassing of
                        critical business logic.
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="SRV-JSON-WEB-SIGN" name="Implement JSON Web Signing for sensitive or authentication-decision data" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Data received from the client-side may have been modified at source or in transit. JSON Web
                        Signing functionality is available to prevent (or rather detect) such modification.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Sensitive data, in particular any relied on for making access control or other
                        security decisions, should be signed. This provides assurance that:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The data comes from the trusted source and not from an untrusted actor.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The data received is that produced by the trusted party and has not been modified in
                        transit.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-17" supportedStandardRef="NIST 800-53"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the functions of the service which handles JSON data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If the JSON data is used to make authentication decisions or part of a sensitive
                            business logic flow, then check JSON Web Signing through JSON Web Tokens is used.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="JSON Web Signing - RFC" url="https://tools.ietf.org/html/rfc7515"/>
                            <reference name="JSON Web Tokens - RFC" url="https://tools.ietf.org/html/rfc7519"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T22:54:43.042000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="READ DATA" name="Read data" desc="" library="">
                    <threats>
                        <threat ref="SRV-JSON-SIG" name="Attackers gain access to user data by tampering data in transit" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If the integrity of the data in transit is not protected, an attacker could modify the
                                data in transit to make the recipient behave unexpectedly and gain access to user data.&amp;nbsp;
                            </desc>
                            <riskRating confidentiality="1" integrity="100" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="SRV-JSON-WEB-SIGN" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="SRV-JSON-SIG">
                                    <controls>
                                        <control ref="SRV-JSON-WEB-SIGN" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GENERIC-SERVICE:SENS-DATA:TRANSMITTED" name="Generic Service: Read sensitive data" desc="Service where sensitive data is read by clients" tags="" position="13" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="EU-GDPR-LOGICAL-DELETE-DATA-INACTIVITY" name="Data is retained for longer than is necessary" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-22T10:15:20.415000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Storing personal data too long might lead to negative consequences for the data subject (e.g. a large amount of data might lead to invasive profiling, identity theft, ...)
          &lt;br/&gt;&lt;br/&gt;Data subject = person of whom data is processed.
          </desc>
                </weakness>
                <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-07T12:39:00.006000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>An information exposure is the unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information.</desc>
                </weakness>
                <weakness ref="CWE-524" name="Information Exposure Through Caching" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-524: Information Exposure Through Caching" url="https://cwe.mitre.org/data/definitions/524.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-07T08:46:24.428000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The application uses a cache to maintain a pool of objects, threads, connections, pages, or
                        passwords to minimize the time it takes to access them or the resources to which they connect.
                        If implemented improperly, these caches can allow access to unauthorized information or cause a
                        denial of service vulnerability.
                    </desc>
                </weakness>
                <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:44">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</desc>
                </weakness>
                <weakness ref="EU-GDPR-NO-DELETION-FUNCTIONALITY" name="Not data deletion functionality" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-07T08:16:10.523000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Personal data is not automatically deleted when retention periods have expired, which means data must be manually deleted by an administrator who can easily forget this task.
          &lt;br /&gt;&lt;br /&gt;
          Personal data that was deleted becomes operational again after a restore because the data was not deleted from the back-ups nor was there a process in place to reidentify and delete personal data that was previously deleted.
          </desc>
                </weakness>
                <weakness ref="CWE-226" name="Sensitive information is not cleared from memory" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-226: Sensitive information is not cleared from memory" url="https://cwe.mitre.org/data/definitions/226.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-07T07:48:28.789000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not fully clear previously used information in a data structure, file, or
                        other resource, before making that resource available to a party in another control sphere.

                        This typically results from new data that is not as long as the old data, which leaves portions
                        of the old data still available. Equivalent errors can occur in other situations where the
                        length of data is variable but the associated data structure is not. If memory is not cleared
                        after use, it may allow unintended actors to read the data when the memory is reallocated.
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-524" name="Clear caches of sensitive data" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Applications storing or caching data locally are at risk of attack and compromise of that
                        data. Local temporary storage, thumbnail images, and configuration files often contain excerpts
                        of sensitive information that may be left on the device during or after the application is used.
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure all temporary files, caches, and storage are purged after use and when the
                        application is closed.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Do not allow the application to cache sensitive information outside of OS provided
                        secure stores.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Use OS controls to restrict thumbnails of the application where any sensitive
                        information is displayed&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP MASVS - Android - Testing Whether the Keyboard Cache Is Disabled for Text Input Fields" url="https://sushi2k.gitbooks.io/the-owasp-mobile-security-testing-guide/content/0x05d-Testing-Data-Storage.html#determining-whether-the-keyboard-cache-is-disabled-for-text-input-fields"/>
                        <reference name="OWASP MASVS - iOS - Testing Whether the Keyboard Cache Is Disabled for Text Input Fields" url="https://sushi2k.gitbooks.io/the-owasp-mobile-security-testing-guide/content/0x06d-Testing-Data-Storage.html#testing-for-sensitive-data-in-the-keyboard-cache"/>
                    </references>
                    <standards>
                        <standard ref="8.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="8.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1"/>
                        <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
                        <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Check the application for the use of caches.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify they are periodically emptied.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-08-02T10:21:32.718000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="identify-sensitive-data" name="Identify the processed and stored sensitive data" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Create a mechanism or procedures to identify all created and processed data by the application and classify data to determine which level of sensitivity each piece of data belongs to. Each data category can then be mapped to protection rules necessary for each level of sensitivity. Therefore, we shall create a policy to explain how sensitive data shall be managed and processed and manage these rules. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For example, public marketing information that is not sensitive may be categorized as public data which is ok to place on the public website. Credit card numbers may be classified as private user data which may need to be encrypted while stored or in transit. 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Proactive controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
                    </references>
                    <standards>
                        <standard ref="8.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="8.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Verify that all sensitive data created and processed by the application has been identified, and ensure that a policy is in place on how to deal with sensitive data.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-07T12:39:49.119000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="EU-GDPR-IMPLEMENT-FORGET" name="Implement forget user functionality" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;p&gt;Make sure that your deletion functionality also facilitates the manual deletion of one data subject (person of whom personal data is processed) at any given point in time. All data of the data subject should be deleted from the operational databases as well as back-ups.&lt;/p&gt; 
&lt;p&gt;&lt;font size="4"&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;/font&gt;&lt;/p&gt; 
&lt;p&gt;You should develop a script to ensure the re-deletion of data subjects (persons of whom personal data is processed) who exercised their right to be forgotten and run it after each database restore. The data subjects should be deleted from the script whenever the retention period of the data has expired.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="EU GDPR - EU Data Protection" url="http://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
                    </references>
                    <standards>
                        <standard ref="Art.17" supportedStandardRef="EU-GDPR"/>
                        <standard ref="Art.5" supportedStandardRef="EU-GDPR"/>
                        <standard ref="2.4.12.7" supportedStandardRef="iotsf-class-0"/>
                        <standard ref="2.4.12.7" supportedStandardRef="iotsf-class-1"/>
                        <standard ref="2.4.12.7" supportedStandardRef="iotsf-class-2"/>
                        <standard ref="8.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="8.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>
                &lt;ol&gt;
                &lt;li&gt;Verify the capability to delete a user's personal data from within operational storage.&lt;/li&gt;
                &lt;li&gt;Verify this user data will not be reactivated during restoration of data backup.&lt;/li&gt;
                &lt;/ol&gt;
            </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-01-18T14:12:39.055000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-226" name="Overwrite data in memory before release" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Memory chunks released by an application are not actively overwritten, they are simply de-referenced with the data left until the memory is reallocated and used by another process. As such, sensitive data that is stored in memory may be exposed to an attacker with the ability to inspect that memory; for example through use of an uninitialized variable or other process.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Overwrite memory with zeros or random data before release.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Pay particular attention to sensitive data, such as passwords or other credentials, or sensitive personal information. 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP MASVS - Android - Testing for Sensitive Data in Memory" url="https://sushi2k.gitbooks.io/the-owasp-mobile-security-testing-guide/content/0x05d-Testing-Data-Storage.html#checking-memory-for-sensitive-data"/>
                        <reference name="OWASP MASVS - iOS - Testing for Sensitive Data in Memory" url="https://sushi2k.gitbooks.io/the-owasp-mobile-security-testing-guide/content/0x06d-Testing-Data-Storage.html#testing-for-sensitive-data-in-memory"/>
                    </references>
                    <standards>
                        <standard ref="8.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.10" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="2.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the parts of the code that handles authentication and very sensitive data
                            (i.e. credit card data).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify that the buffers holding that data are overwritten with zeros and freed as
                            soon as they are not needed anymore.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-08-02T10:21:32.718000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="EU-GDPR-PERMANTLY-DELETE-UNCESSESSARY-DATA" name="Permanently delete unnecessary data" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Ensure that personal data is automatically deleted, within operational and back-up environments, whenever the defined retention periods have expired. This requires automatic identification of latest activities within the database (timestamping logging) and a data deletion functionality.</desc>
                    <implementations/>
                    <references>
                        <reference name="EU GDPR - EU Data Protection" url="http://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
                    </references>
                    <standards>
                        <standard ref="Art.5" supportedStandardRef="EU-GDPR"/>
                        <standard ref="8.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>
                &lt;ol&gt;
                &lt;li&gt;Verify personal data timestamp logging is in place indicating the time period in which the data was obtained from the user.&lt;/li&gt;
                &lt;li&gt;Verify completion of automatic personal data deletion after mandated retention time-period has elapsed.&lt;/li&gt;
                &lt;/ol&gt;
            </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-01-18T13:03:23.281000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-306-SERVICE" name="Require authentication before presenting restricted data" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="">
                    <desc>&lt;div&gt;
              The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For less sensitive but still restricted data, simple verification of the location of the user may suffice
              (e.g. IP restrictions).
              &lt;/div&gt;
              &lt;div&gt;
              &lt;ul&gt;
              &lt;li&gt;For non-sensitive but non-public data, access could be restricted by IP address, for example limiting access to internal networks, workstations, or gateways&lt;/li&gt;
              &lt;li&gt;For more sensitive data, TLS client-side certificates may be appropriate&lt;/li&gt;
              &lt;li&gt;Where secret or other sensitive data is handled, a full authentication process to identify and validate users with single or multi-factor authentication may be required&lt;/li&gt;
              &lt;/ul&gt;
              &lt;/div&gt;
          </desc>
                    <implementations/>
                    <references>
                        <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                        <reference name="EU GDPR - EU Data Protection" url="http://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
                    </references>
                    <standards>
                        <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
                        <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-21" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-22" supportedStandardRef="NIST 800-53"/>
                        <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
                        <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
                        <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                &lt;li&gt;Identify which parts of the service present sensitive data.&amp;nbsp;&lt;/li&gt;
                &lt;li&gt;Try to obtain access to this information without any type of authentication, for example, attempt to navigate directly to URLs that present sensitive data.&lt;/li&gt;
                &lt;/ol&gt;
            </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:14.585000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="ACCESS SENSITIVE DATA" name="Access sensitive data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-116" name="An adversary actively probes the target in a manner that is designed to solicit information relevant to system security" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An adversary actively probes the target in a manner that is designed to solicit information relevant to system security. This is achieved by exploring the target via ordinary interactions for the purpose of gathering intelligence about the target, or by sending data that is syntactically invalid or non-standard in an attempt to produce a response that contains the desired data. As a result of the excavation activities, the adversary is able to obtain information from the target that aids the attacker in making inferences about its security, configuration, or potential vulnerabilities. Exemplar exchanges with the target may trigger unhandled exceptions or verbose error messages that reveal information like stack traces, configuration information, path information, or database design. This type of attack also includes the manipulation of query strings in a URI to produce invalid SQL queries, or by trying alternative path values in the hope that the server will return useful information. 
&lt;br /&gt;Excavated data is often moved from the target system to some other adversary controlled system. Data found on a target system might require extensive resources to be fully analyzed. Using these resources on the target system might enable a defender to detect the adversary. Additionally, proper analysis tools required might not be available on the target system. 
&lt;br /&gt;This attack differs from Data Interception and other data collection attacks in that the attacker actively queries the target rather than simply watching for the target to reveal information. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="identify-sensitive-data" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-200">
                                    <controls>
                                        <control ref="identify-sensitive-data" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-204" name="An attacker examines a target application's cache for sensitive information to get sensitive data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker examines a target application's cache for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="CWE-226" mitigation="50"/>
                                <control ref="CWE-524" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-524">
                                    <controls>
                                        <control ref="CWE-524" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-226">
                                    <controls>
                                        <control ref="CWE-226" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-115" name="Attackers obtain unauthorised access by connecting directly to the service" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If the component does not require authentication then an attacker can simply connect
                                directly to the service to obtain the data.&amp;nbsp;
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;This risk may also apply to data that is not necessarily sensitive, but is
                                non-public. &amp;nbsp;For example, obtaining timely market information which is not
                                freely available through any other service.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CWE-306-SERVICE" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-306">
                                    <controls>
                                        <control ref="CWE-306-SERVICE" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Unauthorized party might access/breach the personal data of the
                                data subject.
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="EU-GDPR-PERMANTLY-DELETE-UNCESSESSARY-DATA" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="EU-GDPR-LOGICAL-DELETE-DATA-INACTIVITY">
                                    <controls>
                                        <control ref="EU-GDPR-PERMANTLY-DELETE-UNCESSESSARY-DATA" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="EU-GDPR-SUBJECT-RIGTHS" name="Subjects cannot exercise their rights over their personal data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Data subject cannot exercise their rights which makes it possible for data subjects to file a complaint at local Data Protection Authority which might lead to administrative fines.
              &lt;br /&gt;&lt;br /&gt;
              Data subject = person of whom personal data is processed 
              </desc>
                            <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="EU-GDPR-IMPLEMENT-FORGET" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="EU-GDPR-NO-DELETION-FUNCTIONALITY">
                                    <controls>
                                        <control ref="EU-GDPR-IMPLEMENT-FORGET" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GENERIC-SERVICE:SESSION" name="Generic Service: Session ID" desc="A service that uses a session ID to maintain session state" tags="" position="14" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-384" name="Application allows user to use a session ID not produced by the application" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-06T15:58:37.946000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>&lt;div&gt;
                    Authenticating a user, or otherwise establishing a new user session, without invalidating any session identifier gives an attacker the opportunity to steal authenticated sessions. Such a scenario is commonly observed when: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.&lt;/li&gt; 
                    &lt;li&gt;An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session.&lt;/li&gt; 
                    &lt;li&gt;The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session.&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt;</desc>
                </weakness>
                <weakness ref="CWE-331" name="Insufficient Entropy" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-09T12:49:04.760000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software uses an algorithm or scheme that produces
                        insufficient entropy, leaving patterns or clusters of values that are more
                        likely to occur than others.
                    </desc>
                </weakness>
                <weakness ref="CWE-613-LOGOUT" name="Insufficient Session Logout" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-613: Insufficient Session Expiration" url="https://cwe.mitre.org/data/definitions/613.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-11T12:39:48.269000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Insufficient Session Expiration is when a web site permits an attacker to reuse old session
                        credentials or session IDs for authorization.
                        &lt;br /&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-345" name="Insufficient Verification of Data Authenticity" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T15:53:45.278000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not sufficiently verify the origin or					authenticity of data, in a way that causes it to accept invalid					data.</desc>
                </weakness>
                <weakness ref="CSD-SESS-REAUTH" name="The application does not re-authenticate on critical functions" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-24T12:46:48.272000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The application does not require the user to re-authenticate for specific critical functions,
                        like password change or changes to sensitive security settings.
                    </desc>
                </weakness>
                <weakness ref="CWE-330" name="Use of Insufficiently Random Values" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-20T08:20:07.371000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software may use insufficiently random numbers or values in a security context that depends on unpredictable numbers.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="secure-session-generation-and-expiration" name="Implement a secure Session Generation and Expiration" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt; 
 &lt;div&gt;
   The session ID exchange mechanism based on cookies provides multiple security features in the form Session Generation and Expiration User state is tracked in a session. This session is typically stored on the server for traditional web based session management. A session identifier is then given to the user so the user can identify which server-side session contains the correct user data. The client only needs to maintain this session identifier, which also keeps sensitive server-side session data off of the client. 
 &lt;/div&gt; 
 &lt;div&gt;
   Here are a few controls to consider when building or implementing session management solutions: 
 &lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure that the session id is long, unique and random. The session ID length must be at least 128 bits (16 bytes)&lt;/li&gt; 
  &lt;li&gt;The session ID must be unpredictable (random enough) to prevent guessing attacks, where an attacker is able to guess or predict the ID of a valid session through statistical analysis techniques. For this purpose, a good PRNG (Pseudo Random Number Generator) must be used. The session ID value must provide at least 64 bits of entropy (if a good PRNG is used, this value is estimated to be half the length of the session ID).&lt;/li&gt; 
  &lt;li&gt;The application shall generate a new session or at least rotate the session id during authentication and re-authentication.&lt;/li&gt; 
  &lt;li&gt;The application shall not treat OAuth and refresh tokens as their own session identifiers. Moreover, it shall allow users to terminate trust relationships with linked applications.&lt;/li&gt; 
  &lt;li&gt;The CSPs (Credential Service Provider) shall re-authenticate the subscriber if its has not been authenticated since a certain inactivity period (this period is set by relying parties to CSPs). CSPs shall inform to RP (Relying Parties) the last authentication time, to know if the shall be re-authenticated.&lt;/li&gt; 
  &lt;li&gt;When a user chooses to log out (or otherwise has their session terminated), the user session must be terminated at the server-side, not solely at the client-side (for example by deleting or reissuing a session ID token/cookie).&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Revoke user sessions at the server-side.&lt;/li&gt; 
   &lt;li&gt;Redirect users to the login page, or provide a login prompt to them in context.&lt;/li&gt; 
   &lt;li&gt;Where possible, ensure the session is not reused by the application server.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;The application shall implement an idle timeout after a period of inactivity and an absolute maximum lifetime for each session, after which users must re-authenticate. If the application has implemented a functionality to be always logged in, the application shall force to users to be re-authenticated for some sensitive actions.&lt;/li&gt; 
  &lt;li&gt;The length of the timeouts should be inversely proportional with the value of the data protected.&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;30 days&lt;/li&gt; 
   &lt;li&gt;12 hours or 30 minutes of inactivity, 2FA optional&lt;/li&gt; 
   &lt;li&gt;12 hours or 15 minutes of inactivity, with 2FA&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP CheatSheet Series: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
                        <reference name="OWASP Proactive Controls [C6]" url="https://www.owasp.org/index.php/OWASP_Proactive_ControlsOWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="7.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="7.1.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="7.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.6.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ul&gt; 
 &lt;li&gt;Check that the sessions is renewed following the steps below:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Log in to the application.&lt;/li&gt; 
  &lt;li&gt;Open another browser and go to the login page.&lt;/li&gt; 
  &lt;li&gt;Log in to the application for the second time.&lt;/li&gt; 
  &lt;li&gt;Check that the old session and session id are removed.&lt;/li&gt; 
  &lt;li&gt;Check that a new session is created with new session id.&lt;/li&gt; 
  &lt;li&gt;Check that the old and new session ids are different.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Verify that sessions tokens are generated from a source with sufficient entropy and they are not predictable.&lt;/li&gt; 
 &lt;li&gt;Check that the refresh tokens and OAuth sessions with linked applications are not terminated by users.&lt;/li&gt; 
 &lt;li&gt;Check that the CSPs shall force to the RP to re-authenticate after a certain inactivity period of time.&lt;/li&gt; 
 &lt;li&gt;Check that the logout and expiration invalidate the session token, following the steps below:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Open a browser.&lt;/li&gt; 
  &lt;li&gt;Authenticate as a user A.&lt;/li&gt; 
  &lt;li&gt;Get the Session ID and note it.&lt;/li&gt; 
  &lt;li&gt;Logout of the service.&lt;/li&gt; 
  &lt;li&gt;Set up the noted Session ID.&lt;/li&gt; 
  &lt;li&gt;Try to access an authenticated section of the service and you should not be able to do it as user A.&lt;/li&gt; 
  &lt;li&gt;To edit the cookies you can either use a proxy (i.e. OWASP ZAP, Burp, Fiddler, etc.) or a browser extension which should allow you to tamper the cookies (i.e. Tamper Data, Cookie Manager, etc.).&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Check that the session expires after a certain inactivity period following the steps below:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Verify the expected inactive timeout.&lt;/li&gt; 
  &lt;li&gt;Check 'normal' use through a browser:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Go to the authentication feature of the component.&lt;/li&gt; 
   &lt;li&gt;Authenticate as a user.&lt;/li&gt; 
   &lt;li&gt;Leave the session open for a given time (check the expiration time that has been agreed to be implemented).&lt;/li&gt; 
   &lt;li&gt;Revisit an authenticated page and determine if the session has expired (e.g. the session is no longer authenticated).&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;Check the control is enforced at the server side and not using code in the browser:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and determine which cookies or other tokens are used to maintain session state. Alternatively, capture an authenticated application request for replay.&lt;/li&gt; 
   &lt;li&gt;Store and replay the request after the timeout period to see if the application response with authenticated data.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;Review application operation and determine if any behavior artificially holds the session open, for example, heartbeat requests or calls to update data feeds sent from the client to the server are sometimes mistakenly interpreted as user activity, holding the session open.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T14:47:24.688000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="follow-jwt-standard-generation-token" name="Implement token generation for stateless server following the recommendation of the JWT standard" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;  SON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. A JWT token is created during authentication and is verified by the server (or servers) before any processing. &lt;/div&gt; &lt;div&gt;  However, JWT's are often not saved by the server after initial creation. JWT's are typically created and then handed to a client without being saved by the server in any way. The integrity of the token is maintained through the use of digital signatures so a server can later verify that the JWT is still valid and not been tampered with since its creation. &lt;/div&gt; &lt;div&gt;  This approach is both stateless and portable in the way that client and server technologies can be different yet still interact. &lt;/div&gt; &lt;div&gt;  We shall ensure and implement the requirements to protect the stateless token for digital signatures, encryption and other countermeasures following the requirements of JWT standard. &lt;/div&gt; &lt;div&gt;  &lt;br /&gt; &lt;/div&gt; &lt;div&gt;  &lt;b&gt;Remediation:&lt;/b&gt; &lt;/div&gt; &lt;div&gt;  &lt;div style=""&gt;   To create a JWT, the following steps are performed. The order of the steps is not significant in cases where there are no dependencies between the inputs and outputs of the steps.&amp;nbsp;  &lt;/div&gt;  &lt;div&gt;   &lt;ol&gt;    &lt;li&gt;Create a JWT Claims Set containing the desired claims.&amp;nbsp; Note that whitespace is explicitly allowed in the representation and no canonicalization need be performed before encoding.&lt;/li&gt;    &lt;li&gt;Let the Message be the octets of the UTF-8 representation of the JWT Claims Set.&lt;/li&gt;    &lt;li&gt;Create a JOSE Header containing the desired set of Header Parameters. The JWT MUST conform to either the [JWS] or [JWE] specification. Note that whitespace is explicitly allowed in the representation and no canonicalization need be performed before encoding.&lt;/li&gt;    &lt;li&gt;Depending upon whether the JWT is a JWS or JWE, there are two cases:&lt;/li&gt;    &lt;ul&gt;     &lt;li&gt;If the JWT is a JWS, create a JWS using the Message as the JWS Payload; all steps specified in [JWS] for creating a JWS MUST be followed.&lt;/li&gt;     &lt;li&gt;Else, if the JWT is a JWE, create a JWE using the Message as the plaintext for the JWE; all steps specified in [JWE] for creating a JWE MUST be followed.&lt;/li&gt;    &lt;/ul&gt;    &lt;li&gt;If a nested signing or encryption operation will be performed, let the Message be the JWS or JWE, and return to Step 3, using a &amp;quot;cty&amp;quot; (content type) value of &amp;quot;JWT&amp;quot; in the new JOSE Header created in that step.&lt;/li&gt;    &lt;li&gt;Otherwise, let the resulting JWT be the JWS or JWE.&lt;/li&gt;   &lt;/ol&gt;  &lt;/div&gt; &lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Proactive Controls [C6]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                        <reference name="RFC 7519" url="https://tools.ietf.org/html/rfc7519"/>
                    </references>
                    <standards>
                        <standard ref="3.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Verify that stateless token use digital signatures, encryption and other countermeasures to be protected against tampering, enveloping, relay, null cipher and key substitution attacks. &lt;div&gt;  &lt;div&gt;   When validating a JWT, the following steps are performed. The order of the steps is not significant in cases where there are no dependencies between the inputs and outputs of the steps.&amp;nbsp; If any of the listed steps fail, then the JWT MUST be rejected -- that is, treated by the application as an invalid input.  &lt;/div&gt;  &lt;div&gt;   &lt;ol&gt;    &lt;li&gt;Verify that the JWT contains at least one period ('.') character.&lt;/li&gt;    &lt;li&gt;Let the Encoded JOSE Header be the portion of the JWT before the first period ('.') character.&lt;/li&gt;    &lt;li&gt;Base64url decode the Encoded JOSE Header following the restriction that no line breaks, whitespace, or other additional characters have been used.&lt;/li&gt;    &lt;li&gt;Verify that the resulting octet sequence is a UTF-8-encoded representation of a completely valid JSON object conforming to RFC 7159 [RFC7159]; let the JOSE Header be this JSON object.&lt;/li&gt;    &lt;li&gt;Verify that the resulting JOSE Header includes only parameters and values whose syntax and semantics are both understood and supported or that are specified as being ignored when not understood.&amp;nbsp;&lt;/li&gt;    &lt;li&gt;Determine whether the JWT is a JWS or a JWE using any of the methods described in Section 9 of [JWE].&lt;/li&gt;    &lt;li&gt;Depending upon whether the JWT is a JWS or JWE, there are two cases:&lt;/li&gt;    &lt;ul&gt;     &lt;li&gt;If the JWT is a JWS, follow the steps specified in [JWS] for validating a JWS.&amp;nbsp; Let the Message be the result of base64url decoding the JWS Payload.&lt;/li&gt;     &lt;li&gt;Else, if the JWT is a JWE, follow the steps specified in [JWE] for validating a JWE.&amp;nbsp; Let the Message be the resulting plaintext.&lt;/li&gt;    &lt;/ul&gt;    &lt;li&gt;If the JOSE Header contains a &amp;quot;cty&amp;quot; (content type) value of &amp;quot;JWT&amp;quot;, then the Message is a JWT that was the subject of nested signing or encryption operations.&amp;nbsp; In this case, return to Step 1, using the Message as the JWT.&lt;/li&gt;    &lt;li&gt;Otherwise, base64url decode the Message following the restriction that no line breaks, whitespace, or other additional characters have been used.&lt;/li&gt;    &lt;li&gt;Verify that the resulting octet sequence is a UTF-8-encoded representation of a completely valid JSON object conforming to RFC 7159 [RFC7159]; let the JWT Claims Set be this JSON object.&lt;/li&gt;   &lt;/ol&gt;Finally, note that it is an application decision which algorithms may be used in a given context.&amp;nbsp; Even if a JWT can be successfully validated, unless the algorithms used in the JWT are acceptable to the application, it SHOULD reject the JWT.  &lt;/div&gt; &lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T15:54:32.995000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CSD-SESS-REAUTH" name="Require additional authentication for sensitive operations / high value transactions" platform="" cost="2" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Having gained access to an account, for example through session hijack or cross-site scripting,
                        an attack can compromise data and functionality accessible to the victim. This may include
                        elevated privilege or sensitive data and functionality, such as changing passwords, creating
                        accounts, or transferring funds.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        These functions and data should be further protected from attack using a risk-based
                        authentication model requiring re-authentication, multi-factor authentication, or use of a token
                        to sign transactions or operations.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Implement re-authentication on key functions (such as requiring the old password
                        before setting a new one).&lt;/li&gt;
                        &lt;li&gt;Use secondary authentication such as a transaction PIN to allow financial transfers.&lt;/li&gt;
                        &lt;li&gt;Critical administrative functionality should require multi-factor authentication (such
                        as a hard or soft token).&lt;/li&gt;
                        &lt;li&gt;Consider use of signing technologies or tokens that enable the server-side to verify
                        the authenticity of a request and mitigate Man in the Middle (MiTM) or Man in the Browser (MiTB)
                        attacks.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify critical functionalities of the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the risk appetite for those functionalities.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Validate that re-authentication is required for those functions if deemed
                            necessary.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-24T12:47:31.761000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-330" name="Use a cryptographically secure pseudo-random number generator" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Use a well-vetted algorithm that is currently considered to be strong and secure by experts in
                        the field and ensure well-tested implementation with adequate length seeds. In general, if a
                        pseudo-random number generator is not advertised as being cryptographically secure, then it is
                        probably a statistical PRNG and should not be used in a security-sensitive context.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Pseudo-random number generators can produce predictable numbers if the generator is known and
                        the seed can be guessed. A 256-bit seed is a good starting point for producing a &amp;quot;random
                        enough&amp;quot; number.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Ensure that all random numbers, especially those used for cryptographic parameters (keys, IV's,
                        MAC tags), random file names, random GUIDs, and random strings are generated in a
                        cryptographically strong fashion.
                        &lt;br /&gt;
                        &lt;br /&gt;Ensure that random algorithms are seeded with sufficient entropy.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use a secure pseudo-random number generator ensuring it leverages an appropriate length seed.
                        The recommendation by FIPS 140-2 is 256-bit seed.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;Tools like NIST RNG Test tool (as used in PCI PTS Derived Test Requirements) can be
                        used to comprehensively assess the quality of a Random Number Generator by reading e.g. 128MB of
                        data from the RNG source and then assessing its randomness properties with the tool.
                        &lt;br /&gt;
                        &lt;br /&gt;The following libraries are considered weak random numbers generators and should not
                        be used.
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;C library: random(), rand() instead use getrandom(2) instead&lt;/li&gt;
                        &lt;li&gt;Java library: java.util.Random() instead use java.security.SecureRandom instead&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;br /&gt;For secure random number generation, refer to NIST SP 800-90A. CTR-DRBG, HASH-DRBG,
                        HMAC-DRBG are recommended. Refer to NIST SP800-22 A Statistical Test Suite for Random and
                        Pseudorandom Number Generators for Cryptographic Applications, and the testing toolkit.
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="NIST Security Policies for Random and Pseudorandom Number Generators for Cryptographic Applications" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-22r1a.pdf"/>
                    </references>
                    <standards>
                        <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="6.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that an adequately strong algorithm is used to generate random values, and that
                            those random values are of a minimum 256-bit seed.
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-20T08:09:34.379000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="pseudo-random-number-generator" name="Use a cryptographically secure pseudo-random number generator" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;span&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Use a well-vetted algorithm that is currently considered to be strong and secure by experts in the field and ensure well-tested implementation with adequate length seeds. In general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in a security-sensitive context.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a &amp;quot;random enough&amp;quot; number.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;/font&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Ensure that all random numbers, especially those used for cryptographic parameters (keys, IV's, MAC tags), random file names, random GUIDs, and random strings are generated in a cryptographically strong fashion.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Ensure that random algorithms are seeded with sufficient entropy&lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;, containing at least 112 bits of entropy (typically a six digital random number is sufficient)&lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;.&amp;nbsp; If less than 112 bits of entropy, salted with a unique and random 32-bit salt and hashed with an approved one-way hash.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Use a secure pseudo-random number generator ensuring it leverages an appropriate length seed. The recommendation by FIPS 140-2 is 256-bit seed.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Ensure that the challenge nonce was generated with at least 64 bits longer and it shall be unique &lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;over the lifetime of the cryptographic device.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Tools like NIST RNG Test tool (as used in PCI PTS Derived Test Requirements) can be used to comprehensively assess the quality of a Random Number Generator by reading e.g. 128MB of data from the RNG source and then assessing its randomness properties with the tool.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;The following libraries are considered weak random numbers generators and should not be used.&amp;nbsp;&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;C library: random(), rand() instead use getrandom(2) instead&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Java library: java.util.Random() instead use java.security.SecureRandom instead&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
 &lt;/ul&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;For secure random number generation, refer to NIST SP 800-90A. CTR-DRBG, HASH-DRBG, HMAC-DRBG are recommended. Refer to NIST SP800-22 A Statistical Test Suite for Random and Pseudorandom Number Generators for Cryptographic Applications, and the testing toolkit.&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="NIST Security Policies for Random and Pseudorandom Number Generators for Cryptographic Applications" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-22r1a.pdf"/>
                    </references>
                    <standards>
                        <standard ref="5.1.3.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.7.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.7.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.8.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.9.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.7.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.8.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.9.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;span&gt;&lt;span style="font-size: 11pt; font-family: Arial; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check that an adequately strong algorithm is used to generate random values, and that those random values are of a minimum 256-bit seed.&lt;/span&gt;&lt;/span&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T15:30:26.322000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-61" name="An attacker induces a client to establish a session with the target software using a session identifier provided by the attacker" state="Expose" source="MANUAL" owner="" library="">
                            <desc>The attacker induces a client to establish a session with the target software using a
                                session identifier provided by the attacker. Once the user successfully authenticates to
                                the target software, the attacker uses the (now privileged) session identifier in their
                                own transactions. This attack leverages the fact that the target software either relies
                                on client-generated session identifiers or maintains the same session identifiers after
                                privilege elevation.
                                &lt;br /&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="secure-session-generation-and-expiration" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-384">
                                    <controls>
                                        <control ref="secure-session-generation-and-expiration" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CSD-SESSION-ID" name="Attackers gain access to critical functions by compromising the session ID" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If a session ID is leaked through a flaw in the application, then attackers could
                                perform sensitive operations or hijack the session of the affected user. This type of
                                attack does not usually result in mass-compromise of ID's.&amp;nbsp;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
                            <references/>
                            <controls>
                                <control ref="CSD-SESS-REAUTH" mitigation="70"/>
                                <control ref="secure-session-generation-and-expiration" mitigation="30"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-613-LOGOUT">
                                    <controls>
                                        <control ref="secure-session-generation-and-expiration" mitigation="30"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CSD-SESS-REAUTH">
                                    <controls>
                                        <control ref="CSD-SESS-REAUTH" mitigation="70"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-59" name="The session ID, and hence the users' session is compromised through brute force attack" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attackers could use brute force techniques to attempt to guess valid session
                                IDs.
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="CWE-330" mitigation="15"/>
                                <control ref="follow-jwt-standard-generation-token" mitigation="25"/>
                                <control ref="pseudo-random-number-generator" mitigation="30"/>
                                <control ref="secure-session-generation-and-expiration" mitigation="30"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-384">
                                    <controls>
                                        <control ref="secure-session-generation-and-expiration" mitigation="30"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-331">
                                    <controls>
                                        <control ref="secure-session-generation-and-expiration" mitigation="30"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-345">
                                    <controls>
                                        <control ref="follow-jwt-standard-generation-token" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-330">
                                    <controls>
                                        <control ref="CWE-330" mitigation="15"/>
                                        <control ref="pseudo-random-number-generator" mitigation="30"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GENERIC-SERVICE:AUTHN-SF" name="Generic Service: Single factor Authentication" desc="The server side login functions for single factor authentication for any type of service" tags="" position="15" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-178-AUTH" name="Application does not distinguish between upper and lower case passwords" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-521: Weak Password Requirements" url="https://cwe.mitre.org/data/definitions/521.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:15.112000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The complexity of guessing a password is directly related to the character set being used. To
                        not differentiate between upper and lower case passwords dramatically reduces this complexity.
                    </desc>
                </weakness>
                <weakness ref="NO-PASSWORD-CHANGE" name="Lack of password change facility" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:14.956000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When the application does not offer a password change facility, a compromise of the current
                        user password will lead to an attacker having persistent access to the account.&amp;nbsp;
                    </desc>
                </weakness>
                <weakness ref="CWE-521" name="Lack of password quality checks" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-28T15:48:45.507000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product does not enforce the use of strong passwords by users, which makes it easier for
                        attackers to compromise user accounts. Lack of password complexity significantly reduces the
                        search space when trying to guess user's passwords, making brute-force attacks easier.
                    </desc>
                </weakness>
                <weakness ref="CWE-263" name="Password Aging with Long Expiration" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T12:28:06.999000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Allowing password aging to occur unchecked can result in the
					possibility of diminished password integrity.</desc>
                </weakness>
                <weakness ref="CWE-916" name="Password hashes can be reverted over a reasonable period of time" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-916" url="https://cwe.mitre.org/data/definitions/916.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-24T11:43:02.505000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software generates a hash for a password, but it uses a scheme that does not provide a
                        sufficient level of computational effort that would make password cracking attacks infeasible or
                        expensive.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Many password storage mechanisms compute a hash and store the hash, instead of storing the
                        original password in plaintext. In this design, authentication involves accepting an incoming
                        password, computing its hash, and comparing it to the stored hash. Many hash algorithms are
                        designed to execute quickly with minimal overhead, even cryptographic hashes. However, this
                        efficiency is a problem for password storage, because it can reduce an attacker's workload for
                        brute-force password cracking. If an attacker can obtain the hashes through some other method
                        (such as SQL injection on a database that stores hashes), then the attacker can store the hashes
                        off-line and use various techniques to crack the passwords by computing hashes efficiently.
                        Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust
                        the entire space of all possible passwords, within a very short amount of time, using
                        massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such
                        a scenario, an efficient hash algorithm helps the attacker.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        There are several properties of a hash scheme that are relevant to its strength against an
                        off-line, massively-parallel attack:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The amount of CPU time required to compute the hash (&amp;quot;stretching&amp;quot;)&lt;/li&gt;
                        &lt;li&gt;The amount of memory required to compute the hash (&amp;quot;memory-hard&amp;quot;
                        operations)&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Including a random value, along with the password, as input to the hash computation (&amp;quot;salting&amp;quot;)&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Given a hash, there is no known way of determining a password that produces this hash
                        value, other than by guessing possible passwords (&amp;quot;one-way&amp;quot; hashing)&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Relative to the number of all possible hashes that can be generated by the scheme,
                        there is a low likelihood of producing the same hash for multiple different inputs (&amp;quot;collision
                        resistance&amp;quot;)&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;Note that the security requirements for the software may vary depending on the
                        environment and the value of the passwords. Different schemes might not provide all of these
                        properties, yet may still provide sufficient security for the environment. Conversely, a
                        solution might be very strong in preserving one property, which still being very weak for an
                        attack against another property, or it might not be able to significantly reduce the efficiency
                        of a massively-parallel attack.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-654" name="Reliance on a Single Factor in a Security Decision" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-654: Reliance on a Single Factor in a Security Decision" url="http://cwe.mitre.org/data/definitions/654.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:14.190000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.</desc>
                </weakness>
                <weakness ref="CWE-204" name="Response Discrepancy Information Exposure" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-204: Response Discrepancy Information Exposure" url="https://cwe.mitre.org/data/definitions/204.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:15.084000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software provides different responses to incoming requests in a way that allows an actor
                        to determine system state information that is outside of that actor's control sphere.
                        &lt;br /&gt;This issue frequently occurs during authentication, where a difference in
                        failed-login messages could allow an attacker to determine if the username is valid or not.
                        These exposures can be inadvertent (bug) or intentional (design).
                    </desc>
                </weakness>
                <weakness ref="CWE-307" name="The application does not implement anti-automation mechanisms to prevent automated long time-sustained probes" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-799" url="https://cwe.mitre.org/data/definitions/799.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:15.070000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not properly limit the number or frequency of interactions that it has with
                        an actor, such as the number of incoming requests.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;This can allow the actor to perform actions more frequently than expected. The actor
                        could be a human or an automated process such as a virus or bot. This could be used to cause a
                        denial of service, compromise program logic (such as limiting humans to a single vote), or other
                        consequences. For example, an authentication routine might not limit the number of times an
                        attacker can guess a password. Or, a web site might conduct a poll but only expect humans to
                        vote a maximum of once a day.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-255" name="The application does not wipe used and not needed passwords or key material" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP Top 10 - A5 Security Missconfiguration" url="https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:42">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When using password or key material within an application, these are copied in memory and can be copied back to the disk depending on several factors.

If the application handles passwords or key material, an attacker with access to the system could inspect the memory or the hard disk to retrieve back those secrets on its original form.  </desc>
                </weakness>
                <weakness ref="CWE-620" name="Unverified Password Change" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T12:33:27.819000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When setting a new password for a user, the product does not
					require knowledge of the original password, or using another form of
					authentication.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-654" name="Authenticate users (multi- or two-factor authentication [2FA])" platform="" cost="2" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt; 
 &lt;div&gt;
   The application shall ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For more sensitive applications hosting data or functionality requiring greater assurance over the identification of users, a multi- or two-factor authentication process is recommended. Together with asserting their identity and a password/phrase/PIN (something you know), such systems require additional factors, such as biometric validation (something you are), user-initiated action such as a button press on a FIDO hardware key or a token (something you have). 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Implement multi-factor authentication for applications providing access to sensitive data or functionality, and for highly privileged user access (e.g. administrators).&lt;/li&gt; 
   &lt;li&gt;This shall utilize a factor such as a soft or hard-token verification in addition to the secret password/pass-phrase for example.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="164.312(d)" supportedStandardRef="hipaa-required"/>
                        <standard ref="5.2.3" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.2.5" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.2.9" supportedStandardRef="nist-800-63"/>
                        <standard ref="6.1.3" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="4.8" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="4.8" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt; 
 &lt;li&gt;Check for the authentication(s) functions of the component.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Check at least a combination of the following factors is used within the authentication process.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Something that you are: mainly biometric characteristics of yourself as fingerprint, facial recognition, iris recognition, etc.)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Something that you know: a PIN, password, pass phrase, etc.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Something that you have: a hardware token, a card, a dongle, a mobile phone, etc.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:15.118000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-204-USERNAME-LOGIN" name="Ensure application errors do not reveal account status" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Error messages can reveal information of use to an attacker, particularly in the case of
                        relating to login, registration and recovery processes.&amp;nbsp; Explicit errors stating
                        accounts are valid or not, or whether then are locked out are useful to an attacker in
                        enumerating usernames for subsequent attack. Even small variations in errors returned to the
                        user can be used to infer how the application operates, or enforces security controls.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        To prevent a malicious user using error conditions to determine how the application functions in
                        order to subvert it:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Trap and log all known error conditions at the server-side&lt;/li&gt;
                        &lt;li&gt;Create a generic trap for unexpected errors&lt;/li&gt;
                        &lt;li&gt;E.g. Error messages during the login process should not disclose which authentication
                        token was incorrect, instead a generic message simply stating that authentication failed should
                        be displayed.&lt;/li&gt;
                        &lt;li&gt;Ensure the error message returned to the user is generic, or contains only an
                        obfuscated reference that can be correlated with the logged errors at the server-side. &amp;nbsp;In
                        the case of applications delivered over HTTP, the HTTP header should also be generic to prevent
                        enumeration (e.g. all error pages should produce a consistent HTTP 500 error)&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Proactive Controls [C10]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify error condition within the application (i.e. Unexpected data types,
                            unexpected data length, requests from an unexpected state, etc.).&lt;/li&gt;
                            &lt;li&gt;And verify that the responses do not reveal any information on the internals of
                            the applications (i.e. they do not expose a full stack trace with all the methods called or
                            the sql string sent to a database, etc.).&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:15.138000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="error-handling-centralized" name="Implement a centralized mechanisms to manage the errors and exceptions" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Create a functionality or mechanism to manage exceptions in a centralized manner and avoid to include duplicated try/catch blocks in the code. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A well-planned error/exception handling strategy is important for three reasons: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Good error handling does not give an attacker any information which is a means to an end, attacking the application&lt;/li&gt; 
  &lt;li&gt;A proper centralized error strategy is easier to maintain and reduces the chance of any uncaught errors "Bubbling up" to the front end of an application.&lt;/li&gt; 
  &lt;li&gt;Information leakage can lead to social engineering exploits&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Building an infrastructure for consistent error reporting proves more difficult than error handling. All exceptions shall be caught and convert them as events with the severity of the error. These events shall be logged. 
&lt;/div&gt; 
&lt;div&gt;
  The centralized system shall reorganize all events and throws with the corresponding error or system message in a consistent manner, depending on the severity of the error. 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Code Review: Error Handling" url="https://www.owasp.org/index.php/Codereview-Error-Handling"/>
                        <reference name="OWASP Error Handling" url="https://www.owasp.org/index.php/Error_Handling"/>
                        <reference name="OWASP Proactive Controls [C10]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ul&gt; 
 &lt;li&gt;Verify that it exists a centralized system to catch the errors and exceptions, and these errors are shown in a correct manner.&lt;/li&gt; 
 &lt;li&gt;Verify all errors are thrown from the centralized system and they are shown in a correct manner.&lt;/li&gt; 
&lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-09-02T15:20:46.813000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="network-rate-limit" name="Implement application and network rate limiting" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="">
                    <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and&amp;nbsp;&lt;span class="caps"&gt;ISP&lt;/span&gt;&amp;nbsp;environment may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks from multiple sources to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (&lt;span class="caps"&gt;WAF&lt;/span&gt;) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g.&amp;nbsp;&lt;span class="caps"&gt;HTTP&lt;/span&gt;headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a&amp;nbsp;&lt;span class="caps"&gt;CAPTCHA&lt;/span&gt;, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;font size="4"&gt;&lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;&lt;/font&gt;&lt;/p&gt; 
&lt;div&gt;
  Implement the mechanisms to lockout accounts:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased per each new failed attempt until an hour as maximum,&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;When the application detects that an account is locked more times than usual, this account shall be disabled (no more than 100 failure attempts). A disabled account shall only be restored by an administrator.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;When the application detects active brute-force attacks, the application shall require a&amp;nbsp;&lt;span class="caps"&gt;CAPTCHA&lt;/span&gt;, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt; 
  &lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt; 
  &lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
                    </references>
                    <standards>
                        <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="13.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;p&gt;Use tools like &lt;a href="https://www.thc.org/thc-hydra/"&gt;&lt;span class="caps"&gt;THC&lt;/span&gt;-Hydra&lt;/a&gt;, &lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;&lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;&lt;/a&gt; or &lt;a href="https://portswigger.net/burp/"&gt;Burp Suite&lt;/a&gt;to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Perform a simulation of the attack against the login function.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that the function is blocked for your source after n attempts.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that there is a log alerting function for an unusual amount of failed log in attempts, even if they originated from different sources.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:42">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="network-rate-limit-login" name="Implement application and network rate limiting on the login function" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="">
                    <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and&amp;nbsp;&lt;span class="caps"&gt;ISP&lt;/span&gt;&amp;nbsp;environment may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks from multiple sources to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (&lt;span class="caps"&gt;WAF&lt;/span&gt;) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g.&amp;nbsp;&lt;span class="caps"&gt;HTTP&lt;/span&gt;headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a&amp;nbsp;&lt;span class="caps"&gt;CAPTCHA&lt;/span&gt;, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;font size="4"&gt;&lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;&lt;/font&gt;&lt;/p&gt; 
&lt;div&gt;
  Implement the mechanisms to lockout accounts:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased per each new failed attempt until an hour as maximum,&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;When the application detects that an account is locked more times than usual, this account shall be disabled (no more than 100 failure attempts). A disabled account shall only be restored by an administrator.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;When the application detects active brute-force attacks, the application shall require a&amp;nbsp;&lt;span class="caps"&gt;CAPTCHA&lt;/span&gt;, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt; 
  &lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt; 
  &lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
                    </references>
                    <standards>
                        <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;p&gt;Use tools like &lt;a href="https://www.thc.org/thc-hydra/"&gt;&lt;span class="caps"&gt;THC&lt;/span&gt;-Hydra&lt;/a&gt;, &lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;&lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;&lt;/a&gt; or &lt;a href="https://portswigger.net/burp/"&gt;Burp Suite&lt;/a&gt;to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Perform a simulation of the attack against the login function.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that the function is blocked for your source after n attempts.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that there is a log alerting function for an unusual amount of failed log in attempts, even if they originated from different sources.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:42">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-255-PWD-CHANGE" name="Offer a password change facility" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Users must retain control of their credentials in a single factor system, and to facilitate this
                        they must have the ability to change their password. This is particularly important should the
                        user determine their password has been compromised, potentially allowing a third party to access
                        the system impersonating them. Furthermore, accountability is adversely affected where users
                        cannot change their passwords, as they can plausibly claim that even though they knew their
                        account credentials were compromised, there was no way for them to prevent unauthorized use of
                        the account.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Users should be allowed to change their passwords, ideally within the application&lt;/li&gt;
                        &lt;li&gt;Password change should require re-authentication to prevent abuse of a compromised or
                        unattended session. I.e. the user should be required to enter their existing password in order
                        to change it.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
                    </references>
                    <standards>
                        <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
                        <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
                        <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="IA-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Check on the application if there is a password changing feature.&lt;/li&gt;
                            &lt;li&gt;Check the previous password is needed and it is validating it before doing the
                            actual change.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:15.166000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="password-change-facility" name="Offer a password change facility" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;                        Users must retain control of their credentials in a single factor system, and to facilitate this                        they must have the ability to change their password. This is particularly important should the                        user determine their password has been compromised, potentially allowing a third party to access                        the system impersonating them. Furthermore, accountability is adversely affected where users                        cannot change their passwords, as they can plausibly claim that even though they knew their                        account credentials were compromised, there was no way for them to prevent unauthorized use of                        the account.                        &lt;/div&gt;                        &lt;div&gt;                        &lt;ul&gt;                        &lt;li&gt;Users shall be allowed to change their passwords, ideally within the application&lt;/li&gt;                        &lt;li&gt;Password change should require re-authentication to prevent abuse of a compromised or                        unattended session. I.e. the user should be required to enter their existing password in order                        to change it.&lt;/li&gt;                        &lt;li&gt;After a successful password change, the application shall terminate all other active sessions.&lt;/li&gt;                        &lt;/ul&gt;                        &lt;/div&gt;                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="2.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;                            &lt;li&gt;Check on the application if there is a password changing feature.&lt;/li&gt;                            &lt;li&gt;Check the previous password is needed and it is validating it before doing the                            actual change.&lt;/li&gt;                            &lt;li&gt;Check all active sessions are terminated after changing the password.&lt;/li&gt;                            &lt;/ol&gt;                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:15.166000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-255" name="Remove default credentials and role-based accounts from the application" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Security is often compromised through default or predictable account credentials, such as
                        'admin/admin'. Best-practice dictates that accounts are only enabled when required, do not have
                        common account names, and force users to choose unique strong passwords rather than using vendor
                        defaults.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure all default application and software accounts are disabled or removed if not
                        required&lt;/li&gt;
                        &lt;li&gt;Strong passwords should be set on accounts that are required, default credentials must
                        be changed.&lt;/li&gt;
                        &lt;li&gt;Build application accounts from a least-privilege perspective.&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Accounts should only be enabled if required.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Users should have individual accounts rather than role-based ones (e.g. dave-admin,
                        sue-admin rather than a shared 'admin' user)&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.3.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.1.1.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.10.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.10.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify all the authentication points for this component.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that authentication with default credentials is not possible.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-28T15:44:55.684000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="require-use-strong-passwords-with-ui" name="Require the use of strong passwords" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;span&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Passwords used either as a sole verification credentials, or as part of a multi-factor authentication, are a key aspect of application security, and strong password selection should be encouraged and enforced. The application should allow flexibility in user password selection, and enforce minimum criteria for password quality. This should include:&lt;/span&gt;&lt;/p&gt; &lt;/span&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimum password length requirements, to mitigate brute-force and dictionary attacks.&lt;/li&gt; 
 &lt;li&gt;Encourage use of pass-phrases using multiple words, achieving longer passwords more resistant to attack.&lt;/li&gt; 
 &lt;li&gt;Enforce use of mixed case, numeric and/or special characters to increase complexity.&lt;/li&gt; 
 &lt;li&gt;Prevent or discourage use of dictionary words and common passwords through black-lists. For example, a set of commonly used passwords can be found on SecLists at &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords"&gt;https://github.com/danielmiessler/SecLists/tree/master/Passwords&amp;nbsp;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Password length:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Password length considers the minimum and maximum length of characters comprising the password of your users. For ease of changing this length, its implementation can be configurable possibly using a properties file or xml configuration file.&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;b&gt;Minimum length.&lt;/b&gt;&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Memory secrets shall be at least 8 characters long.&lt;/li&gt; 
   &lt;li&gt;Memory secrets generated automatically shall be at least 6 numeric characters.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Maximum length.&amp;nbsp;&lt;/b&gt;People tend to forget their passwords easily. The longer the password, the more likely people are to enter them incorrectly for the system. However, long pass-phrases can be easily remembered, and should not be prevented through unnecessarily strict upper restrictions on length.&amp;nbsp;&lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Passwords with 64 characters or longer shall be permitted.&amp;nbsp;&lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Password Complexity:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;ul&gt;&lt;/ul&gt; 
  &lt;li&gt;Passwords with consecutive multiple spaces shall be coalesced and converter into only one space. After this modification, the password length shall be at least 12 characters long.&lt;/li&gt; 
  &lt;li&gt;Unicode characters shall be allowed in the password. A single Unicode code point is considered a character.&lt;/li&gt; 
  &lt;li&gt;Reject those passwords whose are commonly used and they have been already been leaked in a previous compromise. You may choose to block the top 1000 or 10000 most common passwords which meet the above length requirements and are found in compromised password lists. The following link contains the most commonly found passwords:&amp;nbsp;&lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords"&gt;https://github.com/danielmiessler/SecLists/tree/master/Passwords&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;Actual passwords must not be stored, to protect them against brute forcing if the database is compromised Screen reader support enabled.&lt;/li&gt; 
 &lt;/ul&gt;&lt;/span&gt; 
&lt;span&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt;&lt;/span&gt; 
&lt;ul&gt; 
&lt;/ul&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;span&gt;UI features:&lt;/span&gt; &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;span&gt;Allow the "paste" functionality, browser password helpers, and external password managers.&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;Mask the entire password, or show temporarily view the last typed character of the password on platforms that do no have this as native functionality.&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;Include a password strength meter in the pages where we are creating a password, to help users to generate and set a stronger password. &lt;/span&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;b&gt;&lt;span&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Password Topologies:&lt;/span&gt;&lt;/p&gt;&lt;/span&gt; &lt;/b&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ban commonly used password topologies.&lt;/li&gt; 
 &lt;li&gt;Force multiple users to use different password topologies.&lt;/li&gt; 
 &lt;li&gt;Require a minimum topology change between old and new passwords.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;b&gt;&lt;span&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Additional Information:&lt;/span&gt;&lt;/p&gt; &lt;/span&gt; &lt;/b&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure that every character the user types in is actually included in the password. We've seen systems that truncate the password at a length shorter than what the user provided (e.g., truncated at 15 characters when they entered 20).&lt;/li&gt; 
 &lt;li&gt;As application's require more complex password policies, they need to be very clear about what these policies are. The required policy needs to be explicitly stated on the password change page&lt;/li&gt; 
 &lt;li&gt;If the new password doesn't comply with the complexity policy, the error message should describe EVERY complexity rule that the new password does not comply with, not just the 1st rule it doesn't comply with.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt;&lt;/span&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Blacklist Top Leaked Passwords" url="https://github.com/danielmiessler/SecLists/tree/master/Passwords"/>
                        <reference name="NIST 800-63: Memorised secrets" url="https://pages.nist.gov/800-63-3/sp800-63b.html"/>
                        <reference name="Owasp CheatSheetSeries: Authentication" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md"/>
                        <reference name="OWASP Pro active controls [C6]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
                    </references>
                    <standards>
                        <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="A.3" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.11" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.12" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.8" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.11" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.12" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.11" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.12" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt; 
 &lt;li&gt;Verify the passwords comply with the company policy for strong passwords.&lt;/li&gt; 
 &lt;li&gt;If there is no policy, check the strength against industry standards as NIST or OWASP.&lt;/li&gt; 
&lt;/ol&gt;An example of strong password policy (&amp;nbsp; 
&lt;a href="https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Implement_Proper_Password_Strength_Controls"&gt;from the OWASP Authentication Cheat Sheet&lt;/a&gt;) is: Password must meet at least 3 out of the following 4 complexity rules: 
&lt;ul&gt; 
 &lt;li&gt;at least 1 uppercase character (A-Z)&lt;/li&gt; 
 &lt;li&gt;at least 1 lowercase character (a-z)&lt;/li&gt; 
 &lt;li&gt;at least 1 digit (0-9)&lt;/li&gt; 
 &lt;li&gt;at least 1 special character (punctuation). Do not forget to treat space as special characters too&lt;/li&gt; 
 &lt;li&gt;at least 10 characters&lt;/li&gt; 
 &lt;li&gt;at most 128 characters&lt;/li&gt; 
&lt;/ul&gt;not more than 2 identical characters in a row (e.g., 111 not allowed).</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T12:00:36.332000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="store-passwords-unrecoverable-form" name="Store passwords in unrecoverable form" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;span&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-family: Arial; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;To protect users passwords from accidental or deliberate exposure, the application should store cryptographic hashes of passwords instead of the passwords themselves.&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Do not store passwords themselves in the data store for verification at login.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Instead, create a cryptographic hash of the password using a strong hash function that includes a work factor and a built in 'salt' value, like bcrypt or scrypt. This reduces the risk of brute-force attacks and rainbow tables, and allows flexibility to adapt the hashing function to balance security and performance. We shall establish some restrictions, depending of the used function:&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The salt length shall be at least 32 bits.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;If bcrypt is used, the work factor shall be as large as verification server performance will allow, typically at least 13.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;If we use the PBKDF2, the iteration count shall be as large as verification server performance and it will allow typically at least 100,000 iterations.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Alternatively, use a strong hash function like SHA-384 together with a unique 'salt' value for every account.&amp;nbsp; Apply multiple iterations of the hash to create the additional computational work required to mitigate brute-force attacks. And the secret 'salt' value shall be stored separately from the hashed passwords.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
 &lt;/ul&gt;&lt;/span&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Owasp CheatSheetSeries: Password Storage" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Password_Storage_Cheat_Sheet.md"/>
                    </references>
                    <standards>
                        <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;span&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Review the mechanism for matching credentials from the client-side to stored credentials for a user.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;ul&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span&gt;Best practice dictates the system should match a salted strong hash (SHA256 or greater and a unique hash for each account) to that stored at the point the password was set.&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;For example, it is recommended that a system salt of 32 bits or more, a keyed HMAC hash using &lt;span style="font-family: Arial; font-size: 11pt; font-weight: 700; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;SHA-2 or SHA-3,&lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; and the stretching algorithm PBKDF2 with at least 10,000 iterations, is used.&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm the stored credential is not a clear-text password&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm the stored credential is not an encrypted password which may be recovered (decrypted) at the server- or client- side.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm that the hashing algorithm in use is cryptographically secure (e.g. is not SHA1/MD5 or a flawed algorithm)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm that the hash is created from the password together with a unique salt value for the user. This prevents use of rainbow tables, or of identifying password collisions among users.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Consider use of an algorithm with a configurable work factor, set to a high value to inhibit attack.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;/ol&gt;&lt;/span&gt; 
&lt;span&gt;&lt;/span&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T15:48:45.656000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-178-AUTH" name="The login function should distinguish between upper and lower case passwords" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Passwords used either as a sole verification credentials, or as part of a multi-factor
                        authentication, are a key aspect of application security, and use of strong passwords in
                        critical. In addition to password quality criteria, it is important that the verification of
                        passwords by the application does not reduce the character space, and therefore quality.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The login function should distinguish between upper and lowercase passwords; for
                        example PASSWORD should be considered different to password, Password, PASSword etc.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Reducing the character set by considering an uppercase or a lowercase being the same,
                        also reduces the Computational Complexity.&lt;/li&gt;
                        &lt;li&gt;Reduction in character space reduces computational cost of brute-force or dictionary
                        attacks against the credentials.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;&lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;br /&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Create a user or if it is created change its password to &amp;quot;UPPERCASEPASSWORD&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Logout of the application.&lt;/li&gt;
                            &lt;li&gt;Check if it is possible to log in again with this username and the password &amp;quot;uppercasepassword&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;It shouldn't.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:15.146000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="">
                    <threats>
                        <threat ref="CSD-DEF-PWD" name="Attackers gain access to the system using default passwords" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Default passwords are usually public or can be obtained from manuals or technical data
                                sheets. An attacker could easily use them to gain access to the system or user data.&amp;nbsp;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="CWE-255" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-255">
                                    <controls>
                                        <control ref="CWE-255" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CSD-AUTH-HASH" name="Attackers gain access to user accounts by accessing the password database" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker with access to the plain, readable credential database would have access
                                to the system as any of those users.&amp;nbsp;
                            </desc>
                            <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="store-passwords-unrecoverable-form" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-916">
                                    <controls>
                                        <control ref="store-passwords-unrecoverable-form" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-16" name="Dictionary-based or brute force password attack" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker tries each of the words in a dictionary as passwords to gain access to
                                the system via some user's account. If the password chosen by the user was a word
                                within the dictionary, this attack will be successful (in the absence of other
                                mitigations). This is a specific instance of the password brute forcing attack
                                pattern.&lt;/br&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="CWE-178-AUTH" mitigation="33"/>
                                <control ref="CWE-255-PWD-CHANGE" mitigation="34"/>
                                <control ref="CWE-654" mitigation="100"/>
                                <control ref="password-change-facility" mitigation="50"/>
                                <control ref="require-use-strong-passwords-with-ui" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-178-AUTH">
                                    <controls>
                                        <control ref="CWE-178-AUTH" mitigation="33"/>
                                    </controls>
                                </weakness>
                                <weakness ref="NO-PASSWORD-CHANGE">
                                    <controls>
                                        <control ref="CWE-255-PWD-CHANGE" mitigation="34"/>
                                        <control ref="password-change-facility" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-521">
                                    <controls>
                                        <control ref="require-use-strong-passwords-with-ui" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-263">
                                    <controls>
                                        <control ref="require-use-strong-passwords-with-ui" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-654">
                                    <controls>
                                        <control ref="CWE-654" mitigation="100"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-620">
                                    <controls>
                                        <control ref="CWE-255-PWD-CHANGE" mitigation="34"/>
                                        <control ref="password-change-facility" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-112-USERNAME" name="User accounts compromised through username guessing" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attackers could perform a brute force attack against the login function by choosing a
                                simple password that users are likely to use for the site, and that meets the site's
                                password policy.
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;Then they could use an automated script to iterate through a list of
                                possible usernames. &amp;nbsp;These could be obtained from a dictionary, or generated
                                through pure brute force means. &amp;nbsp;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                This type of attack cannot be defended against using an account lockout policy because
                                each username is only attempted once.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="25" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="network-rate-limit" mitigation="25"/>
                                <control ref="network-rate-limit-login" mitigation="25"/>
                                <control ref="require-use-strong-passwords-with-ui" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-521">
                                    <controls>
                                        <control ref="require-use-strong-passwords-with-ui" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-307">
                                    <controls>
                                        <control ref="network-rate-limit" mitigation="25"/>
                                        <control ref="network-rate-limit-login" mitigation="25"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CWE-204-USERNAME-LOGIN" name="Usernames could be enumerated through login responses" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Usernames could be enumerated through the login feature, if it returns error messages
                                that allow attackers to infer whether the username or password was incorrect.&amp;nbsp;
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;For example, consider the following behavior:An attacker attempts a
                                username that existed on the system, but an incorrect password, and the system responds
                                with the message: &amp;quot;Incorrect password&amp;quot;. Then the attacker attempts a
                                username that definitely does not exist in the system, and the system responds with the
                                message: &amp;quot;Username not recognized&amp;quot;.&amp;nbsp;
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;Then the attacker can use automated scripts and typical usernames to create
                                a list of usernames registered in the system.
                                &lt;/div&gt;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="75"/>
                            <references/>
                            <controls>
                                <control ref="CWE-204-USERNAME-LOGIN" mitigation="50"/>
                                <control ref="error-handling-centralized" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-204">
                                    <controls>
                                        <control ref="CWE-204-USERNAME-LOGIN" mitigation="50"/>
                                        <control ref="error-handling-centralized" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="AUTHN-SF:DATA-TRANSPORT" name="Generic Service: Transport of auth credentials" desc="The data transport mechanism between the client and server components that transmits authentication credentials" tags="" position="16" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-319-AUTH" name="Cleartext Transmission of Authentication Credentials" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-319: Cleartext Transmission of Sensitive Information" url="https://cwe.mitre.org/data/definitions/319.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:15.646000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software transmits sensitive or security-critical data in cleartext in a communication
                        channel that can be sniffed by unauthorized actors.&amp;nbsp;&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;Many communication channels can be &amp;quot;sniffed&amp;quot; by attackers during
                        data transmission. For example, network traffic can often be sniffed by any attacker who has
                        access to a network interface. This significantly lowers the difficulty of exploitation by
                        attackers.
                        &lt;/div&gt;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Data passed between the client and server should be protected by encryption in transit.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Implement cryptographically strong TLS end-to-end encryption between the client and
                        server, terminating within a secure environment on the server-side.&lt;/li&gt;
                        &lt;li&gt;Consider use of client certificates to prevent interception of (or man-in-the-middle
                        attacks on) the encrypted connection.&lt;/li&gt;
                        &lt;li&gt;Alternatively, asymmetric (public-key) encryption could be utilized, although a
                        recognized, proven, and tested implementation/library should be used&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Check the client to server connections use and enforce established encryption
                            protocols, e.g. TLSv1.2.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Verify only strong cipher suites are in use and permitted.&lt;/li&gt;
                            &lt;li&gt;Ensure attempts to use unencrypted transport are rejected or redirected (e.g. HTTP
                            instead of HTTPS)&lt;/li&gt;
                            &lt;li&gt;Review configuration of protocols and services against best-practice guidelines.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:15.675000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-158-AUTH" name="Authentication credentials compromised through network sniffing" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker with access to the network path between the user and the server could use
                                network sniffing to read clear text data traversing the network.
                                &lt;div&gt;
                                &lt;br /&gt;The networks used by users are the most likely points of attack since these
                                are often shared by many other users, e.g. corporate networks or are public and
                                untrusted such as public WiFi access points.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CWE-319-TRANSPORT" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-319-AUTH">
                                    <controls>
                                        <control ref="CWE-319-TRANSPORT" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GENERIC-SERVICE:XML" name="Generic Service: XML processing" desc="Generic Service that processes an XML document" tags="" position="17" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-611" name="Improper Restriction of XML External Entity Reference ('XXE')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-611: Improper Restriction of XML External Entity Reference ('XXE')" url="https://cwe.mitre.org/data/definitions/611.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:15.823000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software processes an XML document that can contain XML entities with URIs that resolve to
                        documents outside of the intended sphere of control, causing the product to embed incorrect
                        documents into its output.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;XML documents optionally contain a Document Type Definition (DTD), which, among
                        other features, enables the definition of XML entities. It is possible to define an entity by
                        providing a substitution string in the form of a URI. The XML parser can access the contents of
                        this URI and embed these contents back into the XML document for further processing. By
                        submitting an XML file that defines an external entity with a file:// URI, an attacker can cause
                        the processing application to read the contents of a local file. For example, a URI such as
                        &amp;quot;file:///c:/winnt/win.ini&amp;quot; designates (in Windows) the file C:\Winnt\win.ini,
                        or file:///etc/passwd designates the password file in Unix-based systems.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Using URIs with other schemes such as http://, the attacker can force the application to make
                        outgoing requests to servers that the attacker cannot reach directly, which can be used to
                        bypass firewall restrictions or hide the source of attacks such as port scanning. Once the
                        content of the URI is read, it is fed back into the application that is processing the XML. This
                        application may echo back the data (e.g. in an error message), there by exposing the file
                        contents.
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-112" name="The application does not validate the XML structure" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T22:39:18.157000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>An application which does not validate the authenticity and integrity of a received XML data
                        can make wrong decisions that can lead to sensitive data leak or critical business logic bypass.
                        &amp;nbsp;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="WEB-SRV-XML" name="Define and enforce secure validation through an XSD or DSD schema on XML input data" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        The XML standards provide for formal validation criteria to be specified in a schema (XSD or
                        DTD). Defining a schema with security in mind, and enforcing it on input data, will mitigate
                        many attacks.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Define an XSD or DTD schema with secure input validation criteria.&lt;/li&gt;
                        &lt;li&gt;Validate all XML input data against the schema before processing it.&lt;/li&gt;
                        &lt;li&gt;The acceptance of unvalidated or non compliant data could have unexpected effects
                        behavior of the application, and may facilitate attacks such as SQL injection.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;For every endpoint which consumes XML data.&lt;/li&gt;
                            &lt;li&gt;Get the permitted structure of this data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Construct non-compliant samples and send them to the endpoints.&lt;/li&gt;
                            &lt;li&gt;Check they are not accepted.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T22:40:28.032000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="cwe-611-validate" name="Disable external XML entity references in the processor" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        The XML standards provide for formal validation criteria to be specified in a schema (XSD or
                        DTD). The XML data itself may include DTD specifications, which a skilled attacked could use to
                        attempt to subvert data validation controls.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Configure the XML processor to use a local static DTD.&lt;/li&gt;
                        &lt;li&gt;Disallow any declared DTD included in the XML document.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;For every XML input to the system attempt to insert XML as below:&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;pre&gt;&lt;b&gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;ISO-8859-1&amp;quot;?&amp;gt;
                            &amp;lt;!DOCTYPE foo [
                            &amp;lt;!ELEMENT foo ANY &amp;gt;
                            &amp;lt;!ENTITY xxe SYSTEM &amp;quot;file:///etc/passwd&amp;quot; &amp;gt;]&amp;gt;&amp;lt;foo&amp;gt;&amp;amp;xxe;&amp;lt;/foo&amp;gt;&lt;/b&gt;&lt;/pre&gt;
                            &lt;pre&gt;Make sure that the file exists on the system and that the resulting processed XML
                            does not including the contents of this file.&lt;/pre&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP - XEE Processing" url="https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:15.830000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-201" name="Attackers access system files through XML related Attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker creates an XML document that with an external entity reference. External
                                entity references can take the form of tags in a DTD. Because processors may not
                                validate documents with external entities, there may be no checks on the nature of the
                                reference in the external entity. This can allow an attacker to open arbitrary files or
                                connections. For example, the following DTD would attempt to open the /dev/tty device:
                                &lt;br /&gt;
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="WEB-SRV-XML" mitigation="50"/>
                                <control ref="cwe-611-validate" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-611">
                                    <controls>
                                        <control ref="cwe-611-validate" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-112">
                                    <controls>
                                        <control ref="WEB-SRV-XML" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="GENERIC-SERVICE:XPATH" name="Generic Service: XPATH Queries" desc="A service that performs XPATH queries" tags="" position="18" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-91" name="XML Injection through XPATH" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-91: XML Injection (aka Blind XPath Injection)" url="https://cwe.mitre.org/data/definitions/91.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:15.975000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not properly neutralize special elements that are used in XML, allowing
                        attackers to modify the syntax, content, or commands of the XML before it is processed by an end
                        system.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;Within XML, special elements could include reserved words or characters such as
                        &amp;quot;&amp;lt;&amp;quot;, &amp;quot;&amp;gt;&amp;quot;, &amp;quot;&amp;quot;&amp;quot;, and
                        &amp;quot;&amp;amp;&amp;quot;, which could then be used to add new data or modify XML syntax.
                        &lt;/div&gt;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="escape-xpath-characters" name="Escape XPATH characters in untrusted input" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        All data received from the client-side should be considered tainted and a potential risk,
                        regardless of the source or transport method.&amp;nbsp;As such, all data from the client side
                        must be subjected to strict validation, sanitization, and encoding against expected syntactic
                        and semantic criteria.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        When using untrusted input data in an XPath query:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Use a parametrized XPath interface if one is available&lt;/li&gt;
                        &lt;li&gt;Ensure that XPath specific meta-characters are escaped to make it safe to include in a
                        dynamically constructed query.&lt;/li&gt;
                        &lt;li&gt;If single quote characters are used to terminate untrusted input in a dynamically
                        constructed XPath query, the quote should be escaped in tainted input to ensure the untrusted
                        data can't try to break out of quoted context.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;&lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify data inputs from untrusted sources. &lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Check if they end-up on a XPATH query. &lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Make sure there is an escaping function applied before executing the query. &lt;br
                            /&gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-12-27T12:10:58.863000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="XPATH-ESCAPE" name="Escape XPATH characters in untrusted input" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        All data received from the client-side should be considered tainted and a potential risk,
                        regardless of the source or transport method.&amp;nbsp;As such, all data from the client side
                        must be subjected to strict validation, sanitization, and encoding against expected syntactic
                        and semantic criteria.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        When using untrusted input data in an XPath query:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Use a parametrized XPath interface if one is available&lt;/li&gt;
                        &lt;li&gt;Ensure that XPath specific meta-characters are escaped to make it safe to include in a
                        dynamically constructed query.&lt;/li&gt;
                        &lt;li&gt;If single quote characters are used to terminate untrusted input in a dynamically
                        constructed XPath query, the quote should be escaped in tainted input to ensure the untrusted
                        data can't try to break out of quoted context.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;&lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify data inputs from untrusted sources. &lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Check if they end-up on a XPATH query. &lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Make sure there is an escaping function applied before executing the query. &lt;br
                            /&gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-12-27T12:10:58.863000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="DATA-VAL" name="Validate all data received from the client side" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        All data received from the client-side should be considered tainted and a potential risk,
                        regardless of the source or transport method. &amp;nbsp;For example, while hidden form fields,
                        cookies, or other headers may be obfuscated from a user, along with parameters passed in
                        ViewStates or other encapsulated forms, these can be modified by the user at the client-side in
                        memory, or in transit on the network. Similarly, data passed from binary or compiled components
                        can be modified in situ or in transit.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt;&lt;br /&gt;&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the
                        encrypted tunnel (one end of which is typically controlled by the client); data passing through
                        the link may still be malicious.&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        As such, all data from the client side must be subjected to strict validation, sanitization, and
                        encoding against expected syntactic and semantic criteria.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax
                        (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a
                        specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be
                        syntactically valid because it only contains alphanumeric characters, but it is not valid if the
                        input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&lt;/li&gt;
                        &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the
                        strict criteria for each input are accepted, and reject, transform, or encapsulate any
                        non-compliant data.&lt;/li&gt;
                        &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific
                        malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive
                        and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to
                        obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be
                        useful for detecting and logging potential attacks, or determining which inputs are so malformed
                        that they should be rejected outright.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Validate all data received from the client, including values such as HTTP headers and
                        cookie values if these are used as input on the server side, X- headers, and other platform
                        specific data objects passed between the client and server.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
                        <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify data input points for the application, for example:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;
                            &lt;li&gt;API calls&lt;/li&gt;
                            &lt;li&gt;HTTP Headers&lt;/li&gt;
                            &lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;
                            &lt;li&gt;Serialized Java objects&lt;/li&gt;
                            &lt;li&gt;Any data structure received from the client-side&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;
                            &lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;
                            &lt;li&gt;For each of the inputs, ensure that the data is validated against the define
                            whitelists (for example with a regular expression) before being processed.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            To test data validation:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it
                            (invalid characters, lengths, ranges etc.)&lt;/li&gt;
                            &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;
                            &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            A number of tools can be used to aid in testing: &amp;nbsp;&amp;nbsp;
                            &lt;ul&gt;
                            &lt;li&gt;Directly your browser with the Developer Tools&lt;/li&gt;
                            &lt;li&gt;Use a browser extension which allows you to modify the request and responses on
                            the fly (i.e. Tamper Data)&lt;/li&gt;
                            &lt;li&gt;Use a proxy which allows you to modify the request and response on the fly (i.e.
                            OWASP ZAP, Burp, Fiddler, etc.)&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:15.983000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-83" name="Attackers gain access to unauthorised data through XPATH injection" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker can craft special user-controllable input consisting of XPath expressions
                                to inject the XML database and bypass authentication or glean information that he
                                normally would not be able to.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                XPath Injection enables an attacker to talk directly to the XML database, thus bypassing
                                the application completely. XPath Injection results from the failure of an application
                                to properly sanitize input used as part of dynamic XPath expressions used to query an
                                XML database.&amp;nbsp;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
                            <references/>
                            <controls>
                                <control ref="DATA-VAL" mitigation="80"/>
                                <control ref="XPATH-ESCAPE" mitigation="20"/>
                                <control ref="escape-xpath-characters" mitigation="20"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-91">
                                    <controls>
                                        <control ref="DATA-VAL" mitigation="80"/>
                                        <control ref="XPATH-ESCAPE" mitigation="20"/>
                                        <control ref="escape-xpath-characters" mitigation="20"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="graphql" name="GraphQL" desc="" tags="" position="81" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-770" name="Allocation of Resources Without Limits or Throttling" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T14:31:36.554000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on how many resources can be allocated, in violation of the intended security policy for that actor.</desc>
                </weakness>
                <weakness ref="CWE-285" name="Improper Authorization" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-24T15:15:30.065000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="graphql-authorization-logic" name="Implement GraphQL or other data layer authorization logic at the business logic layer" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Authorization is a type of business logic that describes whether a given user/session/context has permission to perform an action or see a piece of data. 
&lt;/div&gt; 
&lt;div&gt;
  Defining authorization logic inside the resolver is fine when learning GraphQL or prototyping. However, for a production codebase, is not a valid solution. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br /&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Implement GraphQL or other data layer authorization logic at the business logic layer instead of the GraphQL layer. 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Graphql Authorization" url="https://graphql.org/learn/authorization/"/>
                    </references>
                    <standards>
                        <standard ref="13.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt; 
 &lt;li&gt;Using two different browsers configured with an intercepting proxy.&lt;/li&gt; 
 &lt;li&gt;Login as user A in browser A.&lt;/li&gt; 
 &lt;li&gt;Login as user B in browser B.&lt;/li&gt; 
 &lt;li&gt;For every operation that displays sensitive data belonging to user A:&lt;/li&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Perform the operation as user A and view their sensitive data&lt;/li&gt; 
  &lt;li&gt;Obtain the session ID of user B&lt;/li&gt; 
  &lt;li&gt;Configure the proxy to intercept&lt;/li&gt; 
  &lt;li&gt;Perform the operation as user A again, but this time intercept all the requests and replace user A's session ID with that of user B&lt;/li&gt; 
  &lt;li&gt;Ensure that user A's sensitive data is&amp;nbsp;&lt;b&gt;not&amp;nbsp;&lt;/b&gt;visible&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="An Attacker's View of Serverless and GraphQL Apps - Abhay Bhargav - AppSec California 2019" url="https://es.slideshare.net/abhaybhargav/an-attackers-view-of-serverless-and-graphql-apps-abhay-bhargav-appsec-california-2019"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-24T15:29:17.888000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="graphql-whitelisting" name="Use query whitelisting to prevent GraphQL or data layer expression denial of service (DoS)" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  GraphQL is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data. 
&lt;/div&gt; 
&lt;div&gt;
  Nested GraphQL queries allow an attacker to perform a DoS (Denial of Service) attack via overly complex queries that will consume all the resources of the server: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Use query whitelisting to prevent GraphQL or data layer expression denial of service (DoS) as a result of expensive, nested queries. For more advanced scenarios, query cost analysis should be used. 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Securing Your GraphQL API from Malicious Queries" url="https://blog.apollographql.com/securing-your-graphql-api-from-malicious-queries-16130a324a6b"/>
                    </references>
                    <standards>
                        <standard ref="13.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Create an GraphQL nested query and study the response time as an indicator of a Denial of Service condition.</steps>
                        <notes></notes>
                        <references>
                            <reference name="GraphQL Raider" url="https://portswigger.net/bappstore/4841f0d78a554ca381c65b26d48207e6"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T14:33:36.034000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="ACCESS SENSITIVE DATA" name="Access sensitive data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-1" name="Attackers access functionality not properly constrained by ACLs" state="Expose" source="MANUAL" owner="" library="">
                            <desc>In applications, particularly web applications, access to functionality is mitigated by the authorization framework, whose job it is to map ACLs to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application or can run queries for data that he is otherwise not supposed to. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="graphql-authorization-logic" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-285">
                                    <controls>
                                        <control ref="graphql-authorization-logic" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-130" name="An attacker causes the target to allocate excessive resources, thereby reducing the resources available for legitimate services and degrading or denying services" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request. For example, using an Integer Attack, the attacker could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="graphql-whitelisting" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-770">
                                    <controls>
                                        <control ref="graphql-whitelisting" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="HTTP-SERVICE" name="HTTP Service" desc="General server-side web application functions" tags="" position="19" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-352" name="Cross Site Request Forgery" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-352: Cross-Site Request Forgery (CSRF)" url="https://cwe.mitre.org/data/definitions/352.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-06T16:37:43.077000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The web application does not, or can not, sufficiently verify whether a well-formed, valid,
                        consistent request was intentionally provided by the user who submitted the request.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;When a web server is designed to receive a request from a client without any
                        mechanism for verifying that it was intentionally sent, then it might be possible for an
                        attacker to trick a client into making an unintentional request to the web server which will be
                        treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc.
                        and can result in exposure of data or unintended code execution.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-116" name="Improper Encoding or Escaping of Output" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-04T16:35:47.721000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software prepares a structured message for communication
					with another component, but encoding or escaping of the data is either missing
					or done incorrectly. As a result, the intended structure of the message is not
					preserved.</desc>
                </weakness>
                <weakness ref="CWE-173" name="Improper Handling of Alternate Encoding" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-04T16:22:19.996000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not properly handle when an input uses an
					alternate encoding that is valid for the control sphere to which the input is
					being sent.</desc>
                </weakness>
                <weakness ref="CWE-235" name="Improper Handling of Extra Parameters" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-26T15:17:10.402000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not handle or incorrectly handles when the
					number of parameters, fields, or arguments with the same name exceeds the
					expected amount.</desc>
                </weakness>
                <weakness ref="CWE-233" name="Improper Handling of Parameters" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-29T14:56:11.945000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not properly handle when the expected number
					of parameters, fields, or arguments is not provided in input, or if those
					parameters are undefined.</desc>
                </weakness>
                <weakness ref="CWE-20" name="Improper Input Validation" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-20: Improper Input Validation" url="https://cwe.mitre.org/data/definitions/20.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:16.082000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;When software does not validate input properly, an attacker is able to craft the
                        input in a form that is not expected by the rest of the application. This will lead to parts of
                        the system receiving unintended input, which may result in altered control flow, arbitrary
                        control of a resource, or arbitrary code execution.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-22" name="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" url="https://cwe.mitre.org/data/definitions/22.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:16.198000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software uses external input to construct a pathname that is intended to identify a file
                        or directory that is located underneath a restricted parent directory, but the software does not
                        properly neutralize special elements within the pathname that can cause the pathname to resolve
                        to a location that is outside of the restricted directory.&amp;nbsp;&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;Many file operations are intended to take place within a restricted directory. By
                        using special elements such as &amp;quot;..&amp;quot; and &amp;quot;/&amp;quot; separators,
                        attackers can escape outside of the restricted location to access files or directories that are
                        elsewhere on the system. One of the most common special elements is the &amp;quot;../&amp;quot;
                        sequence, which in most modern operating systems is interpreted as the parent directory of the
                        current location. This is referred to as relative path traversal.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Path traversal also covers the use of absolute pathnames such as &amp;quot;/usr/local/bin&amp;quot;,
                        which may also be useful in accessing unexpected files. This is referred to as absolute path
                        traversal.In many programming languages, the injection of a null byte (the 0 or NUL) may allow
                        an attacker to truncate a generated filename to widen the scope of attack. For example, the
                        software may add &amp;quot;.txt&amp;quot; to any pathname, thus limiting the attacker to text
                        files, but a null injection may effectively remove this restriction.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-915" name="Improperly Controlled Modification of Dynamically-Determined Object Attributes" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes" url="https://cwe.mitre.org/data/definitions/915.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:16.210000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software receives input from an upstream component that specifies multiple attributes,
                        properties, or fields that are to be initialized or updated in an object, but it does not
                        properly control which attributes can be modified.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;If the object contains attributes that were only intended for internal use, then
                        their unexpected modification could lead to a vulnerability. This weakness is sometimes known by
                        the language-specific mechanisms that make it possible, such as mass assignment, auto-binding, or
                        object injection.+ Applicable Platforms
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-24T08:56:07.038000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>An information exposure is the unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information.</desc>
                </weakness>
                <weakness ref="CWE-548" name="Information Exposure Through Directory Listing" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-06T16:31:57.933000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>A directory listing is inappropriately exposed, yielding
                        potentially sensitive information to attackers.
                    </desc>
                </weakness>
                <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-07T17:03:00.863000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not perform any authentication for
					functionality that requires a provable user identity or consumes a significant
					amount of resources.</desc>
                </weakness>
                <weakness ref="CWE-346" name="Origin Validation Error" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-04T16:48:18.873000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not properly verify that the source of data
					or communication is valid.</desc>
                </weakness>
                <weakness ref="CWE-650" name="Trusting HTTP Permission Methods on the Server Side" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T09:54:59.319000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The server contains a protection mechanism that assumes that
                        any URI that is accessed using HTTP GET will not cause a state change to the
                        associated resource. This might allow attackers to bypass intended access
                        restrictions and conduct resource modification and deletion attacks, since some
                        applications allow GET to modify state.
                    </desc>
                </weakness>
                <weakness ref="CWE-601" name="URL Redirection to Untrusted Site ('Open Redirect')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-11-16T15:08:54.189000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>A web application accepts a user-controlled input that
                        specifies a link to an external site, and uses that link in a Redirect. This
                        simplifies phishing attacks.
                    </desc>
                </weakness>
                <weakness ref="CWE-798" name="Use of Hard-coded Credentials" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-26T15:06:54.786000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="http-headers-authentication" name="Authenticate the HTTP headers added by a trusted proxy or SSO devices" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name "Bearer authentication" can be understood as "give access to the bearer of this token". The bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources: 
&lt;br /&gt; 
&lt;br /&gt;Authorization: Bearer &amp;lt;token&amp;gt; 
&lt;br /&gt; 
&lt;br /&gt;The Bearer authentication scheme was originally created as part of OAuth 2.0 in RFC 6750, but is sometimes also used on its own. Similarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL). 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;b&gt;Remediation:&lt;/b&gt; 
&lt;br /&gt;Bearer tokens included&amp;nbsp; in HTTP headers by a trusted proxy or SSO devices must be validated by sending them back to the identity provider(IdP) that issued them. This has the advantage that such tokens can be revoked by the IdP, for example as part of a global logout operation, without leaving previously logged-in sessions still active. Global logout might also make it necessary to validate JWTs with the IdP. 
&lt;br /&gt; 
&lt;br /&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="JSON Web Token for Java" url="https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html"/>
                        <reference name="Validating OAuth 2.0 Access Tokens with NGINX and NGINX Plus" url="https://www.nginx.com/blog/validating-oauth-2-0-access-tokens-nginx/"/>
                    </references>
                    <standards>
                        <standard ref="14.5.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.5.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Try to delete or modify HTTP headers that include bearer tokens issued by SSO devices using a man in the middle proxy a see if the operation is still successful. 
&lt;br /&gt; 
&lt;br /&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Testing for Exposed Session Variables (OTG-SESS-004)" url="https://www.owasp.org/index.php/Testing_for_Exposed_Session_Variables_(OTG-SESS-004)"/>
                            <reference name="Testing for Session Management Schema (OTG-SESS-001)" url="https://www.owasp.org/index.php/Testing_for_Session_Management_Schema_(OTG-SESS-001)"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-07T17:05:41.517000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="AVOID-API-KEYS" name='Avoid the usage of static "API keys" and similar' platform="" cost="0" risk="0" state="Recommended" owner="admin" library="" source="MANUAL">
                    <desc>Avoid to use of static &amp;quot;API keys&amp;quot; or similar when we have to access to
                        external systems. We have to create a mechanisms to generate, manage and delete API keys to
                        grant access to external systems.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="IA-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="IA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.1.1.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.10.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.10.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that the application is not using any static &amp;quot;API keys&amp;quot; or
                            similar.
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T11:40:44.660000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-639" name="Avoid using direct references to files" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        All data received from the client-side should be considered tainted and a potential risk,
                        regardless of the source or transport method. Many flaws in applications result from unsafe
                        handling of filenames or path data, for example directory traversal and arbitrary file
                        disclosure. Use of filenames or other direct references to objects such as files at the
                        server-side increases the risk of compromise of the system or unauthorized access to other
                        files, content, or functionality.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Avoid using direct references to files or validate file name.&lt;/li&gt;
                        &lt;li&gt;For example instead of using:&amp;nbsp;&lt;a&gt;www.example.com/open.jsp?file=details.txt&amp;nbsp;&lt;/a&gt;use:&amp;nbsp;&lt;a&gt;www.example.com/open.jsp?file=[GUID]&lt;/a&gt;&amp;nbsp;and
                        then use a lookup table on the server to associate the [GUID] value with file details.txt.&lt;/li&gt;
                        &lt;li&gt;Files should be stored outside the web-root to prevent an attacker browsing directly
                        to them.&lt;/li&gt;
                        &lt;li&gt;Do not use obscurity to prevent access; for example do not rely on renaming a file to
                        include a random string to prevent direct download or disclosure.&lt;/li&gt;
                        &lt;/ul&gt;If direct references are used to access files from within the web-root deviating from
                        recommended security practice, the following must be implemented:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;String input validation must be applied.&amp;nbsp; Identify and filter for directory
                        traversal meta-characters such as &amp;quot;../&amp;quot; or &amp;quot;..\&amp;quot; or &amp;quot;/&amp;quot;,
                        together with encoded variations and derivations.&lt;/li&gt;
                        &lt;li&gt;Use of a strict white-list of files that may be downloaded.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;When a parameter that represent a file or a file path is found on the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each of them try to change this parameter to gain access to unexpected files.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;For example:
                            &lt;a&gt;www.example.com/open.jsp?file=details.txt&lt;/a&gt;
                            &lt;br /&gt;Shouldn't be implemented that way and if so, it should not be possible to access
                            files outside of a set (i.e. file=/etc/passwd or file=
                            &lt;a href="http://www.google.com"&gt;http://www.google.com&lt;/a&gt;, etc.).
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:16.241000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="DIRECTORY_LISTING" name="Disable web server directory listing and ensure file metadata (e.g. .git) and backup files are not present within web roots" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Indexable directories allow an attacker to easily discover the existence of content on your web
                        server that should remain private.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Disable directory listings in the web - or application-server configuration by
                        default.&lt;/li&gt;
                        &lt;li&gt;Restrict access to unnecessary directories and files.&lt;/li&gt;
                        &lt;li&gt;Create an index (default) file for each directory.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="Apache - auto index" url="http://httpd.apache.org/docs/trunk/mod/mod_autoindex.html"/>
                        <reference name="Apache - directory listing" url="https://wiki.apache.org/httpd/DirectoryListings"/>
                        <reference name="Doc cenciz - Directory listing" url="http://doc.cenzic.com/sadoc9x14ba847/CPL0001023.htm"/>
                        <reference name="OWASP Directory_Indexing" url="https://www.owasp.org/index.php/OWASP_Periodic_Table_of_Vulnerabilities_-_Directory_Indexing"/>
                        <reference name="OWASP Insecure Indexing" url="https://www.owasp.org/index.php/File_System#Insecure_Indexing"/>
                    </references>
                    <standards>
                        <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that the directory listing is disabled in the web server.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-06T16:26:48.341000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ASVS-11.5" name="Do not share system information in HTTP headers and responses" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The application shall not share detailed version information of system components or other information that would assist attackers in the HTTP header or HTTP responses.</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that the HTTP responses and headers do not reveal sensitive data about the system.
                            Using a command line web client like telnet or netcat could help on this task.
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-24T08:56:31.081000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="RESTRICT-HTTP-METHODS" name="Ensure that the application accepts only a defined set of required HTTP request methods" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        HTTP offers a number of methods that can be used to perform actions on the web server. Many of
                        theses methods are designed to aid developers in deploying and testing HTTP applications. These
                        HTTP methods can be used for nefarious purposes if the web server is misconfigured.
                        Additionally, Cross Site Tracing (XST), a form of cross site scripting using the server's HTTP
                        TRACE method, is examined.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        While GET and POST are by far the most common methods that are used to access information
                        provided by a web server, the Hypertext Transfer Protocol (HTTP) allows several other (and
                        somewhat less known) methods. RFC 2616 (which describes HTTP version 1.1 which is the standard
                        today) defines the following eight methods:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;HEAD&lt;/li&gt;
                        &lt;li&gt;GET&lt;/li&gt;
                        &lt;li&gt;POST&lt;/li&gt;
                        &lt;li&gt;PUT&lt;/li&gt;
                        &lt;li&gt;DELETE&lt;/li&gt;
                        &lt;li&gt;TRACE&lt;/li&gt;
                        &lt;li&gt;OPTIONS&lt;/li&gt;
                        &lt;li&gt;CONNECT&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Some of these methods can potentially pose a security risk for a web application, as they allow
                        an attacker to modify the files stored on the web server and, in some scenarios, steal the
                        credentials of legitimate users. More specifically, the methods that should be disabled are the
                        following:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;PUT: &lt;/b&gt;This method allows a client to upload new files on the web
                        server. An attacker can exploit it by uploading malicious files (e.g.: an asp file that executes
                        commands by invoking cmd.exe), or by simply using the victim's server as a file repository.&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;DELETE:&lt;/b&gt; This method allows a client to delete a file on the web
                        server. An attacker can exploit it as a very simple and direct way to deface a web site or to
                        mount a DoS attack.&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;CONNECT: &lt;/b&gt;This method could allow a client to use the web server as
                        a proxy.&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;TRACE: &lt;/b&gt;This method simply echoes back to the client whatever string
                        has been sent to the server, and is used mainly for debugging purposes. This method, originally
                        assumed harmless, can be used to mount an attack known as Cross Site Tracing, which has been
                        discovered by Jeremiah Grossman (see links at the bottom of the page).&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If an application needs one or more of these methods, such as REST Web Services (which may
                        require PUT or DELETE), it is important to check that their usage is properly limited to trusted
                        users and safe conditions.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Ensure that the application accepts only the HTTP requests GET and POST. The HTTP requests
                        TRACE, PUT and DELETE are blocked.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP test HTTP methods" url="https://www.owasp.org/index.php/Test_HTTP_Methods_(OTG-CONFIG-006)"/>
                    </references>
                    <standards>
                        <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the application only accepts the request with the following HTTP
                            methods: GET and POST.&lt;/li&gt;
                            &lt;li&gt;Check that the application rejects and blocks the following requests with the HTTP
                            methods: TRACE, PUT and DELETE.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T09:56:11.228000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="harden-http-headers" name="Harden HTTP Headers" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  HTTP headers are a fundamental part of website security. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The Referrer-Policy HTTP header controls how much referrer information (sent via the Referer header) should be included with requests. This security header was designed to prevent cross-domain Referrer leakage.&amp;nbsp;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The Origin request header indicates where a fetch originates from. It doesn't include any path information, but only the server name. It is sent with CORS requests, as well as with POST requests. It is similar to the Referer header, but, unlike this header, it doesn't disclose the whole path.&lt;/li&gt; 
  &lt;li&gt;The Content-Disposition response header tells the browser to download a file rather than displaying it in the browser window.&lt;/li&gt; 
  &lt;li&gt;If a response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use a suitable &amp;quot;Referrer-Policy&amp;quot; header, such as "no-referer" or "same-origin".&lt;/li&gt; 
  &lt;li&gt;Don't use the Origin header for authentication or access control decisions, as the Origin header can easily be changed by an attacker.&lt;/li&gt; 
  &lt;li&gt;Use the Content-Disposition response header for file downloading in all API responses with the following directives: Content-Disposition: attachment; filename=&amp;quot;api.json&amp;quot; (or other appropriate filename for the content type).&lt;/li&gt; 
  &lt;li&gt;Use a content-type header specifying a safe character set (e.g., UTF-8, ISO 8859-1) in every HTTP response.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="HTML does not specify charset" url="https://portswigger.net/kb/issues/00800200_html-does-not-specify-charset"/>
                        <reference name="Origin Header" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin"/>
                        <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
                        <reference name="Referrer-Policy" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy"/>
                        <reference name="Reflected File Download" url="https://www.owasp.org/index.php/Reflected_File_Download"/>
                        <reference name="Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP)" url="https://tools.ietf.org/html/rfc6266"/>
                    </references>
                    <standards>
                        <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
  An easy way to access your HTTP security headers, as part of your response headers, is to fire up Chrome DevTools. To run this click into the "Network" panel press Ctrl + R (Cmd + R) to refresh the page. Click into your domain's request and you will see a section for your response headers. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if &amp;quot;Referrer-Policy&amp;quot; header exists in HTTP responses and has the right directives to prevent cross-domain Referrer leakage.&lt;/li&gt; 
  &lt;li&gt;From a penetration testing perspective you should look for insecure configurations as for example when the server returns back the Origin header in the Access-Control-Allow-Origin without any additional checks AND returns Access-Control-Allow-Credentials: true, which can lead to access of sensitive data. Note that this configuration is very insecure, and is not acceptable in general terms, except in the case of a public API that is intended to be accessible by everyone.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Try Reflected File Download input payloads to launch commands in the client machine. Reflected File Download is an attack combining URL path segments (now deprecated) with pages that reflects user inputs in the response. Generally web services vulnerable to JSONP Injection are used to deliver malware to end users.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Character encoding has a popular misuse. It is being used for encoding malicious injection strings in a way that obfuscates them. Try different character encoding schemes (like UTF-7) to bypass input validation filters, or take advantage of particular ways in which browsers render encoded text.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="A new security header: Referrer Policy" url="https://scotthelme.co.uk/a-new-security-header-referrer-policy/"/>
                            <reference name="OWASP Testing Guide Appendix D: Encoded Injection" url="https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_D:_Encoded_Injection"/>
                            <reference name="Reflected File Download - A New Web Attack Vector" url="https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/reflected-file-download-a-new-web-attack-vector/"/>
                            <reference name="Test Cross Origin Resource Sharing (OTG-CLIENT-007)" url="https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-04T16:26:41.554000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="minimise-parameters-request" name="Minimize the number of parameters in a request" platform="" cost="0" risk="0" state="Recommended" owner="admin" library="" source="MANUAL">
                    <desc>The HTTP requests shall contain only the necessary parameters to do the action (such as hidden fields, Ajax variables, cookies and header values). And the response shall return only with the required information. If unnecessary information is included in the HTTP request, we increase the attack surface unnecessarily.</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="8.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
  Verify that all requests have got only the necessary parameters to work. 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-04T16:08:25.625000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ASVS-18.8" name="Reject requests containing unexpected or missing content type headers" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Reject requests containing unexpected or missing content type headers with HTTP response status
                        &amp;quot;406 Unacceptable&amp;quot; or &amp;quot;415 Unsupported Media Type&amp;quot;.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Validate request content-type" url="https://www.owasp.org/index.php/REST_Security_Cheat_Sheet#Validate_request_content_types"/>
                        <reference name="Spring docs: CSRF" url="https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html"/>
                    </references>
                    <standards>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that HTTP requests with non-valid Content-type are rejected.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-24T09:00:10.234000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ASSIGN-WHITE" name="Use a white-list approach to assign values to variables" platform="" cost="2" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential
                        risk, regardless of the source or transport method.&amp;nbsp;Using mass-assignment or
                        auto-binding when accepting values from an untrusted source and mapping them to trusted server
                        side values increases the risk of tainted data being used unsafely.&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Bind individual values to specific fields, instead of binding whole objects.&lt;/li&gt;
                        &lt;li&gt;Use available features of the language or framework that allow specification of white
                        lists of attributes or fields that are allowed to be modified.&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;For example, applications written with Ruby on Rails can use the attr_accessible
                        (white list) or attr_protected (black list) macros in each class that may be used in mass
                        assignment.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;
                    </desc>
                    <implementations>
                        <implementation platform="Spring.java">
                            <desc>
                                ICAgIEBSZXF1ZXN0TWFwcGluZyh2YWx1ZSA9ICIvdmVudWUve2NpdHl9L3twbGFjZX0iLCBtZXRob2QgPSAiR0VUIikKICAgIHB1YmxpYyBTdHJpbmcgZ2V0VmVudWVEZXRhaWxzKFZlbnVlIHZlbnVlLCBNb2RlbCBtb2RlbCkgewogICAgICAgIC8vIHZlbnVlIG9iamVjdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGVkIHdpdGggY2l0eSBhbmQgcGxhY2UKICAgIH0=
                            </desc>
                        </implementation>
                    </implementations>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the framework the component is using.&lt;/li&gt;
                            &lt;li&gt;Check if this particular framework provides automatic binding of variables.&lt;/li&gt;
                            &lt;li&gt;Verify it is disabled or restricted.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:16.263000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-147" name="Validate input parameters to prevent HTTP Parameter Pollution" platform="" cost="0" risk="0" state="Recommended" owner="admin" library="" source="MANUAL">
                    <desc>All data received from external sources should be considered tainted and a potential risk,
                        regardless of the source or transport method. HTTP Parameter Pollution attacks result when
                        parameters are added or inserted into requests, and are inappropriately or unsafely handled by
                        the server. For example, injection of parameters into strings or cookies sent to the application
                        can result in the variables being interpreted out of sequence, exploiting flaws in the business
                        logic and flow.
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;p&gt;For example, there was a bug in the Blogger platform which illustrates this
                        vulnerability. The bug allowed malicious users to take ownership of the victim's blog by using the following HTTP request:&lt;/p&gt;
                        &lt;blockquote&gt;
                        &lt;p&gt;&lt;code&gt;POST /add-authors.do HTTP/1.1&lt;/code&gt;&lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;p&gt;&lt;code&gt;security_token=attackertoken&amp;amp;&lt;b&gt;blogID=attackerblogidvalue&lt;/b&gt;&amp;amp;&lt;b&gt;blogID=victimblogidvalue&lt;/b&gt;&amp;amp;authorsList=goldshlager19test%40gmail.com(attacker
                        email)&amp;amp;ok=Invite&lt;/code&gt;&lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;p&gt;The flaw resided in the authentication mechanism used by the web application, as the
                        security check was performed on the first&amp;nbsp;&lt;code&gt;blogID&lt;/code&gt;&amp;nbsp;parameter,
                        whereas the actual operation used the second occurrence.&lt;/p&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify parameters within the application used for authentication decisions, or
                            critical business logic.&lt;/li&gt;
                            &lt;li&gt;Send specially forged requests to the application in which those parameters are
                            duplicated, or passed through other methods (e.g. POST parameters in the URL as GET fields,
                            cookies as form fields etc.)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Review the application logic to ensure:&lt;/li&gt;
                            &lt;li&gt;The same parameter is for all the decisions.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Parameters received over unexpected or non compliant methods result in a security
                            exception.&lt;/li&gt;
                            &lt;li&gt;Duplicate parameters are identified and result in a security exception.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;The application should fail-safe; i.e. unexpected or suspicious behavior should
                            result in termination of the user's session and a security event being logged.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            A number of tools can be used to aid in testing:&amp;nbsp; &amp;nbsp;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Directly your browser with the Developer Tools&lt;/li&gt;
                            &lt;li&gt;Use a browser extension which allows you to modify the request and responses on
                            the fly (i.e. Tamper Data)&lt;/li&gt;
                            &lt;li&gt;Use a proxy which allows you to modify the request and response on the fly (i.e.
                            OWASP ZAP, Burp, Fiddler, etc.)&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP - Testing for HTTP Parameter Pollution" url="https://www.owasp.org/index.php/Testing_for_HTTP_Parameter_pollution_(OTG-INPVAL-004)"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-29T19:21:35.402000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-601" name="Whitelist to which URLs the application can redirect to" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The application should maintain a list of the URLs to which it can redirect. This whitelisting
                        can also be done by applying a regular expression. The application should only allow redirects
                        to trusted URLS.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="AC-4" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify the points of the application in which a redirection takes place.
                            Redirections are usually indicated by the use of the &amp;quot;&amp;quot;&amp;quot;&amp;quot;Location&amp;quot;&amp;quot;&amp;quot;&amp;quot;
                            HTTP header along with the 3xx code.&lt;/li&gt;
                            &lt;li&gt;If the content which is ending up inside the Location header is coming from user
                            input (URL string, Cookies, HTTP headers, forms, etc.), then.&lt;/li&gt;
                            &lt;li&gt;Using a browser, modify the input value which will be part of the Location header
                            to set up domains which should not be permitted.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T10:15:05.730000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-12" name="An adversary can gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation" state="Expose" source="MANUAL" owner="" library="">
                            <desc>This pattern of attack is defined by the selection of messages distributed over via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="http-headers-authentication" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-306">
                                    <controls>
                                        <control ref="http-headers-authentication" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-127" name="An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An adversary crafts a request to a target that results in the target listing/indexing
                                the content of a directory as output. One common method of triggering directory contents
                                as output is to construct a request containing a path that terminates in a directory
                                name rather than a file name since many applications are configured to provide a list of
                                the directory's contents when such a request is received. An adversary can use this to
                                explore the directory tree on a target as well as learn the names of files. This can
                                often end up revealing test files, backup files, temporary files, hidden files,
                                configuration files, user accounts, script contents, as well as naming conventions, all
                                of which can be used by an attacker to mount additional attacks.
                                &lt;br /&gt;
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="DIRECTORY_LISTING" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-548">
                                    <controls>
                                        <control ref="DIRECTORY_LISTING" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-62" name="An attacker crafts malicious web links and distributes them, typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application." state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker crafts malicious web links and distributes them (via web pages, email,
                                etc.), typically in a targeted manner, hoping to induce users to click on the link and
                                execute the malicious action against some third-party application. If successful, the
                                action embedded in the malicious link will be processed and accepted by the targeted
                                application with the users' privilege level.
                                &lt;br /&gt;This type of attack leverages the persistence and implicit trust placed in
                                user session cookies by many web applications today. In such an architecture, once the
                                user authenticates to an application and a session cookie is created on the user's
                                system, all following transactions for that session are authenticated using that cookie
                                including potential actions initiated by an attacker and simply &amp;quot;riding&amp;quot;
                                the existing session cookie.
                                &lt;br /&gt;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="ASVS-18.8" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-352">
                                    <controls>
                                        <control ref="ASVS-18.8" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-39" name="An attacker gain access by manipulation of authentication token or other sensitive data" state="Expose" source="MANUAL" owner="admin" library="">
                            <desc>In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="AVOID-API-KEYS" mitigation="100"/>
                                <control ref="minimise-parameters-request" mitigation="10"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-233">
                                    <controls>
                                        <control ref="minimise-parameters-request" mitigation="10"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-798">
                                    <controls>
                                        <control ref="AVOID-API-KEYS" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-73" name="An attacker inserts malicious characters (such as a XSS redirection) into a filename that is then used by the target software to generate HTML text or other potentially executable content" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attack of this type involves an attacker inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="harden-http-headers" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-116">
                                    <controls>
                                        <control ref="harden-http-headers" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-117" name="An attacker monitors HTTP headers from a target in order to gather information" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker monitors data streams to or from a target in order to gather information.
                                This attack may be undertaken in order to gather information to support a later attack,
                                or the data collected may be the end goal of the attack. This attack usually involves
                                sniffing network traffic, but may include observing other types of data streams, such as
                                radio. In most varieties of this attack, the attacker is passive and simply observes
                                regular communication, however in some variants the attacker may attempt to initiate the
                                establishment of a data stream or influence the nature of the data transmitted. However,
                                in all variants of this attack, and distinguishing this attack from other data
                                collection methods, the attacker is not the intended recipient of the data stream.
                                Unlike some other data leakage attacks, the attacker is observing explicit data channels
                                (e.g. network traffic) and reading the content. This differs from attacks that collect
                                more qualitative information, such as communication volume, or other information not
                                explicitly communicated via a data stream.
                            </desc>
                            <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="ASVS-11.5" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-200">
                                    <controls>
                                        <control ref="ASVS-11.5" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="open-redirect-threat" name="An uses redirection functionality in the application to conduct more convincing phishing attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An http parameter may contain a URL value and could cause the web application to
                                redirect the request to the specified URL. By modifying the URL value to a malicious
                                site, an attacker may successfully launch a phishing scam and steal user credentials.
                                Because the server name in the modified link is identical to the original site, phishing
                                attempts have a more trustworthy appearance.
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CWE-601" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-601">
                                    <controls>
                                        <control ref="CWE-601" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-267" name="Attackers encode potentially harmful input and submit it to bypass input filtering techniques" state="Expose" source="MANUAL" owner="" library="">
                            <desc>This attack leverages the possibility to encode potentially harmful input and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="harden-http-headers" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-173">
                                    <controls>
                                        <control ref="harden-http-headers" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-81" name=" Attackers inject, delete or tamper with the contents of web logs typically for the purposes of masking other malicious behavior" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to &amp;quot;Log Injection-Tampering-Forging&amp;quot; except that in this case, the attack is targeting the logs of the web server and not the application. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="harden-http-headers" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-116">
                                    <controls>
                                        <control ref="harden-http-headers" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-21" name="Attackers manipulate session IDs and resource IDs take advantage of the fact that some software accepts user input without verifying its authenticity" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attacks on session IDs and resource IDs take advantage of the fact that some software accepts user input without verifying its authenticity. For example, a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or indeed the process that wrote the message to the queue are authentic and authorized to do so. 
&lt;br /&gt;Many server side processes are vulnerable to these attacks because the server to server communications have not been analyzed from a security perspective or the processes &amp;quot;trust&amp;quot; other systems because they are behind a firewall. In a similar way servers that use easy to guess or spoofable schemes for representing digital identity can also be vulnerable. Such systems frequently use schemes without cryptography and digital signatures (or with broken cryptography). Session IDs may be guessed due to insufficient randomness, poor protection (passed in the clear), lack of integrity (unsigned), or improperly correlation with access control policy enforcement points. 
&lt;br /&gt;Exposed configuration and properties files that contain system passwords, database connection strings, and such may also give an attacker an edge to identify these identifiers. 
&lt;br /&gt;The net result is that spoofing and impersonation is possible leading to an attacker's ability to break authentication, authorization, and audit controls on the system. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="harden-http-headers" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-346">
                                    <controls>
                                        <control ref="harden-http-headers" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-137-MASS" name="Functionality could be subverted through mass assignment" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If the application binds parameters to backend objects, then attackers could
                                potentially
                                set fields on those objects that were not designed to be modified by the user.
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="75"/>
                            <references/>
                            <controls>
                                <control ref="ASSIGN-WHITE" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-915">
                                    <controls>
                                        <control ref="ASSIGN-WHITE" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-460" name="HTTP Parameter Pollution (HPP)" state="Expose" source="MANUAL" owner="admin" library="">
                            <desc>An attacker overrides or adds HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="CWE-147" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-235">
                                    <controls>
                                        <control ref="CWE-147" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-101" name="Unauthorised data could be accessed by manipulating parameters sent to the application" state="Expose" source="MANUAL" owner="" library="">
                            <desc>The application could be tricked into exposing data to unauthorized users by
                                manipulating the parameters it accepts. All data received from the client side could be
                                subject to manipulation, including fields like cookies and HTTP headers, if these are
                                used as inputs to the application.
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CWE-147" mitigation="33"/>
                                <control ref="CWE-639" mitigation="33"/>
                                <control ref="RESTRICT-HTTP-METHODS" mitigation="34"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-20">
                                    <controls>
                                        <control ref="CWE-147" mitigation="33"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-22">
                                    <controls>
                                        <control ref="CWE-639" mitigation="33"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-650">
                                    <controls>
                                        <control ref="RESTRICT-HTTP-METHODS" mitigation="34"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="HTTP-SERVICE:AUTHZ" name="HTTP-Service: Authorization" desc="Server side access control functions for a web application" tags="" position="35" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-384" name="Application allows user to use a session ID not produced by the application" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-06T15:58:37.946000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>&lt;div&gt;
                    Authenticating a user, or otherwise establishing a new user session, without invalidating any session identifier gives an attacker the opportunity to steal authenticated sessions. Such a scenario is commonly observed when: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.&lt;/li&gt; 
                    &lt;li&gt;An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session.&lt;/li&gt; 
                    &lt;li&gt;The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session.&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt;</desc>
                </weakness>
                <weakness ref="COOKIE-WEAKNESS" name="Cookie path and domain attributes set too liberally" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-27T10:24:40.445000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>if an application sets a cookie with too open domain and path attributes, an attacker can
                        exploit this situation to gain access to the cookie and hence to the resources that this cookie
                        protect.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;An example of a wide open and wrongly scoped cookie would be one with the domain
                        attribute set to the whole domain = .example.org
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-425" name="Direct Request ('Forced Browsing')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-425: Direct Request ('Forced Browsing')" url="https://cwe.mitre.org/data/definitions/425.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:19.816000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The web application does not adequately enforce appropriate authorization on all restricted
                        URLs, scripts, or files.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;Web applications susceptible to direct request attacks often make the false
                        assumption that such resources can only be reached through a given navigation path and so only
                        apply authorization at certain points in the path.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-539" name="Information Exposure Through Persistent Cookies" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T15:16:05.945000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Persistent cookies are cookies that are stored on the browser's                   hard drive. This can cause security and privacy issues depending on the                 information stored in the cookie and how it is accessed.</desc>
                </weakness>
                <weakness ref="CWE-614" name="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" url="https://cwe.mitre.org/data/definitions/614.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-21T16:50:31.325000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the
                        user agent to send those cookies in plaintext over an HTTP session.
                    </desc>
                </weakness>
                <weakness ref="CWE-1004" name="Sensitive Cookie Without 'HttpOnly' Flag" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T15:49:47.653000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag. &lt;div&gt;  The HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS. &lt;/div&gt;</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-285" name="Apply authorization checks to segregate and control access to user data" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        &lt;div&gt;
                        Applications protecting sensitive or otherwise restricted resources must ensure only appropriate
                        and authorized users may access the application data. It is important that an application
                        prevents unauthorized users gaining inappropriate access to each other's data; although user A
                        and user B may both be trusted to access data within the application, they may be authorized to
                        only access different subsets of the protected resources.&amp;nbsp; E.g. user A should not be
                        able to access user B's personal data by manipulating a request (typical examples are
                        manipulation of an ID value or other object reference sent in the URL or body of an HTTP
                        request).
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        It is not sufficient to rely on obscurity, for example obfuscated or secret URLs or filenames.
                        The application must validate each request for protected data against the proven identity of the
                        user. Before providing access to restricted resources the application must:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure the user has undergone appropriate authentication (identification and
                        verification, or ID&amp;amp;V). E.g. they must have provided their identity and confirmed this
                        with a password, token, or other verification. Typically this will be through checking the
                        validity of the session token issued after login.&lt;/li&gt;
                        &lt;li&gt;Confirm the user is entitled to access the data or resource they are requesting. E.g.
                        their confirmed identify checked against a server-side access control matrix to determine
                        whether they may access the requested resource.&lt;/li&gt;
                        &lt;li&gt;Access controls should be granular, and allow for access to individual resources to be
                        issued to individual users or roles.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        URL and asset based access control is provided by most web-frameworks, and it is preferable to
                        use an established and proven framework.
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
                        <standard ref="9.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.2.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-7" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
                        <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Using two different browsers configured with an intercepting proxy.&lt;/li&gt;
                            &lt;li&gt;Login as user A in browser A.&lt;/li&gt;
                            &lt;li&gt;Login as user B in browser B.&lt;/li&gt;
                            &lt;li&gt;For every operation that displays sensitive data belonging to user A:&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Perform the operation as user A and view their sensitive data&lt;/li&gt;
                            &lt;li&gt;Obtain the session ID of user B&lt;/li&gt;
                            &lt;li&gt;Configure the proxy to intercept&lt;/li&gt;
                            &lt;li&gt;Perform the operation as user A again, but this time intercept all the requests
                            and replace user A's session ID with that of user B&lt;/li&gt;
                            &lt;li&gt;Ensure that user A's sensitive data is &lt;b&gt;not &lt;/b&gt;visible&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:14.266000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="secure-session-generation-and-expiration" name="Implement a secure Session Generation and Expiration" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt; 
 &lt;div&gt;
   The session ID exchange mechanism based on cookies provides multiple security features in the form Session Generation and Expiration User state is tracked in a session. This session is typically stored on the server for traditional web based session management. A session identifier is then given to the user so the user can identify which server-side session contains the correct user data. The client only needs to maintain this session identifier, which also keeps sensitive server-side session data off of the client. 
 &lt;/div&gt; 
 &lt;div&gt;
   Here are a few controls to consider when building or implementing session management solutions: 
 &lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure that the session id is long, unique and random. The session ID length must be at least 128 bits (16 bytes)&lt;/li&gt; 
  &lt;li&gt;The session ID must be unpredictable (random enough) to prevent guessing attacks, where an attacker is able to guess or predict the ID of a valid session through statistical analysis techniques. For this purpose, a good PRNG (Pseudo Random Number Generator) must be used. The session ID value must provide at least 64 bits of entropy (if a good PRNG is used, this value is estimated to be half the length of the session ID).&lt;/li&gt; 
  &lt;li&gt;The application shall generate a new session or at least rotate the session id during authentication and re-authentication.&lt;/li&gt; 
  &lt;li&gt;The application shall not treat OAuth and refresh tokens as their own session identifiers. Moreover, it shall allow users to terminate trust relationships with linked applications.&lt;/li&gt; 
  &lt;li&gt;The CSPs (Credential Service Provider) shall re-authenticate the subscriber if its has not been authenticated since a certain inactivity period (this period is set by relying parties to CSPs). CSPs shall inform to RP (Relying Parties) the last authentication time, to know if the shall be re-authenticated.&lt;/li&gt; 
  &lt;li&gt;When a user chooses to log out (or otherwise has their session terminated), the user session must be terminated at the server-side, not solely at the client-side (for example by deleting or reissuing a session ID token/cookie).&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Revoke user sessions at the server-side.&lt;/li&gt; 
   &lt;li&gt;Redirect users to the login page, or provide a login prompt to them in context.&lt;/li&gt; 
   &lt;li&gt;Where possible, ensure the session is not reused by the application server.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;The application shall implement an idle timeout after a period of inactivity and an absolute maximum lifetime for each session, after which users must re-authenticate. If the application has implemented a functionality to be always logged in, the application shall force to users to be re-authenticated for some sensitive actions.&lt;/li&gt; 
  &lt;li&gt;The length of the timeouts should be inversely proportional with the value of the data protected.&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;30 days&lt;/li&gt; 
   &lt;li&gt;12 hours or 30 minutes of inactivity, 2FA optional&lt;/li&gt; 
   &lt;li&gt;12 hours or 15 minutes of inactivity, with 2FA&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP CheatSheet Series: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
                        <reference name="OWASP Proactive Controls [C6]" url="https://www.owasp.org/index.php/OWASP_Proactive_ControlsOWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="7.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="7.1.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="7.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="7.2.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.6.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ul&gt; 
 &lt;li&gt;Check that the sessions is renewed following the steps below:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Log in to the application.&lt;/li&gt; 
  &lt;li&gt;Open another browser and go to the login page.&lt;/li&gt; 
  &lt;li&gt;Log in to the application for the second time.&lt;/li&gt; 
  &lt;li&gt;Check that the old session and session id are removed.&lt;/li&gt; 
  &lt;li&gt;Check that a new session is created with new session id.&lt;/li&gt; 
  &lt;li&gt;Check that the old and new session ids are different.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Verify that sessions tokens are generated from a source with sufficient entropy and they are not predictable.&lt;/li&gt; 
 &lt;li&gt;Check that the refresh tokens and OAuth sessions with linked applications are not terminated by users.&lt;/li&gt; 
 &lt;li&gt;Check that the CSPs shall force to the RP to re-authenticate after a certain inactivity period of time.&lt;/li&gt; 
 &lt;li&gt;Check that the logout and expiration invalidate the session token, following the steps below:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Open a browser.&lt;/li&gt; 
  &lt;li&gt;Authenticate as a user A.&lt;/li&gt; 
  &lt;li&gt;Get the Session ID and note it.&lt;/li&gt; 
  &lt;li&gt;Logout of the service.&lt;/li&gt; 
  &lt;li&gt;Set up the noted Session ID.&lt;/li&gt; 
  &lt;li&gt;Try to access an authenticated section of the service and you should not be able to do it as user A.&lt;/li&gt; 
  &lt;li&gt;To edit the cookies you can either use a proxy (i.e. OWASP ZAP, Burp, Fiddler, etc.) or a browser extension which should allow you to tamper the cookies (i.e. Tamper Data, Cookie Manager, etc.).&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Check that the session expires after a certain inactivity period following the steps below:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Verify the expected inactive timeout.&lt;/li&gt; 
  &lt;li&gt;Check 'normal' use through a browser:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Go to the authentication feature of the component.&lt;/li&gt; 
   &lt;li&gt;Authenticate as a user.&lt;/li&gt; 
   &lt;li&gt;Leave the session open for a given time (check the expiration time that has been agreed to be implemented).&lt;/li&gt; 
   &lt;li&gt;Revisit an authenticated page and determine if the session has expired (e.g. the session is no longer authenticated).&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;Check the control is enforced at the server side and not using code in the browser:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and determine which cookies or other tokens are used to maintain session state. Alternatively, capture an authenticated application request for replay.&lt;/li&gt; 
   &lt;li&gt;Store and replay the request after the timeout period to see if the application response with authenticated data.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;Review application operation and determine if any behavior artificially holds the session open, for example, heartbeat requests or calls to update data feeds sent from the client to the server are sometimes mistakenly interpreted as user activity, holding the session open.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T14:47:24.688000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CSD-SESS-FED" name="Provide a section with a list of all active sessions and information about them" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The application should provide a section with a list of all the active sessions. That list should contain as much information as possible and should allow the user to invalidate all sessions or any of them selectively.</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="AC-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="7.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="3.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Find the section with the list of the active sessions within the application
                            features&lt;/li&gt;
                            &lt;li&gt;Open an authenticated session on two or three different browsers.&lt;/li&gt;
                            &lt;li&gt;Check the sessions are listed.&lt;/li&gt;
                            &lt;li&gt;Close the sessions by logging out of the application.&lt;/li&gt;
                            &lt;li&gt;Check the sessions listed relating to the ones you created have now disappeared.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-06T16:12:38.625000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="secure-attributes-of-cookies" name="Secure the Cookies with their attributes" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  The session ID exchange mechanism based on cookies provides multiple security features in the form of cookie attributes that can be used to protect the exchange of the session ID: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Secure and HttpOnly Attribute:&lt;/b&gt;&amp;nbsp;a secure cookie is only sent to the server with an encrypted request over the HTTPS protocol. Even with Secure, sensitive information shall never be stored in cookies, as they are inherently insecure and this flag can't offer real protection. Starting with Chrome 52 and Firefox 52, insecure sites (http:) can't set cookies with the Secure directive. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To mitigate cross-site scripting (XSS) attacks, HttpOnly cookies are inaccessible to JavaScript's Document.cookie API; they are only sent to the server. For example, cookies that persist server-side sessions don't need to be available to JavaScript, and the HttpOnlyflag shall be set. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="background-color: white;"&gt;Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="background-color: white;"&gt;&lt;br /&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;SameSite Attribute: &lt;/b&gt;we shall configure the SameSite attribute to limit the exposure to against cross-site request forgery attacks. There are two possibilities: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;b&gt;Strict:&lt;/b&gt; the browser will only send cookies if the request originated from the website that set the cookie. If the request originated from a different URL than the URL of the current location, none of the cookies tagged with the Strict attribute will be included.&lt;/li&gt; 
  &lt;li&gt;&lt;b&gt;Lax:&lt;/b&gt; if the attribute is set to Lax, same-site cookies are withheld on cross-site subrequests, such as calls to load images or frames, but will be sent when a user navigates to the URL from an external site, for example, by following a link.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By default the SameSite is not configured, we shall configure with one of the above types, as we show below: 
&lt;/div&gt; 
&lt;div&gt;
  Set-Cookie: key=value; SameSite=Strict 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Domain and Path Attributes:&lt;/b&gt; The session token value issued after users have successfully identified and authenticated themselves is of equivalent value to the secrets the user presents to login, and must be protected accordingly.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;If the cookie domain attribute is too liberal, the cookie may be accessible to other hosts within the parent domain. This is a particular issue in multi-tenanted hosting, or where applications are delivered as subdomains of a third party parent domain.&lt;/li&gt; 
  &lt;li&gt;If the cookie path attribute is not appropriately restricted, the session token may be accessible from other applications or content on the server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The domain and the path attributes for the session cookie should be restricted to the fully qualified hostname on which the application is running. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For example: 
&lt;/div&gt; 
&lt;div&gt;
  Set-Cookie: session=token; Path=/theapp/; Domain=myapp.example.com; secure; HTTPOnly 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;__Host- prefix:&lt;/b&gt; ensure that all Cookies with a name starting with __Host- must be: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;set with the secure flag,&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;from a secure page (HTTPS),&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;not have a domain specified (and therefore aren't sent to subdomains)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;and the path must be &amp;quot;/&amp;quot;.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="__Host-Prefix" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"/>
                        <reference name="HttpOnly" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"/>
                        <reference name="Owasp Cheatsheet: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
                        <reference name="OWASP Proactive Controls [C6]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                        <reference name="OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md"/>
                    </references>
                    <standards>
                        <standard ref="7.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="7.1.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ul&gt;  &lt;li&gt;Using a browser, open the Web Developer tools.&amp;nbsp;&amp;nbsp;&lt;/li&gt;  &lt;li&gt;Load the Network inspection tab.&amp;nbsp;&lt;/li&gt;  &lt;li&gt;Load the endpoints of the application which set cookies (send the Set-Cookie HTTP header).&lt;/li&gt;  &lt;li&gt;Check that within the HTTP response, the Set-Cookie has got:&lt;/li&gt;  &lt;ul&gt;   &lt;li&gt;the path and domain attributes set to the most restrictive path and domain respectively.&lt;/li&gt;   &lt;li&gt;'HttpOnly' and 'secure' flag set and configured&lt;/li&gt;   &lt;li&gt;'SameSite' attribute configured.&lt;/li&gt;  &lt;/ul&gt;  &lt;li&gt;Check that all Cookies with a name starting with __Host- have got:&lt;/li&gt;  &lt;ul&gt;   &lt;li&gt;set with the secure flag,&amp;nbsp;&lt;/li&gt;   &lt;li&gt;from a secure page (HTTPS),&amp;nbsp;&lt;/li&gt;   &lt;li&gt;not have a domain specified (and therefore aren't sent to subdomains)&amp;nbsp;&lt;/li&gt;   &lt;li&gt;and the path must be &amp;quot;/&amp;quot;.&lt;/li&gt;  &lt;/ul&gt; &lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T15:19:22.428000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ASVS-2014-3.6" name="Session ID's should be transmitted securely" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        The session token value issued after users have successfully identified and authenticated
                        themselves is of equivalent value to the secrets the user presents to login, and must be
                        protected accordingly. Data passed in the URL (address bar) between client and server is likely
                        to be exposed in logs on the server, or intermediate devices (such as proxies or other network
                        devices), or in local browser logs/history. A common mistake is, for example, to pass a
                        SessionID value as a parameter in the URL of a get request between hosts. To mitigate the risk
                        of exposure of sensitive data, it should only be sent in the body of an HTTP message (for
                        example a POST request), or in the HTTP headers (either standard headers such as the Cookie
                        values, or a custom X- header).
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure sensitive, private, or otherwise restricted data is not sent in a URL value
                        'GET' parameter.&lt;/li&gt;
                        &lt;li&gt;Specifically, never the session ID token in the URL or over unencrypted transport.&lt;/li&gt;
                        &lt;li&gt;Pass data only in appropriately protected fields in the body or headers, for example:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;A session Cookie (e.g. JSESSIONID, ASP.NET_SessionID)&lt;/li&gt;
                        &lt;li&gt;A POST parameter (e.g. a token in the HTTP request body, or JSON parameter)&lt;/li&gt;
                        &lt;li&gt;A standard or bespoke HTTP header (Authorization: X-Session header)&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;ul&gt;
                        &lt;/ul&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Using a browser, authenticate to the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For every authenticated request, check that the session ID is never part of the
                            URL and is only sent as an HTTP header (i.e. a cookie).&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.301000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="ACCESS SENSITIVE DATA" name="Access sensitive data" desc="" library="">
                    <threats>
                        <threat ref="ASVS-2014-3.12" name="Attackers could compromise users' sessions by comproming the session cookie" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If the same session cookie is used for multiple applications, and one of those
                                applications has a vulnerability which discloses the session ID. Then by compromising
                                the session cookie in one application, the attacker would have access to the ID for the
                                other.
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="75"/>
                            <references/>
                            <controls>
                                <control ref="ASVS-2014-3.6" mitigation="34"/>
                                <control ref="secure-attributes-of-cookies" mitigation="66"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-384">
                                    <controls>
                                        <control ref="ASVS-2014-3.6" mitigation="34"/>
                                    </controls>
                                </weakness>
                                <weakness ref="COOKIE-WEAKNESS">
                                    <controls>
                                        <control ref="secure-attributes-of-cookies" mitigation="66"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-87" name="Attackers gain access to data or services by directly accessing the resources" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker employs forceful browsing to access portions of a website that are
                                otherwise unreachable through direct URL entry.&amp;nbsp;
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;Usually, a front controller or similar design pattern is employed to protect
                                access to portions of a web application.&amp;nbsp;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;Forceful browsing enables an attacker to access information, perform
                                privileged operations and otherwise reach sections of the web application that have been
                                improperly protected.
                                &lt;br /&gt;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="CSD-SESS-FED" mitigation="10"/>
                                <control ref="CWE-285" mitigation="20"/>
                                <control ref="secure-session-generation-and-expiration" mitigation="70"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-384">
                                    <controls>
                                        <control ref="CSD-SESS-FED" mitigation="10"/>
                                        <control ref="secure-session-generation-and-expiration" mitigation="70"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-425">
                                    <controls>
                                        <control ref="CWE-285" mitigation="20"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-341" name="Attackers gain access to users data by manipulating server side code" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Server Side Code Injection happens when an attacker is able to direct input under his control and mix it with executed code on server side by modifying the logic executed on it.&amp;nbsp;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="secure-attributes-of-cookies" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-1004">
                                    <controls>
                                        <control ref="secure-attributes-of-cookies" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-102" name="Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. &lt;br /&gt;This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token. &lt;br /&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="secure-attributes-of-cookies" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-614">
                                    <controls>
                                        <control ref="secure-attributes-of-cookies" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-31" name="This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems" state="Expose" source="MANUAL" owner="" library="">
                            <desc>This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. &lt;br /&gt;
&lt;ul&gt; &lt;li&gt;The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. &lt;/li&gt; &lt;li&gt;The second form of this attack involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the attacker to impersonate the remote user/session. &lt;/li&gt; &lt;li&gt;The third form is when the cookie's content is modified by the attacker before it is sent back to the server. Here the attacker seeks to convince the target server to operate on this falsified information. &lt;/li&gt;
&lt;/ul&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="secure-attributes-of-cookies" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-539">
                                    <controls>
                                        <control ref="secure-attributes-of-cookies" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="HTTP-SERVICE:FILEUPLOAD" name="HTTP Service: File Upload" desc="" tags="" position="43" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-770" name="Allocation of Resources Without Limits or Throttling" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-04T13:20:09.269000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on how many resources can be allocated, in violation of the intended security policy for that actor.</desc>
                </weakness>
                <weakness ref="CWE-159" name="Failure to Sanitize Special Element" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-01T09:54:10.064000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Weaknesses in this attack-focused category do not properly
					filter and interpret special elements in user-controlled input which could cause
					adverse effect on the software behavior and integrity.</desc>
                </weakness>
                <weakness ref="CWE-646" name="Reliance on File Name or Extension of Externally-Supplied File" state="0" impact="75">
                    <test expiryDate="" expiryPeriod="0">
                        <steps>If the web application allows file upload, it is important to check if it is possible to upload HTML content. For instance, if HTML or TXT files are allowed, XSS payload can be injected in the file uploaded. You should also verify if the file upload allows setting arbitrary MIME types. 
&lt;br /&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Testing for Stored Cross site scripting (OTG-INPVAL-002)" url="https://www.owasp.org/index.php/Testing_for_Stored_Cross_site_scripting_(OTG-INPVAL-002)"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-26T11:37:32.282000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion. 
&lt;br /&gt;</desc>
                </weakness>
                <weakness ref="CWE-94" name="The application execute code retrieved from untrusted data sources" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-30T15:43:43.289000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The execution of untrusted code grants direct control over the application; allowing an
                        attacker to perform arbitrary operations, steal sensitive data, gain control over the system or
                        use the application to launch malicious attacks.&amp;nbsp;
                    </desc>
                </weakness>
                <weakness ref="UNTRUSTED-FILE-HANDLING" name="The system fails to validate file contents before processing it" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-30T15:43:45.560000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Files uploaded from untrusted sources could contain malicious data that subverts the loading
                        mechanism itself or grants unauthorized access to the system when executed.
                    </desc>
                </weakness>
                <weakness ref="WEB-PATH-ROOT" name="Uploaded files are stored within the webroot path" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-12-27T18:01:27.131000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>If uploaded files are stored within the webroot path, they might be accessible to unauthorized
                        parties.&amp;nbsp;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="template-val" name="Assure that the application protects against template injection attacks" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Assure that: 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; The application protects against template injection attacks by ensuring that any user input being included is sanitized or sandboxed.&lt;/li&gt; 
  &lt;li&gt;The application sanitizes, disables, or sandboxes user-supplied scriptable or expression template language content, such as Markdown, CSS or XSL stylesheets, BBCode, or similar.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Securing Cascading Style Sheets" url="https://cheatsheetseries.owasp.org/cheatsheets/Securing_Cascading_Style_Sheets_Cheat_Sheet.html"/>
                    </references>
                    <standards>
                        <standard ref="5.2.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.8" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.8" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.8" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Tplmap is able to detect and exploit SSTI (Server Side Template Injection) in a range of template engines to get access to the underlying file system and operating system. Run it against the URL to test if the parameters are vulnerable.</steps>
                        <notes></notes>
                        <references>
                            <reference name="EXPLOITING SERVER SIDE TEMPLATE INJECTION WITH TPLMAP" url="https://www.owasp.org/images/7/7e/Owasp_SSTI_final.pdf"/>
                            <reference name="Testing for CSS Injection (OTG-CLIENT-005)" url="https://www.owasp.org/index.php/Testing_for_CSS_Injection_(OTG-CLIENT-005)"/>
                            <reference name="Tplmap" url="https://github.com/epinna/tplmap"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-31T15:31:26.698000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="WEB-EXEC-DATA" name="Do not execute files received from untrusted sources" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;&lt;/div&gt; 
&lt;div&gt;
  Untrusted file data sources could contain malicious software, data sources should not be executed even if an anti-malware scanner has been run against the file.&amp;nbsp;&amp;nbsp; 
&lt;/div&gt;This includes use of pre-processing that may result in execution (e.g. eval of tainted content).</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.5.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the data entry points for the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the source of this data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify this data is not being executed or permanently stored at any point.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T13:06:44.055000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ASVS-16.6" name="Do not store user files under the web root" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Storage of user-controlled content in folders accessible through the web-server increases the risk of exposure, and also facilitates attacks relying on the upload and execution, or distribution, of malicious content.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the case of proprietary user data, it may also expose the restricted data to compromise through direct browsing or direct object reference manipulation if access controls are not securely implemented 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Store uploaded files and other content in segregated folders outside of the web root directory tree to prevent direct access.&lt;/li&gt; 
  &lt;li&gt;File content that is intended to be accessed by users from the client-side should be streamed with appropriate MIME types.&lt;/li&gt; 
  &lt;li&gt;Ensure appropriate permissions are applied to the files and the folders; they should only be readable by the relevant service accounts, and should not be executable.&lt;/li&gt; 
  &lt;li&gt;Ideally, the folder containing the files should not be accessible through the web-application even in the event of a directory traversal or server-side file include vulnerability.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.12.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.12.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the data sources that the application is using to retrieve data (other
                            systems, upload methods, etc.).&lt;/li&gt;
                            &lt;li&gt;Check this data is being stored outside of the WebRoot so there will be no way to
                            access them from external locations.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T13:04:03.010000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="WEB-FILE-DATA" name="Do not use untrusted client-side data in server-side file operations" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        The application may be required to base server-side file operations based on client-side
                        actions. This can expose the application to attack through remote or local file-inclusion, or
                        remote code execution attacks if unsafe data is used in file inclusion, class loader, or
                        reflection capabilities.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Tainted, untrusted, client-side data must not be used directly in server-side file
                        load operations.&lt;/li&gt;
                        &lt;li&gt;Where server-side operations are dependent on client-side input, this should be mapped
                        to pre-defined operations on the server-side rather than using tainted client-side input
                        directly.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SI-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify sources of data into the application. &lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Classify them into trusted and untrusted. &lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;if they are untrusted, make sure there is a validation and sanitization mechanism
                            before sending this data into another system (Database, Command, etc.).&lt;br /&gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T12:59:27.639000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-646-CSP" name="Ensure that user-uploaded files are served by either octet stream downloads, or from an unrelated domain" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Ensure that user-uploaded files - if required to be displayed or downloaded from the application - are served by either octet stream downloads, or from an unrelated domain, such as a cloud file storage bucket. Implement a suitable content security policy to reduce the risk from XSS vectors or other attacks from the uploaded file.</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
                    </references>
                    <standards>
                        <standard ref="1.12.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.12.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
  You can use http-security-headers NSE(Nmap Scripting Engine) script to test the security headers of your site. This script checks for the HTTP response headers related to security given in OWASP Secure Headers Project and gives a brief description of the header and its configuration value. 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;Example Usage: 
 &lt;br /&gt; 
 &lt;br /&gt;nmap -p &amp;lt;port&amp;gt; --script http-security-headers &amp;lt;target&amp;gt; 
 &lt;br /&gt; 
 &lt;br /&gt;Script Output 
 &lt;br /&gt; 
 &lt;br /&gt;80/tcp open&amp;nbsp; http&amp;nbsp;&amp;nbsp;&amp;nbsp; syn-ack 
 &lt;br /&gt;| http-security-headers: 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp; Strict_Transport_Security: 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Header: Strict-Transport-Security: max-age=15552000; preload 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp; Public_Key_Pins_Report_Only: 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Header: Public-Key-Pins-Report-Only: max-age=500; pin-sha256=&amp;quot;WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=&amp;quot;; pin-sha256=&amp;quot;r/mIkG3eEpVdm+u/ko/cwxzOMo1bk4TyHIlByibiA5E=&amp;quot;; pin-sha256=&amp;quot;q4PO2G2cbkZhZ82+JgmRUyGMoAeozA+BSXVXQWB8XWQ=&amp;quot;; report-uri=&amp;quot;http://reports.fb.com/hpkp/&amp;quot; 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp; X_Frame_Options: 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Header: X-Frame-Options: DENY 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Description: The browser must not display this content in any frame. 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp; X_XSS_Protection: 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Header: X-XSS-Protection: 0 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Description: The XSS filter is disabled. 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp; X_Content_Type_Options: 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Header: X-Content-Type-Options: nosniff 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Will prevent the browser from MIME-sniffing a response away from the declared content-type. 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp; Content-Security-Policy: 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Header: Content-Security-Policy: script-src 'self' 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Description: Loading policy for all resources type in case of a resource type dedicated directive is not defined (fallback). 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp; X-Permitted-Cross-Domain-Policies: 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Header: X-Permitted-Cross-Domain-Policies: none 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Description : No policy files are allowed anywhere on the target server, including this master policy file. 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp; Cache_Control: 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Header: Cache-Control: private, no-cache, no-store, must-revalidate 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp; Pragma: 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Header: Pragma: no-cache 
 &lt;br /&gt;|&amp;nbsp;&amp;nbsp; Expires: 
 &lt;br /&gt;|_&amp;nbsp;&amp;nbsp;&amp;nbsp; Header: Expires: Sat, 01 Jan 2000 00:00:00 GMT 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Http-security-headers NSE Script" url="https://nmap.org/nsedoc/scripts/http-security-headers.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-26T11:40:12.317000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="secure-file-storage" name="Ensure the application is implementing file storage protections for uploaded files" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Uploaded files represent a significant risk to applications. In this scenario one of the involved risks is related on how the application manage the file storage for the uploaded files. A cheap and easy way to perform a denial-of-service attack is to upload a very large file, in the hope that the server runs out of space. 
&lt;br /&gt;It is necessary to limit (per-user) the amount of resources that are accessible to unprivileged users and allow the system administrator to configure these limits. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;b&gt;Remediation: &lt;/b&gt; 
&lt;br /&gt;The application shall: 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;Not allow to accept large files that could fill up storage or cause a denial of service attack.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check compressed files to look for &amp;quot;zip bombs&amp;quot; - small input files that will decompress into huge files thus exhausting file storage limits.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Set a file size quota and maximum number of files per user is enforced to ensure that a single user cannot fill up the storage with too many files, or excessively large files.&lt;/li&gt; 
&lt;/ul&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Unrestricted File Upload" url="https://www.owasp.org/index.php/Unrestricted_File_Upload"/>
                    </references>
                    <standards>
                        <standard ref="12.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>In a preproduction environment: 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check if the application refuses to upload big files.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check if there exists a limit for the number of files a user can upload.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;If it's allowed to upload zip files, test if the zip bomb attack can be feasible.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Test Upload of Malicious Files (OTG-BUSLOGIC-009)" url="https://www.owasp.org/index.php/Test_Upload_of_Malicious_Files_(OTG-BUSLOGIC-009)"/>
                            <reference name="Test Upload of Unexpected File Types (OTG-BUSLOGIC-008)" url="https://www.owasp.org/index.php/Test_Upload_of_Unexpected_File_Types_(OTG-BUSLOGIC-008)"/>
                            <reference name="Zip bomb" url="https://github.com/AbhiAgarwal/notes/wiki/Zip-bomb"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-04T13:23:28.198000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="FILE-SCAN" name="Perform content scanning on untrusted files when uploaded" platform="" cost="2" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  The application should perform validation and sanitization on all tainted content from the client-side, including uploaded files.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Content/malware scanning performed against the file (e.g. next generation anti-virus) to detect suspicious, dangerous, or unexpected content.&lt;/li&gt; 
  &lt;li&gt;Content analysis should also be used to reject unexpected or dangerous file formats that may harbor malicious code, for example encrypted word, pdf or other office documents or archives, or other files with hidden or executable payloads.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Verify the component has the capability of scanning externally retrieved files
                            which are untrusted.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the component and verify this scanning is actually happening for all the
                            untrusted files which are received.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T12:54:43.303000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ASSIGN-WHITE" name="Use a white-list approach to assign values to variables" platform="" cost="2" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential risk, regardless of the source or transport method.&amp;nbsp;Using mass-assignment or auto-binding when accepting values from an untrusted source and mapping them to trusted server side values increases the risk of tainted data being used unsafely.&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bind individual values to specific fields, instead of binding whole objects.&lt;/li&gt; 
 &lt;li&gt;Use available features of the language or framework that allow specification of white lists of attributes or fields that are allowed to be modified.&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For example, applications written with Ruby on Rails can use the attr_accessible (white list) or attr_protected (black list) macros in each class that may be used in mass assignment.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt;</desc>
                    <implementations>
                        <implementation platform="Spring.java">
                            <desc>ICAgIEBSZXF1ZXN0TWFwcGluZyh2YWx1ZSA9ICIvdmVudWUve2NpdHl9L3twbGFjZX0iLCBtZXRob2QgPSAiR0VUIikKICAgIHB1YmxpYyBTdHJpbmcgZ2V0VmVudWVEZXRhaWxzKFZlbnVlIHZlbnVlLCBNb2RlbCBtb2RlbCkgewogICAgICAgIC8vIHZlbnVlIG9iamVjdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGVkIHdpdGggY2l0eSBhbmQgcGxhY2UKICAgIH0=</desc>
                        </implementation>
                    </implementations>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the framework the component is using.&lt;/li&gt;
                            &lt;li&gt;Check if this particular framework provides automatic binding of variables.&lt;/li&gt;
                            &lt;li&gt;Verify it is disabled or restricted.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:16.263000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="DATA-VAL" name="Validate all data received from the client side" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        All data received from the client-side should be considered tainted and a potential risk,
                        regardless of the source or transport method. &amp;nbsp;For example, while hidden form fields,
                        cookies, or other headers may be obfuscated from a user, along with parameters passed in
                        ViewStates or other encapsulated forms, these can be modified by the user at the client-side in
                        memory, or in transit on the network. Similarly, data passed from binary or compiled components
                        can be modified in situ or in transit.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt;&lt;br /&gt;&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the
                        encrypted tunnel (one end of which is typically controlled by the client); data passing through
                        the link may still be malicious.&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        As such, all data from the client side must be subjected to strict validation, sanitization, and
                        encoding against expected syntactic and semantic criteria.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax
                        (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a
                        specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be
                        syntactically valid because it only contains alphanumeric characters, but it is not valid if the
                        input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&lt;/li&gt;
                        &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the
                        strict criteria for each input are accepted, and reject, transform, or encapsulate any
                        non-compliant data.&lt;/li&gt;
                        &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific
                        malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive
                        and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to
                        obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be
                        useful for detecting and logging potential attacks, or determining which inputs are so malformed
                        that they should be rejected outright.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Validate all data received from the client, including values such as HTTP headers and
                        cookie values if these are used as input on the server side, X- headers, and other platform
                        specific data objects passed between the client and server.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify data input points for the application, for example:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;
                            &lt;li&gt;API calls&lt;/li&gt;
                            &lt;li&gt;HTTP Headers&lt;/li&gt;
                            &lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;
                            &lt;li&gt;Serialized Java objects&lt;/li&gt;
                            &lt;li&gt;Any data structure received from the client-side&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;
                            &lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;
                            &lt;li&gt;For each of the inputs, ensure that the data is validated against the define
                            whitelists (for example with a regular expression) before being processed.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            To test data validation:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it
                            (invalid characters, lengths, ranges etc.)&lt;/li&gt;
                            &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;
                            &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            A number of tools can be used to aid in testing: &amp;nbsp;&amp;nbsp;
                            &lt;ul&gt;
                            &lt;li&gt;Directly your browser with the Developer Tools&lt;/li&gt;
                            &lt;li&gt;Use a browser extension which allows you to modify the request and responses on
                            the fly (i.e. Tamper Data)&lt;/li&gt;
                            &lt;li&gt;Use a proxy which allows you to modify the request and response on the fly (i.e.
                            OWASP ZAP, Burp, Fiddler, etc.)&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:16.249000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="FILE-DATA-CHECK" name="Validate the file format before processing" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Attackers may attempt to bypass controls on uploaded content by renaming, embedding, or otherwise manipulating benign files with malicious content. As with client-side data, the application should screen uploaded content before processing it. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;File contents and and file-system path data must to be checked for sanity.&lt;/li&gt; 
  &lt;li&gt;Consider directory traversal, local file inclusion, and OS injection attacks when validating filenames.&lt;/li&gt; 
  &lt;li&gt;Verify MIME type is correct and appropriate, and matches content.&lt;/li&gt; 
  &lt;li&gt;Files with an structured format should be checked against the expected format/definition (e.g. XML against a XSD or DTD).&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify structured data being processed by your component which is coming from
                            untrusted sources.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check there is a validation method for the format and the structure.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;Examples of this is to check JSON against a JSON schema, XML against a XSD or a
                            DTD, or checking that a received file which is supposed to be an image is actually an
                            image.&amp;nbsp;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T12:53:18.839000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="UPLOAD FILES" name="Upload Files" desc="" library="">
                    <threats>
                        <threat ref="FILE-MAL-UPLOAD" name="Attackers gain unauthorised access through malicious file upload" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Files that contain malicious content could cause the application to execute the
                                content and therefore grant unauthorized access to the service or the data it contains.
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="ASSIGN-WHITE" mitigation="10"/>
                                <control ref="ASVS-16.6" mitigation="10"/>
                                <control ref="CWE-646-CSP" mitigation="10"/>
                                <control ref="DATA-VAL" mitigation="20"/>
                                <control ref="FILE-DATA-CHECK" mitigation="20"/>
                                <control ref="FILE-SCAN" mitigation="20"/>
                                <control ref="WEB-EXEC-DATA" mitigation="10"/>
                                <control ref="WEB-FILE-DATA" mitigation="10"/>
                                <control ref="template-val" mitigation="10"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-159">
                                    <controls>
                                        <control ref="ASSIGN-WHITE" mitigation="10"/>
                                        <control ref="DATA-VAL" mitigation="20"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-646">
                                    <controls>
                                        <control ref="CWE-646-CSP" mitigation="10"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-94">
                                    <controls>
                                        <control ref="WEB-EXEC-DATA" mitigation="10"/>
                                        <control ref="template-val" mitigation="10"/>
                                    </controls>
                                </weakness>
                                <weakness ref="UNTRUSTED-FILE-HANDLING">
                                    <controls>
                                        <control ref="FILE-DATA-CHECK" mitigation="20"/>
                                        <control ref="FILE-SCAN" mitigation="20"/>
                                        <control ref="WEB-FILE-DATA" mitigation="10"/>
                                    </controls>
                                </weakness>
                                <weakness ref="WEB-PATH-ROOT">
                                    <controls>
                                        <control ref="ASVS-16.6" mitigation="10"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-130" name="Denial of service through resource exhaustion" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request. For example, using an Integer Attack, the attacker could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="secure-file-storage" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-770">
                                    <controls>
                                        <control ref="secure-file-storage" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="http-service-sensitive-data-sent" name="HTTP Service: Sensitive data sent" desc="" tags="" position="82" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-598" name="The application sends sensitive information using the URL query string" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-598: Information Exposure Through Query Strings in GET Request" url="https://cwe.mitre.org/data/definitions/598.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-06T16:42:12.597000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The web application uses the GET method to process requests that contain sensitive
                        information, which can expose that information through the browser's history, Referers, web
                        logs, and other sources.
                        &lt;br /&gt;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-598" name="Ensure no sensitive data is sent in the URL" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Data passed in the URL (address bar) between client and server is likely to be exposed in logs
                        on the server, or intermediate devices (such as proxies or other network devices), or in local
                        browser logs/history. A common mistake is, for example, to pass a SessionID value as a parameter
                        in the URL of a get request between hosts. To mitigate the risk of exposure of sensitive data,
                        it should only be sent in the body of an HTTP message (for example a POST request), or in the
                        HTTP headers (either standard headers such as the Cookie values, or a custom X- header).
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure sensitive, private, or otherwise restricted data is not sent in a URL value.&lt;/li&gt;
                        &lt;li&gt;Pass data only in appropriately protected fields in the body or headers.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy.&lt;/li&gt;
                            &lt;li&gt;Programmatically or manually visit all authenticated content and functionality
                            within the application.&lt;/li&gt;
                            &lt;li&gt;Review logs to determine if sensitive data is sent in the URL at any point. If
                            should only be sent in HTTP headers (i.e. a cookie) or as part of the body (e.g. in a POST
                            or PUT request).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T10:43:46.062000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="ACCESS SENSITIVE DATA" name="Access sensitive data" desc="" library="">
                    <threats>
                        <threat ref="WEB-QUERY-PARAM" name="Sensitive data is compromised through query parameters in the URL" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Sensitive data directly put as a parameters on the URL could be easily leaked on logs,
                                browser history, etc.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                And this information could be used by an attacker to gain access to the system or user
                                data.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="CWE-598" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-598">
                                    <controls>
                                        <control ref="CWE-598" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="HTTP-SERVICE:SESSION" name="HTTP Service: Session ID" desc="" tags="" position="44" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-384" name="Application allows user to use a session ID not produced by the application" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-27T10:24:40.494000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>&lt;div&gt;
                    Authenticating a user, or otherwise establishing a new user session, without invalidating any session identifier gives an attacker the opportunity to steal authenticated sessions. Such a scenario is commonly observed when: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.&lt;/li&gt; 
                    &lt;li&gt;An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session.&lt;/li&gt; 
                    &lt;li&gt;The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session.&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt;</desc>
                </weakness>
                <weakness ref="COOKIE-WEAKNESS" name="Cookie path and domain attributes set too liberally" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-27T10:24:40.445000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>if an application sets a cookie with too open domain and path attributes, an attacker can
                        exploit this situation to gain access to the cookie and hence to the resources that this cookie
                        protect.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;An example of a wide open and wrongly scoped cookie would be one with the domain
                        attribute set to the whole domain = .example.org
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-539" name="Information Exposure Through Persistent Cookies" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T15:16:05.945000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Persistent cookies are cookies that are stored on the browser's					hard drive. This can cause security and privacy issues depending on the					information stored in the cookie and how it is accessed.</desc>
                </weakness>
                <weakness ref="CWE-614" name="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" url="https://cwe.mitre.org/data/definitions/614.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-21T16:50:31.325000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the
                        user agent to send those cookies in plaintext over an HTTP session.
                    </desc>
                </weakness>
                <weakness ref="CWE-1004" name="Sensitive Cookie Without 'HttpOnly' Flag" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T15:49:47.653000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag. &lt;div&gt;  The HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS. &lt;/div&gt;</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="secure-session-generation-and-expiration" name="Implement a secure Session Generation and Expiration" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt; 
 &lt;div&gt;
   The session ID exchange mechanism based on cookies provides multiple security features in the form Session Generation and Expiration User state is tracked in a session. This session is typically stored on the server for traditional web based session management. A session identifier is then given to the user so the user can identify which server-side session contains the correct user data. The client only needs to maintain this session identifier, which also keeps sensitive server-side session data off of the client. 
 &lt;/div&gt; 
 &lt;div&gt;
   Here are a few controls to consider when building or implementing session management solutions: 
 &lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure that the session id is long, unique and random. The session ID length must be at least 128 bits (16 bytes)&lt;/li&gt; 
  &lt;li&gt;The session ID must be unpredictable (random enough) to prevent guessing attacks, where an attacker is able to guess or predict the ID of a valid session through statistical analysis techniques. For this purpose, a good PRNG (Pseudo Random Number Generator) must be used. The session ID value must provide at least 64 bits of entropy (if a good PRNG is used, this value is estimated to be half the length of the session ID).&lt;/li&gt; 
  &lt;li&gt;The application shall generate a new session or at least rotate the session id during authentication and re-authentication.&lt;/li&gt; 
  &lt;li&gt;The application shall not treat OAuth and refresh tokens as their own session identifiers. Moreover, it shall allow users to terminate trust relationships with linked applications.&lt;/li&gt; 
  &lt;li&gt;The CSPs (Credential Service Provider) shall re-authenticate the subscriber if its has not been authenticated since a certain inactivity period (this period is set by relying parties to CSPs). CSPs shall inform to RP (Relying Parties) the last authentication time, to know if the shall be re-authenticated.&lt;/li&gt; 
  &lt;li&gt;When a user chooses to log out (or otherwise has their session terminated), the user session must be terminated at the server-side, not solely at the client-side (for example by deleting or reissuing a session ID token/cookie).&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Revoke user sessions at the server-side.&lt;/li&gt; 
   &lt;li&gt;Redirect users to the login page, or provide a login prompt to them in context.&lt;/li&gt; 
   &lt;li&gt;Where possible, ensure the session is not reused by the application server.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;The application shall implement an idle timeout after a period of inactivity and an absolute maximum lifetime for each session, after which users must re-authenticate. If the application has implemented a functionality to be always logged in, the application shall force to users to be re-authenticated for some sensitive actions.&lt;/li&gt; 
  &lt;li&gt;The length of the timeouts should be inversely proportional with the value of the data protected.&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;30 days&lt;/li&gt; 
   &lt;li&gt;12 hours or 30 minutes of inactivity, 2FA optional&lt;/li&gt; 
   &lt;li&gt;12 hours or 15 minutes of inactivity, with 2FA&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP CheatSheet Series: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
                        <reference name="OWASP Proactive Controls [C6]" url="https://www.owasp.org/index.php/OWASP_Proactive_ControlsOWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="7.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="7.1.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="7.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="7.2.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.6.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ul&gt; 
 &lt;li&gt;Check that the sessions is renewed following the steps below:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Log in to the application.&lt;/li&gt; 
  &lt;li&gt;Open another browser and go to the login page.&lt;/li&gt; 
  &lt;li&gt;Log in to the application for the second time.&lt;/li&gt; 
  &lt;li&gt;Check that the old session and session id are removed.&lt;/li&gt; 
  &lt;li&gt;Check that a new session is created with new session id.&lt;/li&gt; 
  &lt;li&gt;Check that the old and new session ids are different.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Verify that sessions tokens are generated from a source with sufficient entropy and they are not predictable.&lt;/li&gt; 
 &lt;li&gt;Check that the refresh tokens and OAuth sessions with linked applications are not terminated by users.&lt;/li&gt; 
 &lt;li&gt;Check that the CSPs shall force to the RP to re-authenticate after a certain inactivity period of time.&lt;/li&gt; 
 &lt;li&gt;Check that the logout and expiration invalidate the session token, following the steps below:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Open a browser.&lt;/li&gt; 
  &lt;li&gt;Authenticate as a user A.&lt;/li&gt; 
  &lt;li&gt;Get the Session ID and note it.&lt;/li&gt; 
  &lt;li&gt;Logout of the service.&lt;/li&gt; 
  &lt;li&gt;Set up the noted Session ID.&lt;/li&gt; 
  &lt;li&gt;Try to access an authenticated section of the service and you should not be able to do it as user A.&lt;/li&gt; 
  &lt;li&gt;To edit the cookies you can either use a proxy (i.e. OWASP ZAP, Burp, Fiddler, etc.) or a browser extension which should allow you to tamper the cookies (i.e. Tamper Data, Cookie Manager, etc.).&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Check that the session expires after a certain inactivity period following the steps below:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Verify the expected inactive timeout.&lt;/li&gt; 
  &lt;li&gt;Check 'normal' use through a browser:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Go to the authentication feature of the component.&lt;/li&gt; 
   &lt;li&gt;Authenticate as a user.&lt;/li&gt; 
   &lt;li&gt;Leave the session open for a given time (check the expiration time that has been agreed to be implemented).&lt;/li&gt; 
   &lt;li&gt;Revisit an authenticated page and determine if the session has expired (e.g. the session is no longer authenticated).&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;Check the control is enforced at the server side and not using code in the browser:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and determine which cookies or other tokens are used to maintain session state. Alternatively, capture an authenticated application request for replay.&lt;/li&gt; 
   &lt;li&gt;Store and replay the request after the timeout period to see if the application response with authenticated data.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;Review application operation and determine if any behavior artificially holds the session open, for example, heartbeat requests or calls to update data feeds sent from the client to the server are sometimes mistakenly interpreted as user activity, holding the session open.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T14:47:24.688000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CSD-SESS-FED" name="Provide a section with a list of all active sessions and information about them" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The application should provide a section with a list of all the active sessions. That list should contain as much information as possible and should allow the user to invalidate all sessions or any of them selectively.</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="AC-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="7.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="3.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Find the section with the list of the active sessions within the application
                            features&lt;/li&gt;
                            &lt;li&gt;Open an authenticated session on two or three different browsers.&lt;/li&gt;
                            &lt;li&gt;Check the sessions are listed.&lt;/li&gt;
                            &lt;li&gt;Close the sessions by logging out of the application.&lt;/li&gt;
                            &lt;li&gt;Check the sessions listed relating to the ones you created have now disappeared.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-06T16:12:38.625000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="secure-attributes-of-cookies" name="Secure the Cookies with their attributes" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  The session ID exchange mechanism based on cookies provides multiple security features in the form of cookie attributes that can be used to protect the exchange of the session ID: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Secure and HttpOnly Attribute:&lt;/b&gt;&amp;nbsp;a secure cookie is only sent to the server with an encrypted request over the HTTPS protocol. Even with Secure, sensitive information shall never be stored in cookies, as they are inherently insecure and this flag can't offer real protection. Starting with Chrome 52 and Firefox 52, insecure sites (http:) can't set cookies with the Secure directive. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To mitigate cross-site scripting (XSS) attacks, HttpOnly cookies are inaccessible to JavaScript's Document.cookie API; they are only sent to the server. For example, cookies that persist server-side sessions don't need to be available to JavaScript, and the HttpOnlyflag shall be set. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="background-color: white;"&gt;Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="background-color: white;"&gt;&lt;br /&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;SameSite Attribute: &lt;/b&gt;we shall configure the SameSite attribute to limit the exposure to against cross-site request forgery attacks. There are two possibilities: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;b&gt;Strict:&lt;/b&gt; the browser will only send cookies if the request originated from the website that set the cookie. If the request originated from a different URL than the URL of the current location, none of the cookies tagged with the Strict attribute will be included.&lt;/li&gt; 
  &lt;li&gt;&lt;b&gt;Lax:&lt;/b&gt; if the attribute is set to Lax, same-site cookies are withheld on cross-site subrequests, such as calls to load images or frames, but will be sent when a user navigates to the URL from an external site, for example, by following a link.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By default the SameSite is not configured, we shall configure with one of the above types, as we show below: 
&lt;/div&gt; 
&lt;div&gt;
  Set-Cookie: key=value; SameSite=Strict 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Domain and Path Attributes:&lt;/b&gt; The session token value issued after users have successfully identified and authenticated themselves is of equivalent value to the secrets the user presents to login, and must be protected accordingly.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;If the cookie domain attribute is too liberal, the cookie may be accessible to other hosts within the parent domain. This is a particular issue in multi-tenanted hosting, or where applications are delivered as subdomains of a third party parent domain.&lt;/li&gt; 
  &lt;li&gt;If the cookie path attribute is not appropriately restricted, the session token may be accessible from other applications or content on the server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The domain and the path attributes for the session cookie should be restricted to the fully qualified hostname on which the application is running. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For example: 
&lt;/div&gt; 
&lt;div&gt;
  Set-Cookie: session=token; Path=/theapp/; Domain=myapp.example.com; secure; HTTPOnly 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;__Host- prefix:&lt;/b&gt; ensure that all Cookies with a name starting with __Host- must be: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;set with the secure flag,&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;from a secure page (HTTPS),&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;not have a domain specified (and therefore aren't sent to subdomains)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;and the path must be &amp;quot;/&amp;quot;.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="__Host-Prefix" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"/>
                        <reference name="HttpOnly" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"/>
                        <reference name="Owasp Cheatsheet: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
                        <reference name="OWASP Proactive Controls [C6]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                        <reference name="OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md"/>
                    </references>
                    <standards>
                        <standard ref="7.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="7.1.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ul&gt;  &lt;li&gt;Using a browser, open the Web Developer tools.&amp;nbsp;&amp;nbsp;&lt;/li&gt;  &lt;li&gt;Load the Network inspection tab.&amp;nbsp;&lt;/li&gt;  &lt;li&gt;Load the endpoints of the application which set cookies (send the Set-Cookie HTTP header).&lt;/li&gt;  &lt;li&gt;Check that within the HTTP response, the Set-Cookie has got:&lt;/li&gt;  &lt;ul&gt;   &lt;li&gt;the path and domain attributes set to the most restrictive path and domain respectively.&lt;/li&gt;   &lt;li&gt;'HttpOnly' and 'secure' flag set and configured&lt;/li&gt;   &lt;li&gt;'SameSite' attribute configured.&lt;/li&gt;  &lt;/ul&gt;  &lt;li&gt;Check that all Cookies with a name starting with __Host- have got:&lt;/li&gt;  &lt;ul&gt;   &lt;li&gt;set with the secure flag,&amp;nbsp;&lt;/li&gt;   &lt;li&gt;from a secure page (HTTPS),&amp;nbsp;&lt;/li&gt;   &lt;li&gt;not have a domain specified (and therefore aren't sent to subdomains)&amp;nbsp;&lt;/li&gt;   &lt;li&gt;and the path must be &amp;quot;/&amp;quot;.&lt;/li&gt;  &lt;/ul&gt; &lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T15:19:22.428000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ASVS-2014-3.6" name="Session ID's should be transmitted securely" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        The session token value issued after users have successfully identified and authenticated
                        themselves is of equivalent value to the secrets the user presents to login, and must be
                        protected accordingly. Data passed in the URL (address bar) between client and server is likely
                        to be exposed in logs on the server, or intermediate devices (such as proxies or other network
                        devices), or in local browser logs/history. A common mistake is, for example, to pass a
                        SessionID value as a parameter in the URL of a get request between hosts. To mitigate the risk
                        of exposure of sensitive data, it should only be sent in the body of an HTTP message (for
                        example a POST request), or in the HTTP headers (either standard headers such as the Cookie
                        values, or a custom X- header).
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure sensitive, private, or otherwise restricted data is not sent in a URL value
                        'GET' parameter.&lt;/li&gt;
                        &lt;li&gt;Specifically, never the session ID token in the URL or over unencrypted transport.&lt;/li&gt;
                        &lt;li&gt;Pass data only in appropriately protected fields in the body or headers, for example:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;A session Cookie (e.g. JSESSIONID, ASP.NET_SessionID)&lt;/li&gt;
                        &lt;li&gt;A POST parameter (e.g. a token in the HTTP request body, or JSON parameter)&lt;/li&gt;
                        &lt;li&gt;A standard or bespoke HTTP header (Authorization: X-Session header)&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;ul&gt;
                        &lt;/ul&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Using a browser, authenticate to the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For every authenticated request, check that the session ID is never part of the
                            URL and is only sent as an HTTP header (i.e. a cookie).&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.301000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-61" name="An attacker induces a client to establish a session with the target software using a session identifier provided by the attacker" state="Expose" source="MANUAL" owner="" library="">
                            <desc>The attacker induces a client to establish a session with the target software using a
                                session identifier provided by the attacker. Once the user successfully authenticates to
                                the target software, the attacker uses the (now privileged) session identifier in their
                                own transactions. This attack leverages the fact that the target software either relies
                                on client-generated session identifiers or maintains the same session identifiers after
                                privilege elevation.
                                &lt;br /&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="CSD-SESS-FED" mitigation="20"/>
                                <control ref="secure-session-generation-and-expiration" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-384">
                                    <controls>
                                        <control ref="CSD-SESS-FED" mitigation="20"/>
                                        <control ref="secure-session-generation-and-expiration" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="ASVS-2014-3.12" name="Attackers could compromise users' sessions by comproming the session cookie" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If the same session cookie is used for multiple applications, and one of those
                                applications has a vulnerability which discloses the session ID. Then by compromising
                                the session cookie in one application, the attacker would have access to the ID for the
                                other.
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="75"/>
                            <references/>
                            <controls>
                                <control ref="ASVS-2014-3.6" mitigation="34"/>
                                <control ref="secure-attributes-of-cookies" mitigation="66"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-384">
                                    <controls>
                                        <control ref="ASVS-2014-3.6" mitigation="34"/>
                                    </controls>
                                </weakness>
                                <weakness ref="COOKIE-WEAKNESS">
                                    <controls>
                                        <control ref="secure-attributes-of-cookies" mitigation="66"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-341" name="Attackers gain access to users data by manipulating server side code" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Server Side Code Injection happens when an attacker is able to direct input under his control and mix it with executed code on server side by modifying the logic executed on it.&amp;nbsp;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="secure-attributes-of-cookies" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-1004">
                                    <controls>
                                        <control ref="secure-attributes-of-cookies" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-102" name="Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. &lt;br /&gt;This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token. &lt;br /&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="secure-attributes-of-cookies" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-614">
                                    <controls>
                                        <control ref="secure-attributes-of-cookies" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-31" name="This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems" state="Expose" source="MANUAL" owner="" library="">
                            <desc>This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. &lt;br /&gt;
&lt;ul&gt; &lt;li&gt;The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. &lt;/li&gt; &lt;li&gt;The second form of this attack involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the attacker to impersonate the remote user/session. &lt;/li&gt; &lt;li&gt;The third form is when the cookie's content is modified by the attacker before it is sent back to the server. Here the attacker seeks to convince the target server to operate on this falsified information. &lt;/li&gt;
&lt;/ul&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="secure-attributes-of-cookies" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-539">
                                    <controls>
                                        <control ref="secure-attributes-of-cookies" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="LDAP-STORE" name="LDAP Store" desc="LDAP store" tags="" position="20" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-90" name="Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')" url="https://cwe.mitre.org/data/definitions/90.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:16.526000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software constructs all or part of an LDAP query using externally-influenced input from an
                        upstream component, but it does not neutralize or incorrectly neutralizes special elements that
                        could modify the intended LDAP query when it is sent to a downstream component.
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-150-LDAP" name="Escape LDAP meta-characters in user input" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        &lt;div&gt;
                        All data received from the client-side should be considered tainted and a potential risk,
                        regardless of the source or transport method.&amp;nbsp;As such, all data from the client side
                        must be subjected to strict validation, sanitization, and encoding against expected syntactic
                        and semantic criteria.
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        When using user supplied input in an LDAP query:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure that LDAP specific meta-characters are escaped before the query is executed.&lt;/li&gt;
                        &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax
                        (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a
                        specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be
                        syntactically valid because it only contains alphanumeric characters, but it is not valid if the
                        input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&lt;/li&gt;
                        &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the
                        strict criteria for each input are accepted, and reject, transform, or encapsulate any
                        non-compliant data.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.3.7" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.7" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;For every part of the code which manages LDAP queries.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check it is correctly escaping the following characters: &amp;quot;\&amp;quot;,
                            &amp;quot;(&amp;quot;, &amp;quot;|&amp;quot;, &amp;quot;&amp;lt;&amp;quot;, &amp;quot;/&amp;quot;,
                            &amp;quot;)&amp;quot;, &amp;quot;=&amp;quot;, &amp;quot;~&amp;quot;, &amp;quot;&amp;amp;&amp;quot;,
                            &amp;quot;&amp;gt;&amp;quot;, &amp;quot;*&amp;quot; .&lt;/li&gt;
                            &lt;/ol&gt;A safe method to automatically escape those characters is to use a framework
                            which allows LDAP prepared statements.&amp;nbsp;
                            &lt;br /&gt;
                            &lt;br /&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:16.559000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-136" name="Attackers could access data for which they're not authorised through LDAP injection attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attackers could exploit LDAP injection vulnerabilities and gain access to data to
                                which
                                they are not authorized in the LDAP store.
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="1" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="CWE-150-LDAP" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-90">
                                    <controls>
                                        <control ref="CWE-150-LDAP" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="LOGS-POLICY" name="Logs Policy" desc="" tags="" position="61" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-117" name="Improper Output Neutralization for Logs" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T08:43:58.308000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not neutralize or incorrectly neutralizes
                        output that is written to logs.
                    </desc>
                </weakness>
                <weakness ref="CWE-532" name="Information Exposure Through Log Files" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-11-18T18:22:57.405000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Information written to log files can be of a sensitive nature
                        and give valuable guidance to an attacker or expose sensitive user
                        information.
                    </desc>
                </weakness>
                <weakness ref="EU-GDPR-INSUFFICIENT-LOGGING" name="Insufficient Logging" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-04T16:28:51.383000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When a security-critical event occurs, the software either does not record the event or omits important details about the event when logging it. 
          &lt;br /&gt; &lt;br /&gt;
          When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect&amp;nbsp;
          </desc>
                </weakness>
                <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:45">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When a security-critical event occurs, the software either does not record the event or omits important details about the event when logging it.

When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds.  </desc>
                </weakness>
                <weakness ref="CWE-779" name="Logging of Excessive Data" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T08:29:02.372000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software logs too much information, making log files hard
                        to process and possibly hindering recovery efforts or forensic analysis after an
                        attack.
                    </desc>
                </weakness>
                <weakness ref="CWE-284" name="The service contains vulnerabilities that could grant access to data" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP Top 10 - A9" url="https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-23T20:58:34.717000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The services may contain security vulnerabilities that can be exploited by attackers to gain unauthorized access to data or additional services.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="LOG-RETENTION" name="Develop a log retention policy" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Develop a log retention policy to identify storage requirements for device logs and implement
                        procedures to ensure that the audit logs are available for a security response in the case of
                        incident or investigation.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The audit logs must be collected for the last 30 days in easily accessible storage media. Older
                        logs should be archived in a protected storage and should be accessible in the future as
                        required for incidents or investigations.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
                    </references>
                    <standards>
                        <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
                        <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the application contains logs from the last 30 days.&lt;/li&gt;
                            &lt;li&gt;Check that logs older than 30 days are in an external storage.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T08:30:04.021000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-532" name="Do not write secrets to the log files" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        The logs may be accessed by attackers and in order to protect sensitive data, no such sensitive
                        data should be included in the logs
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Proactive Controls [C9, C10]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Review the logs.&lt;/li&gt;
                            &lt;li&gt;Check that no sensitive data is included in the logs.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-24T08:53:30.146000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="LOGS-INTEGRITY" name="Ensure the integrity of the logging system" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Ensure Log integrity for the application generated logs, such as storing logs on write-once
                        media, forwarding a copy of the logs to a centralized SIEM or generating message digests for
                        each log file.
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="164.312(c)(1)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-4" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SA-18" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-28" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
                        <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check the logs integrity is controlled by making daily backups or leveraging external
                            tools for log monitoring.
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T08:47:41.869000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ASVS-8.8" name="Escape meta-characters from un-trusted data " platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>If untrusted data, including any data received from the client side of a connection is
                        directly written to a log file, then this data could contain newline or other meta-characters
                        that would allow an attacker to forge log entries.
                        &lt;div&gt;
                        Such meta-characters should first be escaped or removed before the data is written to the
                        logging system.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="7.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the logging system in use.&lt;/li&gt;
                            &lt;li&gt;Check whether the logging system automatically escapes meta-characters such as
                            newline and/or carriage return.&lt;/li&gt;
                            &lt;li&gt;If not, then check that there is a central function that escapes these
                            meta-characters before writing them to the log file.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-11-19T07:11:21.980000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" name="Limit the number of accounts with privileges allowing modification and/or deletion of audit logs files" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Limit the number of account with privileges to modify and/or delete audit logs files.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
                        <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
                        <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that the number of accounts with privileges to modify the logs is limited and
                            controlled.
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T08:31:39.414000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CSD-VAL-LOG" name="Log and reject all data validation failures" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Data validation failures, together with access control violations, are symptomatic of malicious activity where an attacker is attempting to subvert the protections in place. It is therefore likely that unexpected input detected by the application relates to an attack. Rejecting and logging such activity, and ideally terminating the session, increases the likelihood of detecting and inhibiting structured attacks against the application. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Log all validation failures when rejecting requests.&lt;/li&gt; 
  &lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against the logs and subsequent access to them.&lt;/li&gt; 
  &lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt; 
  &lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Proactive Controls [C7, C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
                        <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.5.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.4.4" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
                        <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="7.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="7.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Confirm all security events (and suspicious activity that may indicate a security
                            event) is appropriate identified in the application.&lt;/li&gt;
                            &lt;li&gt;Confirm security errors are logged with appropriate priority.&lt;/li&gt;
                            &lt;li&gt;Any data logged relating to the event must be carefully sanitized and encoded; by
                            definition the data could be an attack payload and could execute when the logs are viewed
                            out of the system.&lt;/li&gt;
                            &lt;li&gt;Verify actual logged data.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-29T18:33:15.202000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CDS-USER-TRACK" name="Log details of user actions within the system" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;p&gt;To maintain proper accountability, logs should be maintained with sufficient
                        information to track user actions within the system. These logs should be forensically sound,
                        non-repudiable, and contain comprehensive details about activity. While the exact data for an
                        event may vary, the following should be captured at a minimum:&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Timestamps against a proven external source (e.g. an NTP server)&lt;/li&gt;
                        &lt;li&gt;Origin, with this field we mark if the logs are provided by a trusted or untrusted
                        source.&lt;/li&gt;
                        &lt;li&gt;Event, status, and/or&amp;nbsp;error codes (with sensitive data masked as appropriate
                        or not introduced in logs)&lt;/li&gt;
                        &lt;li&gt;Service, command, application or function name and details&lt;/li&gt;
                        &lt;li&gt;User or system account associated with an event&lt;/li&gt;
                        &lt;li&gt;Devices used (e.g. source and destination IPs, terminal session ID, web browser, etc)&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        Source:&amp;nbsp;&amp;nbsp;
                        &lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt;https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="Berkeley audit logging" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
                        <reference name="OWASP Proactive Controls [C7, C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="164.312(a)(1)(A)" supportedStandardRef="hipaa-required"/>
                        <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
                        <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-14" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
                        <standard ref="IR-5" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
                        <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Perform several different actions on the service.&lt;/li&gt;
                            &lt;li&gt;Inspect the log files to see if the format and content complies with the companies
                            policy.&lt;/li&gt;
                            &lt;li&gt;If there is no company policy, check that, at least the following data is
                            included: timestamp event, status, error codes, service/command/application username or
                            system account associated with an eventDevice used (e.g. source and destination IPs,
                            terminal session ID, web browser, etc) .&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Source:
                            &lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt;&amp;nbsp;https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="Security Audit Logging Guideline" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-24T13:07:20.403000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="EU-GDPR-LOGGING" name="Logging the data access and the modification of personal data" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Make sure that every access and modification of personal data is logged (The log should be precise enough to know who changed what and when). This includes data access from the application as well as data access from privileged accounts, such as database admins. In practice, this means logging both on application, middleware and operating system (OS) level.
          </desc>
                    <implementations/>
                    <references>
                        <reference name="EU GDPR - EU Data Protection" url="http://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
                    </references>
                    <standards>
                        <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
                        <standard ref="Art.5" supportedStandardRef="EU-GDPR"/>
                        <standard ref="8.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                &lt;li&gt;Test accessing and modifying user personal data as legitimate users, employees, administrators and malicious actors.&lt;/li&gt;
                &lt;li&gt;Verify appropriate logging of all the above activities are successful and sufficiently detailed.&lt;/li&gt;
                &lt;/ol&gt;
            </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-01-18T15:00:32.431000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="LOG-TLS-FAILURES" name="Log the backend TLS connection failures" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Implement functionality to record backend TLS connection failures and include these in the
                        logs.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="9.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that backend TLS connection failures are recorded in the logs.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T09:24:21.504000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-662" name="Use a synchronised time source" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        In order to correlate logs and data from different internal and external systems, and to
                        preserve forensic quality of the logs, it is important a unified and trusted synchronized time
                        source is used throughout the environment.&amp;nbsp;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Servers should be synchronize to an internal or external NTP server&lt;/li&gt;
                        &lt;li&gt;The centralized source should in turn use (or be) a trusted central time source.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This control is critical in identifying application events (including attacks) through logging,
                        and in conduction post-event analysis, in particular to track the whole user (or attacker)
                        journey through the system should it be compromised.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        It is good practice to use the concept of Indicators of Compromise (IoC) should be used to
                        detect possible situations in which the system has been compromised and to give an appropriate
                        response.&amp;nbsp; IoCs are often tracked through logs, and accurate time is often essential.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="12.4.4" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AU-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
                        <standard ref="7.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="7.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Check that mechanisms are installed to keep the host's clock synchronized (i.e.
                            ntpd in Linux based systems).&lt;/li&gt;
                            &lt;li&gt;Inspect the logs created by the app and check they have the correct timestamp.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-24T13:05:33.389000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="LOG-MANAGEMENT" name="Log Management" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-93" name="An attacker injects, manipulates or forges malicious log entries in the log file, allowing him to mislead a log audit, cover traces of attack, or perform other malicious actions" state="Expose" source="MANUAL" owner="" library="">
                            <desc>This attack targets the log files of the target host. The attacker injects,
                                manipulates or forges malicious log entries in the log file, allowing him to mislead a
                                log audit, cover traces of attack, or perform other malicious actions. The target host
                                is not properly controlling log access. As a result tainted data is resulting in the log
                                files leading to a failure in accountability, non-repudiation and incident forensics
                                capability.
                                &lt;br /&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="ASVS-8.8" mitigation="20"/>
                                <control ref="LOGS-INTEGRITY" mitigation="40"/>
                                <control ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="40"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-117">
                                    <controls>
                                        <control ref="ASVS-8.8" mitigation="20"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-284">
                                    <controls>
                                        <control ref="LOGS-INTEGRITY" mitigation="40"/>
                                        <control ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="40"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CWE-778-AUTH" name="Attacks against the authentication system may go undetected" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Automated attacks against many user accounts, or successful attacks against an account
                                require a response. &amp;nbsp;If audit logs are not kept of both successful and
                                unsuccessful authentication operations, then post attack forensics will be hampered.&amp;nbsp;&amp;nbsp;
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;Without a dynamic response to mass automated attacks against the
                                authentication system, attackers stand a greater chance of success.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CDS-USER-TRACK" mitigation="25"/>
                                <control ref="CSD-VAL-LOG" mitigation="20"/>
                                <control ref="CWE-662" mitigation="25"/>
                                <control ref="LOG-TLS-FAILURES" mitigation="10"/>
                                <control ref="LOGS-INTEGRITY" mitigation="20"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-778">
                                    <controls>
                                        <control ref="CDS-USER-TRACK" mitigation="25"/>
                                        <control ref="CSD-VAL-LOG" mitigation="20"/>
                                        <control ref="CWE-662" mitigation="25"/>
                                        <control ref="LOG-TLS-FAILURES" mitigation="10"/>
                                        <control ref="LOGS-INTEGRITY" mitigation="20"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Expose" source="MANUAL" owner="" library="">
                            <desc>&lt;span style=""&gt;Unauthorized party might access/breach the personal data of the
                                data subject.&lt;/span&gt;
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CWE-532" mitigation="70"/>
                                <control ref="LOG-RETENTION" mitigation="30"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-532">
                                    <controls>
                                        <control ref="CWE-532" mitigation="70"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-779">
                                    <controls>
                                        <control ref="LOG-RETENTION" mitigation="30"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="EU-GDPR-REPUDATION" name="Lack of detectability and evidence" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attackers can gain undetected access to sensitive data and they are not monitored.
              </desc>
                            <riskRating confidentiality="25" integrity="75" availability="50" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="EU-GDPR-LOGGING" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="EU-GDPR-INSUFFICIENT-LOGGING">
                                    <controls>
                                        <control ref="EU-GDPR-LOGGING" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="MOBILE-CLIENT:SENS-DATA-STORAGE" name="Mobile Client: Sensitive Read or Post data" desc="Storage of sensitive data on a mobile device" tags="" position="32" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-312" name="Cleartext Storage of Sensitive Information" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-312: Cleartext Storage of Sensitive Information" url="https://cwe.mitre.org/data/definitions/312.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:17.066000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The application stores sensitive information in cleartext within a resource that might be
                        accessible to another control sphere.
                        &lt;br /&gt;Because the information is stored in cleartext, attackers could potentially read it.
                        Even if the information is encoded in a way that is not human-readable, certain techniques could
                        determine which encoding is being used, then decode the information.
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-312-ENCRYPT" name="Store sensitive data in a cryptographically secure store" platform="" cost="2" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Mobile devices offer built in API's to store data in their encrypted stores,
                        such as the keychain on iOS. These stores are ultimately encrypted using a key
                        derived from the device passcode and require the user to set a passcode. &amp;nbsp;However,
                        they do not enforce the quality of the passcode, nor is it possible to determine
                        the quality of the passcode (and therefore, ultimately the key) from within the
                        application.&amp;nbsp;Storing data in the built in encrypted store is therefore
                        recommended for private data, but not for highly sensitive financial data for
                        example. &amp;nbsp;If storing highly sensitive data is a requirement, then it
                        should be encrypted using a key derived from an independent password where the
                        strength of this password can be verified.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="2.1" supportedStandardRef="OWASP-MASVS-L1"/>
                        <standard ref="2.1" supportedStandardRef="OWASP-MASVS-L2"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify in which points the component is storing sensitive data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the storage routines and verify they are using OS APIs which are built on
                            top of secure storage components.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:17.073000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="SENSITIVE READ OR POST DATA" name="Sensitive Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-167" name="Sensitive Data stored on the mobile device could be accessed by an attacker" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker could retrieve sensitive data stored on a mobile device.
                                &lt;br /&gt;This information may be stored in configuration files, embedded within the
                                application itself, or stored in other ways. Sensitive information may include long-term
                                keys, passwords, credit card or financial information, and other private material that
                                the mobile app uses in its interactions with the server.&amp;nbsp;
                                &lt;br /&gt;In some cases, it may not even be necessary to gain access to another user's
                                installation - if all instances of the client software are embedded with the same
                                sensitive information (for example, long term keys for communication with the server)
                                then the attacker must simply find a way to gain their own copy of the client in order
                                to perform this attack.
                                &lt;br /&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CWE-312-ENCRYPT" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-312">
                                    <controls>
                                        <control ref="CWE-312-ENCRYPT" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="PWD-RESET" name="Password reset" desc="Password recovery or reset function on the server side" tags="" position="21" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-311" name="A connection to an external system is performed in plain text" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-22T09:56:18.574000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Connections made in plain text are not only target for interception but, even when the component is not dealing with sensitive data, a man in the middle attack is possible and the attacker could pretend to be, i.e. an authentication system to gain the user's credentials.</desc>
                </weakness>
                <weakness ref="CWE-287" name="Improper Authentication" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T15:15:33.878000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When an actor claims to have a given identity, the software
					does not prove or insufficiently proves that the claim is
					correct.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="ASVS-2.17" name="Do not transmit password in email or other unencrypted channels" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Data passed between the user and application without appropriate encryption, in particular in
                        emails, may be intercepted or monitored by malicious parties.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Do not send plaintext passwords in emails or other unencrypted transport (e.g. a web
                        page server over HTTP).&lt;/li&gt;
                        &lt;li&gt;Password recovery processes should not send either the old or a new password to users
                        (the former is particular bad due to the penchant for people to reuse the same password across
                        multiple systems or applications).&lt;/li&gt;
                        &lt;li&gt;If the recovery process is built on sending a temporary random password to users, the
                        risk can be partly mitigated (but not eliminated) by:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensuring the random password is single use (one time password), and forcing the user
                        to change the password on first login.&lt;/li&gt;
                        &lt;li&gt;Making the password valid only for a short-time (time limited).&lt;/li&gt;
                        &lt;li&gt;Requiring a further validation or identification step when the time limited one time
                        password is used.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Review all password-provisioning mechanisms that are implemented by the
                            application. &lt;br /&gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-12-27T13:04:40.578000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="password-reset-email-best-practices" name="Implement Password reset email design best practices" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;span style="font-family: Arial; font-size: 11pt; white-space: pre-wrap;"&gt;The password/account recovery process must have equivalent security to the normal authentication process. It should be resistant to brute-force or network monitoring attacks.&lt;/span&gt; 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Passwords should not be sent in plain text (for example in an email), as they may be intercepted or monitored.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;The client-side and the server-side shall be communicated by a secured and independent channel that both are communicated normally.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Instead, the application should verify the user's identity, and leverage a time-limited (not longer than 10 minutes) one-time password token (TOTP) from the user.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Alternatively, the application could require the user enters a soft-token (e.g. Google authenticator), a mobile-push / SMS code, or previously established off-line recovery mechanism (for example a list of pre-defined recovery codes).&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;It should be noted that use of a random value in an e-mail or SMS has known weaknesses, and should be considered a less secure option.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;When the user provides the token, the application should verify their identity (for example through the use of a 'secret question', or verification of recent activity or transaction information).&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;The application should then require they choose a new password or phrase in line with the chosen policy.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;For change and reset password functionality it is recommended a history of old password (salted) hashes used. This can be used to prevent password reuse, or an attacker alternating between a selection of passwords (Monday1, Tuesday2 etc.). &lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Owasp CheatSheet: Authentication" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md"/>
                    </references>
                    <standards>
                        <standard ref="5.1.3.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.2.10" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.7.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.7.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.7.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.8.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.7.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.7.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.8.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.7.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.7.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.8.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Go through the password reset method implemented by the application.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Check if the current or new passwords are revealed or sent in plain text at any point.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Check that the application requires you to introduce the old password, a new password and the new password confirmation.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T15:17:30.304000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="PASSWORD RESET" name="Password reset" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-633" name="An adversary exploits a weakness in authentication to create an access token to associate a process/thread" state="Expose" source="MANUAL" owner="" library="">
                            <desc>&lt;span style="font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(255, 255, 255);"&gt;An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary.&lt;/span&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="password-reset-email-best-practices" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-287">
                                    <controls>
                                        <control ref="password-reset-email-best-practices" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CSD-AUTH-PWD" name="Attackers gain access to the system by accessing current user's password" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If an attacker has access to the password exchange method when the user resets his
                                password, he would have access to the system as this user.
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="ASVS-2.17" mitigation="50"/>
                                <control ref="password-reset-email-best-practices" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-311">
                                    <controls>
                                        <control ref="ASVS-2.17" mitigation="50"/>
                                        <control ref="password-reset-email-best-practices" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="PWD-RESET-SECRETQ" name="Password reset by answering a question" desc="Password recovery or reset function" tags="" position="22" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-592" name="Authentication Bypass Issues" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-592: Authentication Bypass Issues" url="https://cwe.mitre.org/data/definitions/592.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:17.353000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not properly perform authentication, allowing it to be bypassed through
                        various methods.
                        &lt;br /&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-640" name="Weak Password Recovery Mechanism for Forgotten Password" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T15:54:32.163000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software contains a mechanism for users to recover or
					change their passwords without knowing the original password, but the mechanism
					is weak.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="secure-password-recovery" name="Implement Secure Password Recovery Mechanism" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;span&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;It is common for an application to have a mechanism for a user to gain access to their account in the event they forget their password. A good design workflow for a password recovery feature will use multi-factor authentication elements. For example, it may ask a security question - something they know, and then send a generated token to a device - something they own.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;To get this control in our mechanisms, we have to follow the following steps:&lt;/span&gt;&lt;/p&gt;&lt;/span&gt; 
&lt;ol&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Send a Token Over a Protected Side-Channel: &lt;/b&gt;after the before step and if it's successfully, lock out the user's account immediately. Then a multi-factor token challenge with a randomly-generated code longer than 6 characters (it shall contain letters and numbers), by a secure channel, such TLS and&amp;nbsp;&lt;/span&gt;valid until a specific period (no longer than 20 minutes) or until the password was reseted.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Allow user to change password in the existing session:&lt;/b&gt; &lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;After the before steps, display a simple HTML form with one input field for the code, one for the new password, and one to confirm the new password. Verify the correct code is provided and be sure to enforce all password complexity requirements that exist in other areas of the application. As before, avoid sending the username as a parameter when the form is submitted.&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;b&gt;Notify to user: &lt;/b&gt;the application shall notify to the user, when the password was changed.&lt;/li&gt; 
 &lt;li&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Logging:&lt;/b&gt; &lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;It is important to keep audit records when password change requests were submitted. When reset messages were sent to users and when users utilize them. It is especially important to log failed attempts to answer security questions and failed attempted use of expired tokens. This data can be used to detect abuse and malicious behavior. Data such as time, IP address, and browser information can be used to spot trends of suspicious use.&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;span&gt; 
 &lt;ol&gt; 
  &lt;ul&gt; 
  &lt;/ul&gt; 
 &lt;/ol&gt;&lt;/span&gt; 
&lt;span&gt; 
 &lt;ol&gt; 
 &lt;/ol&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Other Considerations:&lt;/span&gt;&lt;/p&gt; &lt;/span&gt; 
&lt;ul&gt; 
 &lt;li&gt;Whenever a successful password reset occurs, all other sessions should be invalidated. Note the current session is already authenticated and does not require a login prompt.&lt;/li&gt; 
 &lt;li&gt;Strength of questions used for reset should vary based on the nature of the credential. Administrator credentials should have a higher requirement.&lt;/li&gt; 
 &lt;li&gt;The ideal implementation should rotate the questions asked in order to avoid automation.&lt;/li&gt; 
 &lt;li&gt;Shared or default accounts shall not be present (e.g. &amp;quot;root&amp;quot;, &amp;quot;admin&amp;quot;, or &amp;quot;sa&amp;quot;).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt;&lt;/span&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Owasp CheatSheetSeries: Forgot Password" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Forgot_Password_Cheat_Sheet.md"/>
                    </references>
                    <standards>
                        <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="6.1.2.3" supportedStandardRef="nist-800-63"/>
                        <standard ref="A.3" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.5.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.5.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.5.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.5.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.5.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.5.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.5.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.5.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.5.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check that the recovery secret or&amp;nbsp;a system generated initial activation&amp;nbsp;is not sent in clear text to the user.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Check that&amp;nbsp;password hints or secret questions are not present.&lt;/li&gt; 
  &lt;li&gt;Check that&amp;nbsp;password credential recovery does not reveal the current password in any way.&amp;nbsp;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Check that shared or default accounts are not present.&lt;/li&gt; 
  &lt;li&gt;Check that the user is notified, when&amp;nbsp;an authentication factor is changed or replaced.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T15:55:35.513000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="secure-recovery-token-reset-account" name="Use a secure recovery token to reset an account password (such as a TOTP)" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;span&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;The password/account recovery process must have equivalent security to the normal authentication process. It should be resistant to brute-force or network monitoring attacks.&lt;/span&gt;&lt;/p&gt; &lt;/span&gt; 
&lt;ul&gt; 
 &lt;li&gt;Having identified the user through secret questions/answers, the application should proceed with a secure reset process.&lt;/li&gt; 
 &lt;li&gt;Passwords should not be sent in plain text (for example in an email), as they may be intercepted or monitored.&lt;/li&gt; 
 &lt;li&gt;Instead, the application should verify the user's identity, and use a time-limited one time password token (TOTP) from the user.&lt;/li&gt; 
 &lt;li&gt;If a time-based multi factor OTP token is re-used during the validity period, it shall be logged and rejected with secure notifications to the holder on the device.&lt;/li&gt; 
 &lt;li&gt;Alternatively, the application could require the user enters a soft-token (e.g. Google authenticator), a mobile-push / SMS code, or previously established off-line recovery mechanism (for example a list of pre-defined recovery codes). It should be noted that use of a random value in an e-mail or SMS has known weaknesses, and should be considered a less secure option.&lt;/li&gt; 
 &lt;li&gt;When the user provides the token, the application should verify their identity (for example through the use of a 'secret question', or verification of recent activity or transaction information).&lt;/li&gt; 
 &lt;li&gt;If any token OTP is in case of theft or other loss, the validity of the token is immediately and effective revoked across the logged in sessions.&lt;/li&gt; 
 &lt;li&gt;The application should then require they choose a new password or phrase in line with the chosen policy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt;&lt;/span&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.2.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.8.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.8.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.8.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.8.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;span&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Navigate through the password recovery process.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check that a Time-Based One-Time Password token or a push message with a unique, one use-only and valid for a given time (typically 1h) token is used.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check if&amp;nbsp; a Time-Based One-Time Password token is used more than one time, it is logged and notified.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
 &lt;/ol&gt;&lt;/span&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-11T08:36:18.795000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="PASSWORD RESET" name="Password reset" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-50" name="An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure. Most of them use only one security question . For instance, mother's maiden name tends to be a fairly popular one. Unfortunately in many cases this information is not very hard to find, especially if the attacker knows the legitimate user. 
&lt;br /&gt;These generic security questions are also re-used across many applications, thus making them even more insecure. An attacker could for instance overhear a coworker talking to a bank representative at the work place and supplying their mother's maiden name for verification purposes. An attacker can then try to log in into one of the victim's accounts, click on &amp;quot;forgot password&amp;quot; and there is a good chance that the security question there will be to provide mother's maiden name. 
&lt;br /&gt;A weak password recovery scheme totally undermines the effectiveness of a strong password scheme. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="secure-password-recovery" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-640">
                                    <controls>
                                        <control ref="secure-password-recovery" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-115-SECRETQ" name="Attackers bypass authentication by guessing the answers to secret questions" state="Expose" source="MANUAL" owner="" library="">
                            <desc>The answers to secret questions that only the user should know can often be found
                                through social networking and other online resources. For example: Date of birth,
                                mother's maiden name, first school attended, etc. They can all readily be found online.
                                &lt;div&gt;
                                &lt;br /&gt;In many the attacker may not have to find the exact answer, but can simply
                                infer a reduced list of potential answers which they can use in an automated attack on
                                the system. For example, if they know the town where the user was born then they could
                                use a list of all the schools in that town to brute force the first school attended.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="secure-recovery-token-reset-account" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-592">
                                    <controls>
                                        <control ref="secure-recovery-token-reset-account" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="PWD-RESET-EMAIL" name="Password reset by email" desc="Password recovery or reset function using email" tags="PWD-RESET-EMAIL" position="23" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-319-PWD" name="Authentication credentials transmitted in clear text" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-319: Cleartext Transmission of Sensitive Information" url="https://cwe.mitre.org/data/definitions/319.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:17.436000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software transmits sensitive or security-critical data in cleartext in a communication
                        channel that can be sniffed by unauthorized actors.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;Many communication channels can be &amp;quot;sniffed&amp;quot; by attackers during
                        data transmission. For example, network traffic can often be sniffed by any attacker who has
                        access to a network interface. This significantly lowers the difficulty of exploitation by
                        attackers
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CS-EMAIL-COMP" name="The application uses a weak credential recovery method for email access" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-24T12:28:17.526000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Using weak credential recovery methods (like sending an SMS or transmitting the new password
                        over insecure channels, more generally), this fact can be used to compromise the access to an
                        email account.&amp;nbsp;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="PWD-RECOVER-OTP" name="Send time expired one time password/token (TOTP) in email" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        The password/account recovery process must have equivalent security to the normal authentication
                        process. It should be resistant to brute-force or network monitoring attacks. Reset over email
                        presents a risk of monitoring and interception, these threats can in part by mitigated through
                        the following process:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a unique token or password that compromises at least 128 bits of provably
                        random data.&lt;/li&gt;
                        &lt;li&gt;This token should be emailed to the registered email address of the user; for example
                        in&amp;nbsp;form of a one time password, or a unique identifier in a URL.&lt;/li&gt;
                        &lt;li&gt;The token should expire after a short period of time (long enough for the user to
                        receive and process the email - 15 minutes at most and preferably less).&lt;/li&gt;
                        &lt;li&gt;When the user provides the token, the application should verify their identity (for
                        example through use of a 'secret question', or verification of recent activity or transaction
                        information).&lt;/li&gt;
                        &lt;li&gt;The password or token must be single use; the user must be required to choose a new
                        password and the token should be immediately invalidated.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Perform the password reset process implemented by the component.&lt;/li&gt;
                            &lt;li&gt;Check the recovery is done by using a one time token on an email.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For this one time token check it cannot be reused and it cannot be used after a
                            short period of time.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:17.446000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="secure-recovery-token-reset-account" name="Use a secure recovery token to reset an account password (such as a TOTP)" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;span&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;The password/account recovery process must have equivalent security to the normal authentication process. It should be resistant to brute-force or network monitoring attacks.&lt;/span&gt;&lt;/p&gt; &lt;/span&gt; 
&lt;ul&gt; 
 &lt;li&gt;Having identified the user through secret questions/answers, the application should proceed with a secure reset process.&lt;/li&gt; 
 &lt;li&gt;Passwords should not be sent in plain text (for example in an email), as they may be intercepted or monitored.&lt;/li&gt; 
 &lt;li&gt;Instead, the application should verify the user's identity, and use a time-limited one time password token (TOTP) from the user.&lt;/li&gt; 
 &lt;li&gt;If a time-based multi factor OTP token is re-used during the validity period, it shall be logged and rejected with secure notifications to the holder on the device.&lt;/li&gt; 
 &lt;li&gt;Alternatively, the application could require the user enters a soft-token (e.g. Google authenticator), a mobile-push / SMS code, or previously established off-line recovery mechanism (for example a list of pre-defined recovery codes). It should be noted that use of a random value in an e-mail or SMS has known weaknesses, and should be considered a less secure option.&lt;/li&gt; 
 &lt;li&gt;When the user provides the token, the application should verify their identity (for example through the use of a 'secret question', or verification of recent activity or transaction information).&lt;/li&gt; 
 &lt;li&gt;If any token OTP is in case of theft or other loss, the validity of the token is immediately and effective revoked across the logged in sessions.&lt;/li&gt; 
 &lt;li&gt;The application should then require they choose a new password or phrase in line with the chosen policy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt;&lt;/span&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.2.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.8.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.8.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.8.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.8.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;span&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Navigate through the password recovery process.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check that a Time-Based One-Time Password token or a push message with a unique, one use-only and valid for a given time (typically 1h) token is used.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check if&amp;nbsp; a Time-Based One-Time Password token is used more than one time, it is logged and notified.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
 &lt;/ol&gt;&lt;/span&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-11T08:36:18.795000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="PASSWORD RESET" name="Password reset" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-158-PWD-IN-EMAIL" name="Password sent in email or SMS is compromised" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If the user's password is sent to them in email then attackers could perform
                                network
                                sniffing attacks if they are on the same network as the victim, for example on the
                                same WiFi
                                network. Attackers would then be able to access the users' account without the
                                user's
                                knowledge.
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="25" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="PWD-RECOVER-OTP" mitigation="40"/>
                                <control ref="secure-recovery-token-reset-account" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-319-PWD">
                                    <controls>
                                        <control ref="PWD-RECOVER-OTP" mitigation="40"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CS-EMAIL-COMP">
                                    <controls>
                                        <control ref="secure-recovery-token-reset-account" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="PWD-RESET-TOKEN" name="Password reset by sending the user an OTP" desc="Password recovery or reset function using a token" tags="" position="24" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-287" name="Improper Authentication" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-11T08:41:34.099000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When an actor claims to have a given identity, the software
					does not prove or insufficiently proves that the claim is
					correct.</desc>
                </weakness>
                <weakness ref="CS-EMAIL-COMP" name="The application uses a weak credential recovery method for email access" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-24T12:35:23.513000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Using weak credential recovery methods (like sending an SMS or transmitting the new password
                        over insecure channels, more generally), this fact can be used to compromise the access to an
                        email account.&amp;nbsp;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="secure-recovery-token-reset-account" name="Use a secure recovery token to reset an account password (such as a TOTP)" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;span&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;The password/account recovery process must have equivalent security to the normal authentication process. It should be resistant to brute-force or network monitoring attacks.&lt;/span&gt;&lt;/p&gt; &lt;/span&gt; 
&lt;ul&gt; 
 &lt;li&gt;Having identified the user through secret questions/answers, the application should proceed with a secure reset process.&lt;/li&gt; 
 &lt;li&gt;Passwords should not be sent in plain text (for example in an email), as they may be intercepted or monitored.&lt;/li&gt; 
 &lt;li&gt;Instead, the application should verify the user's identity, and use a time-limited one time password token (TOTP) from the user.&lt;/li&gt; 
 &lt;li&gt;If a time-based multi factor OTP token is re-used during the validity period, it shall be logged and rejected with secure notifications to the holder on the device.&lt;/li&gt; 
 &lt;li&gt;Alternatively, the application could require the user enters a soft-token (e.g. Google authenticator), a mobile-push / SMS code, or previously established off-line recovery mechanism (for example a list of pre-defined recovery codes). It should be noted that use of a random value in an e-mail or SMS has known weaknesses, and should be considered a less secure option.&lt;/li&gt; 
 &lt;li&gt;When the user provides the token, the application should verify their identity (for example through the use of a 'secret question', or verification of recent activity or transaction information).&lt;/li&gt; 
 &lt;li&gt;If any token OTP is in case of theft or other loss, the validity of the token is immediately and effective revoked across the logged in sessions.&lt;/li&gt; 
 &lt;li&gt;The application should then require they choose a new password or phrase in line with the chosen policy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;span&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt;&lt;/span&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.2.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.8.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.8.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.8.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.8.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;span&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Navigate through the password recovery process.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check that a Time-Based One-Time Password token or a push message with a unique, one use-only and valid for a given time (typically 1h) token is used.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check if&amp;nbsp; a Time-Based One-Time Password token is used more than one time, it is logged and notified.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
 &lt;/ol&gt;&lt;/span&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-11T08:36:18.795000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="PASSWORD RESET" name="Password reset" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-633" name="An adversary exploits a weakness in authentication to create an access token to associate a process/thread" state="Expose" source="MANUAL" owner="" library="">
                            <desc>&lt;span style="font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(255, 255, 255);"&gt;An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary.&lt;/span&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="secure-recovery-token-reset-account" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-287">
                                    <controls>
                                        <control ref="secure-recovery-token-reset-account" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-158-PWD-IN-EMAIL" name="One-Time Password (OTP) sent in email or SMS is compromised" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If the user's password is sent to them in email then attackers could perform
                                network
                                sniffing attacks if they are on the same network as the victim, for example on the
                                same WiFi
                                network. Attackers would then be able to access the users' account without the
                                user's
                                knowledge.
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="secure-recovery-token-reset-account" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CS-EMAIL-COMP">
                                    <controls>
                                        <control ref="secure-recovery-token-reset-account" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="restful-web-service" name="RESTful Web Service" desc="" tags="" position="79" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-352" name="Cross Site Request Forgery" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-352: Cross-Site Request Forgery (CSRF)" url="https://cwe.mitre.org/data/definitions/352.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-30T14:40:32.015000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The web application does not, or can not, sufficiently verify whether a well-formed, valid,
                        consistent request was intentionally provided by the user who submitted the request.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;When a web server is designed to receive a request from a client without any
                        mechanism for verifying that it was intentionally sent, then it might be possible for an
                        attacker to trick a client into making an unintentional request to the web server which will be
                        treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc.
                        and can result in exposure of data or unintended code execution.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-436" name="Interpretation Conflict" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T13:13:01.748000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Product A handles inputs or steps differently than Product B,
					which causes A to perform incorrect actions based on its perception of B's
					state.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="rest-content-type-val" name="Explicitly check the incoming Content-Type for REST services " platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  A REST request or response body should match the intended content type in the header. Otherwise this could cause misinterpretation at the consumer/producer side and lead to code injection/execution. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Explicitly check the incoming Content-Type for REST services to be the expected one, such as application/xml or application/JSON. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP REST Security Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"/>
                    </references>
                    <standards>
                        <standard ref="13.2.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Modify the content-type server header and test if the request is accepted by the server or not. For example: modify content application/JSON to application/XML and insert the XML entity payload to find the XML entity injection.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T13:14:31.765000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="cwe-352-csrf" name="Protect cookies from CSRF using one or more of the following: triple or double submit cookie pattern, CSRF nonces, or ORIGIN request header checks" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious web site, email, blog, instant message, or program causes a user's web browser to perform an unwanted action on a trusted site when the user is authenticated. A CSRF attack works because browser requests automatically include any credentials associated with the site, such as the user's session cookie, IP address, etc. Therefore, if the user is authenticated to the site, the site cannot distinguish between the forged or legitimate request sent by the victim. We would need a token/identifier that is not accessible to attacker and would not be sent along (like cookies) with forged requests that attacker initiates.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Requiring re-authentication of sensitive functions is an effective way to protect your application against a CSRF, but intrusive in the user experience. 
&lt;/div&gt; 
&lt;div&gt;
  You can also protect cookies from CSRF using at least one or more of the following recommendations:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1.- CSRF nonces. Nonces prevent unauthorized access by providing a secret 'key' (which is valid only once) that must be validated in any sensitive form submission. For the maximum security, the nonce is also time sensitive and it'll expire. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2.- Triple or double submit cookie pattern. 
&lt;/div&gt; 
&lt;div&gt;
  If maintaining the state for CSRF token at server side is problematic, an alternative defense is to use the double submit cookie technique. This technique is easy to implement and is stateless. In this technique, we send a random value in both a cookie and as a request parameter, with the server verifying if the cookie value and request value match. When a user visits (even before authenticating to prevent login CSRF), the site should generate a (cryptographically strong) pseudorandom value and set it as a cookie on the user's machine separate from the session identifier. The site then requires that every transaction request include this pseudorandom value as a hidden form value (or other request parameter/header). If both of them match at server side, the server accepts it as legitimate request and if they don't, it would reject the request. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3.- ORIGIN request header checks. 
&lt;/div&gt; 
&lt;div&gt;
  There are two steps to this mitigation, both of which rely on examining an HTTP request header value. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Determining the origin of the request is coming from (source origin). Can be done via Origin and/or referer header.&lt;/li&gt; 
  &lt;li&gt;Determining the origin of the request is going to (target origin).&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt;
  At server side we verify if both of them match. If they do, we accept the request as legitimate (meaning it's the same origin request) and if they don't, we discard the request (meaning that the request originated from cross-domain). Reliability on these headers comes from the fact that they cannot be altered programmatically (using JavaScript in an XSS) as they fall under forbidden headers list (i.e., only browsers can set them). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
                    </references>
                    <standards>
                        <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
  1.- Identify application components performing sensitive operations.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  2.- Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and verify a unique strong token is being sent and verified with each request. 
&lt;/div&gt; 
&lt;div&gt;
  3.- Confirm the tokens are passed in a programmatic way resistant to CSRF attack; e.g. in a custom POST field and separate HTTP header. 
&lt;/div&gt; 
&lt;div&gt;
  4.- Attempt to subvert the CSRF controls to ensure they are robust: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Change or remove the tokens and confirm the application rejects the request.&lt;/li&gt; 
  &lt;li&gt;Attempt to replay the tokens in a subsequent request.&lt;/li&gt; 
  &lt;li&gt;Mismatch the tokens in a request.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To modify headers and otherwise modify browser requests, use an intercepting proxy (e.g. OWASP Zap, Burp or Fiddler), or browser extensions such as Cookie Manager or Tamper Data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Testing for CSRF (OTG-SESS-005)" url="https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T12:58:23.186000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-273" name="HTTP Response Smuggling" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker injects content into a server response that is interpreted differently by intermediaries than it is by the target browser. To do this, it takes advantage of inconsistent or incorrect interpretations of the HTTP protocol by various applications. For example, it might use different block terminating characters (CR or LF alone), adding duplicate header fields that browsers interpret as belonging to separate responses, or other techniques. Consequences of this attack can include response-splitting, cross-site scripting, apparent defacement of targeted sites, cache poisoning, or similar actions. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="rest-content-type-val" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-436">
                                    <controls>
                                        <control ref="rest-content-type-val" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="TRANSACTION AUTHENTICATION" name="Transaction Authentication" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-62" name="Attackers could cause users to perform specific actions on their behalf through Cross Site Request Forgery attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attackers could cause users to perform actions by exploiting Cross Site Request Forgery vulnerabilities. This involves the attackers creating a malicious website that hosts a form or JavaScript designed to perform a POST or GET request against the target application. If the victim is logged into the target application, and then navigates to the attacker's malicious website, the form will be submitted and the operation performed by &amp;quot;riding&amp;quot; on the users existing session.</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="cwe-352-csrf" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-352">
                                    <controls>
                                        <control ref="cwe-352-csrf" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="SECRETS-MANAGEMENT" name="Secrets Management" desc="" tags="" position="60" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-385" name="Covert Timing Channel" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-09-26T11:02:03.706000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.</desc>
                </weakness>
                <weakness ref="CWE-287" name="Improper Authentication" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T12:40:26.704000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When an actor claims to have a given identity, the software
					does not prove or insufficiently proves that the claim is
					correct.</desc>
                </weakness>
                <weakness ref="CWE-326" name="Inadequate Encryption Strength" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-09-26T10:56:49.771000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software stores or transmits sensitive data using an encryption scheme that is
                        theoretically sound, but is not strong enough for the level of protection required.
                    </desc>
                </weakness>
                <weakness ref="CWE-522" name="Insufficiently Protected Credentials" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T12:36:10.263000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>This weakness occurs when the application transmits or stores
					authentication credentials and uses an insecure method that is susceptible to
					unauthorized interception and/or retrieval.</desc>
                </weakness>
                <weakness ref="CWE-345" name="Insufficient Verification of Data Authenticity" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T15:57:41.960000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not sufficiently verify the origin or					authenticity of data, in a way that causes it to accept invalid					data.</desc>
                </weakness>
                <weakness ref="CWE-320" name="Key Management Errors" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T08:23:15.416000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Weaknesses in this category are related to errors in the
                        management of cryptographic keys.
                    </desc>
                </weakness>
                <weakness ref="CWE-693" name="Protection Mechanism Failure" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-11-16T17:40:09.788000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product does not use or incorrectly uses a protection
                        mechanism that provides sufficient defense against directed attacks against the
                        product.
                    </desc>
                </weakness>
                <weakness ref="CWE-327" name="Use of a Broken or Risky Cryptographic Algorithm" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-11-16T17:40:09.794000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The use of a broken or risky cryptographic algorithm is an
                        unnecessary risk that may result in the exposure of sensitive
                        information.
                    </desc>
                </weakness>
                <weakness ref="CWE-330" name="Use of Insufficiently Random Values" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-20T08:08:15.980000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software may use insufficiently random numbers or values in a security context that depends on unpredictable numbers.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="STRONG-ALGORITHMS-PROTOCOLS" name="Ensure that only strong algorithms, cyphers and protocols are used" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Ensure that the application is using strong algorithms, cyphers and protocols. The general
                        practice and required minimum key lengths depend on the scenarios listed below.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Key exchange: Diffie-Hellman key exchange with minimum 2048 bits&lt;/li&gt;
                        &lt;li&gt;Message Integrity: HMAC-SHA2&lt;/li&gt;
                        &lt;li&gt;Message Hash: SHA2 256 bits&lt;/li&gt;
                        &lt;li&gt;Asymmetric encryption: RSA 2048 bits&lt;/li&gt;
                        &lt;li&gt;Symmetric-key algorithm: AES 128 bits&lt;/li&gt;
                        &lt;li&gt;Password Hashing: Argon2, PBKDF2, Scrypt, Bcrypt.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="NIST SP 800-175b" url="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-175b.pdf"/>
                        <reference name="NIST SP 800-57" url="https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-57pt1r4.pdf"/>
                        <reference name="OWASP cryptographic storage" url="https://www.owasp.org/index.php/Cryptographic_Storage_Cheat_Sheet"/>
                        <reference name="OWASP key management" url="https://www.owasp.org/index.php/Key_Management_Cheat_Sheet"/>
                        <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
                    </references>
                    <standards>
                        <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="164.312(c)(1)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SC-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.1.7.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.9.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.2.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.9.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that the Cryptographic protocols comply to the best practices listed bellow:
                            &lt;br /&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Key exchange: Diffie-Hellman key exchange with minimum 2048
                            bits&lt;/li&gt;
                            &lt;li&gt;Message Integrity: HMAC-SHA2&lt;/li&gt;
                            &lt;li&gt;Message Hash: SHA2 256 bits&lt;/li&gt;
                            &lt;li&gt;Asymmetric encryption: RSA 2048 bits&lt;/li&gt;
                            &lt;li&gt;Symmetric-key algorithm: AES 128 bits&lt;/li&gt;
                            &lt;li&gt;Password Hashing: Argon2, PBKDF2, Scrypt, Bcrypt.&lt;br /&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T09:33:09.745000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="crypto-operations" name="Ensure the application is implementing known good cryptographic operations" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;p&gt;Cryptography (or crypto) is one of the more advanced topics of information security, and one whose understanding requires the most schooling and experience. It is difficult to get right because there are many approaches to encryption, each with advantages and disadvantages that need to be thoroughly understood by web solution architects and developers. In addition, serious cryptography research is typically based in advanced mathematics and number theory, providing a serious barrier to entry.&lt;/p&gt; 
&lt;p&gt;Instead of building cryptographic capability from scratch, it is strongly recommended that peer reviewed and open solutions be used, such as the Google Tink project, Libsodium, and secure storage capability built into many software frameworks and cloud services.&lt;/p&gt; 
&lt;p&gt;Using crypto in a secure way is more complicated than choosing the right crypto algorithms. It also requires secure deployments, secure APIs, secure key-management, secure randomness generation, and secure protocols.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Random number, encryption or hashing algorithms, key lengths, rounds, ciphers or modes, shall be reconfigured, upgraded, or swapped at any time, to protect against cryptographic breaks.&lt;/li&gt; 
  &lt;li&gt;Nonces, initialization vectors, and other single use numbers must not be used more than once with a given encryption key. The method of generation must be appropriate for the algorithm being used.&lt;/li&gt; 
  &lt;li&gt;Encrypted data shall be authenticated via signatures, authenticated cipher modes, or HMAC to ensure that ciphertext is not altered by an unauthorized party.&lt;/li&gt; 
  &lt;li&gt;Cryptographic operations shall be constant-time, with no 'short-circuit' operations in comparisons, calculations, or returns, to avoid leaking information.&lt;br /&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Cryptographic Storage Cheat_Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html"/>
                        <reference name="OWASP Guide to Cryptography" url="https://www.owasp.org/index.php/Guide_to_Cryptography"/>
                        <reference name="OWASP Proactive Controls (C8: Protect Data Everywhere)" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c8-protect-data-everywhere.html"/>
                    </references>
                    <standards>
                        <standard ref="6.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.2.8" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;p&gt;Review the source code:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Searching for the following keywords to check if any weak encryption algorithm is used: &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;MD4, MD5, RC4, RC2, DES, Blowfish, SHA-1, ECB&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Searching for &amp;quot;ECB&amp;quot; or &amp;quot;Cipher.getInstance&amp;quot;, the ECB should not be used in symmetric encryption.&lt;/li&gt; 
 &lt;li&gt;Review if different IV (initial Vector) is used.&lt;/li&gt; 
 &lt;li&gt;Use static code analysis tool to do source code review related with insecure crypto modes of operation. &lt;/li&gt; 
&lt;/ul&gt; 
&lt;span&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt;&lt;/span&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP Codereview practices for Crytography" url="https://www.owasp.org/index.php/Codereview-Cryptography"/>
                            <reference name="OWASP Testing for Weak Encryption (OTG-CRYPST-004)" url="https://www.owasp.org/index.php/Testing_for_Weak_Encryption_(OTG-CRYPST-004)"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-09-26T13:19:24.775000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="follow-jwt-standard-generation-token" name="Implement token generation for stateless server following the recommendation of the JWT standard" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;  SON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. A JWT token is created during authentication and is verified by the server (or servers) before any processing. &lt;/div&gt; &lt;div&gt;  However, JWT's are often not saved by the server after initial creation. JWT's are typically created and then handed to a client without being saved by the server in any way. The integrity of the token is maintained through the use of digital signatures so a server can later verify that the JWT is still valid and not been tampered with since its creation. &lt;/div&gt; &lt;div&gt;  This approach is both stateless and portable in the way that client and server technologies can be different yet still interact. &lt;/div&gt; &lt;div&gt;  We shall ensure and implement the requirements to protect the stateless token for digital signatures, encryption and other countermeasures following the requirements of JWT standard. &lt;/div&gt; &lt;div&gt;  &lt;br /&gt; &lt;/div&gt; &lt;div&gt;  &lt;b&gt;Remediation:&lt;/b&gt; &lt;/div&gt; &lt;div&gt;  &lt;div style=""&gt;   To create a JWT, the following steps are performed. The order of the steps is not significant in cases where there are no dependencies between the inputs and outputs of the steps.&amp;nbsp;  &lt;/div&gt;  &lt;div&gt;   &lt;ol&gt;    &lt;li&gt;Create a JWT Claims Set containing the desired claims.&amp;nbsp; Note that whitespace is explicitly allowed in the representation and no canonicalization need be performed before encoding.&lt;/li&gt;    &lt;li&gt;Let the Message be the octets of the UTF-8 representation of the JWT Claims Set.&lt;/li&gt;    &lt;li&gt;Create a JOSE Header containing the desired set of Header Parameters. The JWT MUST conform to either the [JWS] or [JWE] specification. Note that whitespace is explicitly allowed in the representation and no canonicalization need be performed before encoding.&lt;/li&gt;    &lt;li&gt;Depending upon whether the JWT is a JWS or JWE, there are two cases:&lt;/li&gt;    &lt;ul&gt;     &lt;li&gt;If the JWT is a JWS, create a JWS using the Message as the JWS Payload; all steps specified in [JWS] for creating a JWS MUST be followed.&lt;/li&gt;     &lt;li&gt;Else, if the JWT is a JWE, create a JWE using the Message as the plaintext for the JWE; all steps specified in [JWE] for creating a JWE MUST be followed.&lt;/li&gt;    &lt;/ul&gt;    &lt;li&gt;If a nested signing or encryption operation will be performed, let the Message be the JWS or JWE, and return to Step 3, using a &amp;quot;cty&amp;quot; (content type) value of &amp;quot;JWT&amp;quot; in the new JOSE Header created in that step.&lt;/li&gt;    &lt;li&gt;Otherwise, let the resulting JWT be the JWS or JWE.&lt;/li&gt;   &lt;/ol&gt;  &lt;/div&gt; &lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Proactive Controls [C6]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                        <reference name="RFC 7519" url="https://tools.ietf.org/html/rfc7519"/>
                    </references>
                    <standards>
                        <standard ref="3.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Verify that stateless token use digital signatures, encryption and other countermeasures to be protected against tampering, enveloping, relay, null cipher and key substitution attacks. &lt;div&gt;  &lt;div&gt;   When validating a JWT, the following steps are performed. The order of the steps is not significant in cases where there are no dependencies between the inputs and outputs of the steps.&amp;nbsp; If any of the listed steps fail, then the JWT MUST be rejected -- that is, treated by the application as an invalid input.  &lt;/div&gt;  &lt;div&gt;   &lt;ol&gt;    &lt;li&gt;Verify that the JWT contains at least one period ('.') character.&lt;/li&gt;    &lt;li&gt;Let the Encoded JOSE Header be the portion of the JWT before the first period ('.') character.&lt;/li&gt;    &lt;li&gt;Base64url decode the Encoded JOSE Header following the restriction that no line breaks, whitespace, or other additional characters have been used.&lt;/li&gt;    &lt;li&gt;Verify that the resulting octet sequence is a UTF-8-encoded representation of a completely valid JSON object conforming to RFC 7159 [RFC7159]; let the JOSE Header be this JSON object.&lt;/li&gt;    &lt;li&gt;Verify that the resulting JOSE Header includes only parameters and values whose syntax and semantics are both understood and supported or that are specified as being ignored when not understood.&amp;nbsp;&lt;/li&gt;    &lt;li&gt;Determine whether the JWT is a JWS or a JWE using any of the methods described in Section 9 of [JWE].&lt;/li&gt;    &lt;li&gt;Depending upon whether the JWT is a JWS or JWE, there are two cases:&lt;/li&gt;    &lt;ul&gt;     &lt;li&gt;If the JWT is a JWS, follow the steps specified in [JWS] for validating a JWS.&amp;nbsp; Let the Message be the result of base64url decoding the JWS Payload.&lt;/li&gt;     &lt;li&gt;Else, if the JWT is a JWE, follow the steps specified in [JWE] for validating a JWE.&amp;nbsp; Let the Message be the resulting plaintext.&lt;/li&gt;    &lt;/ul&gt;    &lt;li&gt;If the JOSE Header contains a &amp;quot;cty&amp;quot; (content type) value of &amp;quot;JWT&amp;quot;, then the Message is a JWT that was the subject of nested signing or encryption operations.&amp;nbsp; In this case, return to Step 1, using the Message as the JWT.&lt;/li&gt;    &lt;li&gt;Otherwise, base64url decode the Message following the restriction that no line breaks, whitespace, or other additional characters have been used.&lt;/li&gt;    &lt;li&gt;Verify that the resulting octet sequence is a UTF-8-encoded representation of a completely valid JSON object conforming to RFC 7159 [RFC7159]; let the JWT Claims Set be this JSON object.&lt;/li&gt;   &lt;/ol&gt;Finally, note that it is an application decision which algorithms may be used in a given context.&amp;nbsp; Even if a JWT can be successfully validated, unless the algorithms used in the JWT are acceptable to the application, it SHOULD reject the JWT.  &lt;/div&gt; &lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T15:54:32.995000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CSD-KEY-MGMT" name="Isolate cryptographic processes - including master secrets - and consider the use of a virtualized or physical hardware key vaults (HSM)." platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Cryptographic processes require the use of a private key or a secret. If this information lives
                        with the component, a compromise of the system could lead to this private key or secret being
                        stolen. This would give the attacker access to all information.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The way to prevent this is to keep the cryptographic functionalities on a separate service that
                        perform the encryption/decryption on demand. It is better if this service uses virtualized or
                        physical hardware key vaults like a Hardware Security Module because those devices store the
                        private key and secrets securely.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        They often allow a key or secret generation process and implement security measures to prevent
                        this information being extracted from them.&amp;nbsp;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="SC-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-17" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.1.1.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.7.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="1.6.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.10.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.8.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.6.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.10.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.8.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Identify the parts of your component which are using cryptographic functions.&lt;/li&gt;
                            &lt;li&gt;Check they are implemented by an external service securely configured. &lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T08:23:48.525000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-330" name="Use a cryptographically secure pseudo-random number generator" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Use a well-vetted algorithm that is currently considered to be strong and secure by experts in
                        the field and ensure well-tested implementation with adequate length seeds. In general, if a
                        pseudo-random number generator is not advertised as being cryptographically secure, then it is
                        probably a statistical PRNG and should not be used in a security-sensitive context.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Pseudo-random number generators can produce predictable numbers if the generator is known and
                        the seed can be guessed. A 256-bit seed is a good starting point for producing a &amp;quot;random
                        enough&amp;quot; number.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Ensure that all random numbers, especially those used for cryptographic parameters (keys, IV's,
                        MAC tags), random file names, random GUIDs, and random strings are generated in a
                        cryptographically strong fashion.
                        &lt;br /&gt;
                        &lt;br /&gt;Ensure that random algorithms are seeded with sufficient entropy.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use a secure pseudo-random number generator ensuring it leverages an appropriate length seed.
                        The recommendation by FIPS 140-2 is 256-bit seed.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;Tools like NIST RNG Test tool (as used in PCI PTS Derived Test Requirements) can be
                        used to comprehensively assess the quality of a Random Number Generator by reading e.g. 128MB of
                        data from the RNG source and then assessing its randomness properties with the tool.
                        &lt;br /&gt;
                        &lt;br /&gt;The following libraries are considered weak random numbers generators and should not
                        be used.
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;C library: random(), rand() instead use getrandom(2) instead&lt;/li&gt;
                        &lt;li&gt;Java library: java.util.Random() instead use java.security.SecureRandom instead&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;br /&gt;For secure random number generation, refer to NIST SP 800-90A. CTR-DRBG, HASH-DRBG,
                        HMAC-DRBG are recommended. Refer to NIST SP800-22 A Statistical Test Suite for Random and
                        Pseudorandom Number Generators for Cryptographic Applications, and the testing toolkit.
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="NIST Security Policies for Random and Pseudorandom Number Generators for Cryptographic Applications" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-22r1a.pdf"/>
                    </references>
                    <standards>
                        <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="6.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that an adequately strong algorithm is used to generate random values, and that
                            those random values are of a minimum 256-bit seed.
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-20T08:09:34.379000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="pseudo-random-number-generator" name="Use a cryptographically secure pseudo-random number generator" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;span&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Use a well-vetted algorithm that is currently considered to be strong and secure by experts in the field and ensure well-tested implementation with adequate length seeds. In general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in a security-sensitive context.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a &amp;quot;random enough&amp;quot; number.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;/font&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Ensure that all random numbers, especially those used for cryptographic parameters (keys, IV's, MAC tags), random file names, random GUIDs, and random strings are generated in a cryptographically strong fashion.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Ensure that random algorithms are seeded with sufficient entropy&lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;, containing at least 112 bits of entropy (typically a six digital random number is sufficient)&lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;.&amp;nbsp; If less than 112 bits of entropy, salted with a unique and random 32-bit salt and hashed with an approved one-way hash.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Use a secure pseudo-random number generator ensuring it leverages an appropriate length seed. The recommendation by FIPS 140-2 is 256-bit seed.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Ensure that the challenge nonce was generated with at least 64 bits longer and it shall be unique&amp;nbsp;&lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;over the lifetime of the cryptographic device.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Tools like NIST RNG Test tool (as used in PCI PTS Derived Test Requirements) can be used to comprehensively assess the quality of a Random Number Generator by reading e.g. 128MB of data from the RNG source and then assessing its randomness properties with the tool.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;The following libraries are considered weak random numbers generators and should not be used.&amp;nbsp;&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;C library: random(), rand() instead use getrandom(2) instead&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Java library: java.util.Random() instead use java.security.SecureRandom instead&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
 &lt;/ul&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;For secure random number generation, refer to NIST SP 800-90A. CTR-DRBG, HASH-DRBG, HMAC-DRBG are recommended. Refer to NIST SP800-22 A Statistical Test Suite for Random and Pseudorandom Number Generators for Cryptographic Applications, and the testing toolkit.&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="NIST Security Policies for Random and Pseudorandom Number Generators for Cryptographic Applications" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-22r1a.pdf"/>
                    </references>
                    <standards>
                        <standard ref="5.1.3.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.7.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.7.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.8.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.9.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.7.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.8.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.9.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;span&gt;&lt;span style="font-size: 11pt; font-family: Arial; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check that an adequately strong algorithm is used to generate random values, and that those random values are of a minimum 256-bit seed.&lt;/span&gt;&lt;/span&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T15:30:26.322000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ASVS-7.2" name="Verify that all cryptographic modules fail securely, and errors are handled in a way that does not enable oracle padding." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Encryption should fail closed so that data does not get stored in an unprotected state.
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        To protect against padding oracles, you want to make sure that your application does not return
                        a different error when the padding is wrong. The best way to do this is an Encrypt-then-MAC
                        construction, where a Message Authentication Code (MAC) is applied to the ciphertext. If the MAC
                        fails, you don't even need to look at the padding. If the MAC is correct, it is
                        cryptographically unlikely that the padding has been tampered with.
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="SEI CERT Oracle Coding Standard for Java. MSC61-J. Do not use insecure or weak cryptographic algorithms" url="https://wiki.sei.cmu.edu/confluence/display/java/MSC61-J.+Do+not+use+insecure+or+weak+cryptographic+algorithms"/>
                    </references>
                    <standards>
                        <standard ref="6.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="6.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;b&gt;Testing for padding oracle vulnerabilities: &lt;/b&gt;
                            &lt;br /&gt;
                            &lt;p&gt; First the possible input points for padding oracles must be identified. Generally
                            the following conditions must be met: &lt;/p&gt;
                            &lt;ol&gt;
                            &lt;li&gt; The data is encrypted. Good candidates are values which appear to be random.&lt;/li&gt;
                            &lt;li&gt; A block cipher is used. The length of the decoded (Base64 is used often) cipher
                            text is a multiple of common cipher block sizes like 8 or 16 bytes. Different cipher texts
                            (e.g. gathered by different sessions or manipulation of session state) share a common
                            divisor in the length.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP Testing Guide. Testing for Padding Oracle (OTG-CRYPST-002)" url="https://www.owasp.org/index.php/Testing_for_Padding_Oracle_(OTG-CRYPST-002)"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-11-16T17:22:00.269000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="STORE-SENSITIVE-DATA" name="Store sensitive data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-151" name="An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials. Alternatively, an attacker may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. Identity Spoofing attacks need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the adversary attempts to change the apparent identity. This attack differs from Content Spoofing attacks where the adversary does not wish to change the apparent identity of the message but instead wishes to change what the message says. In an Identity Spoofing attack, the adversary is attempting to change the identity of the content. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="CSD-KEY-MGMT" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-287">
                                    <controls>
                                        <control ref="CSD-KEY-MGMT" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-474" name="An attacker obtains an authoritative or reputable signer's private signature key by theft " state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker obtains an authoritative or reputable signer's private signature key by
                                theft and then uses this key to forge signatures from the original signer to mislead a
                                victim into performing actions that benefit the attacker.
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="CSD-KEY-MGMT" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-522">
                                    <controls>
                                        <control ref="CSD-KEY-MGMT" mitigation="100"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-320">
                                    <controls>
                                        <control ref="CSD-KEY-MGMT" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-485" name="An attacker obtains an authoritative signer's private signature key by exploiting a cryptographic weaknesses" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker obtains an authoritative or reputable signer's private signature key by
                                exploiting a cryptographic weakness in the signature algorithm or pseudorandom number
                                generation and then uses this key to forge signatures from the original signer to
                                mislead a victim into performing actions which benefit the attacker.
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="ASVS-7.2" mitigation="34"/>
                                <control ref="CWE-330" mitigation="32"/>
                                <control ref="STRONG-ALGORITHMS-PROTOCOLS" mitigation="34"/>
                                <control ref="follow-jwt-standard-generation-token" mitigation="10"/>
                                <control ref="pseudo-random-number-generator" mitigation="10"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-345">
                                    <controls>
                                        <control ref="follow-jwt-standard-generation-token" mitigation="10"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-693">
                                    <controls>
                                        <control ref="ASVS-7.2" mitigation="34"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-330">
                                    <controls>
                                        <control ref="CWE-330" mitigation="32"/>
                                        <control ref="pseudo-random-number-generator" mitigation="10"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-327">
                                    <controls>
                                        <control ref="STRONG-ALGORITHMS-PROTOCOLS" mitigation="34"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-20" name="Encryption Brute Forcing" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="crypto-operations" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-385">
                                    <controls>
                                        <control ref="crypto-operations" mitigation="100"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-326">
                                    <controls>
                                        <control ref="crypto-operations" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="USER-REG:SELF" name="Self registration of users" desc="Server side registration functions" tags="" position="25" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-799" name="Improper Control of Interaction Frequency" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-799: Improper Control of Interaction Frequency" url="https://cwe.mitre.org/data/definitions/799.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:17.727000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not properly limit the number or frequency of interactions that it has with
                        an actor, such as the number of incoming requests.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;This can allow the actor to perform actions more frequently than expected. The actor
                        could be a human or an automated process such as a virus or bot. This could be used to cause a
                        denial of service, compromise program logic (such as limiting humans to a single vote), or other
                        consequences. For example, an authentication routine might not limit the number of times an
                        attacker can guess a password. Or, a web site might conduct a poll but only expect humans to
                        vote a maximum of once a day.
                        &lt;/div&gt;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="network-rate-limit" name="Implement application and network rate limiting" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="">
                    <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and&amp;nbsp;&lt;span class="caps"&gt;ISP&lt;/span&gt;&amp;nbsp;environment may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks from multiple sources to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (&lt;span class="caps"&gt;WAF&lt;/span&gt;) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g.&amp;nbsp;&lt;span class="caps"&gt;HTTP&lt;/span&gt;headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a&amp;nbsp;&lt;span class="caps"&gt;CAPTCHA&lt;/span&gt;, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;font size="4"&gt;&lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;&lt;/font&gt;&lt;/p&gt; 
&lt;div&gt;
  Implement the mechanisms to lockout accounts:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased per each new failed attempt until an hour as maximum,&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;When the application detects that an account is locked more times than usual, this account shall be disabled (no more than 100 failure attempts). A disabled account shall only be restored by an administrator.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;When the application detects active brute-force attacks, the application shall require a&amp;nbsp;&lt;span class="caps"&gt;CAPTCHA&lt;/span&gt;, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt; 
  &lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt; 
  &lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
                    </references>
                    <standards>
                        <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="13.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;p&gt;Use tools like &lt;a href="https://www.thc.org/thc-hydra/"&gt;&lt;span class="caps"&gt;THC&lt;/span&gt;-Hydra&lt;/a&gt;, &lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;&lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;&lt;/a&gt; or &lt;a href="https://portswigger.net/burp/"&gt;Burp Suite&lt;/a&gt;to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Perform a simulation of the attack against the login function.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that the function is blocked for your source after n attempts.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that there is a log alerting function for an unusual amount of failed log in attempts, even if they originated from different sources.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:42">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="network-rate-limit-login" name="Implement application and network rate limiting on the login function" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="">
                    <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and&amp;nbsp;&lt;span class="caps"&gt;ISP&lt;/span&gt;&amp;nbsp;environment may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks from multiple sources to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (&lt;span class="caps"&gt;WAF&lt;/span&gt;) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g.&amp;nbsp;&lt;span class="caps"&gt;HTTP&lt;/span&gt;headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a&amp;nbsp;&lt;span class="caps"&gt;CAPTCHA&lt;/span&gt;, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;font size="4"&gt;&lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;&lt;/font&gt;&lt;/p&gt; 
&lt;div&gt;
  Implement the mechanisms to lockout accounts:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased per each new failed attempt until an hour as maximum,&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;When the application detects that an account is locked more times than usual, this account shall be disabled (no more than 100 failure attempts). A disabled account shall only be restored by an administrator.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;When the application detects active brute-force attacks, the application shall require a&amp;nbsp;&lt;span class="caps"&gt;CAPTCHA&lt;/span&gt;, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt; 
  &lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt; 
  &lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
                    </references>
                    <standards>
                        <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;p&gt;Use tools like &lt;a href="https://www.thc.org/thc-hydra/"&gt;&lt;span class="caps"&gt;THC&lt;/span&gt;-Hydra&lt;/a&gt;, &lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;&lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;&lt;/a&gt; or &lt;a href="https://portswigger.net/burp/"&gt;Burp Suite&lt;/a&gt;to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Perform a simulation of the attack against the login function.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that the function is blocked for your source after n attempts.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that there is a log alerting function for an unusual amount of failed log in attempts, even if they originated from different sources.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:42">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="USER REGISTRATION" name="User registration" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-383-USERNAME-REG" name="Usernames and/or email addresses are enumerated through error messages" state="Expose" source="MANUAL" owner="" library="">
                            <desc>The registration function could reveal existing usernames or email addresses
                                through error
                                messages if users sign up and choose a username of an existing user. Attackers could
                                use
                                automated scripts to enumerate valid usernames or email addresses based on these
                                error
                                messages.
                            </desc>
                            <riskRating confidentiality="25" integrity="25" availability="1" easeOfExploitation="50"/>
                            <references>
                                <reference name="WASC-42 Abuse of functionality" url="http://projects.webappsec.org/w/page/13246913/Abuse%20of%20Functionality"/>
                            </references>
                            <controls>
                                <control ref="network-rate-limit" mitigation="50"/>
                                <control ref="network-rate-limit-login" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-799">
                                    <controls>
                                        <control ref="network-rate-limit" mitigation="50"/>
                                        <control ref="network-rate-limit-login" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="SERVICE:SENS-DATA:STORAGE" name="Sensitive Data: Storage by a service" desc="Storage of sensitive data on a service" tags="" position="26" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-311" name="A connection to an external system is performed in plain text" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-22T09:56:18.574000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Connections made in plain text are not only target for interception but, even when the component is not dealing with sensitive data, a man in the middle attack is possible and the attacker could pretend to be, i.e. an authentication system to gain the user's credentials.</desc>
                </weakness>
                <weakness ref="EU-GDPR-UNRECOVERED-SENSITIVE-DATA" name="Unrecovered sensitive data" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-04T15:57:14.979000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The sensitive data cannot be recovered after the data has been accidentally or intentionally deleted due to non-existent data backup.
          </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="store-backups-securely" name="Encrypt Backups securely on the host (data at rest)" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Sensitive data and Backups of sensitive data shall be stored securely by encryption (data at rest). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Cryptographically strong symmetric or asymmetric (public-key) encryption should be used to protect the data.&lt;/li&gt; 
  &lt;li&gt;Encryption should be performed before the data is written to disk or other persistent storage.&lt;/li&gt; 
  &lt;li&gt;The key for encrypting and decrypting the data should not be accessible from the same host.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The encryption and decryption operation should be performed on a different host.&lt;/li&gt; 
  &lt;li&gt;A recognized, proven, and tested implementation/library should be used (in preference to a bespoke implementation).&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="10.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-28" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="8.1.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the functions of the application which are storing backups with sensitive data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;For each of the functions check they are using an external service to encrypt the data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Check that neither the sensitive data nor the keys used to encrypt the data are stored after the encryption process completes.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-29T10:47:33.932000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-311-AT-REST" name="Encrypt data stored on the host (data at rest)" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        &lt;div&gt;
                        Data stored on the server or the client must be protected by encryption (data
                        &lt;i&gt;at rest&lt;/i&gt;).
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Cryptographically strong symmetric or asymmetric (public-key) encryption&amp;nbsp;should
                        be used to protect the data.&lt;/li&gt;
                        &lt;li&gt;Encryption should be performed before the data is written to disk or other persistent
                        storage.&lt;/li&gt;
                        &lt;li&gt;The key for encrypting and decrypting the data should &lt;i&gt;not&lt;/i&gt; be
                        accessible from the same host.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The encryption and decryption operation should be performed on a different host.&lt;/li&gt;
                        &lt;li&gt;A recognized, proven, and tested implementation/library should be used (in preference
                        to a bespoke implementation).&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="10.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-28" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="6.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Check the functions of the application which are storing sensitive data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each of the functions check they are using an external service to encrypt the
                            data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that neither the sensitive data nor the keys used to encrypt the data are
                            stored after the encryption process completes.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:17.905000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="EU-GDPR-BACKUP" name="Implement a Backup and Recovery process" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Ensure backup policy is active and tested.The policy should describe the required recovery time objective (RTO) and recovery point objective (RPO) so that the availability of personal data can be restored in a timely manner (based upon the requirements specified by the DPO/CISO).
          &lt;br /&gt;&lt;br /&gt;
          Ensure an SLA has been defined for data availability. How 'timely manner' will be interpreted depends on your SLA. 
          </desc>
                    <implementations/>
                    <references>
                        <reference name="EU GDPR - EU Data Protection" url="http://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
                    </references>
                    <standards>
                        <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
                        <standard ref="8.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>
                &lt;ol&gt;
                &lt;li&gt;Verify backup policy documentation exists that are up-to-date and in compliance with the requirements of the Data Protection Practitioner.&lt;/li&gt;
                &lt;li&gt;Regularly test data backup procedures and data restoration.&lt;/li&gt;
                &lt;/ol&gt;
            </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-01-18T14:48:40.303000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="STORE SENSITIVE DATA" name="Store sensitive data" desc="" library="">
                    <threats>
                        <threat ref="EU-GDPR-LOSS-PERSONAL-DATA" name="Loss of personal data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Personal data can be lost by (accidental or malicious) deletion and system failures.</desc>
                            <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="EU-GDPR-BACKUP" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="EU-GDPR-UNRECOVERED-SENSITIVE-DATA">
                                    <controls>
                                        <control ref="EU-GDPR-BACKUP" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="BACKUP-COMPROMISE" name="Sensitive data is compromised if a backup of the data is compromised" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Sensitive data could be compromised if an attacker gained access to a backup copy of
                                that data.
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CWE-311-AT-REST" mitigation="100"/>
                                <control ref="store-backups-securely" mitigation="10"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-311">
                                    <controls>
                                        <control ref="CWE-311-AT-REST" mitigation="100"/>
                                        <control ref="store-backups-securely" mitigation="10"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="HOST-COMPROMISE" name="Sensitive data is compromised if the host itself is compromised" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If sensitive data is stored or processed on the host, then should the host itself be
                                compromised by an attacker, the confidentiality and/or the integrity of the data would
                                also be at risk.
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="CWE-311-AT-REST" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-311">
                                    <controls>
                                        <control ref="CWE-311-AT-REST" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="SENS-DATA:TRANSPORT" name="Sensitive Data: Transport" desc="Transport sensitive data between client and server" tags="" position="27" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:43">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
                </weakness>
                <weakness ref="CWE-485-PREPROD" name="Production data used in pre-production system" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.073000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Production data used in pre-production system might not be properly protected as applications
                        in pre-production are not usually well tested. pre-production environments usually lack from the
                        strong Countermeasures that are set for production environments. &amp;nbsp;
                    </desc>
                </weakness>
                <weakness ref="CWE-327" name="Use of a Broken or Risky Cryptographic Algorithm" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T09:31:12.640000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The use of a broken or risky cryptographic algorithm is an
                        unnecessary risk that may result in the exposure of sensitive
                        information.
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Data passed between the client and server should be protected by encryption in transit.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Implement cryptographically strong TLS end-to-end encryption between the client and
                        server, terminating within a secure environment on the server-side.&lt;/li&gt;
                        &lt;li&gt;Consider use of client certificates to prevent interception of (or man-in-the-middle
                        attacks on) the encrypted connection.&lt;/li&gt;
                        &lt;li&gt;Alternatively, asymmetric (public-key) encryption could be utilized, although a
                        recognized, proven, and tested implementation/library should be used&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Check the client to server connections use and enforce established encryption
                            protocols, e.g. TLSv1.2.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Verify only strong cipher suites are in use and permitted.&lt;/li&gt;
                            &lt;li&gt;Ensure attempts to use unencrypted transport are rejected or redirected (e.g. HTTP
                            instead of HTTPS)&lt;/li&gt;
                            &lt;li&gt;Review configuration of protocols and services against best-practice guidelines.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.133000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-485-PREPROD" name="Ensure personal and other sensitive data is not exposed in pre-production environments" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Pre-production environments should not expose personally identifiable information (PII) or other
                        sensitive information. Often, such environments are populated with production data for testing
                        or other purposes. &amp;nbsp;Security weaknesses, either in the software or controls around
                        access to pre-prod systems, can unnecessarily expose sensitive data. This is often a breach of
                        legal and commercial requirements, including various governmental data protection and privacy
                        acts, and industry regulations such as those required by the Payments Card Industry (PCI).
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Where test data is derived from production data, the following must be observed:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Data masking or obfuscation techniques must be used to anonymize the data used in
                        pre-production. &amp;nbsp;For example, all but the start and end of a credit card number must be
                        removed/replaced&lt;/li&gt;
                        &lt;li&gt;No real personally identifiable information (PII) or other sensitive data should be
                        present in Pre-prod. &amp;nbsp;For example, names, dates of birth, and other personal
                        information must be removed, randomized, or replaced.&lt;/li&gt;
                        &lt;li&gt;Only data that has been processed and anonymized should be transferred into pre-prod;
                        ideally representative test data should be generated rather than relying even on obfuscated
                        production data.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Check the data used on the pre-production environment is not duplicated from
                            production.&lt;/li&gt;
                            &lt;li&gt;Where production data is modified for use in pre-production, review the
                            transformations applied to ensure all PII and other sensitive data is removed, obfuscated,
                            or otherwise scrubbed.&lt;/li&gt;
                            &lt;li&gt;Verify that pre-prod data is not real, and does not constitute PII data.&lt;/li&gt;
                            &lt;li&gt;Consider use of 'canaries' or other deliberately injected values in production to
                            perform random searches in pre-prod environments for data that has been inappropriately
                            migrated or used.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.121000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="STRONG-ALGORITHMS-PROTOCOLS" name="Ensure that only strong algorithms, cyphers and protocols are used" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Ensure that the application is using strong algorithms, cyphers and protocols. The general
                        practice and required minimum key lengths depend on the scenarios listed below.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Key exchange: Diffie-Hellman key exchange with minimum 2048 bits&lt;/li&gt;
                        &lt;li&gt;Message Integrity: HMAC-SHA2&lt;/li&gt;
                        &lt;li&gt;Message Hash: SHA2 256 bits&lt;/li&gt;
                        &lt;li&gt;Asymmetric encryption: RSA 2048 bits&lt;/li&gt;
                        &lt;li&gt;Symmetric-key algorithm: AES 128 bits&lt;/li&gt;
                        &lt;li&gt;Password Hashing: Argon2, PBKDF2, Scrypt, Bcrypt.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="NIST SP 800-175b" url="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-175b.pdf"/>
                        <reference name="NIST SP 800-57" url="https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-57pt1r4.pdf"/>
                        <reference name="OWASP cryptographic storage" url="https://www.owasp.org/index.php/Cryptographic_Storage_Cheat_Sheet"/>
                        <reference name="OWASP key management" url="https://www.owasp.org/index.php/Key_Management_Cheat_Sheet"/>
                        <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
                    </references>
                    <standards>
                        <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="164.312(c)(1)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="10.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SC-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.1.7.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.9.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="6.2.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.9.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="6.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that the Cryptographic protocols comply to the best practices listed bellow:
                            &lt;br /&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Key exchange: Diffie-Hellman key exchange with minimum 2048
                            bits&lt;/li&gt;
                            &lt;li&gt;Message Integrity: HMAC-SHA2&lt;/li&gt;
                            &lt;li&gt;Message Hash: SHA2 256 bits&lt;/li&gt;
                            &lt;li&gt;Asymmetric encryption: RSA 2048 bits&lt;/li&gt;
                            &lt;li&gt;Symmetric-key algorithm: AES 128 bits&lt;/li&gt;
                            &lt;li&gt;Password Hashing: Argon2, PBKDF2, Scrypt, Bcrypt.&lt;br /&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T09:33:09.745000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="ACCESS SENSITIVE DATA" name="Access sensitive data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-158" name="Sensitive data is compromised through network sniffing attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker monitoring network traffic between nodes of a public or multicast network.&amp;nbsp;
                                &lt;div&gt;
                                &lt;ul&gt;
                                &lt;li&gt;The attacker need not be able to prevent reception or change content but must
                                simply be able to observe and read the traffic.&amp;nbsp;&lt;/li&gt;
                                &lt;li&gt;The attacker might precipitate or indirectly influence the content of the
                                observed transaction, but the attacker is never the intended recipient of the
                                information.&amp;nbsp;&lt;/li&gt;
                                &lt;/ul&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                This differs from other sniffing attacks in that it is over a public network rather via
                                some other communications channel, such as radio.
                                &lt;br /&gt;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="CWE-319-TRANSPORT" mitigation="70"/>
                                <control ref="STRONG-ALGORITHMS-PROTOCOLS" mitigation="30"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-319">
                                    <controls>
                                        <control ref="CWE-319-TRANSPORT" mitigation="70"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-327">
                                    <controls>
                                        <control ref="STRONG-ALGORITHMS-PROTOCOLS" mitigation="30"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="PRE-PROD" name="Sensitive data is exposed to unauthorised personnel in a pre-production environment" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Pre-production environments are usually available to a wide group of developers and
                                testers who may not be authorized to view sensitive production data.
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="CWE-485-PREPROD" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-485-PREPROD">
                                    <controls>
                                        <control ref="CWE-485-PREPROD" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="sensitive-data-transport-https" name="Sensitive Data: Transport HTTPS" desc="HTTPS services accessed with a browser." tags="" position="75" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:43">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-295" name="Consider HTTP Public Key Pinning (HPKP)" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        HPKP is a Trust on First Use (TOFU) technique. The first time a web server tells a client via a
                        special HTTP header which public keys belong to it, the client stores this information for a
                        given period of time. When the client visits the server again, it expects at least one
                        certificate in the certificate chain to contain a public key whose fingerprint is already known
                        via HPKP. If the server delivers an unknown public key, the client should present a warning to
                        the user.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Verify that TLS certificate public key pinning (HPKP) is implemented with production
                        and backup public keys. For more information, please see the references below.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;To ensure the authenticity of a server's public key used in TLS sessions, this public
                        key is wrapped into a X.509 certificate which is usually signed by a certificate authority (CA).
                        Web clients such as browsers trust a lot of these CAs, which can all create certificates for
                        arbitrary domain names. If an attacker is able to compromise a single CA, they can perform MITM
                        attacks on various TLS connections. HPKP can circumvent this threat for the HTTPS protocol by
                        telling the client which public key belongs to a certain web server.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        There are risks associated with HPKP, in particular HPKP Suicide and Ransom.
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure certificate recovery processes are in place.&lt;/li&gt;
                        &lt;li&gt;Review expiration and revocation criteria for the certificates.&lt;/li&gt;
                        &lt;li&gt;Consider the risks associated with domain hijack and HPKP ransom.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="HPKP Issues" url="https://scotthelme.co.uk/im-giving-up-on-hpkp/"/>
                        <reference name="OWASP Secure Headers" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
                    </references>
                    <standards>
                        <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SC-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify endpoints that are served over HTTPS. &lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;If the risk policy mandates HPKP configuration, check that a request to the
                            service return the following headers (with the appropriate fields) on the HTTP response:
                            &lt;br /&gt;&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
                            &lt;p&gt;Public-Key-Pins: pin-sha256=&amp;quot;base64==&amp;quot;; max-age=expireTime [;
                            includeSubDomains][; report-uri=&amp;quot;reportURI&amp;quot;]&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="[MDN] - HTTP Public Key Pinning (HPKP)" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-22T10:18:34.396000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Data passed between the client and server should be protected by encryption in transit.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Implement cryptographically strong TLS end-to-end encryption between the client and
                        server, terminating within a secure environment on the server-side.&lt;/li&gt;
                        &lt;li&gt;Consider use of client certificates to prevent interception of (or man-in-the-middle
                        attacks on) the encrypted connection.&lt;/li&gt;
                        &lt;li&gt;Alternatively, asymmetric (public-key) encryption could be utilized, although a
                        recognized, proven, and tested implementation/library should be used&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Check the client to server connections use and enforce established encryption
                            protocols, e.g. TLSv1.2.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Verify only strong cipher suites are in use and permitted.&lt;/li&gt;
                            &lt;li&gt;Ensure attempts to use unencrypted transport are rejected or redirected (e.g. HTTP
                            instead of HTTPS)&lt;/li&gt;
                            &lt;li&gt;Review configuration of protocols and services against best-practice guidelines.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.133000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="secure-attributes-of-cookies" name="Secure the Cookies with their attributes" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  The session ID exchange mechanism based on cookies provides multiple security features in the form of cookie attributes that can be used to protect the exchange of the session ID: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Secure and HttpOnly Attribute:&lt;/b&gt;&amp;nbsp;a secure cookie is only sent to the server with an encrypted request over the HTTPS protocol. Even with Secure, sensitive information shall never be stored in cookies, as they are inherently insecure and this flag can't offer real protection. Starting with Chrome 52 and Firefox 52, insecure sites (http:) can't set cookies with the Secure directive. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To mitigate cross-site scripting (XSS) attacks, HttpOnly cookies are inaccessible to JavaScript's Document.cookie API; they are only sent to the server. For example, cookies that persist server-side sessions don't need to be available to JavaScript, and the HttpOnlyflag shall be set. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="background-color: white;"&gt;Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="background-color: white;"&gt;&lt;br /&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;SameSite Attribute: &lt;/b&gt;we shall configure the SameSite attribute to limit the exposure to against cross-site request forgery attacks. There are two possibilities: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;b&gt;Strict:&lt;/b&gt; the browser will only send cookies if the request originated from the website that set the cookie. If the request originated from a different URL than the URL of the current location, none of the cookies tagged with the Strict attribute will be included.&lt;/li&gt; 
  &lt;li&gt;&lt;b&gt;Lax:&lt;/b&gt; if the attribute is set to Lax, same-site cookies are withheld on cross-site subrequests, such as calls to load images or frames, but will be sent when a user navigates to the URL from an external site, for example, by following a link.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By default the SameSite is not configured, we shall configure with one of the above types, as we show below: 
&lt;/div&gt; 
&lt;div&gt;
  Set-Cookie: key=value; SameSite=Strict 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Domain and Path Attributes:&lt;/b&gt; The session token value issued after users have successfully identified and authenticated themselves is of equivalent value to the secrets the user presents to login, and must be protected accordingly.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;If the cookie domain attribute is too liberal, the cookie may be accessible to other hosts within the parent domain. This is a particular issue in multi-tenanted hosting, or where applications are delivered as subdomains of a third party parent domain.&lt;/li&gt; 
  &lt;li&gt;If the cookie path attribute is not appropriately restricted, the session token may be accessible from other applications or content on the server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The domain and the path attributes for the session cookie should be restricted to the fully qualified hostname on which the application is running. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For example: 
&lt;/div&gt; 
&lt;div&gt;
  Set-Cookie: session=token; Path=/theapp/; Domain=myapp.example.com; secure; HTTPOnly 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;__Host- prefix:&lt;/b&gt; ensure that all Cookies with a name starting with __Host- must be: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;set with the secure flag,&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;from a secure page (HTTPS),&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;not have a domain specified (and therefore aren't sent to subdomains)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;and the path must be &amp;quot;/&amp;quot;.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="__Host-Prefix" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"/>
                        <reference name="HttpOnly" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"/>
                        <reference name="Owasp Cheatsheet: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
                        <reference name="OWASP Proactive Controls [C6]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                        <reference name="OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md"/>
                    </references>
                    <standards>
                        <standard ref="7.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="7.1.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ul&gt;  &lt;li&gt;Using a browser, open the Web Developer tools.&amp;nbsp;&amp;nbsp;&lt;/li&gt;  &lt;li&gt;Load the Network inspection tab.&amp;nbsp;&lt;/li&gt;  &lt;li&gt;Load the endpoints of the application which set cookies (send the Set-Cookie HTTP header).&lt;/li&gt;  &lt;li&gt;Check that within the HTTP response, the Set-Cookie has got:&lt;/li&gt;  &lt;ul&gt;   &lt;li&gt;the path and domain attributes set to the most restrictive path and domain respectively.&lt;/li&gt;   &lt;li&gt;'HttpOnly' and 'secure' flag set and configured&lt;/li&gt;   &lt;li&gt;'SameSite' attribute configured.&lt;/li&gt;  &lt;/ul&gt;  &lt;li&gt;Check that all Cookies with a name starting with __Host- have got:&lt;/li&gt;  &lt;ul&gt;   &lt;li&gt;set with the secure flag,&amp;nbsp;&lt;/li&gt;   &lt;li&gt;from a secure page (HTTPS),&amp;nbsp;&lt;/li&gt;   &lt;li&gt;not have a domain specified (and therefore aren't sent to subdomains)&amp;nbsp;&lt;/li&gt;   &lt;li&gt;and the path must be &amp;quot;/&amp;quot;.&lt;/li&gt;  &lt;/ul&gt; &lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T15:19:22.428000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-693-STRICT-TRANSPORT-SECURITY" name="Set the HTTP security header 'Strict-Transport-Security' (HSTS)" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Modern browsers support the Strict-Transport-Security HTTP header. This header instructs the
                        browser to only communication over HTTPS for all subsequent requests to the domain, mitigating a
                        number of attacks designed to force users to switch to unencrypted transport to expose data.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Set the Strict-Transport-Security HTTP header in all server-responses.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;ul&gt;
                        &lt;/ul&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Secure Headers" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
                    </references>
                    <standards>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="14.4.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Check that for every request done to the service, the following header is
                            returned:&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            Strict-Transport-Security: max-age=31536000; includeSubDomains&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The attribute max-age should be of a reasonable wide period (&amp;gt;1y).&amp;nbsp;The
                            attribute includeSubDomains should be present. &amp;nbsp;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP - Strict Transport Security Cheat Sheet" url="https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:19.973000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="access-sensitive-data" name="Access sensitive data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-158-SESSION" name="User data or credentials are compromised through network sniffing or man in the middle attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker with access to the network path between the victim and the server could
                                employ a sniffer to sniff clear text traffic on the network. If the session ID is
                                transmitted in clear text, then the attacker could compromise it and thereby gain access
                                to the user's session.
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="75"/>
                            <references>
                                <reference name="WASC-04" url="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection"/>
                            </references>
                            <controls>
                                <control ref="CWE-295" mitigation="20"/>
                                <control ref="CWE-319-TRANSPORT" mitigation="40"/>
                                <control ref="CWE-693-STRICT-TRANSPORT-SECURITY" mitigation="20"/>
                                <control ref="secure-attributes-of-cookies" mitigation="20"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-319">
                                    <controls>
                                        <control ref="CWE-295" mitigation="20"/>
                                        <control ref="CWE-319-TRANSPORT" mitigation="40"/>
                                        <control ref="CWE-693-STRICT-TRANSPORT-SECURITY" mitigation="20"/>
                                        <control ref="secure-attributes-of-cookies" mitigation="20"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="SENS-DATA:TRANSPORT:TLS" name="Sensitive Data: Transport using SSL/TLS" desc="Transport sensitive data between client and server using SSL/TLS" tags="" position="28" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-370" name="Missing Check for Certificate Revocation after Initial Check" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-11-19T07:31:57.124000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not check the revocation status of a
                        certificate after its initial revocation check, which can cause the software to
                        perform privileged actions even after the certificate is revoked at a later
                        time.
                    </desc>
                </weakness>
                <weakness ref="CWE-327-POODLE" name="Padding Oracle On Downgraded Legacy Encryption (POODLE)" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-327: Use of a Broken or Risky Cryptographic Algorithm" url="https://cwe.mitre.org/data/definitions/327.html"/>
                            <reference name="Poodle paper" url="https://www.kb.cert.org/vuls/id/577193"/>
                            <reference name="Poodle paper" url="https://www.openssl.org/~bodo/ssl-poodle.pdf"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.328000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>SSL 3.0 [RFC6101] is an obsolete and insecure protocol. While for most practical purposes it
                        has been replaced by its successors TLS 1.0 [RFC2246], TLS 1.1 [RFC4346],and TLS 1.2 [RFC5246],
                        many TLS implementations remain backwards - compatible withSSL 3.0 to interoperate with
                        legacy systems in the interest of a smooth user experience. The protocol handshake provides for
                        authenticated version negotiation, so normally the latest protocol version common to the client
                        and the server will be used.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        However, even if a client and server both support a version of TLS, the security level offered by
                        SSL 3.0 is still relevant since many clients implement a protocol downgrade to work around
                        server-side interoperability bugs.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="SSL-WEAK-CIPHERS" name="Use of weak TLS cipher suites" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.298000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>A weak TLS cipher suite could allow an attacker to sniff the transmission by exploiting this
                        weakness.
                    </desc>
                </weakness>
                <weakness ref="SSL-WEAK-PROTOCOL" name="Use of weak TLS protocols" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.312000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>A cryptographically weak SSL/TLS protocol could allow an attacker to sniff the traffic or
                        impersonate the server.
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="PROPER-REVOCATION-CERTIFICATE" name="Configure and enable appropriate certification revocation" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Configure and enable appropriate certification revocation for each certificate created, such as
                        Online Certificate Status Protocol (OCSP) Stapling.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        OCSP is a protocol to check if an SSL certificate has been revoked. Instead of the client
                        downloading a large list of revoked certificates, they can simply submit a request to a CA
                        server, which returns a signed response with the certificate current status.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="Certificate revocation" url="https://medium.com/@alexeysamoshkin/how-ssl-certificate-revocation-is-broken-in-practice-af3b63b9cb3"/>
                    </references>
                    <standards>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SC-17" supportedStandardRef="NIST 800-53"/>
                        <standard ref="9.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that appropriate certification revocation is enabled and configured.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T09:28:58.345000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="TLS-STRONG-PROTOCOLS" name="Require cryptographically secure protocols (e.g. TLSv1.2 and above)" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Only cryptographically strong ciphers should be required. Best-practice dictates a subset of
                        'known good' ciphers and protocols be defined and enforced at the server. &amp;nbsp;This may,
                        however, have compatibility issues with older browsers, requiring a balance be sought between
                        accessibility and security.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Define and enforce a list of acceptable ciphers and protocols. Disable SSLv3 and
                        earlier protocols on the service.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Ideally only TLSv1.2 and newer should be supported&lt;/li&gt;
                        &lt;li&gt;If TLSv1.1 or 1.0 are required, known secure configurations and ciphers should be
                        selected.&lt;/li&gt;
                        &lt;li&gt;SSLv3.0 and earlier should not be used&lt;/li&gt;
                        &lt;/ul&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="Mozilla SSL Compatibility" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
                        <reference name="Mozilla SSL Config" url="https://ssl-config.mozilla.org/"/>
                        <reference name="SSL Labs - SSL/TLS Deployment Best Practices" url="https://www.ssllabs.com/projects/best-practices/"/>
                    </references>
                    <standards>
                        <standard ref="10.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SC-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-12" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="9.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="9.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L1"/>
                        <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
                        <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Use automated tools to identify all of the SSL/TLS protocols supported by the
                            service.&lt;/li&gt;
                            &lt;li&gt;Verify that TLSv1.2 is supported.&lt;/li&gt;
                            &lt;/ol&gt;Tools that can perform these tests are:
                            &lt;ul&gt;
                            &lt;li&gt;&lt;a href="https://www.continuumsecurity.net/bdd-security/"&gt;BDD-Security&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="https://www.ssllabs.com/"&gt;SSLabs&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="https://github.com/mozilla/cipherscan"&gt;cipherscan&lt;/a&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="test" url="http://www.test.com"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.345000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="TLS-STRONG-CIPHERS" name="Require cryptographically strong TLS cipher suites" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Only cryptographically strong ciphers should be required. Best-practice dictates a subset of '
                        &lt;i&gt;known good&lt;/i&gt;' ciphers and protocols be defined and enforced at the server.
                        &amp;nbsp;This may, however, have compatibility issues with older browsers, requiring a balance
                        be sought between accessibility and security.&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Define and enforce a list of acceptable ciphers and protocols&lt;/li&gt;
                        &lt;li&gt;Explicitly disable known-bad ciphers and protocols, such as:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Null and export ciphers&lt;/li&gt;
                        &lt;li&gt;DH, MD5 and other weak cryptography&lt;/li&gt;
                        &lt;li&gt;Ciphers with keys less than 128 bits&lt;/li&gt;
                        &lt;li&gt;CBC ciphers with TLSv1.0 or earlier&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="Mozilla SSL Compatibility" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
                        <reference name="Mozilla SSL Config" url="https://ssl-config.mozilla.org/"/>
                        <reference name="SSL Labs - SSL/TLS Deployment Best Practices" url="https://www.ssllabs.com/projects/best-practices/"/>
                    </references>
                    <standards>
                        <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SC-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-17" supportedStandardRef="NIST 800-53"/>
                        <standard ref="9.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="9.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="9.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L1"/>
                        <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
                        <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L2"/>
                        <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Use automated tools to identify all of the SSL/TLS protocols supported by the
                            service.&lt;/li&gt;
                            &lt;li&gt;Verify that cryptographically weak (also known as &amp;quot;export&amp;quot;
                            class) ciphers are not supported.&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;br /&gt;
                            &lt;/ol&gt;
                            &lt;/ol&gt;Tools that can perform these tests are:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;ul&gt;
                            &lt;li&gt;&lt;a href="https://www.continuumsecurity.net/bdd-security/" rel="nofollow"&gt;BDD-Security&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="https://www.ssllabs.com/" rel="nofollow"&gt;SSLabs&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="https://github.com/mozilla/cipherscan" rel="nofollow"&gt;cipherscan&lt;/a&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.335000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="ACCESS SENSITIVE DATA" name="Access sensitive data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-217" name="Sensitive data is compromised though attacks against SSL/TLS" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attackers could gain access to sensitive data in transit over an SSL connection by
                                exploiting weaknesses in the SSL configuration. The use of cryptographically weak
                                protocols and/or ciphers could be used to decrypt or otherwise gain access to the
                                encrypted data.
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="TLS-STRONG-CIPHERS" mitigation="50"/>
                                <control ref="TLS-STRONG-PROTOCOLS" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-327-POODLE">
                                    <controls>
                                        <control ref="TLS-STRONG-PROTOCOLS" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="SSL-WEAK-CIPHERS">
                                    <controls>
                                        <control ref="TLS-STRONG-CIPHERS" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="SSL-WEAK-PROTOCOL">
                                    <controls>
                                        <control ref="TLS-STRONG-PROTOCOLS" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="IRIUS-TRUST-SERVICE" name="Users lose trust in the system due to a perceived lack of security" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Users lose trust in the system because a key security mechanism, such as certificate
                                validation is not present and visible.&amp;nbsp; For example, should a TLS certificate
                                expire or become invalid then this is clearly displayed in the browser as a security
                                warning.&amp;nbsp; This could cause users to abandon the system.
                            </desc>
                            <riskRating confidentiality="25" integrity="50" availability="50" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="PROPER-REVOCATION-CERTIFICATE" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-370">
                                    <controls>
                                        <control ref="PROPER-REVOCATION-CERTIFICATE" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="INF-SERVER" name="Server" desc="Network connected server" tags="" position="29" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="UNPATCHED-SERVER" name="Recommended security patches are not applied" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.522000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When patches are not applied in a timely manner then the server or system could be vulnerable
                        to known security issues. These issues could be used by an attacker to gain access to the
                        system.&amp;nbsp;
                    </desc>
                </weakness>
                <weakness ref="UNNECESSARY-SERVICES" name="Unnecessary services are exposed" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.510000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The application exposes unnecessary services which increase the attack surface.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="PATCH-SERVER" name="Apply required security patches" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Vendors and other maintainers of software release patches in response to security flaws and
                        other bugs in their products.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Apply patches and other software updates in a timely manner to prevent unexpected
                        failures or exploitation.&lt;/li&gt;
                        &lt;li&gt;Clearly define an approach for testing and applying patches, in particular security
                        patches, with expected timescales. &amp;nbsp;There is often a small window between release of a
                        patch, and potentially malicious actors reverse-engineering the patch to identify and exploit
                        the flaw.&lt;/li&gt;
                        &lt;li&gt;Use a threat intelligence, vulnerability scanning, or other alerting service to ensure
                        the project team is aware of issues within the project or its components promptly.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="CM-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Verify there is a processes for identifying, categorizing, and prioritizing
                            security and other patches.&lt;/li&gt;
                            &lt;li&gt;Review the testing and release process.&lt;/li&gt;
                            &lt;li&gt;Verify patches are applied in a timely manner, in line with the policies and
                            taking into account the associated risk.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.535000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="INF-UNNECESSARY-SERVICES" name="Restrict access to required services only" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;p&gt;The attack surface, and therefore susceptibility to attack, should be minimized. In particular, services that are not explicitly required for the proper operation of the server or service should be disable, or access to them be restricted.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Any service, feature, or functionality that is not required should be disabled or removed. This applies equally to the operating system, middleware, web-server, or other software in use.&lt;/li&gt; 
 &lt;li&gt;Access to the server and remaining services (in particular those that cannot be disabled or removed) should be controlled use host-based and/or network security controls; for example host firewalls, network firewalls, routers, or switches.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-1"/>
                        <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-2"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Conduct a host review to confirm the software and services running and exposed on the system.&lt;/li&gt; 
 &lt;li&gt;Support the host review with network based scans across at least all &lt;span class="caps"&gt;TCP&lt;/span&gt; and &lt;span class="caps"&gt;UDP&lt;/span&gt; ports (0-65535), together with &lt;span class="caps"&gt;RPC&lt;/span&gt; and other remote call services.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify the running and accessible services against expected configuration for the system, and against the security principal of 'least privilege'.&lt;/li&gt; 
 &lt;li&gt;Where a network or host based firewall is in use, it should be configured to drop connections rather than reject them. i.e. port-scans should identify only 'open' or 'filtered' services; no service should be identifiably 'closed'.&lt;/li&gt; 
 &lt;li&gt;Note however that different network based security solutions exhibit different behavior in this regard.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:43">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="ACCESS SERVICES" name="Access services" desc="" library="">
                    <threats>
                        <threat ref="SERVER-ATTACK" name="Data compromised if the server itself is compromised" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If attackers compromise the server that hosts the service or data, then the data and
                                the service itself could be at risk of compromise. The server could be compromised
                                through any of the services that it exposes.
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="INF-UNNECESSARY-SERVICES" mitigation="20"/>
                                <control ref="PATCH-SERVER" mitigation="80"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="UNPATCHED-SERVER">
                                    <controls>
                                        <control ref="PATCH-SERVER" mitigation="80"/>
                                    </controls>
                                </weakness>
                                <weakness ref="UNNECESSARY-SERVICES">
                                    <controls>
                                        <control ref="INF-UNNECESSARY-SERVICES" mitigation="20"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="soap-web-service" name="SOAP Web Service" desc="" tags="" position="80" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-345" name="Insufficient Verification of Data Authenticity" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T13:43:17.728000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not sufficiently verify the origin or
					authenticity of data, in a way that causes it to accept invalid
					data.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="sign-ws-security" name="Sign the message payload using WS-Security to ensure reliable transport between client and service" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  WS-Security specification (WSS) was originally developed by Microsoft, IBM, and Verisign as part of a &amp;quot;Roadmap&amp;quot;, which was later renamed to Web Services Architecture, or WSA. WSS served as the foundation for all other specifications in this domain, creating a basic infrastructure for developing message-based security exchange. Because of its importance for establishing interoperable Web Services, it was submitted to OASIS and, after undergoing the required committee process, became an officially accepted standard.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  WSS specification makes use of the XML-dsig standard to ensure message integrity, restricting its functionality in certain cases; for instance, only explicitly referenced elements can be signed (i.e. no Embedding or Embedded signature modes are allowed). Prior to signing an XML document, a transformation is required to create its canonical representation, taking into account the fact that XML documents can be represented in a number of semantically equivalent ways. There are two main transformations defined by the XML Digital Signature WG at W3C, Inclusive and Exclusive Canonicalization Transforms (C14N and EXC-C14N), which differ in the way namespace declarations are processed. The WSS core specification specifically recommends using EXC-C14N, as it allows copying signed XML content into other documents without invalidating the signature. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Typically, an XML signature is applied to secure elements such as SOAP Body and the timestamp, as well as any user credentials, passed in the request.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  Sign the message payload using WS-Security to ensure reliable transport between client and service. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="WS-Security Standard" url="https://www.owasp.org/index.php/Web_Services"/>
                    </references>
                    <standards>
                        <standard ref="13.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Test XML Signature wrapping attacks. To do that try to inject forged elements into the XML document structure in such a way that the valid signature covers the unmodified elements, while forged elements are processed by the application logic.</steps>
                        <notes></notes>
                        <references>
                            <reference name="How To Break XML Signature and XML Encryption" url="https://www.owasp.org/images/5/5a/07A_Breaking_XML_Signature_and_Encryption_-_Juraj_Somorovsky.pdf"/>
                            <reference name="XML Signature Wrapping" url="https://www.ws-attacks.org/XML_Signature_Wrapping"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T14:24:32.771000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-385" name="Transaction or Event Tampering via Application API Manipulation" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="sign-ws-security" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-345">
                                    <controls>
                                        <control ref="sign-ws-security" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="DATABASE-SQL" name="SQL Database" desc="SQL Database system" tags="" position="4" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-89" name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" url="https://cwe.mitre.org/data/definitions/89.html"/>
                            <reference name="OWASP Testing Guide" url="https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005)#Standard_SQL_Injection_Testing"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:13.083000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software constructs all or part of an SQL command using externally-influenced input from
                        an upstream component, but it does not neutralize or incorrectly neutralizes special elements
                        that could modify the intended SQL command when it is sent to a downstream component.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the
                        generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user
                        data. This can be used to alter query logic to bypass security checks, or to insert additional
                        statements that modify the back-end database, possibly including execution of system commands.
                        SQL injection has become a common issue with database-driven web sites. The flaw is easily
                        detected, and easily exploited, and as such, any site or software package with even a minimal
                        user base is likely to be subject to an attempted attack of this kind. This flaw depends on the
                        fact that SQL makes no real distinction between the control and data planes.
                        &lt;/div&gt;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" platform=".NET C#" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side
                        data which is used in dynamic SQL queries at the server-side in an unsafe manner. For example,
                        creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable
                        code
                        &lt;b&gt;,&lt;/b&gt;&amp;nbsp;for example an attacker may append an 'OR' statement through the
                        provided customerName parameter passed to the following code to bypass the checks and return
                        additional data from the database:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;pre&gt;

                        &lt;ul&gt;

                        &lt;li&gt;String query = &amp;quot;SELECT user FROM users WHERE name = '&amp;quot; &lt;/li&gt;


                        &lt;/ul&gt; + request.getParameter(&amp;quot;customerName&amp;quot;)+&amp;quot;'&amp;quot;;&lt;/pre&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Using prepared statements with carefully controlled and validated input conditions mitigates
                        against SQLi and related attacks.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Database queries should always be made using prepared statements or parameterized
                        queries.&lt;/li&gt;
                        &lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input,
                        and made using prepared statements to mitigate the threat.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations>
                        <implementation platform="C#">
                            <desc>
                                ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g
                            </desc>
                        </implementation>
                        <implementation platform="Java">
                            <desc>
                                ClN0cmluZyBzZWxlY3RTdGF0ZW1lbnQgPSAiU0VMRUNUICogRlJPTSBVc2VyIFdIRVJFIHVzZXJJZCA9ID8gIjsKUHJlcGFyZWRTdGF0ZW1lbnQgcHJlcFN0bXQgPSBjb24ucHJlcGFyZVN0YXRlbWVudChzZWxlY3RTdGF0ZW1lbnQpOwpwcmVwU3RtdC5zZXRTdHJpbmcoMSwgdXNlcklkKTsKUmVzdWx0U2V0IHJzID0gcHJlcFN0bXQuZXhlY3V0ZVF1ZXJ5KCk7Cg==
                            </desc>
                        </implementation>
                    </implementations>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;div&gt;
                            For inputs receiving data that is subsequently added to or used in an SQL query:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;
                            &lt;li&gt;Data should used in parameterized SQL queries rather than dynamically generated
                            queries.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            To test data validation:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the code processing tainted user input to SQL queries and confirm the data
                            is used only in pre-prepared parameterized SQL queries.&lt;/li&gt;
                            &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it
                            (invalid characters, lengths, ranges etc.)&lt;/li&gt;
                            &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;
                            &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:13.157000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-66" name="Attackers gain unauthorised access to data and/or systems through SQL Injection attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Successful SQL Injection attacks could lead to full compromise of the database or to a
                                partial compromise of only the data visible to the application.
                                &lt;div&gt;
                                &lt;br /&gt;&amp;nbsp;
                                &lt;div&gt;
                                Typically, these types of attacks result in unauthorized disclosure of sensitive data,
                                but can also be used to inject spurious data into the database or to drop tables and
                                deny service to legitimate users.
                                &lt;/div&gt;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CWE-89-PREPARED" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-89">
                                    <controls>
                                        <control ref="CWE-89-PREPARED" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="CREDENTIALS-STORAGE:CLEAR" name="Storage of auth credentials in clear text" desc="Storing sensitive data in clear text" tags="" position="30" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-257" name="Plaintext Storage of a Password" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-256: Plaintext Storage of a Password" url="https://cwe.mitre.org/data/definitions/256.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.650000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The storage of passwords in a recoverable format makes them subject to password reuse attacks
                        by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no
                        significant benefit over&amp;nbsp;plaintext&amp;nbsp;passwords since they are subject not only
                        to reuse by malicious&amp;nbsp;attackers&amp;nbsp;but also by malicious insiders. If a system
                        administrator can recover a password directly, or use a brute force search on the available
                        information, the administrator can use the password on other accounts.
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="store-passwords-unrecoverable-form" name="Store passwords in unrecoverable form" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;span&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-family: Arial; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;To protect users passwords from accidental or deliberate exposure, the application should store cryptographic hashes of passwords instead of the passwords themselves.&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Do not store passwords themselves in the data store for verification at login.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Instead, create a cryptographic hash of the password using a strong hash function that includes a work factor and a built in 'salt' value, like bcrypt or scrypt. This reduces the risk of brute-force attacks and rainbow tables, and allows flexibility to adapt the hashing function to balance security and performance. We shall establish some restrictions, depending of the used function:&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The salt length shall be at least 32 bits.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;If bcrypt is used, the work factor shall be as large as verification server performance will allow, typically at least 13.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;If we use the PBKDF2, the iteration count shall be as large as verification server performance and it will allow typically at least 100,000 iterations.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Alternatively, use a strong hash function like SHA-384 together with a unique 'salt' value for every account.&amp;nbsp; Apply multiple iterations of the hash to create the additional computational work required to mitigate brute-force attacks. And the secret 'salt' value shall be stored separately from the hashed passwords.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
 &lt;/ul&gt;&lt;/span&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Owasp CheatSheetSeries: Password Storage" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Password_Storage_Cheat_Sheet.md"/>
                    </references>
                    <standards>
                        <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="2.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="2.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="2.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;span&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Review the mechanism for matching credentials from the client-side to stored credentials for a user.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;ul&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span&gt;Best practice dictates the system should match a salted strong hash (SHA256 or greater and a unique hash for each account) to that stored at the point the password was set.&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;For example, it is recommended that a system salt of 32 bits or more, a keyed HMAC hash using &lt;span style="font-family: Arial; font-size: 11pt; font-weight: 700; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;SHA-2 or SHA-3,&lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; and the stretching algorithm PBKDF2 with at least 10,000 iterations, is used.&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm the stored credential is not a clear-text password&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm the stored credential is not an encrypted password which may be recovered (decrypted) at the server- or client- side.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm that the hashing algorithm in use is cryptographically secure (e.g. is not SHA1/MD5 or a flawed algorithm)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm that the hash is created from the password together with a unique salt value for the user. This prevents use of rainbow tables, or of identifying password collisions among users.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Consider use of an algorithm with a configurable work factor, set to a high value to inhibit attack.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;/ol&gt;&lt;/span&gt; 
&lt;span&gt;&lt;/span&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-10T15:48:45.656000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="SENSITIVE READ OR POST DATA" name="Sensitive Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="CWE-256" name="Users' passwords are compromised if the storage medium is compromised" state="Expose" source="MANUAL" owner="" library="">
                            <desc>A compromise of the storage system medium itself (device, server or database) could
                                allow attackers full access to the data
                                stored, including authentication credentials such as passwords.
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="store-passwords-unrecoverable-form" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-257">
                                    <controls>
                                        <control ref="store-passwords-unrecoverable-form" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="FATCLIENT:SENS-DATA-STORAGE" name="Thick Client: Stores sensitive data" desc="Storage of senstiive data on a thick client" tags="" position="33" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-233" name="Improper Handling of Parameters" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-04T16:06:04.620000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not properly handle when the expected number
					of parameters, fields, or arguments is not provided in input, or if those
					parameters are undefined.</desc>
                </weakness>
                <weakness ref="EU-GDPR-NO-CONSENT-MECHANISM" name="No consent mechanism (conform GDPR &amp; E-privacy Regulation) " state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-07T07:47:07.237000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>No consent mechanisms (or a consent mechanism that does not comply with the GDPR and E-privacy legislation consent requirements) so the organization is unable prove to data protection authorities that the processing is legitimate/legal.
          </desc>
                </weakness>
                <weakness ref="EU-GDPR-NOT-EXPORT-FUNCTIONALITY" name="No export functionality" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-07T08:20:15.126000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>No exportability functionality (for users or admins) which would allow the user to (directly or indirectly via an admin) export his personal data in a clear, readable format and transport it to another data controller. </desc>
                </weakness>
                <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories" url="https://cwe.mitre.org/data/definitions/312.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-05-30T14:52:04.610000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>API keys, passwords or secrets included in the source code or in the configuration files can be leaked to users with access to the code. This access can be incidentally granted by publishing the source code on a package-form or an online, public repository.

          The unauthorized access to any of those secrets could lead to a compromise of sensitive data or a system.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="EU-GDPR-CONSENT-MECHANISM" name="Create a consent mechanism" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Implement a consent mechanism which allows data subjects (persons of whom personal data is processed) to give their consent for certain processing activities. This is mainly used for cookies and secondary purposes such as direct marketing, newsletters, ...&lt;br/&gt; 
          The text about the storing and processing activities, shall be provided to users in clear and easy language to be understood by them.&lt;br/&gt;
          The consent mechanism often consists of a check box. These check boxes are required for every single secondary purpose (not allowed to implement one consent box for all purposes). The consent boxes should: &lt;br /&gt;
              &lt;ul&gt;
              &lt;li&gt;be inactive by default (the data subject should active the box)&lt;/li&gt;
              &lt;li&gt;revocable (the data subject must be able to revoke the consent in a way that is as easy as it was to give consent, this can be done by implementing a platform on which the data subject can actively manage his/her consents) &lt;/li&gt;
              &lt;li&gt;the personal data shall not be used before consent of the user.&lt;/li&gt;
              &lt;li&gt;Traceable (a consent database is required to track when consent was given and revoked. This must include timestamps) &lt;/li&gt;
              &lt;/ul&gt;
              &lt;br /&gt;You must involve the DPO and/or legal department to decide on the legitimation that can be used.
          </desc>
                    <implementations/>
                    <references>
                        <reference name="EU GDPR - EU Data Protection" url="http://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
                    </references>
                    <standards>
                        <standard ref="Art.6" supportedStandardRef="EU-GDPR"/>
                        <standard ref="Art.7" supportedStandardRef="EU-GDPR"/>
                        <standard ref="8.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="8.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify appropriate user personal data consent mechanisms are in place and are not pre-granted.&lt;/li&gt;
                &lt;li&gt;Verify users can modify their data consent choices in a manner as easy as giving consent.&lt;/li&gt;
                &lt;li&gt;Verify the above above user activities have been appropriately logged.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;
            </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-01-18T12:41:32.691000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="EU-GDPR-EXPORT-FUNCTIONALITY" name="Implement export functionality" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>All data gathered from a user should be exportable. This does not include derived fields that were created by the organization, such as customer segmentation fields.
&lt;br /&gt; 
&lt;br /&gt;Provide or develop the means that will contribute to answer data portability requests, such as download tools or Application Programming Interfaces (API). 
&lt;br /&gt; 
&lt;br /&gt;They should guarantee that personal data are transmitted in a structured, commonly used and machine-readable format, and they should be encouraged to ensure the interoperability of the data format provided in the exercise of a data portability request. 
&lt;br /&gt;see also - http://ec.europa.eu/newsroom/document.cfm?doc_id=44099 (Guidelines on the right to &amp;quot;data portability&amp;quot; by WP29)&amp;quot;</desc>
                    <implementations/>
                    <references>
                        <reference name="EU GDPR - EU Data Protection" url="http://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
                    </references>
                    <standards>
                        <standard ref="Art.20" supportedStandardRef="EU-GDPR"/>
                        <standard ref="8.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="8.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify users have the functionality to request personal data transfer and/or download their own data.&lt;/li&gt;
                &lt;li&gt;Verify data is in a form acceptable to the Data Protection Practitioner.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;
            </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-01-18T14:21:47.026000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="minimise-parameters-request" name="Minimize the number of parameters in a request" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The HTTP requests shall contain only the necessary parameters to do the action (such as hidden fields, Ajax variables, cookies and header values). And the response shall return only with the required information. If unnecessary information is included in the HTTP request, we increase the attack surface unnecessarily.</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="8.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
  Verify that all requests have got only the necessary parameters to work. 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-04T16:08:25.625000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-312-ENCRYPT" name="Store sensitive data in a cryptographically secure store" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Local/client-side storage of sensitive data is considered an insecure option due to the risk of
                        exposure of the data on the client-side.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;If possible, avoid storing sensitive data on the client at all. Instead, store the
                        data on the server side and only access it once the user has authenticated.&lt;/li&gt;
                        &lt;li&gt;If sensitive data must be stored, then it should be stored in a cryptographically
                        secure encrypted store.&lt;/li&gt;
                        &lt;li&gt;Where possible, system provided stores should be used; for example, iOS and Android
                        provide password stores, as does MacOS/OS X's Keychain.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify the functions of the component which are storing sensitive data, in
                            particular authentication credentials.&lt;/li&gt;
                            &lt;li&gt;Confirm that system provided stores (such as the Mac OS X Keychain) are used.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            If not, and a separate encryption process is in use, it should be noted it is considered bad
                            practice to store passwords in recoverable form. Verify the following:&amp;nbsp;&amp;nbsp;
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Data is encrypted before being stored (e.g. in memory before writing to any
                            persistent storage)&lt;/li&gt;
                            &lt;li&gt;Data is erased in memory before release&lt;/li&gt;
                            &lt;li&gt;Libraries or code used to encrypt the data are reputable and provably secure (i.e.
                            have undergone proper review) and are implemented in line with recommendations (e.g. correct
                            use of a strong PRNG).&lt;/li&gt;
                            &lt;li&gt;Ideally a public-key cryptography should be used.&lt;/li&gt;
                            &lt;li&gt;Keys to decrypt the data must not be stored on the device with the data.&lt;/li&gt;
                            &lt;li&gt;Confirm how the data will be accessed or unlocked; and that security is equivalent
                            to the stored credentials. e.g. is the password saved using a master password, PIN
                            protection or similar?&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.803000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="SENSITIVE READ OR POST DATA" name="Sensitive Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-39" name="An attacker gain access by manipulation of authentication token or other sensitive data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="minimise-parameters-request" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-233">
                                    <controls>
                                        <control ref="minimise-parameters-request" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="EU-GDPR-ILLEGAL-PROCESSING-PERSONAL-DATA" name="Illegal processing of personal data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Processing personal data without legal grounds which makes it possible for data subjects to file a complaint at local Data Protection Authority which might lead to administrative fines. 
              </desc>
                            <riskRating confidentiality="75" integrity="50" availability="50" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="EU-GDPR-CONSENT-MECHANISM" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="EU-GDPR-NO-CONSENT-MECHANISM">
                                    <controls>
                                        <control ref="EU-GDPR-CONSENT-MECHANISM" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-167" name="Sensitive Data stored on the client could be accessed by an attacker" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker examines an available client application for the presence of sensitive
                                information.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                This information may be stored in configuration files, embedded within the application
                                itself, or stored in other ways. Sensitive information may include long-term keys,
                                passwords, credit card or financial information, and other private material that the
                                client uses in its interactions with the server.&amp;nbsp;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                While servers are (hopefully) protected with professional security administrators, most
                                users may be less skilled at protecting their clients. As a result, the user client may
                                represent a weak link that an attacker can exploit. If an attacker can gain access to a
                                client installation, they may be able to detect and lift sensitive information that
                                could be used directly (such as financial information), or allow the attacker to subvert
                                future communication between the client and the server.&amp;nbsp;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                In some cases, it may not even be necessary to gain access to another user's
                                installation - if all instances of the client software are embedded with the same
                                sensitive information (for example, long term keys for communication with the server),
                                then the attacker must simply find a way to gain their own copy of the client in order
                                to perform this attack.
                                &lt;br /&gt;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="50" availability="1" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="CWE-312-ENCRYPT" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-312">
                                    <controls>
                                        <control ref="CWE-312-ENCRYPT" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="EU-GDPR-SUBJECT-RIGTHS" name="Subjects cannot exercise their rights over their personal data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Data subject cannot exercise their rights which makes it possible for data subjects to file a complaint at local Data Protection Authority which might lead to administrative fines.
              &lt;br /&gt;&lt;br /&gt;Data subject = person of whom personal data is processed
              </desc>
                            <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="EU-GDPR-EXPORT-FUNCTIONALITY" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="EU-GDPR-NOT-EXPORT-FUNCTIONALITY">
                                    <controls>
                                        <control ref="EU-GDPR-EXPORT-FUNCTIONALITY" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="untrusted-data-received" name="Untrusted Data: Received" desc="Untrusted or tainted data is received." tags="" position="76" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-15" name="External Control of System or Configuration Setting" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-04T15:34:47.617000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>One or more system settings or configuration elements can be
					externally controlled by a user.</desc>
                </weakness>
                <weakness ref="CWE-116" name="Improper Encoding or Escaping of Output" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-24T14:30:12.412000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software prepares a structured message for communication
					with another component, but encoding or escaping of the data is either missing
					or done incorrectly. As a result, the intended structure of the message is not
					preserved.</desc>
                </weakness>
                <weakness ref="CWE-95" name="Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-31T11:52:01.669000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software receives input from an upstream component, but it
					does not neutralize or incorrectly neutralizes code syntax before using the
					input in a dynamic evaluation call (e.g. "eval").</desc>
                </weakness>
                <weakness ref="CWE-78" name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:46">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  There are at least two subtypes of OS command injection:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(&amp;quot;nslookup [HOSTNAME]&amp;quot;) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.The application accepts an input that it uses to fully select which program to run, as well as which commands to use.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The application simply redirects this entire command to the operating system. For example, the program might use &amp;quot;exec([COMMAND])&amp;quot; to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;In the first variant, the programmer clearly intends input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input. 
&lt;/div&gt;</desc>
                </weakness>
                <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-31T16:49:52.024000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The web server receives a URL or similar request from an
					upstream component and retrieves the contents of this URL, but it does not
					sufficiently ensure that the request is being sent to the expected
					destination.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="dyn-exec" name="Assure that the application avoids the use of eval() or other dynamic code execution features" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;span style="font-family: Roboto, RobotoDraft, Helvetica, Arial, sans-serif; font-size: 13px; white-space: pre-wrap; background-color: rgb(255, 255, 255);"&gt;Assure that the application avoids the use of eval() or other dynamic code execution features. Where there is no alternative, any user input being included must be sanitized or sandboxed before being executed.&lt;/span&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;p&gt;Look for scripts that do not properly validate user inputs in the page parameter. A remote user can supply a specially crafted URL to pass arbitrary code to an eval() statement, which results in code execution. &lt;/p&gt; 
&lt;p&gt;Note 1: This attack will execute the code with the same permission like the target web service, including operation system commands. &lt;/p&gt; 
&lt;p&gt;Note 2: Eval injection is prevalent in handler/dispatch procedures that might want to invoke a large number of functions, or set a large number of variables.&amp;nbsp;&lt;/p&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Direct Dynamic Code Evaluation (Eval Injection)" url="https://www.owasp.org/index.php/Direct_Dynamic_Code_Evaluation_(%27Eval_Injection%27)"/>
                            <reference name="[SCRIPT_ENGINE_INJECTION] Potential code injection when using Script Engine" url="https://find-sec-bugs.github.io/bugs.htm"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-31T12:00:09.301000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="WEB-FILE-DATA" name="Do not use untrusted client-side data in server-side file operations" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        The application may be required to base server-side file operations based on client-side
                        actions. This can expose the application to attack through remote or local file-inclusion, or
                        remote code execution attacks if unsafe data is used in file inclusion, class loader, or
                        reflection capabilities.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Tainted, untrusted, client-side data must not be used directly in server-side file
                        load operations.&lt;/li&gt;
                        &lt;li&gt;Where server-side operations are dependent on client-side input, this should be mapped
                        to pre-defined operations on the server-side rather than using tainted client-side input
                        directly.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify sources of data into the application. &lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Classify them into trusted and untrusted. &lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;if they are untrusted, make sure there is a validation and sanitization mechanism
                            before sending this data into another system (Database, Command, etc.).&lt;br /&gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T12:59:27.639000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="SAME-ENCODING-STYLE" name="Ensure that the client-side and the server-side are using the same encoding style" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Ensure that the client-side and the server-side are using the same encoding style.</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
                        <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that the server-side and the client-side are using the same encoding style.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T11:32:37.119000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="configuration-integrity" name="Ensure the integrity of all security-relevant configurations to detect tampering" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Web server and application server configurations play a key role in the security of a web application. These servers are responsible for serving content and invoking applications that generate content. In addition, many application servers provide a number of services that web applications can use, including data storage, directory services, mail, messaging, and more. Failure to manage the proper configuration of your servers can lead to a wide variety of security problems.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Authorized administrators need to ensure the integrity of all security-relevant configurations to detect tampering. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Insecure Configuration Management" url="https://www.owasp.org/index.php/Insecure_Configuration_Management"/>
                    </references>
                    <standards>
                        <standard ref="14.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
  Understanding the deployed configuration of the server hosting the web application is almost as important as the application security testing itself. After all, an application chain is only as strong as its weakest link. Application platforms are wide and varied, but some key platform configuration errors can compromise the application in the same way an unsecured application can compromise the server. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In order to evaluate the readiness of the application platform, testing for configuration management includes the following sections: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4.3.1 Test Network/Infrastructure Configuration (OTG-CONFIG-001) 
&lt;/div&gt; 
&lt;div&gt;
  4.3.2 Test Application Platform Configuration (OTG-CONFIG-002) 
&lt;/div&gt; 
&lt;div&gt;
  4.3.3 Test File Extensions Handling for Sensitive Information (OTG-CONFIG-003) 
&lt;/div&gt; 
&lt;div&gt;
  4.3.4 Review Old, Backup and Unreferenced Files for Sensitive Information (OTG-CONFIG-004) 
&lt;/div&gt; 
&lt;div&gt;
  4.3.5 Enumerate Infrastructure and Application Admin Interfaces (OTG-CONFIG-005) 
&lt;/div&gt; 
&lt;div&gt;
  4.3.6 Test HTTP Methods (OTG-CONFIG-006) 
&lt;/div&gt; 
&lt;div&gt;
  4.3.7 Test HTTP Strict Transport Security (OTG-CONFIG-007) 
&lt;/div&gt; 
&lt;div&gt;
  4.3.8 Test RIA cross domain policy (OTG-CONFIG-008) 
&lt;/div&gt; 
&lt;div&gt;
  4.3.9 Test File Permission (OTG-CONFIG-009)&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Testing for configuration management" url="https://www.owasp.org/index.php/Testing_for_configuration_management"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-04T15:35:59.265000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ASSIGN-WHITE" name="Use a white-list approach to assign values to variables" platform="" cost="2" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential risk, regardless of the source or transport method.&amp;nbsp;Using mass-assignment or auto-binding when accepting values from an untrusted source and mapping them to trusted server side values increases the risk of tainted data being used unsafely.&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bind individual values to specific fields, instead of binding whole objects.&lt;/li&gt; 
 &lt;li&gt;Use available features of the language or framework that allow specification of white lists of attributes or fields that are allowed to be modified.&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For example, applications written with Ruby on Rails can use the attr_accessible (white list) or attr_protected (black list) macros in each class that may be used in mass assignment.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt;</desc>
                    <implementations>
                        <implementation platform="Spring.java">
                            <desc>ICAgIEBSZXF1ZXN0TWFwcGluZyh2YWx1ZSA9ICIvdmVudWUve2NpdHl9L3twbGFjZX0iLCBtZXRob2QgPSAiR0VUIikKICAgIHB1YmxpYyBTdHJpbmcgZ2V0VmVudWVEZXRhaWxzKFZlbnVlIHZlbnVlLCBNb2RlbCBtb2RlbCkgewogICAgICAgIC8vIHZlbnVlIG9iamVjdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGVkIHdpdGggY2l0eSBhbmQgcGxhY2UKICAgIH0=</desc>
                        </implementation>
                    </implementations>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the framework the component is using.&lt;/li&gt;
                            &lt;li&gt;Check if this particular framework provides automatic binding of variables.&lt;/li&gt;
                            &lt;li&gt;Verify it is disabled or restricted.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:16.263000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="same-encoding-parsers" name="Use the same encodings and parsers in all application components " platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Errors may occur when converting between differently coded character data.&amp;nbsp; There are two general types of encoding errors. If the byte sequence is not valid for the specified charset then the input is considered malformed. If the byte sequence cannot be mapped to an equivalent character sequence then an unmappable character has been encountered. 
&lt;/div&gt; 
&lt;div&gt;
  Special care should be taken when decoding untrusted byte data to ensure that malformed input or unmappable character errors do not result in defects and vulnerabilities.&amp;nbsp; Encoding errors can also occur, for example, encoding a cryptographic key containing malformed input for transmission will result in an error. Encoding and decoding errors typically result in data corruption.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt; 
&lt;/div&gt;Use the same encodings and parsers in all application components to avoid parsing attacks that exploit different URI or file parsing behavior that could be used in SSRF and RFI attacks.</desc>
                    <implementations/>
                    <references>
                        <reference name="STR51-J. Use the charset encoder and decoder classes when more control over the encoding process is required" url="https://wiki.sei.cmu.edu/confluence/display/java/STR51-J.+Use+the+charset+encoder+and+decoder+classes+when+more+control+over+the+encoding+process+is+required"/>
                    </references>
                    <standards>
                        <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that all application components are using the same encoding style.</steps>
                        <notes></notes>
                        <references>
                            <reference name="OWASP Testing Guide Appendix D: Encoded Injection" url="https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_D:_Encoded_Injection"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-24T14:37:19.477000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="DATA-VAL" name="Validate all data received from the client side" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        All data received from the client-side should be considered tainted and a potential risk,
                        regardless of the source or transport method. &amp;nbsp;For example, while hidden form fields,
                        cookies, or other headers may be obfuscated from a user, along with parameters passed in
                        ViewStates or other encapsulated forms, these can be modified by the user at the client-side in
                        memory, or in transit on the network. Similarly, data passed from binary or compiled components
                        can be modified in situ or in transit.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt;&lt;br /&gt;&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the
                        encrypted tunnel (one end of which is typically controlled by the client); data passing through
                        the link may still be malicious.&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        As such, all data from the client side must be subjected to strict validation, sanitization, and
                        encoding against expected syntactic and semantic criteria.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax
                        (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a
                        specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be
                        syntactically valid because it only contains alphanumeric characters, but it is not valid if the
                        input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&lt;/li&gt;
                        &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the
                        strict criteria for each input are accepted, and reject, transform, or encapsulate any
                        non-compliant data.&lt;/li&gt;
                        &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific
                        malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive
                        and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to
                        obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be
                        useful for detecting and logging potential attacks, or determining which inputs are so malformed
                        that they should be rejected outright.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Validate all data received from the client, including values such as HTTP headers and
                        cookie values if these are used as input on the server side, X- headers, and other platform
                        specific data objects passed between the client and server.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify data input points for the application, for example:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;
                            &lt;li&gt;API calls&lt;/li&gt;
                            &lt;li&gt;HTTP Headers&lt;/li&gt;
                            &lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;
                            &lt;li&gt;Serialized Java objects&lt;/li&gt;
                            &lt;li&gt;Any data structure received from the client-side&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;
                            &lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;
                            &lt;li&gt;For each of the inputs, ensure that the data is validated against the define
                            whitelists (for example with a regular expression) before being processed.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            To test data validation:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it
                            (invalid characters, lengths, ranges etc.)&lt;/li&gt;
                            &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;
                            &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            A number of tools can be used to aid in testing: &amp;nbsp;&amp;nbsp;
                            &lt;ul&gt;
                            &lt;li&gt;Directly your browser with the Developer Tools&lt;/li&gt;
                            &lt;li&gt;Use a browser extension which allows you to modify the request and responses on
                            the fly (i.e. Tamper Data)&lt;/li&gt;
                            &lt;li&gt;Use a proxy which allows you to modify the request and response on the fly (i.e.
                            OWASP ZAP, Burp, Fiddler, etc.)&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:16.249000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-601" name="Whitelist to which URLs the application can redirect to" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The application should maintain a list of the URLs to which it can redirect. This whitelisting can also be done by applying a regular expression. The application should only allow redirects to trusted URLS.</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="AC-4" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify the points of the application in which a redirection takes place.
                            Redirections are usually indicated by the use of the &amp;quot;&amp;quot;&amp;quot;&amp;quot;Location&amp;quot;&amp;quot;&amp;quot;&amp;quot;
                            HTTP header along with the 3xx code.&lt;/li&gt;
                            &lt;li&gt;If the content which is ending up inside the Location header is coming from user
                            input (URL string, Cookies, HTTP headers, forms, etc.), then.&lt;/li&gt;
                            &lt;li&gt;Using a browser, modify the input value which will be part of the Location header
                            to set up domains which should not be permitted.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T10:15:05.730000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="post-data" name="Post data" desc="Data is received (posted) here" library="">
                    <threats>
                        <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="MANUAL" owner="" library="">
                            <desc>The attacker can abuse functionality on the server to read or update internal resources. The attacker can supply or a modify a URL which the code running on the server will read or submit data to, and by carefully selecting the URLs, the attacker may be able to read server configuration such as AWS metadata, connect to internal services like http enabled databases or perform post requests towards internal services which are not intended to be exposed.&amp;nbsp;</desc>
                            <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="ASSIGN-WHITE" mitigation="25"/>
                                <control ref="CWE-601" mitigation="25"/>
                                <control ref="DATA-VAL" mitigation="25"/>
                                <control ref="WEB-FILE-DATA" mitigation="25"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-918">
                                    <controls>
                                        <control ref="ASSIGN-WHITE" mitigation="25"/>
                                        <control ref="CWE-601" mitigation="25"/>
                                        <control ref="DATA-VAL" mitigation="25"/>
                                        <control ref="WEB-FILE-DATA" mitigation="25"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-35" name="Attackers can leverage Executable Code in Non-Executable Files" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attack of this type exploits a system's trust in configuration and resource files, when the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high. 
&lt;br /&gt;The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser. Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/) 
&lt;br /&gt;http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here 
&lt;br /&gt;The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process. 
&lt;br /&gt;The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name &amp;quot;public&amp;quot; grants all users with the public role the ability to use the administration functionality. 
&lt;br /&gt;The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="dyn-exec" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-95">
                                    <controls>
                                        <control ref="dyn-exec" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-176" name="Attackers can manipulate Configuration/Environment " state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="configuration-integrity" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-15">
                                    <controls>
                                        <control ref="configuration-integrity" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CWE-94" name="Attackers gain access to the system through Server Side Code Injection" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Server Side Code Injection happens when an attacker is able to direct input under his
                                control and mix it with executed code on server side by modifying the logic executed on
                                it.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;&amp;nbsp;
                                &lt;div&gt;
                                Depending on the code isolation, this event could grant the user with access to system
                                resources and data.&amp;nbsp;
                                &lt;/div&gt;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="DATA-VAL" mitigation="80"/>
                                <control ref="SAME-ENCODING-STYLE" mitigation="20"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-78">
                                    <controls>
                                        <control ref="DATA-VAL" mitigation="80"/>
                                        <control ref="SAME-ENCODING-STYLE" mitigation="20"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-73" name="Attackers upload code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attack of this type involves an attacker inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="same-encoding-parsers" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-116">
                                    <controls>
                                        <control ref="same-encoding-parsers" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="WEB-APP" name="Web Application" desc="The server side web application" tags="" position="54" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-601" name="URL Redirection to Untrusted Site ('Open Redirect')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-11-16T15:10:52.273000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>A web application accepts a user-controlled input that
                        specifies a link to an external site, and uses that link in a Redirect. This
                        simplifies phishing attacks.
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-601" name="Whitelist to which URLs the application can redirect to" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The application should maintain a list of the URLs to which it can redirect. This whitelisting
                        can also be done by applying a regular expression. The application should only allow redirects
                        to trusted URLS.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="AC-4" supportedStandardRef="NIST 800-53"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify the points of the application in which a redirection takes place.
                            Redirections are usually indicated by the use of the &amp;quot;&amp;quot;&amp;quot;&amp;quot;Location&amp;quot;&amp;quot;&amp;quot;&amp;quot;
                            HTTP header along with the 3xx code.&lt;/li&gt;
                            &lt;li&gt;If the content which is ending up inside the Location header is coming from user
                            input (URL string, Cookies, HTTP headers, forms, etc.), then.&lt;/li&gt;
                            &lt;li&gt;Using a browser, modify the input value which will be part of the Location header
                            to set up domains which should not be permitted.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T10:15:05.730000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="GENERAL" name="General" desc="" library="">
                    <threats>
                        <threat ref="open-redirect-threat" name="An attacker may successfully launch a phishing scam and steal user credentials by modifying the URL value to a malicious site" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An http parameter may contain a URL value and could cause the web application to
                                redirect the request to the specified URL. By modifying the URL value to a malicious
                                site, an attacker may successfully launch a phishing scam and steal user credentials.
                                Because the server name in the modified link is identical to the original site, phishing
                                attempts have a more trustworthy appearance.
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CWE-601" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-601">
                                    <controls>
                                        <control ref="CWE-601" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="BROWSER:WYSIWYG" name="Web Application: WYSIWYG" desc="" tags="" position="39" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-79-HTML" name="Users can submit HTML markup" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps>When using a WYSIWYG editor in which the user is able to input HTML code, that HTML code
                            should be whitelisted and cleaned before sending it to the server or printing it back to the
                            application.&amp;nbsp;
                            &lt;br /&gt;
                            &lt;br /&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" url="https://cwe.mitre.org/data/definitions/79.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-29T19:59:33.741000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>&lt;br /&gt;The software does not neutralize or incorrectly neutralizes user-controllable
                        input before it is placed in output that is used as a web page that is served to other users.
                        client-side injection (XSS, HTML, CSS...) vulnerabilities occur when:
                        &lt;ol&gt;
                        &lt;li&gt;Untrusted data enters a web application, typically from a web request.&lt;/li&gt;
                        &lt;li&gt;The web application dynamically generates a web page that contains this untrusted
                        data.&lt;/li&gt;
                        &lt;li&gt;During page generation, the application does not prevent the data from containing
                        content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes,
                        mouse events, Flash, ActiveX, etc.&lt;/li&gt;
                        &lt;li&gt;A victim visits the generated web page through a web browser, which contains malicious
                        script that was injected using the untrusted data.&lt;/li&gt;
                        &lt;li&gt;Since the script comes from a web page that was sent by the web server, the victim's
                        web browser executes the malicious script in the context of the web server's domain.&lt;/li&gt;
                        &lt;li&gt;This effectively violates the intention of the web browser's same-origin policy, which
                        states that scripts in one domain should not be able to access resources or run code in a
                        different domain.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;br /&gt;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-79-HTML" name="Sanitise data received from a WYSIWYG editor" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        WYSIWYG editors allow users to input formatted HTML text to the application. Allowing
                        uncontrolled HTML input could lead to Cross Site Scripting and other content-based attacks. In a
                        number of instances it may be necessary to allow users to use extended or active content in data
                        provided to the application (for example CMS or blogs), but the active content permitted should
                        be carefully vetted and controlled.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Sanitize data received through WYSIWYG (or other HTML/raw) editing interfaces.&lt;/li&gt;
                        &lt;li&gt;Where HTML or other meta-data is permitted, this should be checked against a carefully
                        selected and controlled whitelist of tags and attributes.&lt;/li&gt;
                        &lt;li&gt;All other meta-characters or unexpected content should either be rejected, removed,
                        masked, or encoded.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            To test data validation:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the acceptable input criteria for the WYSIWYG editor, and build test cases
                            that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;As a general rule, only very basic HTML tags should be allowed on these editors
                            and without attributes, e.g.: &amp;lt;p&amp;gt;, &amp;lt;ul&amp;gt;, &amp;lt;ol&amp;gt;,
                            &amp;lt;li&amp;gt;, &amp;lt;strong&amp;gt;, &amp;lt;em&amp;gt;, &amp;lt;pre&amp;gt;, &amp;lt;code&amp;gt;,
                            &amp;lt;blockquote&amp;gt;, &amp;lt;cite&amp;gt;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Try to put HTML tags which should not be allowed.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Pass invalid input to the application through the editor and in intercepted
                            requests, and review error trapping and handling.&lt;/li&gt;
                            &lt;li&gt;Check if bad input, tags, and other unexpected content is removed or an error is
                            produced when sent to the server.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            A number of tools can be used to aid in testing: &amp;nbsp;&amp;nbsp;
                            &lt;ul&gt;
                            &lt;li&gt;Directly your browser with the Developer Tools&lt;/li&gt;
                            &lt;li&gt;Use a browser extension which allows you to modify the request and responses on
                            the fly (i.e. Tamper Data)&lt;/li&gt;
                            &lt;li&gt;Use a proxy which allows you to modify the request and response on the fly (i.e.
                            OWASP ZAP, Burp, Fiddler, etc.)&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-29T20:00:18.645000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="GENERAL" name="General" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-341" name="Attackers gain access to users data by manipulating server side code" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Server Side Code Injection happens when an attacker is able to direct input under his
                                control and mix it with executed code on server side by modifying the logic executed on
                                it.&amp;nbsp;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="CWE-79-HTML" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-79-HTML">
                                    <controls>
                                        <control ref="CWE-79-HTML" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="BROWSER" name="Web Browser" desc="Web Browser" tags="" position="36" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-352" name="Cross Site Request Forgery" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-352: Cross-Site Request Forgery (CSRF)" url="https://cwe.mitre.org/data/definitions/352.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.736000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The web application does not, or can not, sufficiently verify whether a well-formed, valid,
                        consistent request was intentionally provided by the user who submitted the request.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;When a web server is designed to receive a request from a client without any
                        mechanism for verifying that it was intentionally sent, then it might be possible for an
                        attacker to trick a client into making an unintentional request to the web server which will be
                        treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc.
                        and can result in exposure of data or unintended code execution.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-09-30T09:10:29.874000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software performs an operation at a privilege level that is
					higher than the minimum level required, which creates new weaknesses or
					amplifies the consequences of other weaknesses.</desc>
                </weakness>
                <weakness ref="CWE-79" name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" url="https://cwe.mitre.org/data/definitions/79.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.752000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not neutralize or incorrectly neutralizes user-controllable input before it
                        is placed in output that is used as a web page that is served to other users. Cross-site
                        scripting (XSS) vulnerabilities occur when:
                        &lt;ol&gt;
                        &lt;li&gt;Untrusted data enters a web application, typically from a web request.&lt;/li&gt;
                        &lt;li&gt;The web application dynamically generates a web page that contains this untrusted
                        data.&lt;/li&gt;
                        &lt;li&gt;During page generation, the application does not prevent the data from containing
                        content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes,
                        mouse events, Flash, ActiveX, etc.&lt;/li&gt;
                        &lt;li&gt;A victim visits the generated web page through a web browser, which contains malicious
                        script that was injected using the untrusted data.&lt;/li&gt;
                        &lt;li&gt;Since the script comes from a web page that was sent by the web server, the victim's
                        web browser executes the malicious script in the context of the web server's domain.&lt;/li&gt;
                        &lt;li&gt;This effectively violates the intention of the web browser's same-origin policy, which
                        states that scripts in one domain should not be able to access resources or run code in a
                        different domain.&lt;/li&gt;
                        &lt;/ol&gt;There are three main kinds of XSS:
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 1: Reflected XSS (or Non-Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The server reads data directly from the HTTP request and reflects it back in the HTTP response.
                        Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a
                        vulnerable web application, which is then reflected back to the victim and executed by the web
                        browser. The most common mechanism for delivering malicious content is to include it as a
                        parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed
                        in this manner constitute the core of many phishing schemes, whereby an attacker convinces a
                        victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's
                        content back to the victim, the content is executed by the victim's browser.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 2: Stored XSS (or Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The application stores dangerous data in a database, message forum, visitor log, or other
                        trusted data store. At a later time, the dangerous data is subsequently read back into the
                        application and included in dynamic content. From an attacker's perspective, the optimal place
                        to inject malicious content is in an area that is displayed to either many users or particularly
                        interesting users. Interesting users typically have elevated privileges in the application or
                        interact with sensitive data that is valuable to the attacker. If one of these users executes
                        malicious content, the attacker may be able to perform privileged operations on behalf of the
                        user or gain access to sensitive data belonging to the user. For example, the attacker might
                        inject XSS into a log message, which might not be handled properly when an administrator views
                        the logs.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 0: DOM-Based XSS&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        In DOM-based XSS, the client performs the injection of XSS into the page; in the other types,
                        the server performs the injection. DOM-based XSS generally involves server-controlled, trusted
                        script that is sent to the client, such as Javascript that performs sanity checks on a form
                        before the user submits it. If the server-supplied script processes user-supplied data and then
                        injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is
                        possible.Once the malicious script is injected, the attacker can perform a variety of malicious
                        activities. The attacker could transfer private information, such as cookies that may include
                        session information, from the victim's machine to the attacker. The attacker could send
                        malicious requests to a web site on behalf of the victim, which could be especially dangerous to
                        the site if the victim has administrator privileges to manage that site. Phishing attacks could
                        be used to emulate trusted web sites and trick the victim into entering a password, allowing the
                        attacker to compromise the victim's account on that web site. Finally, the script could exploit
                        a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes
                        referred to as &amp;quot;drive-by hacking&amp;quot;.
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;br /&gt;
                        &lt;/blockquote&gt;In many cases, the attack can be launched without the victim even being aware
                        of it. Even with careful users, attackers frequently use a variety of methods to encode the
                        malicious portion of the attack, such as URL encoding or Unicode, so the request looks less
                        suspicious.
                    </desc>
                </weakness>
                <weakness ref="CWE-693-NOSNIFF" name="Internet Explorer could allow Cross Site Scripting attacks through content sniffing" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-693: Protection Mechanism Failure" url="https://cwe.mitre.org/data/definitions/693.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.862000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product does not use or incorrectly uses a protection mechanism that provides sufficient
                        defense against directed attacks against the product. This weakness covers three distinct
                        situations:
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;A &amp;quot;missing&amp;quot; protection mechanism occurs when the application does
                        not define any mechanism against a certain class of attack.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;An &amp;quot;insufficient&amp;quot; protection mechanism might provide some defenses -
                        for example, against the most common attacks - but it does not protect against everything that
                        is intended.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Finally, an &amp;quot;ignored&amp;quot; mechanism occurs when a mechanism is available
                        and in active use within the product, but the developer has not applied it in some code path.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="WEB-CSP" name="Lack of Content Security Policy version 2 (CSPv2)" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T12:20:27.783000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Content Security Policy (CSP) is a computer security standard introduced to prevent cross-site
                        scripting (XSS), clickjacking and other code injection attacks resulting from execution of
                        malicious content in the trusted web page context.
                    </desc>
                </weakness>
                <weakness ref="CWE-84-HTTP-ONLY" name="Lack of 'HttpOnly' flag on session cookie" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-84: Improper Neutralization of Encoded URI Schemes in a Web Page" url="https://cwe.mitre.org/data/definitions/84.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.944000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The web application improperly neutralizes user-controlled input for executable script
                        disguised with URI encodings.
                        &lt;br /&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-693-X-XSS-PROTECTION" name="Lack of supporting built in browser XSS protection" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-693: Protection Mechanism Failure" url="https://cwe.mitre.org/data/definitions/693.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.822000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product does not use or incorrectly uses a protection mechanism that provides sufficient
                        defense against directed attacks against the product. This weakness covers three distinct
                        situations:
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;A &amp;quot;missing&amp;quot; protection mechanism occurs when the application does
                        not define any mechanism against a certain class of attack.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;An &amp;quot;insufficient&amp;quot; protection mechanism might provide some defenses -
                        for example, against the most common attacks - but it does not protect against everything that
                        is intended.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Finally, an &amp;quot;ignored&amp;quot; mechanism occurs when a mechanism is available
                        and in active use within the product, but the developer has not applied it in some code path.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-693-CLICKJACK" name="The page can be included in an iframe" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-693: Protection Mechanism Failure" url="https://cwe.mitre.org/data/definitions/693.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.807000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product does not use or incorrectly uses a protection mechanism that provides sufficient
                        defense against directed attacks against the product. This weakness covers three distinct
                        situations:
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;A &amp;quot;missing&amp;quot; protection mechanism occurs when the application does
                        not define any mechanism against a certain class of attack.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;An &amp;quot;insufficient&amp;quot; protection mechanism might provide some defenses -
                        for example, against the most common attacks - but it does not protect against everything that
                        is intended.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Finally, an &amp;quot;ignored&amp;quot; mechanism occurs when a mechanism is available
                        and in active use within the product, but the developer has not applied it in some code path.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="WEB-CSP" name="Define a restrictive 'least privilege' Content Security Policy" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        The Content-Security-Policy instructs compliant browsers on how they may interact with external
                        sites while in the current context. This enables the server to control interactive with code and
                        content from third parties, mitigating some client-side code injection attacks. The policy
                        allows the server to specify what connections are permitted for each type of resource.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        For example, the following policy tells the browser to allow connections to the same domain to
                        which the page was served. and websocket connections to the domain *.iriusrisk.com.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Content-Security-Policy: default-src 'self'; script-src 'self'; style-src 'self'
                        'unsafe-inline'; connect-src 'self' wss://*.iriusrisk.com; img-src 'self' data:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Define and set a Content-Security-Policy with least-privilege to allow only those
                        interactions that are explicitly required.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Secure Headers" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project#tab=Headers"/>
                    </references>
                    <standards>
                        <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the HTTP Server responses to determine if a&amp;nbsp;&lt;i&gt;Content-Security-Policy&amp;nbsp;&lt;/i&gt;header
                            is returned, and if so if it follows the security practice of least-privilege.&lt;/li&gt;
                            &lt;li&gt;Using a browser:&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Open the Web Developer Console.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Make requests to the different component's end-points.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify the header is always returned as part of these responses&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy&lt;/li&gt;
                            &lt;li&gt;Review server responses and/or use automated scanning to analyze headers&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            For more information on this policy setup, see:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&lt;/a&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references>
                            <reference name="Mozilla Developer Documentation - CSP" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T12:25:46.844000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-79-ENCODE" name="Perform contextual HTML encoding of all user submitted data" platform=".NET" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        All data received from the client-side should be considered tainted and a potential risk. If
                        handled properly at the point of input, this untrusted tainted data should have been sanitized
                        and encoded safely. The context when returning the data to the user is important, however, as
                        this will affect what metacharacters have significance, and how they will be interpreted at the
                        client-side.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        For example, if data is inserted into the HTML body then HTML Entity encoding should be
                        performed, but if the data is inserted into a JavaScript block, then JavaScript escaping should
                        be performed. Similarly, while JavaScript code should not be executed in the browser when
                        returned in an application/json response, it may then be rendered in an unsafe manner.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Apply contextual encoding to all tainted data when returned to the users (including
                        secondary users if the application has multiple interfaces - e.g. an internal user viewing data
                        entered by an external customer).&lt;/li&gt;
                        &lt;li&gt;This should be in addition to, and in conjunction with, sanitization and encoding
                        applied at the time of data acquisition.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations>
                        <implementation platform=".NET">
                            <desc>ClJlc3BvbnNlLldyaXRlKEh0dHBVdGlsaXR5Lkh0bWxFbmNvZGUoUmVxdWVzdC5Gb3JtWyJuYW1lIl0pKTs=
                            </desc>
                        </implementation>
                        <implementation platform="Spring MVC">
                            <desc>
                                CkluIHdlYi54bWwKCjxjb250ZXh0LXBhcmFtPgogICAgPHBhcmFtLW5hbWU+ZGVmYXVsdEh0bWxFc2NhcGU8L3BhcmFtLW5hbWU+CiAgICA8cGFyYW0tdmFsdWU+dHJ1ZTwvcGFyYW0tdmFsdWU+CjwvY29udGV4dC1wYXJhbT4=
                            </desc>
                        </implementation>
                    </implementations>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-14" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="1.5.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="1.5.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify the areas of the application in which tainted data acquired from outside
                            the application presented back (e.g. user input, uploaded files, third party content)&lt;/li&gt;
                            &lt;li&gt;Review the encoding and sanitization applied to the data before presentation.&lt;/li&gt;
                            &lt;li&gt;If possible, pass metacharacters and other unexpected content through the
                            application to review the efficacy of the encoding.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:21.033000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="cwe-352-csrf" name="Protect cookies from CSRF using one or more of the following: triple or double submit cookie pattern, CSRF nonces, or ORIGIN request header checks" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious web site, email, blog, instant message, or program causes a user's web browser to perform an unwanted action on a trusted site when the user is authenticated. A CSRF attack works because browser requests automatically include any credentials associated with the site, such as the user's session cookie, IP address, etc. Therefore, if the user is authenticated to the site, the site cannot distinguish between the forged or legitimate request sent by the victim. We would need a token/identifier that is not accessible to attacker and would not be sent along (like cookies) with forged requests that attacker initiates.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Requiring re-authentication of sensitive functions is an effective way to protect your application against a CSRF, but intrusive in the user experience. 
&lt;/div&gt; 
&lt;div&gt;
  You can also protect cookies from CSRF using at least one or more of the following recommendations:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1.- CSRF nonces. Nonces prevent unauthorized access by providing a secret 'key' (which is valid only once) that must be validated in any sensitive form submission. For the maximum security, the nonce is also time sensitive and it'll expire. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2.- Triple or double submit cookie pattern. 
&lt;/div&gt; 
&lt;div&gt;
  If maintaining the state for CSRF token at server side is problematic, an alternative defense is to use the double submit cookie technique. This technique is easy to implement and is stateless. In this technique, we send a random value in both a cookie and as a request parameter, with the server verifying if the cookie value and request value match. When a user visits (even before authenticating to prevent login CSRF), the site should generate a (cryptographically strong) pseudorandom value and set it as a cookie on the user's machine separate from the session identifier. The site then requires that every transaction request include this pseudorandom value as a hidden form value (or other request parameter/header). If both of them match at server side, the server accepts it as legitimate request and if they don't, it would reject the request. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3.- ORIGIN request header checks. 
&lt;/div&gt; 
&lt;div&gt;
  There are two steps to this mitigation, both of which rely on examining an HTTP request header value. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Determining the origin of the request is coming from (source origin). Can be done via Origin and/or referer header.&lt;/li&gt; 
  &lt;li&gt;Determining the origin of the request is going to (target origin).&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt;
  At server side we verify if both of them match. If they do, we accept the request as legitimate (meaning it's the same origin request) and if they don't, we discard the request (meaning that the request originated from cross-domain). Reliability on these headers comes from the fact that they cannot be altered programmatically (using JavaScript in an XSS) as they fall under forbidden headers list (i.e., only browsers can set them). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
                    </references>
                    <standards>
                        <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
  1.- Identify application components performing sensitive operations.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  2.- Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and verify a unique strong token is being sent and verified with each request. 
&lt;/div&gt; 
&lt;div&gt;
  3.- Confirm the tokens are passed in a programmatic way resistant to CSRF attack; e.g. in a custom POST field and separate HTTP header. 
&lt;/div&gt; 
&lt;div&gt;
  4.- Attempt to subvert the CSRF controls to ensure they are robust: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Change or remove the tokens and confirm the application rejects the request.&lt;/li&gt; 
  &lt;li&gt;Attempt to replay the tokens in a subsequent request.&lt;/li&gt; 
  &lt;li&gt;Mismatch the tokens in a request.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To modify headers and otherwise modify browser requests, use an intercepting proxy (e.g. OWASP Zap, Burp or Fiddler), or browser extensions such as Cookie Manager or Tamper Data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references>
                            <reference name="Testing for CSRF (OTG-SESS-005)" url="https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T12:58:23.186000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="ASVS-18.8" name="Reject requests containing unexpected or missing content type headers" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Reject requests containing unexpected or missing content type headers with HTTP response status
                        &amp;quot;406 Unacceptable&amp;quot; or &amp;quot;415 Unsupported Media Type&amp;quot;.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Validate request content-type" url="https://www.owasp.org/index.php/REST_Security_Cheat_Sheet#Validate_request_content_types"/>
                        <reference name="Spring docs: CSRF" url="https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html"/>
                    </references>
                    <standards>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Check that HTTP requests with non-valid Content-type are rejected.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-24T09:00:10.234000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="excessive-permissions" name="Request only the minimum required permissions" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Security best practice dictates the practice of least-privilege is followed, thereby reducing the attack surface and risk of compromise. By limiting the access an application has to the system, developers may reduce the impact a compromise may have.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  Request only the minimum required permissions. For example, if there is no requirement to use the camera then the application should not request this permission. 
&lt;/div&gt; 
&lt;div&gt;
  Review features and functionality present in the application, in particular legacy features, to determine if they are relevant and required, and if not remove them and associated OS permissions. 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
  Verify that the application only request the necessary permissions to work correctly. 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-09-30T09:11:03.433000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="secure-attributes-of-cookies" name="Secure the Cookies with their attributes" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  The session ID exchange mechanism based on cookies provides multiple security features in the form of cookie attributes that can be used to protect the exchange of the session ID: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Secure and HttpOnly Attribute:&lt;/b&gt;&amp;nbsp;a secure cookie is only sent to the server with an encrypted request over the HTTPS protocol. Even with Secure, sensitive information shall never be stored in cookies, as they are inherently insecure and this flag can't offer real protection. Starting with Chrome 52 and Firefox 52, insecure sites (http:) can't set cookies with the Secure directive. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To mitigate cross-site scripting (XSS) attacks, HttpOnly cookies are inaccessible to JavaScript's Document.cookie API; they are only sent to the server. For example, cookies that persist server-side sessions don't need to be available to JavaScript, and the HttpOnlyflag shall be set. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="background-color: white;"&gt;Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="background-color: white;"&gt;&lt;br /&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;SameSite Attribute: &lt;/b&gt;we shall configure the SameSite attribute to limit the exposure to against cross-site request forgery attacks. There are two possibilities: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;b&gt;Strict:&lt;/b&gt; the browser will only send cookies if the request originated from the website that set the cookie. If the request originated from a different URL than the URL of the current location, none of the cookies tagged with the Strict attribute will be included.&lt;/li&gt; 
  &lt;li&gt;&lt;b&gt;Lax:&lt;/b&gt; if the attribute is set to Lax, same-site cookies are withheld on cross-site subrequests, such as calls to load images or frames, but will be sent when a user navigates to the URL from an external site, for example, by following a link.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By default the SameSite is not configured, we shall configure with one of the above types, as we show below: 
&lt;/div&gt; 
&lt;div&gt;
  Set-Cookie: key=value; SameSite=Strict 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Domain and Path Attributes:&lt;/b&gt; The session token value issued after users have successfully identified and authenticated themselves is of equivalent value to the secrets the user presents to login, and must be protected accordingly.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;If the cookie domain attribute is too liberal, the cookie may be accessible to other hosts within the parent domain. This is a particular issue in multi-tenanted hosting, or where applications are delivered as subdomains of a third party parent domain.&lt;/li&gt; 
  &lt;li&gt;If the cookie path attribute is not appropriately restricted, the session token may be accessible from other applications or content on the server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The domain and the path attributes for the session cookie should be restricted to the fully qualified hostname on which the application is running. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For example: 
&lt;/div&gt; 
&lt;div&gt;
  Set-Cookie: session=token; Path=/theapp/; Domain=myapp.example.com; secure; HTTPOnly 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;__Host- prefix:&lt;/b&gt; ensure that all Cookies with a name starting with __Host- must be: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;set with the secure flag,&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;from a secure page (HTTPS),&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;not have a domain specified (and therefore aren't sent to subdomains)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;and the path must be &amp;quot;/&amp;quot;.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="__Host-Prefix" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"/>
                        <reference name="HttpOnly" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"/>
                        <reference name="Owasp Cheatsheet: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
                        <reference name="OWASP Proactive Controls [C6]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
                        <reference name="OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md"/>
                    </references>
                    <standards>
                        <standard ref="7.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="7.1.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ul&gt;  &lt;li&gt;Using a browser, open the Web Developer tools.&amp;nbsp;&amp;nbsp;&lt;/li&gt;  &lt;li&gt;Load the Network inspection tab.&amp;nbsp;&lt;/li&gt;  &lt;li&gt;Load the endpoints of the application which set cookies (send the Set-Cookie HTTP header).&lt;/li&gt;  &lt;li&gt;Check that within the HTTP response, the Set-Cookie has got:&lt;/li&gt;  &lt;ul&gt;   &lt;li&gt;the path and domain attributes set to the most restrictive path and domain respectively.&lt;/li&gt;   &lt;li&gt;'HttpOnly' and 'secure' flag set and configured&lt;/li&gt;   &lt;li&gt;'SameSite' attribute configured.&lt;/li&gt;  &lt;/ul&gt;  &lt;li&gt;Check that all Cookies with a name starting with __Host- have got:&lt;/li&gt;  &lt;ul&gt;   &lt;li&gt;set with the secure flag,&amp;nbsp;&lt;/li&gt;   &lt;li&gt;from a secure page (HTTPS),&amp;nbsp;&lt;/li&gt;   &lt;li&gt;not have a domain specified (and therefore aren't sent to subdomains)&amp;nbsp;&lt;/li&gt;   &lt;li&gt;and the path must be &amp;quot;/&amp;quot;.&lt;/li&gt;  &lt;/ul&gt; &lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T15:19:22.428000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-352-TOKENS" name="Set and verify one time 'Anti CSRF' tokens for sensitive operations" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Cross Site Request Forgery (CSRF) attacks exploit users by causing them to unknowingly submit
                        requests to the application while logged in, for example by tricking them in to clicking links
                        or through cross-site scripting (XSS) attacks. These attacks can be deployed where sensitive
                        operations can be accessed through a simple GET request, or a POST form submission and no
                        additional controls are in place. These attacks can be mitigated by requiring a random server
                        generated token be submitted and verified in each request. Requiring re-authentication of
                        sensitive functions is also effective, but intrusive in the user experience.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;HTML pages that offer sensitive operations should also include a random one time token
                        as a hidden field with every form. When the form is submitted, the server side should verify
                        that the token received is the same as the token issued.&lt;/li&gt;
                        &lt;li&gt;Re-authentication should be required on sensitive functionality such as
                        password-change or user-creation.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SC-30" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify application components performing sensitive operations.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Using an intercepting proxy, the Web Developer Console,&amp;nbsp;or other tool;
                            intercept the browser request and server response, and verify a unique strong token is being
                            sent and verified with each request.&lt;/li&gt;
                            &lt;li&gt;Confirm the tokens are passed in a programmatic way resistant to CSRF attack; e.g.
                            in a custom POST field and separate HTTP header.&lt;/li&gt;
                            &lt;li&gt;Attempt to subvert the CSRF controls to ensure they are robust:&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Change or remove the tokens and confirm the application rejects the request.&lt;/li&gt;
                            &lt;li&gt;Attempt to replay the tokens in a subsequent request&lt;/li&gt;
                            &lt;li&gt;Mismatch the tokens in a request&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            To modify headers and&amp;nbsp;otherwise modify browser requests, use an intercepting proxy
                            (e.g. OWASP Zap, Burp or Fiddler), or browser extensions such as Cookie Manager or Tamper
                            Data.
                            &lt;/div&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.997000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-693-NOSNIFF" name="Set the HTTP security header 'X-Content-Type-Options' from the server" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        A number of browser-based attacks rely on incorrectly stating MIME types on content in an
                        attempt to bypass server and browser controls to render malicious content for the user.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Set the &lt;i&gt;X-Content-Type-Options: nosniff&lt;/i&gt;&amp;nbsp;header on any page
                        that displays previously uploaded content to prevent some XSS and related attacks.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Secure Headers" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
                    </references>
                    <standards>
                        <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="14.4.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the HTTP Server responses to ensure the&amp;nbsp;&lt;i&gt;&lt;i&gt;X-Content-Type-Options:
                            nosniff&lt;/i&gt;&amp;nbsp;&lt;/i&gt;header is returned.&lt;/li&gt;
                            &lt;li&gt;Using a browser:&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Open the Web Developer Console.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Make requests to the different component's endpoints.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify the header is always returned as part of these responses&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy&lt;/li&gt;
                            &lt;li&gt;Review server responses and/or use automated scanning to analyze headers&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.974000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="@cwe-693-clickjack" name="Set the HTTP security header 'X-Frame-Options header' from the server" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Prevent the page from being framed by setting the X-Frame-Options header
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Set the X-Frame-Options header to the value: SAMEORIGIN or DENY. &amp;nbsp;This header is
                        honored by the following browser versions:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Chrome 4.1.249.1042&lt;/li&gt;
                        &lt;li&gt;Firefox (Gecko) 3.6.9&lt;/li&gt;
                        &lt;li&gt;Internet Explorer 8.0 9.0&lt;/li&gt;
                        &lt;li&gt;Opera 10.50Safari 4.0&lt;/li&gt;
                        &lt;/ul&gt;Newer versions may also support the additional value: ALLOW-FROM which allows
                        specifying URLS that are permitted to frame the page.
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Secure Headers" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
                    </references>
                    <standards>
                        <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the HTTP Server responses to ensure the&lt;i&gt;&amp;nbsp;X-Frame-Options:
                            DENY&amp;nbsp;&lt;/i&gt;header is returned.&lt;/li&gt;
                            &lt;li&gt;Using a browser:&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Open the Web Developer Console.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Make requests to the different component's endpoints.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify the following header is always returned as part of these responses&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy&lt;/li&gt;
                            &lt;li&gt;Review server responses and/or use automated scanning to analyze headers&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:21.007000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-122" name="An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="excessive-permissions" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-250">
                                    <controls>
                                        <control ref="excessive-permissions" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-62" name="An attacker crafts malicious web links and distributes them, typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application." state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker crafts malicious web links and distributes them (via web pages, email,
                                etc.), typically in a targeted manner, hoping to induce users to click on the link and
                                execute the malicious action against some third-party application. If successful, the
                                action embedded in the malicious link will be processed and accepted by the targeted
                                application with the users' privilege level.
                                &lt;br /&gt;This type of attack leverages the persistence and implicit trust placed in
                                user session cookies by many web applications today. In such an architecture, once the
                                user authenticates to an application and a session cookie is created on the user's
                                system, all following transactions for that session are authenticated using that cookie
                                including potential actions initiated by an attacker and simply &amp;quot;riding&amp;quot;
                                the existing session cookie.
                                &lt;br /&gt;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="ASVS-18.8" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-352">
                                    <controls>
                                        <control ref="ASVS-18.8" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-341" name="Attackers could gain access to a users' browser through Cross Site Scripting attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Cross Site Scripting vulnerabilities could allow attackers to gain control of
                                users'
                                browsers, which in turn would allow them to:&lt;div&gt;&lt;ol&gt;&lt;li&gt;Re-write
                                browser
                                content&lt;/li&gt;&lt;li&gt;Read the users' session cookie and thereby hijack their
                                session&lt;/li&gt;&lt;li&gt;Read
                                form data from the users' browser&lt;/li&gt;&lt;li&gt;Trick users into installing
                                malware&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="1" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="CWE-693-NOSNIFF" mitigation="20"/>
                                <control ref="CWE-79-ENCODE" mitigation="20"/>
                                <control ref="WEB-CSP" mitigation="20"/>
                                <control ref="secure-attributes-of-cookies" mitigation="40"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-79">
                                    <controls>
                                        <control ref="CWE-79-ENCODE" mitigation="20"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-693-NOSNIFF">
                                    <controls>
                                        <control ref="CWE-693-NOSNIFF" mitigation="20"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-84-HTTP-ONLY">
                                    <controls>
                                        <control ref="secure-attributes-of-cookies" mitigation="40"/>
                                    </controls>
                                </weakness>
                                <weakness ref="WEB-CSP">
                                    <controls>
                                        <control ref="WEB-CSP" mitigation="20"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-693-X-XSS-PROTECTION">
                                    <controls>
                                        <control ref="secure-attributes-of-cookies" mitigation="40"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="TRANSACTION AUTHENTICATION" name="Transaction Authentication" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-103" name="Attackers cause users to peform arbitrary clicks on the site through ClickJacking attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>In a clickjacking attack the victim is tricked into unknowingly initiating some action
                                in one system while interacting with the UI from seemingly completely different system.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                While being logged in to some target system, the victim visits the attackers' malicious
                                site which displays a UI that the victim wishes to interact with. In reality, the
                                clickjacked page has a transparent layer above the visible UI with action controls that
                                the attacker wishes the victim to execute. The victim clicks on buttons or other UI
                                elements they see on the page which actually triggers the action controls in the
                                transparent overlaying layer.
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Depending on what that action control is, the attacker may have just tricked the victim
                                into executing some potentially privileged (and most certainly undesired) functionality
                                in the target system to which the victim is authenticated.&amp;nbsp;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                The basic problem here is that there is a dichotomy between what the victim thinks he's
                                clicking on versus what he or she is actually clicking on.
                                &lt;br /&gt;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="@cwe-693-clickjack" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-693-CLICKJACK">
                                    <controls>
                                        <control ref="@cwe-693-clickjack" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-62" name="Attackers could cause users to perform specific actions on their behalf through Cross Site Request Forgery attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attackers could cause users to perform actions by exploiting Cross Site Request
                                Forgery vulnerabilities. This involves the attackers creating a malicious website that
                                hosts a form or JavaScript designed to perform a POST or GET request against the target
                                application. If the victim is logged into the target application, and then navigates to
                                the attacker's malicious website, the form will be submitted and the operation performed
                                by &amp;quot;riding&amp;quot; on the users existing session.
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="CWE-352-TOKENS" mitigation="50"/>
                                <control ref="cwe-352-csrf" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-352">
                                    <controls>
                                        <control ref="CWE-352-TOKENS" mitigation="50"/>
                                        <control ref="cwe-352-csrf" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="BROWSER:SENS-DATA" name="Web Browser: Handles sensitive data" desc="Browser that presents or posts sensitive data" tags="" position="38" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-942-CORS_PERMISSIVE" name="CORS Access-Control-Allow-Origin policy is set to *" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-942: Overly Permissive Cross-domain Whitelist" url="https://cwe.mitre.org/data/definitions/942.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-08T12:48:43.527000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software uses a cross-domain policy file that includes domains that should not be trusted.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A cross-domain policy file (&amp;quot;crossdomain.xml&amp;quot; in Flash and &amp;quot;clientaccesspolicy.xml&amp;quot;
                        in Silverlight) defines a whitelist of domains from which a server is allowed to make
                        cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will
                        first look for the policy file on the target server. If it is found, and the domain hosting the
                        application is explicitly allowed to make requests, the request is made.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Therefore, if a cross-domain policy file includes domains that should not be trusted, such as
                        when using wildcards, then the application could be attacked by these untrusted domains. An
                        overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting
                        (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are
                        vulnerable to a variety of attacks. The attacker could transfer private information, such as
                        cookies that may include session information, from the victim's machine to the attacker. The
                        attacker could send malicious requests to a web site on behalf of the victim, which could be
                        especially dangerous to the site if the victim has administrator privileges to manage that
                        site.In many cases, the attack can be launched without the victim even being aware of it.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-233" name="Improper Handling of Parameters" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-04T16:10:11.668000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not properly handle when the expected number
					of parameters, fields, or arguments is not provided in input, or if those
					parameters are undefined.</desc>
                </weakness>
                <weakness ref="CWE-525" name="Information Exposure Through Browser Caching" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-525: Information Exposure Through Browser Caching" url="https://cwe.mitre.org/data/definitions/525.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:21.675000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>For each web page, the application should have an appropriate caching policy specifying the
                        extent to which the page and its form fields should be cached.
                        &lt;br /&gt;
                    </desc>
                </weakness>
                <weakness ref="CWE-922" name="Information Exposure Through Local Storage" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-922: Insecure Storage of Sensitive Information" url="https://cwe.mitre.org/data/definitions/922.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T10:28:17.838000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software stores sensitive information without properly limiting read or write access by
                        unauthorized actors.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;If read access is not properly restricted, then attackers can steal the sensitive
                        information. If write access is not properly restricted, then attackers can modify and possibly
                        delete the data, causing incorrect results and possibly a denial of service.
                        &lt;/div&gt;
                    </desc>
                </weakness>
                <weakness ref="EU-GDPR-NO-CONSENT-MECHANISM" name="No consent mechanism (conform GDPR &amp; E-privacy Regulation) " state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-07T07:46:31.474000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>No consent mechanisms (or a consent mechanism that does not comply with the GDPR and E-privacy legislation consent requirements) so the organization is unable prove to data protection authorities that the processing is legitimate/legal.
          </desc>
                </weakness>
                <weakness ref="EU-GDPR-NOT-EXPORT-FUNCTIONALITY" name="No export functionality" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-07T08:07:10.641000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>No exportability functionality (for users or admins) which would allow the user to (directly or indirectly via an admin) export his personal data in a clear, readable format and transport it to another data controller. </desc>
                </weakness>
                <weakness ref="CWE-598" name="The application sends sensitive information using the URL query string" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-598: Information Exposure Through Query Strings in GET Request" url="https://cwe.mitre.org/data/definitions/598.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T10:43:02.280000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The web application uses the GET method to process requests that contain sensitive
                        information, which can expose that information through the browser's history, Referers, web
                        logs, and other sources.
                        &lt;br /&gt;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="EU-GDPR-CONSENT-MECHANISM" name="Create a consent mechanism" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Implement a consent mechanism which allows data subjects (persons of whom personal data is processed) to give their consent for certain processing activities. This is mainly used for cookies and secondary purposes such as direct marketing, newsletters, ...&lt;br/&gt; 
          The text about the storing and processing activities, shall be provided to users in clear and easy language to be understood by them.&lt;br/&gt;
          The consent mechanism often consists of a check box. These check boxes are required for every single secondary purpose (not allowed to implement one consent box for all purposes). The consent boxes should: &lt;br /&gt;
              &lt;ul&gt;
              &lt;li&gt;be inactive by default (the data subject should active the box)&lt;/li&gt;
              &lt;li&gt;revocable (the data subject must be able to revoke the consent in a way that is as easy as it was to give consent, this can be done by implementing a platform on which the data subject can actively manage his/her consents) &lt;/li&gt;
              &lt;li&gt;the personal data shall not be used before consent of the user.&lt;/li&gt;
              &lt;li&gt;Traceable (a consent database is required to track when consent was given and revoked. This must include timestamps) &lt;/li&gt;
              &lt;/ul&gt;
              &lt;br /&gt;You must involve the DPO and/or legal department to decide on the legitimation that can be used.
          </desc>
                    <implementations/>
                    <references>
                        <reference name="EU GDPR - EU Data Protection" url="http://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
                    </references>
                    <standards>
                        <standard ref="Art.6" supportedStandardRef="EU-GDPR"/>
                        <standard ref="Art.7" supportedStandardRef="EU-GDPR"/>
                        <standard ref="8.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="8.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify appropriate user personal data consent mechanisms are in place and are not pre-granted.&lt;/li&gt;
                &lt;li&gt;Verify users can modify their data consent choices in a manner as easy as giving consent.&lt;/li&gt;
                &lt;li&gt;Verify the above above user activities have been appropriately logged.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;
            </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-01-18T12:41:32.691000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="not-store-sensitive-data-client-side" name="Do not store sensitive data on client side and remove authentication sensitive data" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
  Browsers and extensions provide a number of local storage options to persist data during HTTP interactions, including (but not limited to) Cookies, HTML5 local storage, session storage, IndexedDB, Flash cookies, and Silverlight isolated storage. These storage options may all be accessed by subsequent users of the browser or computer, and some have experienced security vulnerabilities providing unauthorized and/or remote access to their contents. It is important that sensitive, private, and otherwise restricted data is handled with care at the client-side, and is not stored in insecure locations which may expose it to attack. 
&lt;/div&gt; 
&lt;div&gt;
  Sensitive data should not be persistently stored at the client-side due to the risk of exposure. However, during normal application operation, authenticated and other sensitive data is passed, stored in transient form, and displayed to users. It is important that any such temporary storage is purged in a timely manner and actively at the end of a user session. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Do not store sensitive data in any kind of persistent, client-side storage.&lt;/li&gt; 
  &lt;li&gt;Review any application or browser layer caching or temporary storage to ensure it doesn't expose data.&lt;/li&gt; 
  &lt;li&gt;Sensitive data (including any authenticated content) stored on client side objects such as the browser DOM shall be cleared and removed actively at the end of user session (e.g. using the logout function), and where possible cleared through hard termination of the browser (e.g. closing the window or tab without using the proper application function).&lt;/li&gt; 
  &lt;li&gt;Ensure any storage used during application interaction is temporary, and automatically cleared by the browser.&lt;/li&gt; 
  &lt;li&gt;Where possible, set expiration times on client-side data to prevent accidental or malicious storage or disclosure.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-14" supportedStandardRef="NIST 800-53"/>
                        <standard ref="8.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="8.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="8.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="8.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ul&gt; 
 &lt;li&gt;Identify application functionality where sensitive or secret data is held by the browser. This may include credit card PAN or other data held in the viewstate or DOM while data is gathered from the user, for example.&lt;/li&gt; 
 &lt;li&gt;Ensure this data is not stored persistently (e.g. on disk, in persistent cookies, HTML5 stores, Flash or Silverlight storage etc.).&lt;/li&gt; 
 &lt;li&gt;Review local storage in the browser Web Developer Console during and after use of the application.&lt;/li&gt; 
 &lt;li&gt;Ensure that authentication data is removed after the session termination, to test it, we shall follow the following steps:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Access the application as an authenticated user.&lt;/li&gt; 
  &lt;li&gt;Manually or programmatically browse the site and use authenticated functionality&lt;/li&gt; 
  &lt;li&gt;In particular, identify application functionality where sensitive or secret data is held by the browser. This may include credit card PAN or other data held in the viewstate or DOM while data is gathered from the user, for example.&lt;/li&gt; 
  &lt;li&gt;Ensure this data is not stored persistently (e.g. on disk, in persistent cookies, HTML5 stores, Flash or Silverlight storage etc.).&lt;/li&gt; 
  &lt;li&gt;Review local storage in the browser Web Developer Console during and after use of the application. For example, review the HTML5 objects localStorage and sessionStorage for any sensitive data which is saved and not deleted after the logout&lt;/li&gt; 
  &lt;li&gt;Alternatively, a Javascript console can be used with the command: &lt;i&gt;sessionStorage//Storage {length: 0}localStorage//Storage {length: 0}&lt;/i&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-29T10:53:42.954000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-598" name="Ensure no sensitive data is sent in the URL" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Data passed in the URL (address bar) between client and server is likely to be exposed in logs
                        on the server, or intermediate devices (such as proxies or other network devices), or in local
                        browser logs/history. A common mistake is, for example, to pass a SessionID value as a parameter
                        in the URL of a get request between hosts. To mitigate the risk of exposure of sensitive data,
                        it should only be sent in the body of an HTTP message (for example a POST request), or in the
                        HTTP headers (either standard headers such as the Cookie values, or a custom X- header).
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure sensitive, private, or otherwise restricted data is not sent in a URL value.&lt;/li&gt;
                        &lt;li&gt;Pass data only in appropriately protected fields in the body or headers.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy.&lt;/li&gt;
                            &lt;li&gt;Programmatically or manually visit all authenticated content and functionality
                            within the application.&lt;/li&gt;
                            &lt;li&gt;Review logs to determine if sensitive data is sent in the URL at any point. If
                            should only be sent in HTTP headers (i.e. a cookie) or as part of the body (e.g. in a POST
                            or PUT request).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T10:43:46.062000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="EU-GDPR-EXPORT-FUNCTIONALITY" name="Implement export functionality" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>All data gathered from a user should be exportable. This does not include derived fields that were created by the organization, such as customer segmentation fields.
&lt;br /&gt; 
&lt;br /&gt;Provide or develop the means that will contribute to answer data portability requests, such as download tools or Application Programming Interfaces (API). 
&lt;br /&gt; 
&lt;br /&gt;They should guarantee that personal data are transmitted in a structured, commonly used and machine-readable format, and they should be encouraged to ensure the interoperability of the data format provided in the exercise of a data portability request. 
&lt;br /&gt;see also - http://ec.europa.eu/newsroom/document.cfm?doc_id=44099 (Guidelines on the right to &amp;quot;data portability&amp;quot; by WP29)&amp;quot;</desc>
                    <implementations/>
                    <references>
                        <reference name="EU GDPR - EU Data Protection" url="http://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
                    </references>
                    <standards>
                        <standard ref="Art.20" supportedStandardRef="EU-GDPR"/>
                        <standard ref="8.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="8.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify users have the functionality to request personal data transfer and/or download their own data.&lt;/li&gt;
                &lt;li&gt;Verify data is in a form acceptable to the Data Protection Practitioner.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;
            </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-01-18T14:21:47.026000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="minimise-parameters-request" name="Minimize the number of parameters in a request" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The HTTP requests shall contain only the necessary parameters to do the action (such as hidden fields, Ajax variables, cookies and header values). And the response shall return only with the required information. If unnecessary information is included in the HTTP request, we increase the attack surface unnecessarily.</desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="8.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
  Verify that all requests have got only the necessary parameters to work. 
&lt;/div&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-04T16:08:25.625000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-942-CORS" name="Restrict Cross Domain Origin policy through HTTP headers" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        If an overly permissive policy is specified then an attacker may be able to execute malicious
                        code hosted on a third party site in the victim's browser under the security trust of the
                        legitimate application. To prevent this:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Set the Access-Control-Allow-Origin header to only permit explicitly required trusted
                        domains.&lt;/li&gt;
                        &lt;li&gt;This set should be as small as possible, and follow the 'least privilege' paradigm.&lt;/li&gt;
                        &lt;li&gt;Do not use untrusted or tainted user-data from untrusted domains in CORS responses
                        without proper validation and sanitization.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Secure Headers" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
                    </references>
                    <standards>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-16" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
                        <standard ref="14.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="14.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="14.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the HTTP Server responses to ensure the&amp;nbsp;&lt;i&gt;Access-Control-Allow-Origin:
                            valid_host_name&amp;nbsp;&lt;/i&gt;header is returned.&lt;/li&gt;
                            &lt;li&gt;Using a browser:&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Open the Web Developer Console.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Make requests to the different component's end-points.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify the header is always returned as part of these responses&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite, Fiddler)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy&lt;/li&gt;
                            &lt;li&gt;Modify the Host: header in transit&lt;/li&gt;
                            &lt;li&gt;Review server responses and/or use automated scanning to analyze headers&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:21.703000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="CWE-525-CACHING" name="Set Cache-Control headers on sensitive and authenticated content" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        Browsers, servers, and upstream/intermediate devices may cache (temporarily store) data sent in
                        HTTP sessions for performance reasons. The protocol allows for a number of HTTP headers and
                        directives to control what data may be cached, where, and for how long. It is important that
                        cache-controls are specified to prevent exposure of sensitive data through inappropriate caching
                        of authenticated and otherwise restricted access data, either in the users browser or other
                        devices.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Configure the server or application to set cache-control headers on sensitive content.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The following headers are recommended:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Expires: Tue, 03 Jul 2001 06:00:00 GMT 9.4&lt;/li&gt;
                        &lt;li&gt;Last-Modified: {now} GMT&lt;/li&gt;
                        &lt;li&gt;Cache-Control: no-store, no-cache, must-revalidate, max-age=0&lt;/li&gt;
                        &lt;li&gt;Cache-Control: post-check=0, pre-check=0&lt;/li&gt;
                        &lt;li&gt;Pragma: no-cache&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="8.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="8.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="8.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the HTTP Server responses to ensure appropriate cache directives are
                            returned for all sensitive and authenticated content.&lt;/li&gt;
                            &lt;li&gt;Using a browser:&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Open the Web Developer Console.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Make requests to the different component's end-points.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify the cache controls returned as part of these responses&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy&lt;/li&gt;
                            &lt;li&gt;Review server responses and/or use automated scanning to analyze cache headers&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            The following should be set to prevent disclosure of sensitive data:
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Expires: Tue, 03 Jul 2001 06:00:00 GMT 9.4&lt;/li&gt;
                            &lt;li&gt;Last-Modified: {now} GMT&lt;/li&gt;
                            &lt;li&gt;Cache-Control: no-store, no-cache, must-revalidate, max-age=0&lt;/li&gt;
                            &lt;li&gt;Cache-Control: post-check=0, pre-check=0&lt;/li&gt;
                            &lt;li&gt;Pragma: no-cache&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:21.685000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="ACCESS SENSITIVE DATA" name="Access sensitive data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-204-AUTOCOMPLETE" name="Attackers with access to a victim's browser could read locally stored data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If the application accepts sensitive data through forms, then browsers could cache
                                that data and redisplay it if an attacker views the same form in the same browser.
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                This requires the attacker to have access to the victim's browser.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
                            <references/>
                            <controls>
                                <control ref="CWE-525-CACHING" mitigation="30"/>
                                <control ref="not-store-sensitive-data-client-side" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-525">
                                    <controls>
                                        <control ref="CWE-525-CACHING" mitigation="30"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-922">
                                    <controls>
                                        <control ref="not-store-sensitive-data-client-side" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="EU-GDPR-ILLEGAL-PROCESSING-PERSONAL-DATA" name="Illegal processing of personal data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Processing personal data without legal grounds which makes it possible for data subjects to file a complaint at local Data Protection Authority which might lead to administrative fines. 
              </desc>
                            <riskRating confidentiality="75" integrity="50" availability="50" easeOfExploitation="50"/>
                            <references/>
                            <controls>
                                <control ref="EU-GDPR-CONSENT-MECHANISM" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="EU-GDPR-NO-CONSENT-MECHANISM">
                                    <controls>
                                        <control ref="EU-GDPR-CONSENT-MECHANISM" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="WEB-QUERY-PARAM" name="Sensitive data is compromised through query parameters in the URL" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Sensitive data directly put as a parameters on the URL could be easily leaked on logs,
                                browser history, etc.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                And this information could be used by an attacker to gain access to the system or user
                                data.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="CWE-598" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-598">
                                    <controls>
                                        <control ref="CWE-598" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-39" name="An attacker gain access by manipulation of authentication token or other sensitive data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation. 
&lt;br /&gt;</desc>
                            <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="minimise-parameters-request" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-233">
                                    <controls>
                                        <control ref="minimise-parameters-request" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CWE-942-CORS_PERMISSIVE" name="Attackers could gain access to sensitive data through a too permissive CORS policy" state="Expose" source="MANUAL" owner="" library="">
                            <desc>&lt;p&gt;An overly permissive policy file allows many of the same attacks seen in
                                Cross-Site Scripting.&amp;nbsp;&lt;/p&gt;
                                &lt;p&gt;Once the user has visited a malicious site, they are vulnerable to a variety of
                                attacks. The attacker could transfer private information, such as cookies that may
                                include session information, from the victim's machine to the attacker. The attacker
                                could send malicious requests to a web site on behalf of the victim, which could be
                                especially dangerous to the site if the victim has administrator privileges to manage
                                that site.&lt;/p&gt;
                                &lt;p&gt;In many cases, the attack can be launched without the victim even being aware
                                of it.&lt;/p&gt;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="CWE-942-CORS" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-942-CORS_PERMISSIVE">
                                    <controls>
                                        <control ref="CWE-942-CORS" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="EU-GDPR-SUBJECT-RIGTHS" name="Subjects cannot exercise their rights over their personal data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Data subject cannot exercise their rights which makes it possible for data subjects to file a complaint at local Data Protection Authority which might lead to administrative fines.
              &lt;br /&gt;&lt;br /&gt;Data subject = person of whom personal data is processed
              </desc>
                            <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="EU-GDPR-EXPORT-FUNCTIONALITY" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="EU-GDPR-NOT-EXPORT-FUNCTIONALITY">
                                    <controls>
                                        <control ref="EU-GDPR-EXPORT-FUNCTIONALITY" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="BROWSER:JSON" name="Web Browser: JSON processing" desc="" tags="" position="40" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-94" name="The application uses eval to parse JSON objects" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-94: Improper Control of Generation of Code ('Code Injection')" url="https://cwe.mitre.org/data/definitions/94.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T10:22:02.249000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software constructs all or part of a code segment using externally-influenced input from
                        an upstream component, but it does not neutralize or incorrectly neutralizes special elements
                        that could modify the syntax or behavior of the intended code segment.&amp;nbsp;&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;When software allows a user's input to contain code syntax, it might be possible for
                        an attacker to craft the code in such a way that it will alter the intended control flow of the
                        software. Such an alteration could lead to arbitrary code execution.Injection problems encompass
                        a wide variety of issues -- all mitigated in very different ways.&amp;nbsp;
                        &lt;/div&gt;
                    </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="CWE-94" name="Use JSON.parse to safely parse JSON objects" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt;
                        AJAX requests used to pass data between the client- and server- can contain any data, including
                        malicious executable content. This data must be parsed in a safe manner to prevent malicious
                        code being executed to compromise the application or it's users. Utilizing eval based solutions
                        to process input data places the application at risk, as the malicious user has control over the
                        data passed to the eval function, and could execute arbitrary code as a result. JSON.parse
                        provides a means to convert the JSON payloads into an object without risk of execution.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure all tainted and potentially malicious data is processed using JSON.parse.&lt;/li&gt;
                        &lt;li&gt;Data should be validated and sanitized using appropriate syntactic and semantic
                        checks, ideally against a white-list of known-good input.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
                        <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
                        <standard ref="SI-2" supportedStandardRef="NIST 800-53"/>
                        <standard ref="5.5.4" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="5.5.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="5.5.4" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Identify application components receiving JSON as an input data.&lt;/li&gt;
                            &lt;li&gt;Ensure the code interpreting the object is using the JSON.parse method.&lt;/li&gt;
                            &lt;li&gt;If it is using an eval function the test should fail.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T10:24:24.468000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="WEB-CLIENT-INJ" name="Attackers gain access to the system through Client Side Code Injection" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If an attacker is able to mix controlled input with Client Side code he could direct
                                attacks to steal sensitive data from users.&amp;nbsp;
                            </desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
                            <references/>
                            <controls>
                                <control ref="CWE-94" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-94">
                                    <controls>
                                        <control ref="CWE-94" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="web-browser-session" name="Web Browser: Session" desc="" tags="" position="77" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-613" name="Insufficient Session Expiration" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references>
                            <reference name="CWE-613: Insufficient Session Expiration" url="https://cwe.mitre.org/data/definitions/613.html"/>
                        </references>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:46:26.494000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="secure-session-generation-and-expiration" name="Implement a secure Session Generation and Expiration" platform="" cost="0" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>&lt;div&gt; 
 &lt;div&gt;
   The session ID exchange mechanism based on cookies provides multiple security features in the form Session Generation and Expiration User state is tracked in a session. This session is typically stored on the server for traditional web based session management. A session identifier is then given to the user so the user can identify which server-side session contains the correct user data. The client only needs to maintain this session identifier, which also keeps sensitive server-side session data off of the client. 
 &lt;/div&gt; 
 &lt;div&gt;
   Here are a few controls to consider when building or implementing session management solutions: 
 &lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure that the session id is long, unique and random. The session ID length must be at least 128 bits (16 bytes)&lt;/li&gt; 
  &lt;li&gt;The session ID must be unpredictable (random enough) to prevent guessing attacks, where an attacker is able to guess or predict the ID of a valid session through statistical analysis techniques. For this purpose, a good PRNG (Pseudo Random Number Generator) must be used. The session ID value must provide at least 64 bits of entropy (if a good PRNG is used, this value is estimated to be half the length of the session ID).&lt;/li&gt; 
  &lt;li&gt;The application shall generate a new session or at least rotate the session id during authentication and re-authentication.&lt;/li&gt; 
  &lt;li&gt;The application shall not treat OAuth and refresh tokens as their own session identifiers. Moreover, it shall allow users to terminate trust relationships with linked applications.&lt;/li&gt; 
  &lt;li&gt;The CSPs (Credential Service Provider) shall re-authenticate the subscriber if its has not been authenticated since a certain inactivity period (this period is set by relying parties to CSPs). CSPs shall inform to RP (Relying Parties) the last authentication time, to know if the shall be re-authenticated.&lt;/li&gt; 
  &lt;li&gt;When a user chooses to log out (or otherwise has their session terminated), the user session must be terminated at the server-side, not solely at the client-side (for example by deleting or reissuing a session ID token/cookie).&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Revoke user sessions at the server-side.&lt;/li&gt; 
   &lt;li&gt;Redirect users to the login page, or provide a login prompt to them in context.&lt;/li&gt; 
   &lt;li&gt;Where possible, ensure the session is not reused by the application server.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;The application shall implement an idle timeout after a period of inactivity and an absolute maximum lifetime for each session, after which users must re-authenticate. If the application has implemented a functionality to be always logged in, the application shall force to users to be re-authenticated for some sensitive actions.&lt;/li&gt; 
  &lt;li&gt;The length of the timeouts should be inversely proportional with the value of the data protected.&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;30 days&lt;/li&gt; 
   &lt;li&gt;12 hours or 30 minutes of inactivity, 2FA optional&lt;/li&gt; 
   &lt;li&gt;12 hours or 15 minutes of inactivity, with 2FA&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP CheatSheet Series: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
                        <reference name="OWASP Proactive Controls [C6]" url="https://www.owasp.org/index.php/OWASP_Proactive_ControlsOWASP_Proactive_Controls"/>
                    </references>
                    <standards>
                        <standard ref="7.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="7.1.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="7.2" supportedStandardRef="nist-800-63"/>
                        <standard ref="7.2.1" supportedStandardRef="nist-800-63"/>
                        <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
                        <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
                        <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
                        <standard ref="3.6.2" supportedStandardRef="owasp-asvs4-level-3"/>
                    </standards>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>&lt;ul&gt; 
 &lt;li&gt;Check that the sessions is renewed following the steps below:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Log in to the application.&lt;/li&gt; 
  &lt;li&gt;Open another browser and go to the login page.&lt;/li&gt; 
  &lt;li&gt;Log in to the application for the second time.&lt;/li&gt; 
  &lt;li&gt;Check that the old session and session id are removed.&lt;/li&gt; 
  &lt;li&gt;Check that a new session is created with new session id.&lt;/li&gt; 
  &lt;li&gt;Check that the old and new session ids are different.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Verify that sessions tokens are generated from a source with sufficient entropy and they are not predictable.&lt;/li&gt; 
 &lt;li&gt;Check that the refresh tokens and OAuth sessions with linked applications are not terminated by users.&lt;/li&gt; 
 &lt;li&gt;Check that the CSPs shall force to the RP to re-authenticate after a certain inactivity period of time.&lt;/li&gt; 
 &lt;li&gt;Check that the logout and expiration invalidate the session token, following the steps below:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Open a browser.&lt;/li&gt; 
  &lt;li&gt;Authenticate as a user A.&lt;/li&gt; 
  &lt;li&gt;Get the Session ID and note it.&lt;/li&gt; 
  &lt;li&gt;Logout of the service.&lt;/li&gt; 
  &lt;li&gt;Set up the noted Session ID.&lt;/li&gt; 
  &lt;li&gt;Try to access an authenticated section of the service and you should not be able to do it as user A.&lt;/li&gt; 
  &lt;li&gt;To edit the cookies you can either use a proxy (i.e. OWASP ZAP, Burp, Fiddler, etc.) or a browser extension which should allow you to tamper the cookies (i.e. Tamper Data, Cookie Manager, etc.).&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Check that the session expires after a certain inactivity period following the steps below:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Verify the expected inactive timeout.&lt;/li&gt; 
  &lt;li&gt;Check 'normal' use through a browser:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Go to the authentication feature of the component.&lt;/li&gt; 
   &lt;li&gt;Authenticate as a user.&lt;/li&gt; 
   &lt;li&gt;Leave the session open for a given time (check the expiration time that has been agreed to be implemented).&lt;/li&gt; 
   &lt;li&gt;Revisit an authenticated page and determine if the session has expired (e.g. the session is no longer authenticated).&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;Check the control is enforced at the server side and not using code in the browser:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and determine which cookies or other tokens are used to maintain session state. Alternatively, capture an authenticated application request for replay.&lt;/li&gt; 
   &lt;li&gt;Store and replay the request after the timeout period to see if the application response with authenticated data.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;Review application operation and determine if any behavior artificially holds the session open, for example, heartbeat requests or calls to update data feeds sent from the client to the server are sometimes mistakenly interpreted as user activity, holding the session open.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T14:47:24.688000">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="">
                    <threats>
                        <threat ref="ASVS-2014-3.3" name="Attackers could gain access to an open session, if they have access to a user's browser" state="Expose" source="MANUAL" owner="" library="">
                            <desc>If a user steps away from their browser for a few minutes and there is an
                                opportunity for
                                an attacker to access the browser, then they could gain access to the user's logged
                                in
                                session and perform operations on their behalf.
                            </desc>
                            <riskRating confidentiality="50" integrity="50" availability="1" easeOfExploitation="10"/>
                            <references/>
                            <controls>
                                <control ref="secure-session-generation-and-expiration" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-613">
                                    <controls>
                                        <control ref="secure-session-generation-and-expiration" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
    </components>
    <rules>
        <rule name="Conclusion: Authentication - Service - Password not stored in a recovered form in Database - After users answer secret ..." module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="answerSecretsDisplay">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.WARNING_::_passwordStoredInClear_::_The password should not be stored in a recoverable form in the database." name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: Authentication - Service - Password not stored in a recovered form in Database - Exisiting password" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="emailExistingPwd">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.WARNING_::_passwordStoredInClear_::_The password should not be stored in a recoverable form in the database." name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: Authentication - Service - Password not stored in a recovered form in Database - Passwords stored in clear text" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="password.clear">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.WARNING_::_passwordStoredInClear_::_The password should not be stored in a recoverable form in the database." name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: Authentication - Service - Password reset functionality - Create a temporary OTP" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="emailOTP">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.INFO_::_passwordReset_::_Password reset functionality." name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: Authentication - Service - Password reset functionality - Existing password" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="emailExistingPwd">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.INFO_::_passwordReset_::_Password reset functionality." name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: Authentication - Service - Password reset, email password" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="emailExistingPwd">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.WARNING_::_emailPassword_::_Email is a clear text protocol which is vulnerable to network snooping attacks. Emailing the password could expose it to compromise" name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: Authentication - Service - Password reset, email/SMS password or OTP not safe - Create a temporary password" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="emailOTP">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.ALERT_::_emailPasswordUsed_::_Use of a random value in an e-mail or SMS to recover a password should be a last resort and is known weak." name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: Authentication - Service - Password reset, email/SMS password or OTP not safe - Exisiting password" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="emailExistingPwd">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.ALERT_::_emailPasswordUsed_::_Use of a random value in an e-mail or SMS to recover a password should be a last resort and is known weak." name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: Data Store - data stores are OTS components" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATASTORE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="ConclusionType.HIDDEN_::_OTS-component_::_An off-the-shelf component that was not developed" name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: SF Authentication Required - 2FA" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="2FAuth">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.INFO_::_authRequired_::_Authentication required" name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: SF Authentication Required - Login" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="authn.browser.sf">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.INFO_::_authRequired_::_Authentication required" name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: SF Authentication Required - Microsoft" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="msAuth">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.INFO_::_authRequired_::_Authentication required" name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: SF Authentication Required - To Service" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="client.authentication.building.yes">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.INFO_::_authRequired_::_Authentication required" name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: SF Authentication Required - Username and Password" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="userPassAuth">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.INFO_::_authRequired_::_Authentication required" name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: Transport - All - bespoke crypto functions" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="bespokeCrypto">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.WARNING_::_bespokeCrypto_::_Using bespoke cryptographic functions that have not been publicly reviewed pose a serious risk to the confidentiality of data.  Strongly consider using standard peer-reviewed cryptographic functions and libraries." name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: Transport - All - bespoke crypto implementation" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="bespokeImplementationOfStandardCrypto">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.ALERT_::_bespokeImplementationOfStandardCrypto_::_Cryptography is a high risk and error prone area of software development, consider using FIPS 140-2 compliant cryptographic libraries" name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: Trust Zone - All - Public Cloud is selected" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="Public Cloud">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="ConclusionType.HIDDEN_::_trust.zone.public.cloud_::_Trust Zone Public Cloud is selected" name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Conclusion: Web UI was inserted" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="ConclusionType.HIDDEN_::_conclusion.webui.created_::_Web UI components was created." name="Insert Conclusion" type="drools-without-variable-type">
                <pattern name="Action of insert conclusion" pattern='insertLogical(new Conclusion(${value-1}, "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="ControlApplied: Authentication - Browser - SSL" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="browser.ssl.signed">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CWE-295" name="Apply Control" type="drools-without-variable-type">
                <pattern name="Action of create requirement" pattern='insertLogical(ControlRef.createRequirement("${value}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="ControlApplied: Authentication - Client - SSL - HTTP-Service" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="client.ssl">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_HTTP-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CWE-295" name="Apply Control" type="drools-without-variable-type">
                <pattern name="Action of create requirement" pattern='insertLogical(ControlRef.createRequirement("${value}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="ControlApplied: Authentication - Client - SSL - Web Client" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="client.ssl">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_WEB-CLIENT">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CWE-295" name="Apply Control" type="drools-without-variable-type">
                <pattern name="Action of create requirement" pattern='insertLogical(ControlRef.createRequirement("${value}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="ControlApplied: Authentication - Service - 2FA &amp; GS: Authn-SF" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="2FAuth">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE:AUTHN-SF">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CWE-654" name="Apply Control" type="drools-without-variable-type">
                <pattern name="Action of create requirement" pattern='insertLogical(ControlRef.createRequirement("${value}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="ControlApplied: Authentication - Service - 2FA &amp; GS: Data-Sens: Auth" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="2FAuth">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE:DATA-SENS:AUTHZ">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CWE-654" name="Apply Control" type="drools-without-variable-type">
                <pattern name="Action of create requirement" pattern='insertLogical(ControlRef.createRequirement("${value}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="ControlApplied: Authentication - Service - Create a Temporary PWD &amp; PWD-RESET-EMAIL" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="emailOTP">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_PWD-RESET-EMAIL">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="PWD-RECOVER-OTP" name="Apply Control" type="drools-without-variable-type">
                <pattern name="Action of create requirement" pattern='insertLogical(ControlRef.createRequirement("${value}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="ControlApplied: Authentication - Service - Sens-Data:Transmitted &amp; Autenticated Required" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="authRequired">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE:SENS-DATA:TRANSMITTED">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CWE-306-SERVICE" name="Apply Control" type="drools-without-variable-type">
                <pattern name="Action of create requirement" pattern='insertLogical(ControlRef.createRequirement("${value}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="ControlApplied: Authentication - Service - Stored Sensitive Data &amp; Autenticated Required" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="userPassAuth">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE:DATA-SENS:AUTHZ">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CWE-306-SF" name="Apply Control" type="drools-without-variable-type">
                <pattern name="Action of create requirement" pattern='insertLogical(ControlRef.createRequirement("${value}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Client (No Web UI)" module="component" generatedByGui="true">
            <condition name="Conclusion not exists" type="drools-without-variable-type" field="id" value="conclusion.webui.created">
                <pattern name="Conclusion not exists" pattern='not Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-CLIENT">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="authenticateClient_::_Authentication_::_Will this client component implement an authentication function?_::_6200_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Client - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="authenticateClient">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="client.auth.no_::_No_::_This component does not implement authentication" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="client.authentication.building.no_::_Yes, by using an existing authentication component_::_This will require writing very little or no code and simply integrating with an existing authentication system" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="client.authentication.building.yes_::_Yes, by building an authentication system for this component_::_This will require writing code and/or including libraries to build this system" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Client - Yes" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="client.authentication.building.yes">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="authenticateServer_::_Authentication_::_How will the client component verify that it is communicating with the legitimate server?_::_6201_::_false_::_false" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Client - Yes - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="authenticateServer">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="client.ssl_::_The client will only connect to the server if the server presents a valid SSL certificate signed by a trusted Certificate Authority_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Data Store" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATASTORE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="authentication_::_Authentication_::_How do other components authenticate to the datastore?_::_6201_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Data Store - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="authentication">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATASTORE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="msAuth_::_Microsoft integrated authentication_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="noAuth_::_No authentication_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="userPassAuth_::_Username and Password_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Server" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="server.authentication_::_Authentication_::_Will this server side component implement an authentication function?_::_6200_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Server - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="server.authentication">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="noAuth_::_No_::_There is no requirement for authentication on this component" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.authentication.building.no_::_Yes, an existing authentication component or system will be used_::_This will not require writing much code, but instead interfacing with an existing authentication function" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.authentication.building.yes_::_Yes, a new authentication function will be created_::_This will require writing code and/or importing libraries" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Server - Yes" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="server.authentication.building.yes">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="authentication_::_Authentication_::_How will users authenticate?_::_6201_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Server - Yes - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="authentication">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="2FAuth_::_Two factor authentication_::_In addition to a secret, the system will also require an additional authentication factor such as one time password (OTP)" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="msAuth_::_Microsoft integrated authentication_::_The component uses Active Directory authentication" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="noAuth_::_No authentication_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="userPassAuth_::_Username and Password_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="wizardNoAuth_::_Wizard based, gathers data but no explicit authentication step_::_There is no explicit authentication step, instead the user completes a wizard based form" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Server - Yes - 2FA" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="2FAuth">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="twoFactorType_::_Authentication_::_How will 2FA be implemented?_::_6220_::_true_::_false" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Server - Yes - 2FA - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="twoFactorType">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="clientCert_::_Client side certificate_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="hardwareToken_::_Hardware token_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="softwareToken_::_Software based token_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Server - Yes - User and Pass - Add" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="userPassAuth">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="authenticationAdditional_::_Authentication_::_Additional authentication step_::_6210_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Server - Yes - User and Pass - Add - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="authenticationAdditional">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="nFromMsecretAuth_::_Enter specific characters from a secret_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Server - Yes - User and Pass - Clear" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="userPassAuth">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="password storage_::_Authentication_::_How are the authentication credentials stored?_::_6215_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Server - Yes - User and Pass - Clear - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="password storage">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="password.clear_::_Passwords stored in clear text._::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Server - Yes - User and Pass - Reset" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="userPassAuth">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="passwordRecovery_::_Authentication_::_How will users reset their passwords?_::_6205_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Server - Yes - User and Pass - Reset - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="passwordRecovery">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="answerSecretsDisplay_::_After users answer secret questions, the existing password will be displayed_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="emailExistingPwd_::_Existing password will be emailed or sent by SMS_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="emailOTP_::_Create a temporary password or token and email or SMS it to the user_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="softToken_::_By using a soft token (i.e. Time-Based One-Time Password) or an offline channel (i.e. Mobile Push)_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Web UI" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="authentication.browser_::_Authentication_::_Authentication with a Browser_::_6201_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Web UI - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="authentication.browser">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="authn.browser.sf_::_The browser presents a form that requests password based login_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="browser.ssl.signed_::_The server presents a valid SSL certificate signed by a trusted Certificate Authority_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Web UI - Login" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="authn.browser.sf">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="authentication.browser.login_::_Authentication_::_Does the client maintain a session with the server?_::_6202_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Authentication - Web UI - Login - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="authentication.browser.login">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="authentication.browser.login.no_::_No_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="authentication.browser.login.yes_::_Yes_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Data Transport - All - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="transport">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="cleartextTransport_::_Unencrypted communication, e.g. plain HTTP or TCP_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="encryptedTransport_::_Encrypted communication, e.g. HTTPS, SSL/TLS, etc._::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Data Transport - All - Encrypted - Applied" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="encryptedTransport">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="messageOrTransport_::_Data Transport_::_How will the encryption be applied?_::_6640_::_true_::_false" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Data Transport - All - Encrypted - Applied - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="messageOrTransport">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="channelEncryption_::_At the transport level, e.g. SSL/TLS applied to the whole connection_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="messageLevel_::_At the message level_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Data Transport - All - Encrypted - Type" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="channelEncryption">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="encryptionImplementation_::_Data Transport_::_How will the encryption be implemented?_::_6650_::_true_::_false" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Data Transport - All - Encrypted - Type - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="encryptionImplementation">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="bespokeCrypto_::_Bespoke cryptographic functions_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="bespokeImplementationOfStandardCrypto_::_Bespoke implementation of public cryptographic functions_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="cryptolibraries_::_Using publicly available cryptographic libraries (not FIPS compliant)._::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="fipsCryptolibraries_::_Using FIPS 140-2 compliant cryptographic libraries_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Data Transport - Client" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-CLIENT">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="transport_::_Data Transport_::_How will data be encrypted between client and server?_::_6631_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Data Transport - Data Store" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATASTORE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="transport_::_Data Transport_::_How will data be encrypted between client and server?_::_6631_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Data Transport - Service" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="transport_::_Data Transport_::_How will data be encrypted between client and server?_::_6631_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Data Transport - Web UI" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="transport_::_Data Transport_::_How will data be encrypted between client and server?_::_6631_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Deployment - All - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="deployment">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="internalInf_::_Internal infrastructure_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Deployment - All - Only Public Cloud option is show when it's selected in trust zone" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="deployment">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="Public Cloud">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="publicCloud_::_Public Cloud_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Deployment - All - Public Cloud" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="publicCloud">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="publicCloud_::_Deployment_::_Which public cloud services?_::_6505_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Deployment - All - Public Cloud - Other public Cloud" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="publicCloud">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="cloud.otherPublicCloud_::_Other Public Cloud_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Deployment - Client" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-CLIENT">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="deployment_::_Deployment_::_How will the component be deployed?_::_6500_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Deployment - Data Store" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATASTORE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="deployment_::_Deployment_::_How will the component be deployed?_::_6500_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Deployment - Load Balancer" module="component" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="load-balancer">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project="" value="deployment_::_Deployment_::_How will the component be deployed?_::_6500_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Deployment - Service" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="deployment_::_Deployment_::_How will the component be deployed?_::_6500_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Deployment - Web UI" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="deployment_::_Deployment_::_How will the component be deployed?_::_6500_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Features - Service - File Upload" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="technical-questions_::_Features_::_Features offered by this service_::_6705_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Features - Service - File Upload - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="technical-questions">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="fileUpload_::_File upload_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Features - Service - Service Features" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="service.features_::_Features_::_Service Features_::_6811_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Features - Service - Service Features - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="service.features">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="feature.admin.iface_::_The service implements an administrative Interface_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Features - Service - XML" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="tech-service_::_Features_::_XML processing_::_6701_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Features - Service - XML - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="tech-service">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="readXml_::_The service will accept XML input from the client_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="xpath_::_The service will perform XPATH queries using query data or parameters sent from the client_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Service - * - Frameworks - Default" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="frameworks.server">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="framework.server.other_::_Other server side framework_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Service - Frameworks - * - Groovy" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="frameworks.server">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="lang.groovy">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="framework.jee_::_Java Enterprise Edition_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="framework.play_::_Play Framework_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="framework.spring.boot_::_Spring Boot_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="framework.spring_::_Spring_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Service - Frameworks - * - Java" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="frameworks.server">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="lang.java">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="framework.jee_::_Java Enterprise Edition_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="framework.play_::_Play Framework_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="framework.spring.boot_::_Spring Boot_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="framework.spring_::_Spring_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Service - Frameworks - * - JavaScript" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="frameworks.server">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="lang.javascript">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="framework.node_::_Node.js_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Service - Frameworks - * - Python" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="frameworks.server">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="lang.python">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="framework.django_::_Django_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="framework.turbogears_::_Turbogears_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="framework.web2py_::_web2spy_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Service - Frameworks - * - Scala" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="frameworks.server">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="lang.scala">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="framework.jee_::_Java Enterprise Edition_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="framework.play_::_Play Framework_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="framework.spring.boot_::_Spring Boot_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="framework.spring_::_Spring_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Service - Frameworks - Web App" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_WEB-APP">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="frameworks.server_::_Languages/Frameworks_::_Which frameworks are in use on the server side?_::_6805_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Service - Frameworks - Web Service" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_WEB-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="frameworks.server_::_Languages/Frameworks_::_Which frameworks are in use on the server side?_::_6805_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Service - Languages - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="languages">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="lang.csharp_::_C#_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="lang.erlang_::_Erlang_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="lang.groovy_::_Groovy_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="lang.java_::_Java_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="lang.javascript_::_JavaScript_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="lang.php_::_PHP_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="lang.python_::_Python_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="lang.ruby_::_Ruby_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="lang.scala_::_Scala_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="lang.vb_::_VB.NET_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="lang.web.other_::_Other server side language_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Service - Languages - Web App" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_WEB-APP">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="languages_::_Languages/Frameworks_::_Which languages are in use on the server side?_::_6801_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Service - Languages - Web Service" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_WEB-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="languages_::_Languages/Frameworks_::_Which languages are in use on the server side?_::_6801_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Service - Structured Data" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="data_::_Languages/Frameworks_::_Structured Data_::_6816_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Service - Structured Data - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="data">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="service.data.json_::_JSON is used to interchange data_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="service.data.xml_::_XML is used to interchange data_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Web UI - HTML_JS" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="ui.frameworks_::_Languages/Frameworks_::_Which HTML/JS frameworks are in use?_::_6801_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Web UI - HTML_JS - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="ui.frameworks">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="angular_::_Angular_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="jquery_::_JQuery_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="react_::_React.js_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="ui.framework.other_::_Other UI Framework_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Web UI - Structured Data" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="ui.data_::_Languages/Frameworks_::_Structured Data for Web UI_::_6811_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Web UI - Structured Data - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="ui.data">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="browser.data.json_::_JSON is used to interchange data_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Web UI - Third Party" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="tp.content_::_Languages/Frameworks_::_Third party content and scripts_::_6806_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Web UI - Third Party - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="tp.content">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="embed.analytics_::_Is data analytics scripts embedded from third parties?_::_For example, JavaScript files that provide analytic services and are loaded directly from third party sites" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="tp.content_::_Is content embedded from a third party?_::_For example, are JavaScript files embedded from third party (non-self hosted) sites?" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Web UI - UI Features" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="ui.features_::_Languages/Frameworks_::_UI Features_::_6816_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Languages/Frameworks - Web UI - UI Features - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="ui.features">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="feature.wysiwyg_::_The Web UI implements a WYSIWYG editor_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Secret management - All - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="secret.management.crypto">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="secret.management.crypto.no_::_No_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="secret.management.crypto.yes_::_Yes_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Secret management - Client" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-CLIENT">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="secret.management.crypto_::_Secret management_::_Does this component implement, contain or incorporate cryptographic functions?_::_6300_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Secret management - Service" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="secret.management.crypto_::_Secret management_::_Does this component implement, contain or incorporate cryptographic functions?_::_6300_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Server - Service" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="server.tech_::_Server_::_What technologies are used for the server?_::_6101_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Server - Service - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="server.tech">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="server.apache_::_Apache_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.dotnet_::_.NET_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.iis_::_IIS_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.java_::_Java Web Container_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.javascript_::_JavaScript (on the server)_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.jee_::_Java EE_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.nginx_::_Nginx_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.php_::_PHP_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.python_::_Python_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.ruby_::_Ruby_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Server - Service - Java EE" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="framework.jee">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="server.type_::_Server_::_Which servers are in use?_::_6105_::_false_::_false" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Server - Service - Java EE - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="server.type">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="server.jee">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="server.glassfish_::_Glassfish_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.jboss_::_JBoss_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.weblogic_::_WebLogic_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Server - Service - Java Web" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="server.java">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="server.type_::_Server_::_Which servers are in use?_::_6105_::_false_::_false" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Server - Service - Java Web - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="server.type">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="server.java">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="server.jetty_::_Jetty_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.tomcat_::_Tomcat_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.wildfly_::_JBoss Wildfly_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Session Management - Service - Session" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="server.session.management_::_Session Management_::_How will session management between the client and the server side be implemented?_::_6601_::_true_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Session Management - Service - Session - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="server.session.management">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="server.session.building.no_::_An existing session management system will be used._::_This will require absolutely no configuration or code changes, but will rely entirely on an existing session management system" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="server.session.building.yes_::_A new session management system will be built as part of this application_::_This will involve configuring the frameworks session management features, and/or writing code to determine when a session is initiated and when it is terminated." name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="stateless_::_No session will be maintained_::_Each request is independently authenticated" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Session Management - Service - Session - Yes" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="server.session.building.yes">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="server.session.methods_::_Session Management_::_How will the session state be managed?_::_6605_::_true_::_false" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Session Management - Service - Session - Yes - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="server.session.methods">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="connection_::_Using the underlying connection, e.g. TCP_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="sessionID_::_Using a unique session ID value thats transmitted between the client and server_::_A unique session token is transmitted between the client and server sides to maintain state" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Session Management - Service - Session - Yes - Session ID" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="sessionID">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="sessionIDGeneration_::_Session Management_::_Are you building a new session management system for this component?_::_6611_::_true_::_false" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: Session Management - Service - Session - Yes - Session ID - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="sessionIDGeneration">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="bespokeSessionID_::_Generated using bespoke application code_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="frameworkProvidedSessionID_::_Generated by a framework or application server on the server side_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: User Registration - Web Application" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="authRequired">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_WEB-APP">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="" value="userReg_::_User registration_::_How will users be added to the service_::_7000_::_false_::_false_::_" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: User Registration - Web Application - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="userReg">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="reg.external_::_Added through an external process_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="selfReg_::_Self registration through the service itself_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: User Registration - Web Application - Self" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="selfReg">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="" value="confirmation_::_User registration_::_During registration, how will users verify their account?_::_7001_::_true_::_false" name="Insert Question Group" type="drools-without-variable-type">
                <pattern name="Action of insert question group" pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content></content>
        </rule>
        <rule name="Q: User Registration - Web Application - Self - *" module="component" generatedByGui="true">
            <condition name="Question Group exists" type="drools-without-variable-type" field="id" value="confirmation">
                <pattern name="Question group exists" pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project="" value="noRegVerification_::_No verification step_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project="" value="regVerifyEmail_::_Required to click a unique URL sent in an email_::_" name="Insert Question" type="drools-without-variable-type">
                <pattern name="Action of insert question" pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Patern: Assets - Service - Authz HTTP Service - Processed - Web App &amp; Web Service" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="sensitiveDataProcessed">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_HTTP-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_HTTP-SERVICE:AUTHZ" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Assets - Client - Storage Sens Data - Thick Client" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="sensitiveDataStorage">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_CLIENT:THICK">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_FATCLIENT:SENS-DATA-STORAGE" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Assets - Data Store - Sens Data Storage" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="sensitiveDataStorage">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATASTORE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_SERVICE:SENS-DATA:STORAGE" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Assets - Data Store - Sens Data Transmitted" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="sensitiveDataTransmitted">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATASTORE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:SENS-DATA:TRANSMITTED" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_SENS-DATA:TRANSPORT" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Assets - Service - Authz HTTP Service - Stored - Web App &amp; Web Service" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="sensitiveDataStorage">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_HTTP-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_HTTP-SERVICE:AUTHZ" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Assets - Service - Data Sens Authz Processed" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="sensitiveDataProcessed">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:DATA-SENS:AUTHZ" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Assets - Service - Data Sens Authz Sent" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="sensitiveDataTransmitted">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:DATA-SENS:AUTHZ" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Assets - Service - Data Sens Authz Stored" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="sensitiveDataStorage">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:DATA-SENS:AUTHZ" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_SERVICE:SENS-DATA:STORAGE" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Assets - Service - HTTP Service - Sensitive data Sent" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="sensitiveDataTransmitted">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_HTTP-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_http-service-sensitive-data-sent" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Assets - Service - Sens Data Transmitted" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="sensitiveDataTransmitted">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:SENS-DATA:TRANSMITTED" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_SENS-DATA:TRANSPORT" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Assets - Service - WebApp transport Sens Data" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="sensitiveDataTransmitted">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_WEB-APP">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_WEB-APP:SENS-DATA:TRANSPORT" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Assets - Web UI - Sens Data Received" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="sensitiveDataReceived">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_BROWSER:SENS-DATA" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Assets - Web UI - Sens Data Sent" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="sensitiveDataTransmitted">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_BROWSER:SENS-DATA" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Authentication - 2FA - Server" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="2FAuth">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:AUTHN-2FA" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Authentication - Browser - Login" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="authn.browser.sf">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_BROWSER:AUTHN-SF" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_BROWSER:SENS-DATA" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_GENERIC-CLIENT:AUTHN" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Authentication - Client - Yes new" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="client.authentication.building.yes">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-CLIENT">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_FATCLIENT:AUTHN" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_GENERIC-CLIENT:AUTHN" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Authentication - Microsoft - Data Store" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="msAuth">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATASTORE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_AUTHN-SF:DATA-TRANSPORT" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_GENERIC-OTS-SERVICE:AUTHN-SF" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:AUTHN" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Authentication - Microsoft - Service" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="msAuth">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_AUTHN-SF:DATA-TRANSPORT" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:AUTHN-SF" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Authentication - Server - Yes, existing Auth" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="server.authentication.building.no">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CWE-306-SERVICE" name="Apply Control" type="drools-without-variable-type">
                <pattern name="Action of create requirement" pattern='insertLogical(ControlRef.createRequirement("${value}"));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:AUTHN" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Authentication - Server - Yes, new Auth" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="server.authentication.building.yes">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CWE-306-SERVICE" name="Apply Control" type="drools-without-variable-type">
                <pattern name="Action of create requirement" pattern='insertLogical(ControlRef.createRequirement("${value}"));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:AUTHN" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Authentication - Service - 2FA - if CWE-654 is applied" module="component" generatedByGui="true">
            <condition name="Applied Countermeasure" type="drools-without-variable-type" field="id" value="CWE-654">
                <pattern name="Countermeasure is required" pattern='Control(ref == "${value}", isRequired());'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:AUTHN-2FA" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Authentication - User and Pass - Data Store" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="userPassAuth">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATASTORE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_AUTHN-SF:DATA-TRANSPORT" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_GENERIC-OTS-SERVICE:AUTHN-SF" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Authentication - User and Pass - Server" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="userPassAuth">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_AUTHN-SF:DATA-TRANSPORT" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:AUTHN-SF" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Authentication - User and Pass - Server - Exisiting Password" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="emailExistingPwd">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_CREDENTIALS-STORAGE:CLEAR" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_PWD-RESET" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_PWD-RESET-EMAIL" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Authentication - User and Pass - Server - Secret Question" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="answerSecretsDisplay">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_CREDENTIALS-STORAGE:CLEAR" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_PWD-RESET-SECRETQ" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Authentication - User and Pass - Server - Stored in clear" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="password.clear">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_CREDENTIALS-STORAGE:CLEAR" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Authentication - User and Pass - Server - Token" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="emailOTP">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_PWD-RESET" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_PWD-RESET-TOKEN" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Data Transport - Transport Level" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="channelEncryption">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CWE-319-TRANSPORT" name="Apply Control" type="drools-without-variable-type">
                <pattern name="Action of create requirement" pattern='insertLogical(ControlRef.createRequirement("${value}"));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_SENS-DATA:TRANSPORT:TLS" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Deployment - Data Store - Internal Infrastructure - Data Store not SQL" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="internalInf">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATABASE-NOSQL">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_INF-SERVER" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Deployment - Data Store - Internal Infrastructure - Data Store Others" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="internalInf">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATASTORE-OTHER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_INF-SERVER" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Deployment - Data Store - Internal Infrastructure - Data Store SQL" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="internalInf">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_DATABASE-SQL">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_DB-SERVER" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <action project="CS-Default" value="CS-Default_::_INF-SERVER" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Deployment - Service - Internal Infrastructure - Server" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="internalInf">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_INF-SERVER" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Feature - Service - File Upload - Basic - Generic Service" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="fileUpload">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:FILE-UPLOAD" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Feature - Service - File Upload - Web App" module="component" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="web-application-server-side">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="fileUpload">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE:FILE-UPLOAD">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_HTTP-SERVICE:FILEUPLOAD" name="Extend risk pattern" type="drools-without-variable-type">
                <pattern name="Action of extend risk pattern" pattern='insertLogical($riskPattern.extendRiskPattern("${value-1}","${value-2}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Feature - Service - File Upload - Web Service" module="component" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="web-service">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="fileUpload">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE:FILE-UPLOAD">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_HTTP-SERVICE:FILEUPLOAD" name="Extend risk pattern" type="drools-without-variable-type">
                <pattern name="Action of extend risk pattern" pattern='insertLogical($riskPattern.extendRiskPattern("${value-1}","${value-2}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Feature - Service - XML" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="readXml">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:XML" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Feature - Service - XPATH" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="xpath">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:XPATH" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Features - Service - Interface" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="feature.admin.iface">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_CSD-GS-ADM" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Generic Service DNS Queries" module="component" generatedByGui="true">
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_generic-service-dns-queries" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Languages/Framework - Service - Structure Data JSON" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="service.data.json">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:JSON" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Languages/Framework - Service - Structure Data XML" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="service.data.xml">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:XML" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Languages/Framework - Web UI - JSON" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="browser.data.json">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_BROWSER:JSON" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Languages/Framework - Web UI - WYSIWYG" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="feature.wysiwyg">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_BROWSER">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_BROWSER:WYSIWYG" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Secret Management - Crypto" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="secret.management.crypto.yes">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_SECRETS-MANAGEMENT" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Sensitive data transport over HTTPS" module="component" generatedByGui="true">
            <condition name="Conclusion exists" type="drools-without-variable-type" field="id" value="sensitiveDataReceived">
                <pattern name="Conclusion exists" pattern='Conclusion(id == "${value}");'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_HTTP-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_sensitive-data-transport-https" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Server - Service - Apache" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="server.apache">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_SERVER:APACHE" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Server - Service - DOTNET" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="server.dotnet">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_SERVER:DOTNET" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Server - Service - IIS" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="server.iis">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_SERVER:IIS" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Server - Service - Java EE" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="server.jee">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_SERVER:JAVA-EE" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Server - Service - Java Web Container" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="server.java">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_SERVER:JAVA-WEB" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Server - Service - JavaScript" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="server.javascript">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_SERVER:JAVASCRIPT" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Server - Service - Nginx" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="server.nginx">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_SERVER:NGINX" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Server - Service - PHP" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="server.php">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_SERVER:PHP" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Server - Service - Python" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="server.python">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_SERVER:PYTHON" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Server - Service - RUBY" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="server.ruby">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_SERVER:RUBY" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Session Management - Generic Service - Unique Session ID" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="sessionID">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_GENERIC-SERVICE:SESSION" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Session Management - Service - Framework" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="frameworkProvidedSessionID">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="ASVS-3.1" name="Apply Control" type="drools-without-variable-type">
                <pattern name="Action of create requirement" pattern='insertLogical(ControlRef.createRequirement("${value}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Session Management - Service - Unique Session ID - Web App" module="component" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="web-application-server-side">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="sessionID">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE:SESSION">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_HTTP-SERVICE:SESSION" name="Extend risk pattern" type="drools-without-variable-type">
                <pattern name="Action of extend risk pattern" pattern='insertLogical($riskPattern.extendRiskPattern("${value-1}","${value-2}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Session Management - Service - Unique Session ID - Web Service" module="component" generatedByGui="true">
            <condition name="Is specific component definition" type="drools-without-variable-type" field="id" value="web-service">
                <pattern name="Is specific component definition" pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <condition name="Question is answered" type="Question" field="id" value="sessionID">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name="Risk pattern exists" type="drools-without-variable-type" field="id" value="CS-Default_::_GENERIC-SERVICE:SESSION">
                <pattern name="Risk pattern exists" pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_HTTP-SERVICE:SESSION" name="Extend risk pattern" type="drools-without-variable-type">
                <pattern name="Action of extend risk pattern" pattern='insertLogical($riskPattern.extendRiskPattern("${value-1}","${value-2}"));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: User Registration - Web Application - Self Registration" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="selfReg">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_USER-REG:SELF" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
        <rule name="Risk Pattern: Web Browser - Session" module="component" generatedByGui="true">
            <condition name="Question is answered" type="Question" field="id" value="authentication.browser.login.yes">
                <pattern name="Condition with answer" pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project="CS-Default" value="CS-Default_::_web-browser-session" name="Import Risk Pattern" type="drools-without-variable-type">
                <pattern name="Action of import a risk pattern" pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content></content>
        </rule>
    </rules>
</project>
