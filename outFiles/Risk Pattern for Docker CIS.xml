<?xml version="1.0" encoding="UTF-8"?>
<project ref="docker-cis" name="Docker CIS" revision="1" type="LIBRARY" status="OPEN" enabled="true" priority="0" tags="" workflowState="">
    <desc>Risk Pattern for Docker CIS</desc>
    <categoryComponents/>
    <componentDefinitions/>
    <udts/>
    <dataflows/>
    <supportedStandards/>
    <components>
        <component ref="INTER-CONTAINER-COMMUNICATION" name="Inter-Container Communication" desc="" tags="" position="1" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-276" name="Incorrect Default Permissions" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.</desc>
                </weakness>
                <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>An information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information.</desc>
                </weakness>
                <weakness ref="UNRESTRICTED-NETWORK" name="Service is exposed to a wide attack surface" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product is exposed or reachable to an unnecessarily large group of potential attackers. An over-exposure of a component increases the chance of an attacker gaining access to the system through a vulnerability. </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="D2.1.1" name="Ensure that only containers which are required to cummunicate with each other are linked together" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>By default, all network traffic is allowed between containers on the same host on the default network bridge. If your containers should communicate each other, you can create a custom network and only join containers that need to communicate to that custom network. Alternatively, link only specific containers together that require communication. &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;By default, unrestricted network traffic is enabled between all containers on the same host on the default network bridge. Thus, each container has the potential of reading all packets across the container network on the same host. This might lead to an unintended and unwanted disclosure of information to other containers. Hence, create a custom network and only join containers that need to communicate to that custom network or link only specific containers together that require communication. &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;You can follow the Docker documentation to create a custom network and only join containers that need to communicate to that custom network. The --icc parameter only applies to the default docker bridge, if custom networks are used then the approach of segmenting networks should be adopted instead.&amp;lt;br /&amp;gt;Alternatively, follow the Docker documentation and link specific containers using the --link flag.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Note: Docker warns users to not use the --link flag unless absolutely necessary, because it is a legacy Docker feature and it may eventually be removed.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;You have to manage the custom networks.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>The docker network inspect command returns information about a network and can be used as follows:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 1: Ensure that default bridge network has no containers:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker network inspect bridge&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: Check your custom network for the joined containers:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker network inspect &amp;lt;network name&amp;gt; </steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="DOCKER AUTHENTICATION AND AUTHORIZATION" name="Docker Authentication and Authorization" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D2.1.1" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-276">
                                    <controls>
                                        <control ref="D2.1.1" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="DOCKER GENERAL" name="Docker General" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-37" name="Retrieve Embedded Sensitive Data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D2.1.1" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-200">
                                    <controls>
                                        <control ref="D2.1.1" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="DOCKER NETWORKING" name="Docker Networking" desc="" library="">
                    <threats>
                        <threat ref="DOCKER-WIDE-ATTACK-SURFACE" name="Exploitation of a wide attack surface" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Every point of network interaction is a potential part of the network attack surface having exploitable vulnerabilities.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D2.1.1" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="UNRESTRICTED-NETWORK">
                                    <controls>
                                        <control ref="D2.1.1" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="INTER-CONTAINER-RESTRICTION" name="Inter-Container Restriction" desc="" tags="" position="2" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-276" name="Incorrect Default Permissions" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.</desc>
                </weakness>
                <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>An information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information.</desc>
                </weakness>
                <weakness ref="UNRESTRICTED-NETWORK" name="Service is exposed to a wide attack surface" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product is exposed or reachable to an unnecessarily large group of potential attackers. An over-exposure of a component increases the chance of an attacker gaining access to the system through a vulnerability. </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="D2.1.2" name="Ensure all network traffic is restricted between containers on the default bridge" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>By default, all network traffic is allowed between containers on the same host on the default network bridge. If not desired, restrict all the inter-container communication.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;By default, unrestricted network traffic is enabled between all containers on the same host on the default network bridge. Thus, each container has the potential of reading all packets across the container network on the same host. This might lead to an unintended and unwanted disclosure of information to other containers. Hence, restrict the inter-container communication on the default network bridge.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Run the docker in daemon mode and pass --icc=false as an argument.&amp;lt;br /&amp;gt;For Example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;dockerd --icc=false&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The inter-container communication would be disabled on the default network bridge. If any communication between containers on the same host is desired in the future, then it needs to be explicitly defined using container linking or alternatively custom networks have to be defined.&amp;lt;br /&amp;gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run the below command and verify that the default network bridge has been configured to restrict inter-container communication.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker network ls --quiet | xargs docker network inspect --format '{{ .Name }}: {{ .Options }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;It should return com.docker.network.bridge.enable_icc:false for the default network bridge.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="DOCKER AUTHENTICATION AND AUTHORIZATION" name="Docker Authentication and Authorization" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D2.1.2" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-276">
                                    <controls>
                                        <control ref="D2.1.2" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="DOCKER GENERAL" name="Docker General" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-37" name="Retrieve Embedded Sensitive Data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D2.1.2" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-200">
                                    <controls>
                                        <control ref="D2.1.2" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="DOCKER NETWORKING" name="Docker Networking" desc="" library="">
                    <threats>
                        <threat ref="DOCKER-WIDE-ATTACK-SURFACE" name="Exploitation of a wide attack surface" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Every point of network interaction is a potential part of the network attack surface having exploitable vulnerabilities.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D2.1.2" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="UNRESTRICTED-NETWORK">
                                    <controls>
                                        <control ref="D2.1.2" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="DOCKER-DAEMON-CONFIGURATION" name="Docker daemon configuration" desc="" tags="" position="3" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-276" name="Incorrect Default Permissions" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.</desc>
                </weakness>
                <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.
New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges. Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.  </desc>
                </weakness>
                <weakness ref="CWE-732" name="Incorrect Permission Assignment for Critical Resource" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.
When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.  </desc>
                </weakness>
                <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>This is a generic weakness that includes several different situations, they are all related to unexpected environmental conditions and they could be related to:   
• Misconfiguration. 
• Uncleared buffers, shared memory, files, etc. 
• Problems between the interaction of two different entities that cause unexpected behaviour.   </desc>
                </weakness>
                <weakness ref="CWE-400" name="Uncontrolled Resource Consumption ('Resource Exhaustion')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not properly restrict the size or amount of resources that are requested or influenced by an actor, which can be used to consume more resources than intended.</desc>
                </weakness>
                <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When a security-critical event occurs, the software either does not record the event or omits important details about the event when logging it.
When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds.  </desc>
                </weakness>
                <weakness ref="SSL-WEAK-PROTOCOL" name="Use of weak TLS protocols" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>A cryptographically weak SSL/TLS protocol could allow an attacker to sniff the traffic or impersonate the server. </desc>
                </weakness>
                <weakness ref="CWE-287" name="Improper Server's Identity Validation" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not validate, or incorrectly validates, the server's identity. 
If the server's identity is not validated, an attacker could spoof a trusted entity by using a man-in-the-middle (MITM) attack. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host. 
 
One way to perform server's authentication is by using X509 certificates over TLS. 
 </desc>
                </weakness>
                <weakness ref="UNRESTRICTED-NETWORK" name="Service is exposed to a wide attack surface" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product is exposed or reachable to an unnecessarily large group of potential attackers. An over-exposure of a component increases the chance of an attacker gaining access to the system through a vulnerability. </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="D2.3" name="Ensure Docker is allowed to make changes to iptables" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Iptables are used to set up, maintain, and inspect the tables of IP packet filter rules in the Linux kernel. Allow the Docker daemon to make changes to the iptables.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Docker will never make changes to your system iptables rules if you choose to do so. Docker server would automatically make the needed changes to iptables based on how you choose your networking options for the containers if it is allowed to do so. It is recommended to let Docker server make changes to iptables automatically to avoid networking misconfiguration that might hamper the communication between containers and to the outside world. Additionally, it would save you hassles of updating iptables every time you choose to run the containers or modify networking options.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not run the Docker daemon with --iptables=false parameter. For example, do not start the Docker daemon as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;dockerd --iptables=false&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Docker daemon service start requires iptables rules to be enabled before it starts. Any restarts of iptables during docker daemon operation may result in losing docker-created rules. Adding iptables-persistent to your iptables install can assist with mitigating this impact.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>ps -ef | grep dockerd&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Ensure that the --iptables parameter is either not present or not set to false.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.4" name="Ensure insecure registries are not used" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Docker considers a private registry either secure or insecure. By default, registries are considered secure.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;A secure registry uses TLS. A copy of registry's CA certificate is placed on the Docker host at /etc/docker/certs.d/&amp;lt;registry-name&amp;gt;/ directory. An insecure registry is the one not having either valid registry certificate or is not using TLS. You should not be using any insecure registries in the production environment. Insecure registries can be tampered with leading to possible compromise to your production system.&amp;lt;br /&amp;gt;Additionally, If a registry is marked as insecure then docker pull, docker push, and docker search commands will not result in an error message and the user might be indefinitely working with insecure registries without ever being notified of potential danger.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not use any insecure registries.&amp;lt;br /&amp;gt;For example, do not start the Docker daemon as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;dockerd --insecure-registry 10.1.0.0/16&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run docker info or execute the below command to find out if any insecure registries are used:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;ps -ef | grep dockerd&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Ensure that the --insecure-registry parameter is not present.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.11" name="Ensure that authorization for Docker client commands is enabled" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Use native Docker authorization plugins or a third party authorization mechanism with Docker daemon to manage access to Docker client commands.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Docker’s out-of-the-box authorization model is all or nothing. Any user with permission to access the Docker daemon can run any Docker client command. The same is true for callers using Docker’s remote API to contact the daemon. If you require greater access control, you can create authorization plugins and add them to your Docker daemon configuration. Using an authorization plugin, a Docker administrator can configure granular access policies for managing access to Docker daemon.&amp;lt;br /&amp;gt;Third party integrations of Docker may implement their own authorization models to require authorization with the Docker daemon outside of docker's native authorization plugin (i.e. Kubernetes, Cloud Foundry, Openshift).&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Step 1: Install/Create an authorization plugin.&amp;lt;br /&amp;gt;Step 2: Configure the authorization policy as desired.&amp;lt;br /&amp;gt;Step 3: Start the docker daemon as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;dockerd --authorization-plugin=&amp;lt;PLUGIN_ID&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Each docker command specifically passes through authorization plugin mechanism. This might introduce a slight performance drop.&amp;lt;br /&amp;gt;Third party use of alternative container engines that utilize the docker daemon may provide alternative mechanisms to provide this security control.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>ps -ef | grep dockerd&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Ensure that the --authorization-plugin parameter is set as appropriate if using docker native authorization.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker search hello-world&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Ensure that docker daemon requires authorization to perform the above command.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.18" name="Ensure containers are restricted from acquiring new privileges" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Restrict containers from acquiring additional privileges via suid or sgid bits, by default.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;A process can set the no_new_priv bit in the kernel. It persists across fork, clone and execve. The no_new_priv bit ensures that the process or its children processes do not gain any additional privileges via suid or sgid bits. This way a lot of dangerous operations become a lot less dangerous because there is no possibility of subverting privileged binaries.&amp;lt;br /&amp;gt;Setting this at the daemon level ensures that by default all new containers are restricted from acquiring new privileges.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Run the Docker daemon as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;dockerd --no-new-privileges&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;no_new_priv prevents LSMs like SELinux from transitioning to process labels that have access not allowed to the current process.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>ps -ef | grep dockerd&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Ensure that the --no-new-privileges parameter is present and is not set to false.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.8" name="Enable user namespace support" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Enable user namespace support in Docker daemon to utilize container user to host user re-mapping. This recommendation is beneficial where containers you are using do not have an explicit container user defined in the container image. If container images that you are using have a pre-defined non-root user, this recommendation may be skipped since this feature is still in its infancy and might give you unpredictable issues and complexities.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The Linux kernel user namespace support in Docker daemon provides additional security for the Docker host system. It allows a container to have a unique range of user and group IDs which are outside the traditional user and group range utilized by the host system.&amp;lt;br /&amp;gt;For example, the root user will have expected administrative privilege inside the container but can effectively be mapped to an unprivileged UID on the host system.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Please consult Docker documentation for various ways in which this can be configured depending upon your requirements. Your steps might also vary based on platform &amp;lt;li&amp;gt;For example, on Red Hat, sub-UIDs and sub-GIDs mapping creation does not work automatically. You might have to create your own &amp;lt;/li&amp;gt;apping.&amp;lt;br /&amp;gt;However, the high-level steps are as below:&amp;lt;br /&amp;gt;Step 1: Ensure that the files /etc/subuid and /etc/subgid exist.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;touch /etc/subuid /etc/subgid&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: Start the docker daemon with --userns-remap flag&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;dockerd --userns-remap=default&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;User namespace remapping makes quite a few Docker features incompatible and also currently breaks a few functionalities. Check out the Docker documentation and referenced links for details.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>ps -p $(docker inspect --format='{{ .State.Pid }}' &amp;lt;CONTAINER ID&amp;gt;) -o pid,user&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command would find the PID of the container and then would list the host user associated with the container process. If the container process is running as root, then this recommendation is non-compliant.&amp;lt;br /&amp;gt;Alternatively, you can run docker info to ensure that the userns is listed under Security Options:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker info --format '{{ .SecurityOptions }}'</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.16" name="Ensure daemon-wide custom seccomp profile is applied, if needed" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>You can choose to apply your custom seccomp profile at the daemon-wide level if needed and override Docker's default seccomp profile.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;A large number of system calls are exposed to every userland process with many of them going unused for the entire lifetime of the process. Most of the applications do not need all the system calls and thus benefit by having a reduced set of available system calls. The reduced set of system calls reduces the total kernel surface exposed to the application and thus improvises application security.&amp;lt;br /&amp;gt;You could apply your own custom seccomp profile instead of Docker's default seccomp profile. Alternatively, if Docker's default profile is good for your environment, you can choose to ignore this recommendation.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;By default, Docker's default seccomp profile is applied. If this is good for your environment, no action is necessary. Alternatively, if you choose to apply your own seccomp profile, use the --seccomp-profile flag at daemon start or put it in the daemon runtime parameters file.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;dockerd --seccomp-profile &amp;lt;/path/to/seccomp/profile&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;A misconfigured seccomp profile could possibly interrupt your container environment. Docker-default blocked calls have been carefully scrutinized. These address some critical vulnerabilities/issues within container environments (for example, kernel key ring calls). So, you should be very careful while overriding the defaults.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run the below command and review the seccomp profile listed in the Security Options section. If it is default, that means, Docker's default seccomp profile is applied.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker info --format '{{ .SecurityOptions }}'</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.5" name="Ensure aufs storage driver is not used" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Do not use aufs as storage driver for your Docker instance.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The aufs storage driver is the oldest storage driver. It is based on a Linux kernel patch-set that is unlikely to be merged into the main Linux kernel. aufs driver is also known to cause some serious kernel crashes. aufs just has legacy support from Docker. Most importantly, aufs is not a supported driver in many Linux distributions using latest Linux kernels.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not explicitly use aufs as storage driver.&amp;lt;br /&amp;gt;For example, do not start Docker daemon as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;dockerd --storage-driver aufs&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;aufs is the only storage driver that allows containers to share executable and shared library memory. It might be useful if you are running thousands of containers with the same program or libraries.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command and verify that aufs is not used as storage driver:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker info | grep -e "^Storage Driver:\s*aufs\s*$"&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should not return anything.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.6" name="Ensure TLS authentication for Docker daemon is configured" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>It is possible to make the Docker daemon to listen on a specific IP and port and any other Unix socket other than default Unix socket. Configure TLS authentication to restrict access to Docker daemon via IP and port.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;By default, Docker daemon binds to a non-networked Unix socket and runs with root privileges. If you change the default docker daemon binding to a TCP port or any other Unix socket, anyone with access to that port or socket can have full access to Docker daemon and in turn to the host system. Hence, you should not bind the Docker daemon to another IP/port or a Unix socket.&amp;lt;br /&amp;gt;If you must expose the Docker daemon via a network socket, configure TLS authentication for the daemon and Docker Swarm APIs (if using). This would restrict the connections to your Docker daemon over the network to a limited number of clients who could successfully authenticate over TLS.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Follow the steps mentioned in the Docker documentation or other references.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;You would need to manage and guard certificates and keys for Docker daemon and Docker clients.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>ps -ef | grep dockerd&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Ensure that the below parameters are present:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;--tlsverify&amp;lt;br /&amp;gt;--tlscacert&amp;lt;br /&amp;gt;--tlscert&amp;lt;br /&amp;gt;--tlskey</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.7" name="Ensure the default ulimit is configured appropriately" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Set the default ulimit options as appropriate in your environment.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;ulimit provides control over the resources available to the shell and to processes started by it. Setting system resource limits judiciously saves you from many disasters such as a fork bomb. Sometimes, even friendly users and legitimate processes can overuse system resources and in-turn can make the system unusable.&amp;lt;br /&amp;gt;Setting default ulimit for the Docker daemon would enforce the ulimit for all container instances. You would not need to setup ulimit for each container instance. However, the default ulimit can be overridden during container runtime, if needed. Hence, to control the system resources, define a default ulimit as needed in your environment.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Run the docker in daemon mode and pass --default-ulimit as argument with respective ulimits as appropriate in your environment.&amp;lt;br /&amp;gt;For Example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;dockerd --default-ulimit nproc=1024:2048 --default-ulimit nofile=100:200&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;If the ulimits are not set properly, the desired resource control might not be achieved and might even make the system unusable.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>ps -ef | grep dockerd&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Ensure that the --default-ulimit parameter is set as appropriate.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.9" name="Ensure the default cgroup usage has been confirmed" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The --cgroup-parent option allows you to set the default cgroup parent to use for all the containers. If there is no specific use case, this setting should be left at its default.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;System administrators typically define cgroups under which containers are supposed to run. Even if cgroups are not explicitly defined by the system administrators, containers run under docker cgroup by default.&amp;lt;br /&amp;gt;It is possible to attach to a different cgroup other than that is the default. This usage should be monitored and confirmed. By attaching to a different cgroup than the one that is a default, it is possible to share resources unevenly and thus might starve the host for resources.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The default setting is good enough and can be left as-is. If you want to specifically set a non-default cgroup, pass --cgroup-parent parameter to the docker daemon when starting it.&amp;lt;br /&amp;gt;For Example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;dockerd --cgroup-parent=/foobar&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>ps -ef | grep dockerd&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Ensure that the --cgroup-parent parameter is either not set or is set as appropriate non-default cgroup.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.15" name="Ensure Userland Proxy is Disabled" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The docker daemon starts a userland proxy service for port forwarding whenever a port is exposed. Where hairpin NAT is available, this service is generally superfluous to requirements and can be disabled.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Docker engine provides two mechanisms for forwarding ports from the host to containers, hairpin NAT, and a userland proxy. In most circumstances, the hairpin NAT mode is preferred as it improves performance and makes use of native Linux iptables functionality instead of an additional component.&amp;lt;br /&amp;gt;Where hairpin NAT is available, the userland proxy should be disabled on startup to reduce the attack surface of the installation.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Run the Docker daemon as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;dockerd --userland-proxy=false&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Some systems with older Linux kernels may not be able to support hairpin NAT and therefore require the userland proxy service. Also, some networking setups can be impacted by the removal of the userland proxy.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>ps -ef | grep dockerd&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Ensure that the --userland-proxy parameter is set to false.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.10" name="Ensure base device size is not changed until needed" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>In certain circumstances, you might need containers bigger than 10G in size. In these cases, carefully choose the base device size.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The base device size can be increased at daemon restart. Increasing the base device size allows all future images and containers to be of the new base device size. A user can use this option to expand the base device size however shrinking is not permitted. This value affects the system-wide “base” empty filesystem that may already be initialized and inherited by pulled images.&amp;lt;br /&amp;gt;Though the file system does not allot the increased size if it is empty, it will use more space for the empty case depending upon the device size. This may cause a denial of service by ending up in file system being over-allocated or full.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not set --storage-opt dm.basesize until needed.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>ps -ef | grep dockerd&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Execute the above command and it should not show any --storage-opt dm.basesize parameters.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.13" name="Ensure operations on legacy registry (v1) are Disabled" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The latest Docker registry is v2. All operations on the legacy registry version (v1) should be restricted.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Docker registry v2 brings in many performance and security improvements over v1. It supports container image provenance and other security features such as image signing and verification. Hence, operations on Docker legacy registry should be restricted.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Start the docker daemon as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;dockerd --disable-legacy-registry&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Legacy registry operations would be restricted.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>ps -ef | grep dockerd&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should list --disable-legacy-registry as an option passed to the docker daemon.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.14" name="Ensure live restore is Enabled" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The --live-restore enables full support of daemon-less containers in docker. It ensures that docker does not stop containers on shutdown or restore and properly reconnects to the container when restarted.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;One of the important security triads is availability. Setting --live-restore flag in the docker daemon ensures that container execution is not interrupted when the docker daemon is not available. This also means that it is now easier to update and patch the docker daemon without execution downtime.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Run the docker in daemon mode and pass --live-restore as an argument.&amp;lt;br /&amp;gt;For Example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;dockerd --live-restore&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run docker info and ensure that the Live Restore Enabled property is set to true.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker info --format '{{ .LiveRestoreEnabled }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Alternatively run the below command and ensure that --live-restore is used.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;ps -ef | grep dockerd</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.17" name="Ensure experimental features are avoided in production" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Avoid experimental features in production.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Experimental is now a runtime docker daemon flag instead of a separate build. Passing --experimental as a runtime flag to the docker daemon, activates experimental features. Experimental is now considered a stable release, but with a couple of features which might not have tested and guaranteed API stability.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not pass --experimental as a runtime parameter to the docker daemon.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run the below command and ensure that the Experimental property is set to false in the Server section.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker version --format '{{ .Server.Experimental }}'</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.2" name="Ensure the logging level is set to 'info'" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Set Docker daemon log level to info.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Setting up an appropriate log level, configures the Docker daemon to log events that you would want to review later. A base log level of info and above would capture all logs except debug logs. Until and unless required, you should not run Docker daemon at debug log level.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Run the Docker daemon as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;dockerd --log-level="info"&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>ps -ef | grep docker&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Ensure that either the --log-level parameter is not present or if present, then it is set to info.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D2.12" name="Ensure centralized and remote logging is configured" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Docker now supports various log drivers. A preferable way to store logs is the one that supports centralized and remote logging.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Centralized and remote logging ensures that all important log records are safe despite catastrophic events. Docker now supports various such logging drivers. Use the one that suits your environment the best.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Step 1: Setup the desired log driver by following its documentation.&amp;lt;br /&amp;gt;Step 2: Start the docker daemon with that logging driver.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;dockerd --log-driver=syslog --log-opt syslog-address=tcp://192.xxx.xxx.xxx&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run docker info and ensure that the Logging Driverproperty set as appropriate.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker info --format '{{ .LoggingDriver }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Alternatively, the below command would give you the --log-driver setting, if configured. Ensure that it is set as appropriate.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;ps -ef | grep dockerd</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="DOCKER AUTHENTICATION AND AUTHORIZATION" name="Docker Authentication and Authorization" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D2.3" mitigation="17"/>
                                <control ref="D2.4" mitigation="17"/>
                                <control ref="D2.11" mitigation="17"/>
                                <control ref="D2.18" mitigation="17"/>
                                <control ref="D2.8" mitigation="17"/>
                                <control ref="D2.16" mitigation="17"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-276">
                                    <controls>
                                        <control ref="D2.3" mitigation="17"/>
                                        <control ref="D2.4" mitigation="17"/>
                                        <control ref="D2.11" mitigation="17"/>
                                        <control ref="D2.18" mitigation="17"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-250">
                                    <controls>
                                        <control ref="D2.3" mitigation="17"/>
                                        <control ref="D2.8" mitigation="17"/>
                                        <control ref="D2.11" mitigation="17"/>
                                        <control ref="D2.16" mitigation="17"/>
                                        <control ref="D2.18" mitigation="17"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-732">
                                    <controls>
                                        <control ref="D2.3" mitigation="17"/>
                                        <control ref="D2.11" mitigation="17"/>
                                        <control ref="D2.18" mitigation="17"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="DOCKER GENERAL" name="Docker General" desc="" library="">
                    <threats>
                        <threat ref="OWASP A6:2017" name="Exploitation of Security Misconfiguration" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attackers will often attempt to exploit&amp;lt;br /&amp;gt;unpatched flaws or access default&amp;lt;br /&amp;gt;accounts, unused pages, unprotected&amp;lt;br /&amp;gt;files and directories, etc to gain&amp;lt;br /&amp;gt;unauthorized access or knowledge of&amp;lt;br /&amp;gt;the system.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D2.3" mitigation="8"/>
                                <control ref="D2.4" mitigation="8"/>
                                <control ref="D2.5" mitigation="8"/>
                                <control ref="D2.6" mitigation="8"/>
                                <control ref="D2.7" mitigation="8"/>
                                <control ref="D2.8" mitigation="8"/>
                                <control ref="D2.9" mitigation="8"/>
                                <control ref="D2.15" mitigation="8"/>
                                <control ref="D2.10" mitigation="8"/>
                                <control ref="D2.13" mitigation="8"/>
                                <control ref="D2.14" mitigation="8"/>
                                <control ref="D2.17" mitigation="8"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-2">
                                    <controls>
                                        <control ref="D2.3" mitigation="8"/>
                                        <control ref="D2.4" mitigation="8"/>
                                        <control ref="D2.5" mitigation="8"/>
                                        <control ref="D2.6" mitigation="8"/>
                                        <control ref="D2.7" mitigation="8"/>
                                        <control ref="D2.8" mitigation="8"/>
                                        <control ref="D2.9" mitigation="8"/>
                                        <control ref="D2.15" mitigation="8"/>
                                        <control ref="D2.10" mitigation="8"/>
                                        <control ref="D2.13" mitigation="8"/>
                                        <control ref="D2.14" mitigation="8"/>
                                        <control ref="D2.17" mitigation="8"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-125" name="Flooding" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D2.7" mitigation="33"/>
                                <control ref="D2.9" mitigation="33"/>
                                <control ref="D2.10" mitigation="33"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-400">
                                    <controls>
                                        <control ref="D2.7" mitigation="33"/>
                                        <control ref="D2.9" mitigation="33"/>
                                        <control ref="D2.10" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="DOCKER LOGGING AND MONITORING" name="Docker Logging and Monitoring" desc="" library="">
                    <threats>
                        <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&amp;lt;br /&amp;gt;Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D2.2" mitigation="50"/>
                                <control ref="D2.12" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-778">
                                    <controls>
                                        <control ref="D2.2" mitigation="50"/>
                                        <control ref="D2.12" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="DOCKER NETWORKING" name="Docker Networking" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-157" name="Sniffing Attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D2.4" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="SSL-WEAK-PROTOCOL">
                                    <controls>
                                        <control ref="D2.4" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-94" name="Man in the Middle Attack" state="Expose" source="MANUAL" owner="" library="">
                            <desc>This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed on to the other component as if it was never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identify between two components.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D2.4" mitigation="50"/>
                                <control ref="D2.6" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-287">
                                    <controls>
                                        <control ref="D2.4" mitigation="50"/>
                                        <control ref="D2.6" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="DOCKER-WIDE-ATTACK-SURFACE" name="Exploitation of a wide attack surface" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Every point of network interaction is a potential part of the network attack surface having exploitable vulnerabilities.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D2.6" mitigation="50"/>
                                <control ref="D2.15" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="UNRESTRICTED-NETWORK">
                                    <controls>
                                        <control ref="D2.6" mitigation="50"/>
                                        <control ref="D2.15" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="DOCKER-DAEMON-CONFIGURATION-FILES" name="Docker Deamon Configuration Files" desc="" tags="" position="4" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-276" name="Incorrect Default Permissions" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.</desc>
                </weakness>
                <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.
New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges. Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.  </desc>
                </weakness>
                <weakness ref="CWE-708" name="Incorrect Ownership Assignment" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software assigns an owner to a resource, but the owner is outside of the intended control sphere.</desc>
                </weakness>
                <weakness ref="CWE-732" name="Incorrect Permission Assignment for Critical Resource" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.
When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.  </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="D3.1" name="Ensure that docker.service file ownership is set to root:root" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the docker.service file ownership and group-ownership are correctly set to root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;docker.service file contains sensitive parameters that may alter the behavior of Docker daemon. Hence, it should be owned and group-owned by root to maintain the integrity of the file.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Step 1: Find out the file location: systemctl show -p FragmentPath docker.service&amp;lt;br /&amp;gt;Step 2: If the file does not exist, this recommendation is not applicable. If the file exists, execute the below command with the correct file path to set the ownership and group ownership for the file to root.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chown root:root /usr/lib/systemd/system/docker.service&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Step 1: Find out the file location:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;systemctl show -p FragmentPath docker.service&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: If the file does not exist, this recommendation is not applicable. If the file exists, execute the below command with the correct file path to verify that the file is owned and group-owned by root.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %U:%G /usr/lib/systemd/system/docker.service | grep -v root:root&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should not return anything.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.2" name="Ensure that docker.service file permissions are set to 644 or more restrictive" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the docker.service file permissions are correctly set to 644 or more restrictive.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;docker.service file contains sensitive parameters that may alter the behavior of Docker daemon. Hence, it should not be writable by any other user other than root to maintain the integrity of the file.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Step 1: Find out the file location:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;systemctl show -p FragmentPath docker.service&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: If the file does not exist, this recommendation is not applicable. If the file exists, execute the below command with the correct file path to set the file permissions to 644.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chmod 644 /usr/lib/systemd/system/docker.service&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Step 1: Find out the file location:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;systemctl show -p FragmentPath docker.service&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: If the file does not exist, this recommendation is not applicable. If the file exists, execute the below command with the correct file path to verify that the file permissions are set to 644 or more restrictive.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %a /usr/lib/systemd/system/docker.service</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.3" name="Ensure that docker.socket file ownership is set to root:root" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the docker.socket file ownership and group ownership is correctly set to root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;docker.socket file contains sensitive parameters that may alter the behavior of Docker remote API. Hence, it should be owned and group-owned by root to maintain the integrity of the file.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Step 1: Find out the file location:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;systemctl show -p FragmentPath docker.socket&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: If the file does not exist, this recommendation is not applicable. If the file exists, execute the below command with the correct file path to set the ownership and group ownership for the file to root.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chown root:root /usr/lib/systemd/system/docker.socket&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Step 1: Find out the file location:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;systemctl show -p FragmentPath docker.socket&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: If the file does not exist, this recommendation is not applicable. If the file exists, execute the below command with the correct file path to verify that the file is owned and group-owned by root.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %U:%G /usr/lib/systemd/system/docker.socket | grep -v root:root&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should not return anything.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.4" name="Ensure that docker.socket file permissions are set to 644 or more restrictive" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the docker.socket file permissions are correctly set to 644 or more restrictive.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;docker.socket file contains sensitive parameters that may alter the behavior of Docker remote API. Hence, it should be writable only by root to maintain the integrity of the file.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Step 1: Find out the file location:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;systemctl show -p FragmentPath docker.socket&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: If the file does not exist, this recommendation is not applicable. If the file exists, execute the below command with the correct file path to set the file permissions to 644.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chmod 644 /usr/lib/systemd/system/docker.socket&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Step 1: Find out the file location:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;systemctl show -p FragmentPath docker.socket&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: If the file does not exist, this recommendation is not applicable. If the file exists, execute the below command with the correct file path to verify that the file permissions are set to 644 or more restrictive.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %a /usr/lib/systemd/system/docker.socket</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.5" name="Ensure that /etc/docker directory ownership is set to root:root" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the /etc/docker directory ownership and group-ownership is correctly set to root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;/etc/docker directory contains certificates and keys in addition to various sensitive files. Hence, it should be owned and group-owned by root to maintain the integrity of the directory.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chown root:root /etc/docker&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would set the ownership and group-ownership for the directory to root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the directory is owned and group-owned by root:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %U:%G /etc/docker | grep -v root:root&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should not return anything.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.6" name="Ensure that /etc/docker directory permissions are set to 755 or more restrictive" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the /etc/docker directory permissions are correctly set to 755 or more restrictive.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;/etc/docker directory contains certificates and keys in addition to various sensitive files. Hence, it should only be writable by root to maintain the integrity of the directory.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chmod 755 /etc/docker&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would set the permissions for the directory to 755.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the directory has permissions of 755 or more restrictive:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %a /etc/docker</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.7" name="Ensure that registry certificate file ownership is set to root:root" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that all the registry certificate files (usually found under /etc/docker/certs.d/&amp;lt;registry-name&amp;gt; directory) are owned and group-owned by root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;/etc/docker/certs.d/&amp;lt;registry-name&amp;gt; directory contains Docker registry certificates. These certificate files must be owned and group-owned by root to maintain the integrity of the certificates.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chown root:root /etc/docker/certs.d/&amp;lt;registry-name&amp;gt;/*&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would set the ownership and group-ownership for the registry certificate files to root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the registry certificate files are owned and group-owned by root:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %U:%G /etc/docker/certs.d/* | grep -v root:root&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should not return anything.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.8" name="Ensure that registry certificate file permissions are set to 444 or more restrictive" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that all the registry certificate files (usually found under /etc/docker/certs.d/&amp;lt;registry-name&amp;gt; directory) have permissions of 444 or more restrictive.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;/etc/docker/certs.d/&amp;lt;registry-name&amp;gt; directory contains Docker registry certificates. These certificate files must have permissions of 444 to maintain the integrity of the certificates.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chmod 444 /etc/docker/certs.d/&amp;lt;registry-name&amp;gt;/*&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would set the permissions for registry certificate files to 444.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the registry certificate files have permissions of 444 or more restrictive:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %a /etc/docker/certs.d/&amp;lt;registry-name&amp;gt;/*</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.9" name="Ensure that TLS CA certificate file ownership is set to root:root" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the TLS CA certificate file (the file that is passed alongwith --tlscacert parameter) is owned and group-owned by root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The TLS CA certificate file should be protected from any tampering. It is used to authenticate Docker server based on given CA certificate. Hence, it must be owned and group-owned by root to maintain the integrity of the CA certificate.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chown root:root &amp;lt;path to TLS CA certificate file&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would set the ownership and group-ownership for the TLS CA certificate file to root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the TLS CA certificate file is owned and group-owned by root:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %U:%G &amp;lt;path to TLS CA certificate file&amp;gt; | grep -v root:root&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should not return anything.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.10" name="Ensure that TLS CA certificate file permissions are set to 444 or more restrictive" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the TLS CA certificate file (the file that is passed alongwith --tlscacert parameter) has permissions of 444 or more restrictive.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The TLS CA certificate file should be protected from any tampering. It is used to authenticate Docker server based on given CA certificate. Hence, it must have permissions of 444 to maintain the integrity of the CA certificate.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chmod 444 &amp;lt;path to TLS CA certificate file&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would set the file permissions of the TLS CA file to 444.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the TLS CA certificate file has permissions of 444 or more restrictive:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %a &amp;lt;path to TLS CA certificate file&amp;gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.11" name="Ensure that Docker server certificate file ownership is set to root:root" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the Docker server certificate file (the file that is passed alongwith --tlscert parameter) is owned and group-owned by root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The Docker server certificate file should be protected from any tampering. It is used to authenticate Docker server based on the given server certificate. Hence, it must be owned and group-owned by root to maintain the integrity of the certificate.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chown root:root &amp;lt;path to Docker server certificate file&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would set the ownership and group-ownership for the Docker server certificate file to root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the Docker server certificate file is owned and group-owned by root:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %U:%G &amp;lt;path to Docker server certificate file&amp;gt; | grep -v root:root&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should not return anything.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.12" name="Ensure that Docker server certificate file permissions are set to 444 or more restrictive" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the Docker server certificate file (the file that is passed alongwith --tlscert parameter) has permissions of 444 or more restrictive.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The Docker server certificate file should be protected from any tampering. It is used to authenticate Docker server based on the given server certificate. Hence, it must have permissions of 444 to maintain the integrity of the certificate.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chmod 444 &amp;lt;path to Docker server certificate file&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would set the file permissions of the Docker server file to 444.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the Docker server certificate file has permissions of 444 or more restrictive:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %a &amp;lt;path to Docker server certificate file&amp;gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.13" name="Ensure that Docker server certificate key file ownership is set to root:root" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the Docker server certificate key file (the file that is passed alongwith --tlskey parameter) is owned and group-owned by root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The Docker server certificate key file should be protected from any tampering or unneeded reads. It holds the private key for the Docker server certificate. Hence, it must be owned and group-owned by root to maintain the integrity of the Docker server certificate.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chown root:root &amp;lt;path to Docker server certificate key file&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would set the ownership and group-ownership for the Docker server certificate key file to root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the Docker server certificate key file is owned and group-owned by root:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %U:%G &amp;lt;path to Docker server certificate key file&amp;gt; | grep -v root:root&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should not return anything.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.14" name="Ensure that Docker server certificate key file permissions are set to 400" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the Docker server certificate key file (the file that is passed alongwith --tlskey parameter) has permissions of 400.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The Docker server certificate key file should be protected from any tampering or unneeded reads. It holds the private key for the Docker server certificate. Hence, it must have permissions of 400 to maintain the integrity of the Docker server certificate.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chmod 400 &amp;lt;path to Docker server certificate key file&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would set the Docker server certificate key file permissions to 400.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the Docker server certificate key file has permissions of 400:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %a &amp;lt;path to Docker server certificate key file&amp;gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.15" name="Ensure that Docker socket file ownership is set to root:docker" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the Docker socket file is owned by root and group-owned by docker.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Docker daemon runs as root. The default Unix socket hence must be owned by root. If any other user or process owns this socket, then it might be possible for that non-privileged user or process to interact with Docker daemon. Also, such a non-privileged user or process might interact with containers. This is neither secure nor desired behavior.&amp;lt;br /&amp;gt;Additionally, the Docker installer creates a Unix group called docker. You can add users to this group, and then those users would be able to read and write to default Docker Unix socket. The membership to the docker group is tightly controlled by the system administrator. If any other group owns this socket, then it might be possible for members of that group to interact with Docker daemon. Also, such a group might not be as tightly controlled as the docker group. This is neither secure nor desired behavior.&amp;lt;br /&amp;gt;Hence, the default Docker Unix socket file must be owned by root and group-owned by docker to maintain the integrity of the socket file.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chown root:docker /var/run/docker.sock&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would set the ownership to root and group-ownership to docker for default Docker socket file.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the Docker socket file is owned by root and group-owned by docker:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %U:%G /var/run/docker.sock | grep -v root:docker&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should not return anything.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.16" name="Ensure that Docker socket file permissions are set to 660 or more restrictive" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the Docker socket file has permissions of 660 or more restrictive.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Only root and members of docker group should be allowed to read and write to default Docker Unix socket. Hence, the Docket socket file must have permissions of 660 or more restrictive.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;chmod 660 /var/run/docker.sock&amp;lt;br /&amp;gt;This would set the file permissions of the Docker socket file to 660.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the Docker socket file has permissions of 660 or more restrictive:&amp;lt;br /&amp;gt;stat -c %a /var/run/docker.sock</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.17" name="Ensure that daemon.json file ownership is set to root:root" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the daemon.json file ownership and group-ownership is correctly set to root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;daemon.json file contains sensitive parameters that may alter the behavior of docker daemon. Hence, it should be owned and group-owned by root to maintain the integrity of the file.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chown root:root /etc/docker/daemon.json&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would set the ownership and group-ownership for the file to root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the file is owned and group-owned by root:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %U:%G /etc/docker/daemon.json | grep -v root:root&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should not return anything.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.18" name="Ensure that daemon.json file permissions are set to 644 or more restrictive" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the daemon.json file permissions are correctly set to 644 or more restrictive.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;daemon.json file contains sensitive parameters that may alter the behavior of docker daemon. Hence, it should be writable only by root to maintain the integrity of the file.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chmod 644 /etc/docker/daemon.json&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would set the file permissions for this file to 644.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the file permissions are correctly set to 644 or more restrictive:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %a /etc/docker/daemon.json</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.19" name="Ensure that /etc/default/docker file ownership is set to root:root" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the /etc/default/docker file ownership and group-ownership is correctly set to root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;/etc/default/docker file contains sensitive parameters that may alter the behavior of docker daemon. Hence, it should be owned and group-owned by root to maintain the integrity of the file.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chown root:root /etc/default/docker&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would set the ownership and group-ownership for the file to root.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the file is owned and group-owned by root:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %U:%G /etc/default/docker | grep -v root:root&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should not return anything.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D3.20" name="Ensure that /etc/default/docker file permissions are set to 644 or more restrictive" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify that the /etc/default/docker file permissions are correctly set to 644 or more restrictive.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;/etc/default/docker file contains sensitive parameters that may alter the behavior of docker daemon. Hence, it should be writable only by root to maintain the integrity of the file.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;chmod 644 /etc/default/docker&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would set the file permissions for this file to 644.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Execute the below command to verify that the file permissions are correctly set to 644 or more restrictive:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;stat -c %a /etc/default/docker</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="DOCKER AUTHENTICATION AND AUTHORIZATION" name="Docker Authentication and Authorization" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D3.1" mitigation="5"/>
                                <control ref="D3.2" mitigation="5"/>
                                <control ref="D3.3" mitigation="5"/>
                                <control ref="D3.4" mitigation="5"/>
                                <control ref="D3.5" mitigation="5"/>
                                <control ref="D3.6" mitigation="5"/>
                                <control ref="D3.7" mitigation="5"/>
                                <control ref="D3.8" mitigation="5"/>
                                <control ref="D3.9" mitigation="5"/>
                                <control ref="D3.10" mitigation="5"/>
                                <control ref="D3.11" mitigation="5"/>
                                <control ref="D3.12" mitigation="5"/>
                                <control ref="D3.13" mitigation="5"/>
                                <control ref="D3.14" mitigation="5"/>
                                <control ref="D3.15" mitigation="5"/>
                                <control ref="D3.16" mitigation="5"/>
                                <control ref="D3.17" mitigation="5"/>
                                <control ref="D3.18" mitigation="5"/>
                                <control ref="D3.19" mitigation="5"/>
                                <control ref="D3.20" mitigation="5"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-276">
                                    <controls>
                                        <control ref="D3.1" mitigation="5"/>
                                        <control ref="D3.2" mitigation="5"/>
                                        <control ref="D3.3" mitigation="5"/>
                                        <control ref="D3.4" mitigation="5"/>
                                        <control ref="D3.5" mitigation="5"/>
                                        <control ref="D3.6" mitigation="5"/>
                                        <control ref="D3.7" mitigation="5"/>
                                        <control ref="D3.8" mitigation="5"/>
                                        <control ref="D3.9" mitigation="5"/>
                                        <control ref="D3.10" mitigation="5"/>
                                        <control ref="D3.11" mitigation="5"/>
                                        <control ref="D3.12" mitigation="5"/>
                                        <control ref="D3.13" mitigation="5"/>
                                        <control ref="D3.14" mitigation="5"/>
                                        <control ref="D3.15" mitigation="5"/>
                                        <control ref="D3.16" mitigation="5"/>
                                        <control ref="D3.17" mitigation="5"/>
                                        <control ref="D3.18" mitigation="5"/>
                                        <control ref="D3.19" mitigation="5"/>
                                        <control ref="D3.20" mitigation="5"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-250">
                                    <controls>
                                        <control ref="D3.1" mitigation="5"/>
                                        <control ref="D3.2" mitigation="5"/>
                                        <control ref="D3.3" mitigation="5"/>
                                        <control ref="D3.4" mitigation="5"/>
                                        <control ref="D3.5" mitigation="5"/>
                                        <control ref="D3.6" mitigation="5"/>
                                        <control ref="D3.7" mitigation="5"/>
                                        <control ref="D3.8" mitigation="5"/>
                                        <control ref="D3.9" mitigation="5"/>
                                        <control ref="D3.10" mitigation="5"/>
                                        <control ref="D3.11" mitigation="5"/>
                                        <control ref="D3.12" mitigation="5"/>
                                        <control ref="D3.13" mitigation="5"/>
                                        <control ref="D3.14" mitigation="5"/>
                                        <control ref="D3.15" mitigation="5"/>
                                        <control ref="D3.16" mitigation="5"/>
                                        <control ref="D3.17" mitigation="5"/>
                                        <control ref="D3.18" mitigation="5"/>
                                        <control ref="D3.19" mitigation="5"/>
                                        <control ref="D3.20" mitigation="5"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-708">
                                    <controls>
                                        <control ref="D3.1" mitigation="5"/>
                                        <control ref="D3.3" mitigation="5"/>
                                        <control ref="D3.5" mitigation="5"/>
                                        <control ref="D3.7" mitigation="5"/>
                                        <control ref="D3.9" mitigation="5"/>
                                        <control ref="D3.11" mitigation="5"/>
                                        <control ref="D3.13" mitigation="5"/>
                                        <control ref="D3.15" mitigation="5"/>
                                        <control ref="D3.17" mitigation="5"/>
                                        <control ref="D3.19" mitigation="5"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-732">
                                    <controls>
                                        <control ref="D3.1" mitigation="5"/>
                                        <control ref="D3.2" mitigation="5"/>
                                        <control ref="D3.3" mitigation="5"/>
                                        <control ref="D3.4" mitigation="5"/>
                                        <control ref="D3.5" mitigation="5"/>
                                        <control ref="D3.6" mitigation="5"/>
                                        <control ref="D3.7" mitigation="5"/>
                                        <control ref="D3.8" mitigation="5"/>
                                        <control ref="D3.9" mitigation="5"/>
                                        <control ref="D3.10" mitigation="5"/>
                                        <control ref="D3.11" mitigation="5"/>
                                        <control ref="D3.12" mitigation="5"/>
                                        <control ref="D3.13" mitigation="5"/>
                                        <control ref="D3.14" mitigation="5"/>
                                        <control ref="D3.15" mitigation="5"/>
                                        <control ref="D3.16" mitigation="5"/>
                                        <control ref="D3.17" mitigation="5"/>
                                        <control ref="D3.18" mitigation="5"/>
                                        <control ref="D3.19" mitigation="5"/>
                                        <control ref="D3.20" mitigation="5"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="DOCKER-IMAGES-BUILD-FILE" name="Docker Images and Build File" desc="" tags="" position="5" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-276" name="Incorrect Default Permissions" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.</desc>
                </weakness>
                <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.
New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges. Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.  </desc>
                </weakness>
                <weakness ref="CWE-732" name="Incorrect Permission Assignment for Critical Resource" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.
When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.  </desc>
                </weakness>
                <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>This is a generic weakness that includes several different situations, they are all related to unexpected environmental conditions and they could be related to:   
• Misconfiguration. 
• Uncleared buffers, shared memory, files, etc. 
• Problems between the interaction of two different entities that cause unexpected behaviour.   </desc>
                </weakness>
                <weakness ref="UNPATCHED-SERVER" name="Recommended security patches are not applied" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When patches are not applied in a timely manner then the server or system could be vulnerable to known security issues. These issues could be used by an attacker to gain access to the system. </desc>
                </weakness>
                <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>API keys, passwords or secrets included in the source code or in the configuration files can be leaked to users with access to the code. This access can be incidentally granted by publishing the source code on a package-form or an online, public repository.
The unauthorized access to any of those secrets could lead to a compromise of sensitive data or a system.  </desc>
                </weakness>
                <weakness ref="CWE-327" name="The component uses a weak TLS implementeation" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The use of an unverified TLS library could lead to the use of weak or faulty implementations of the TLS protocol and cipher suites. </desc>
                </weakness>
                <weakness ref="CWE-287" name="Improper Server's Identity Validation" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not validate, or incorrectly validates, the server's identity. 
If the server's identity is not validated, an attacker could spoof a trusted entity by using a man-in-the-middle (MITM) attack. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host. 
 
One way to perform server's authentication is by using X509 certificates over TLS. 
 </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="D4.1" name="Ensure a user for the container has been created" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Create a non-root user for the container in the Dockerfile for the container image.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;It is a good practice to run the container as a non-root user, if possible. Though user namespace mapping is now available, if a user is already defined in the container image, the container is run as that user by default and specific user namespace remapping is not required.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Ensure that the Dockerfile for the container image contains below instruction:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;USER &amp;lt;username or ID&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;where username or ID refers to the user that could be found in the container base image. If there is no specific user created in the container base image, then add a useradd command to add the specific user before USER instruction.&amp;lt;br /&amp;gt;For example, add the below lines in the Dockerfile to create a user in the container:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;RUN useradd -d /home/username -m -s /bin/bash username USER username&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Note: If there are users in the image that the containers do not need, consider deleting them. After deleting those users, commit the image and then generate new instances of containers for use.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: User={{ .Config.User }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should return container username or user ID. If it is blank it means, the container is running as root.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D4.8" name="Ensure setuid and setgid permissions are removed in the images" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Removing setuid and setgid permissions in the images would prevent privilege escalation attacks in the containers.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;setuid and setgid permissions could be used for elevating privileges. While these permissions are at times legitimately needed, these could potentially be used in privilege escalation attacks. Thus, you should consider dropping these permissions for the packages which do not need them within the images.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Allow setuid and setgid permissions only on executables which need them. You could remove these permissions during build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;RUN find / -perm +6000 -type f -exec chmod a-s {} \; || true&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Above command breaks all the executables that depend on setuid or setgid permissions including the legitimate ones. Hence, be careful to modify the command to suit your requirements so that it does not drop the permissions of legitimate programs. This requires a careful examination of each executable and fine tuning the permissions.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run the below command on the image to list the executables having setuid and setgid permissions:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run &amp;lt;Image_ID&amp;gt; find / -perm +6000 -type f -exec ls -ld {} \; 2&amp;gt; /dev/null&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Carefully, review the list and ensure that it is legitimate.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D4.3" name="Ensure unnecessary packages are not installed in the container" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Containers tend to be minimal and slim down versions of the Operating System. Do not install anything that does not justify the purpose of container.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Bloating containers with unnecessary software could possibly increase the attack surface of the container. This also voids the concept of minimal and slim down versions of container images. Hence, do not install anything else apart from what is truly needed for the purpose of the container.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;At the outset, do not install anything on the container that does not justify the purpose. If the image had some packages that your container does not use, uninstall them.&amp;lt;br /&amp;gt;Consider using a minimal base image rather than the standard Redhat/Centos/Debian images if you can. Some of the options include BusyBox and Alpine.&amp;lt;br /&amp;gt;Not only does this trim your image size from &amp;gt;150Mb to ~20 Mb, there are also fewer tools and paths to escalate privileges. You can even remove the package installer as a final hardening measure for leaf/production containers.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Step 1: List all the running instances of containers by executing below command:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker ps --quiet&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: For each container instance, execute the below or equivalent command:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker exec $INSTANCE_ID rpm -qa&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command would list the packages installed on the container. Review the list and ensure that it is legitimate.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D4.5" name="Ensure Content trust for Docker is Enabled" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Content trust is disabled by default. You should enable it.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Content trust provides the ability to use digital signatures for data sent to and received from remote Docker registries. These signatures allow client-side verification of the integrity and publisher of specific image tags. This ensures provenance of container images.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;To enable content trust in a bash shell, enter the following command:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;export DOCKER_CONTENT_TRUST=1&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Alternatively, set this environment variable in your profile file so that content trust in enabled on every login.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;In an environment where DOCKER_CONTENT_TRUST is set, you are required to follow trust procedures while working with images &amp;lt;li&amp;gt;build, create, pull, pushand run. You can use the --disable-content-trust flag to run individual operations on tagged images without content trust on an as-needed basis but that defeats the purpose of enabling content trust and hence, should be avoided wherever p&amp;lt;/li&amp;gt;ssible.&amp;lt;br /&amp;gt;Note: Content trust is currently only available for users of the public Docker Hub. It is currently not available for the Docker Trusted Registry or for private registries.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>echo $DOCKER_CONTENT_TRUST&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This should return 1.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D4.6" name="Ensure HEALTHCHECK instructions have been added to the container image" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;One of the important security triads is availability. Adding HEALTHCHECK instruction to your container image ensures that the docker engine periodically checks the running container instances against that instruction to ensure that the instances are still working.&amp;lt;br /&amp;gt;Based on the reported health status, the docker engine could then exit non-working containers and instantiate new ones.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Follow Docker documentation and rebuild your container image with HEALTHCHECK instruction.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run the below command and ensure that the docker image has appropriate HEALTHCHECK instruction set up.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker inspect --format='{{ .Config.Healthcheck }}' &amp;lt;IMAGE&amp;gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D4.7" name="Ensure update instructions are not used alone in the Dockerfile" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Do not use update instructions such as apt-get update alone or in a single line in the Dockerfile.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Adding the update instructions in a single line on the Dockerfile will cache the update layer. Thus, when you build any image later using the same instruction, previously cached update layer will be used. This could potentially deny any fresh updates to go in the later builds.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Use update instructions along with install instructions (or any other) and version pinning for packages while installing them. This would bust the cache and force to extract the required versions.&amp;lt;br /&amp;gt;Alternatively, you could use --no-cache flag during docker build process to avoid using cached layers.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Step 1: Run the below command to get the list of images:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker images&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: Run the below command for each image in the list above, and look for any update instructions being in a single line:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker history &amp;lt;Image_ID&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Alternatively, if you have access to Dockerfile for the image, verify that there are no update instructions as described above.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D4.9" name="Ensure COPY is used instead of ADD in Dockerfile" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Use COPY instruction instead of ADD instruction in the Dockerfile.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;COPY instruction just copies the files from the local host machine to the container file system. ADD instruction potentially could retrieve files from remote URLs and perform operations such as unpacking. Thus, ADD instruction introduces risks such as adding malicious files from URLs without scanning and unpacking procedure vulnerabilities.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Use COPY instructions in Dockerfiles.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;You would need to take care of the functionalities provided by ADD instructions such as fetching files from remote URLs.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Step 1: Run the below command to get the list of images:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker images&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: Run the below command for each image in the list above and look for any ADD instructions:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker history &amp;lt;Image_ID&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Alternatively, if you have access to Dockerfile for the image, verify that there are no ADD instructions.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D4.11" name="Ensure verified packages are only Installed" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Verify authenticity of the packages before installing them in the image.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Verifying authenticity of the packages is essential for building a secure container image. Tampered packages could potentially be malicious or have some known vulnerabilities that could be exploited.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Use GPG keys for downloading and verifying packages or any other secure package distribution mechanism of your choice.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Step 1: Run the below command to get the list of images:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker images&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: Run the below command for each image in the list above, and look for how the authenticity of the packages is determined. This could be via the use of GPG keys or other secure package distribution mechanisms:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker history &amp;lt;Image_ID&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Alternatively, if you have access to Dockerfile for the image, verify that the authenticity of the packages is checked.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D4.4" name="Ensure images are scanned and rebuilt to include security patches" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Images should be scanned "frequently" for any vulnerabilities. Rebuild the images to include patches and then instantiate new containers from it.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Vulnerabilities are loopholes/bugs that can be exploited and security patches are updates to resolve these vulnerabilities. We can use image vulnerability scanning tools to find any kind of vulnerabilities within the images and then check for available patches to mitigate these vulnerabilities. Patches update the system to the most recent code base. Being on the current code base is important because that's where vendors focus on fixing problems. Evaluate the security patches before applying and follow the patching best practices.&amp;lt;br /&amp;gt;Also, it would be better if, image vulnerability scanning tools could perform binary level analysis or hash based verification instead of just version string matching.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Follow the below steps to rebuild the images with security patches:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 1: Pull all the base images (i.e., given your set of Dockerfiles, extract all images declared in FROM instructions, and re-pull them to check for an updated/patched versions). Patch the packages within the images too.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker pull&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: Force a rebuild of each image:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker build --no-cache&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 3: Restart all containers with the updated images.&amp;lt;br /&amp;gt;You could also use ONBUILD directive in the Dockerfile to trigger particular update instructions for images that you know are used as base images frequently.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Step 1: List all the running instances of containers by executing below command:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker ps --quiet&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: For each container instance, execute the below or equivalent command to find the list of packages installed within the container. Ensure that the security updates for various affected packages are installed.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker exec $INSTANCE_ID rpm -qa&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Alternatively, you could run image vulnerability scanning tools which can scan all the images in your ecosystem and then apply patches for the detected vulnerabilities based on your patch management procedures.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D4.10" name="Ensure secrets are not stored in Dockerfiles" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Do not store any secrets in Dockerfiles.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Dockerfiles could be backtracked easily by using native Docker commands such as docker history and various tools and utilities. Also, as a general practice, image publishers provide Dockerfiles to build the credibility for their images. Hence, the secrets within these Dockerfiles could be easily exposed and potentially be exploited.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not store any kind of secrets within Dockerfiles.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;You would need to identify a way to handle secrets for your Docker images.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Step 1: Run the below command to get the list of images:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker images&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: Run the below command for each image in the list above, and look for any secrets:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker history &amp;lt;Image_ID&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Alternatively, if you have access to Dockerfile for the image, verify that there are no secrets as described above.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="DOCKER AUTHENTICATION AND AUTHORIZATION" name="Docker Authentication and Authorization" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D4.1" mitigation="50"/>
                                <control ref="D4.8" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-276">
                                    <controls>
                                        <control ref="D4.1" mitigation="50"/>
                                        <control ref="D4.8" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-250">
                                    <controls>
                                        <control ref="D4.1" mitigation="50"/>
                                        <control ref="D4.8" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-732">
                                    <controls>
                                        <control ref="D4.1" mitigation="50"/>
                                        <control ref="D4.8" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="DOCKER GENERAL" name="Docker General" desc="" library="">
                    <threats>
                        <threat ref="OWASP A6:2017" name="Exploitation of Security Misconfiguration" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attackers will often attempt to exploit&amp;lt;br /&amp;gt;unpatched flaws or access default&amp;lt;br /&amp;gt;accounts, unused pages, unprotected&amp;lt;br /&amp;gt;files and directories, etc to gain&amp;lt;br /&amp;gt;unauthorized access or knowledge of&amp;lt;br /&amp;gt;the system.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D4.3" mitigation="12"/>
                                <control ref="D4.5" mitigation="12"/>
                                <control ref="D4.6" mitigation="12"/>
                                <control ref="D4.7" mitigation="12"/>
                                <control ref="D4.8" mitigation="12"/>
                                <control ref="D4.9" mitigation="12"/>
                                <control ref="D4.11" mitigation="12"/>
                                <control ref="D4.4" mitigation="12"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-2">
                                    <controls>
                                        <control ref="D4.3" mitigation="12"/>
                                        <control ref="D4.5" mitigation="12"/>
                                        <control ref="D4.6" mitigation="12"/>
                                        <control ref="D4.7" mitigation="12"/>
                                        <control ref="D4.8" mitigation="12"/>
                                        <control ref="D4.9" mitigation="12"/>
                                        <control ref="D4.11" mitigation="12"/>
                                    </controls>
                                </weakness>
                                <weakness ref="UNPATCHED-SERVER">
                                    <controls>
                                        <control ref="D4.4" mitigation="12"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-37" name="Retrieve Embedded Sensitive Data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D4.10" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-312">
                                    <controls>
                                        <control ref="D4.10" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="DOCKER NETWORKING" name="Docker Networking" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-157" name="Sniffing Attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D4.5" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-327">
                                    <controls>
                                        <control ref="D4.5" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-94" name="Man in the Middle Attack" state="Expose" source="MANUAL" owner="" library="">
                            <desc>This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed on to the other component as if it was never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identify between two components.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D4.5" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-287">
                                    <controls>
                                        <control ref="D4.5" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="THIRD-PARTY-PUBLIC-REPOSITORIES" name="Third Party/Public Repositories" desc="" tags="" position="6" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-937" name="Third party libraries contain security weaknesses" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>In theory, it ought to be easy to figure out if you are currently using any vulnerable components or libraries. Unfortunately, vulnerability reports for commercial or open source software do not always specify exactly which versions of a component are vulnerable in a standard, searchable way. Further, not all libraries use an understandable version numbering system. Worst of all, not all vulnerabilities are reported to a central clearinghouse that is easy to search, although sites like CVE and NVD are becoming easier to search.
Determining if you are vulnerable requires searching these databases, as well as keeping abreast of project mailing lists and announcements for anything that might be a vulnerability. If one of your components does have a vulnerability, you should carefully evaluate whether you are actually vulnerable by checking to see if your code uses the part of the component with the vulnerability and whether the flaw could result in an impact you care about. 
Component vulnerabilities can cause almost any type of risk imaginable, ranging from the trivial to sophisticated malware designed to target a specific organization. Components almost always run with the full privilege of the application, so flaws in any component can be serious.  </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="D4.2" name="Ensure that containers use trusted base images" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Ensure that the container image is written either from scratch or is based on another established and trusted base image downloaded over a secure channel.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Official repositories are Docker images curated and optimized by the Docker community or the vendor. There could be other potentially unsafe public repositories. Caution should be exercised when obtaining container images from Docker and third parties to how they will be used for your organization's data.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;• Configure and use Docker Content trust.&amp;lt;br /&amp;gt;• Inspect Docker image history to evaluate their risk to operate on your network.&amp;lt;br /&amp;gt;• Scan Docker images for vulnerabilities in their dependencies and configurations they will impose upon your network.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Step 1 &amp;lt;li&amp;gt;Inspect the Docker host for Docker images used by executing the below &amp;lt;/li&amp;gt;ommand:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker images&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;This would list all the container images that are currently available for use on the Docker host. Interview the system administrator and obtain a proof of evidence that the list of images was obtained from trusted source over a secure channel or from a trusted, secure private Docker registry.&amp;lt;br /&amp;gt;Step 2 &amp;lt;li&amp;gt;For each Docker image found on the Docker host, inspect the image for how it was built to verify if from trusted sources and hardened configuration:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker history &amp;lt;imageName&amp;gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="DOCKER GENERAL" name="Docker General" desc="" library="">
                    <threats>
                        <threat ref="OWASP A1:2017" name="Injection" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Almost any source of data can be an&amp;lt;br /&amp;gt;injection vector, environment&amp;lt;br /&amp;gt;variables, parameters, external and&amp;lt;br /&amp;gt;internal web services, and all types of&amp;lt;br /&amp;gt;users. Injection flaws occur when an&amp;lt;br /&amp;gt;attacker can send hostile data to an&amp;lt;br /&amp;gt;interpreter.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D4.2" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-937">
                                    <controls>
                                        <control ref="D4.2" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="DOCKER-CONTAINER-RUNTIME" name="Docker Container Runtime" desc="" tags="" position="7" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-276" name="Incorrect Default Permissions" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.</desc>
                </weakness>
                <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.
New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges. Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.  </desc>
                </weakness>
                <weakness ref="CWE-732" name="Incorrect Permission Assignment for Critical Resource" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.
When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.  </desc>
                </weakness>
                <weakness ref="CWE-485" name="The application does not define isolated boundaries (Insufficient Encapsulation)" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The application does not sufficiently encapsulate critical data or functionality. Encapsulation is about drawing strong boundaries. In a web browser that might mean ensuring that your mobile code cannot be abused by other mobile code. On the server it might mean differentiation between validated data and unvalidated data, between one user's data and another's, or between data users are allowed to see and data that they are not.
 </desc>
                </weakness>
                <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>This is a generic weakness that includes several different situations, they are all related to unexpected environmental conditions and they could be related to:   
• Misconfiguration. 
• Uncleared buffers, shared memory, files, etc. 
• Problems between the interaction of two different entities that cause unexpected behaviour.   </desc>
                </weakness>
                <weakness ref="UNPATCHED-SERVER" name="Recommended security patches are not applied" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When patches are not applied in a timely manner then the server or system could be vulnerable to known security issues. These issues could be used by an attacker to gain access to the system. </desc>
                </weakness>
                <weakness ref="CWE-400" name="Uncontrolled Resource Consumption ('Resource Exhaustion')" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not properly restrict the size or amount of resources that are requested or influenced by an actor, which can be used to consume more resources than intended.</desc>
                </weakness>
                <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>An information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information.</desc>
                </weakness>
                <weakness ref="UNRESTRICTED-NETWORK" name="Service is exposed to a wide attack surface" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product is exposed or reachable to an unnecessarily large group of potential attackers. An over-exposure of a component increases the chance of an attacker gaining access to the system through a vulnerability. </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="D5.3" name="Ensure Linux Kernel Capabilities are restricted within containers" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>By default, Docker starts containers with a restricted set of Linux Kernel Capabilities. It means that any process may be granted the required capabilities instead of root access. Using Linux Kernel Capabilities, the processes do not have to run as root for almost all the specific areas where root privileges are usually needed.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Docker supports the addition and removal of capabilities, allowing the use of a non-default profile. This may make Docker more secure through capability removal, or less secure through the addition of capabilities. It is thus recommended to remove all capabilities except those explicitly required for your container process.&amp;lt;br /&amp;gt;For example, capabilities such as below are usually not needed for container process:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;NET_ADMIN&amp;lt;br /&amp;gt;SYS_ADMIN&amp;lt;br /&amp;gt;SYS_MODULE&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Execute the below command to add needed capabilities:&amp;lt;br /&amp;gt;$&amp;gt; docker run --cap-add={"Capability 1","Capability 2"}&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --interactive --tty --cap-add={"NET_ADMIN","SYS_ADMIN"} centos:latest /bin/bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Execute the below command to drop unneeded capabilities:&amp;lt;br /&amp;gt;$&amp;gt; docker run --cap-drop={"Capability 1","Capability 2"}&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --interactive --tty --cap-drop={"SETUID","SETGID"} centos:latest /bin/bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Alternatively,&amp;lt;br /&amp;gt;You may choose to drop all capabilities and add only add the needed ones:&amp;lt;br /&amp;gt;$&amp;gt; docker run --cap-drop=all --cap-add={"Capability 1","Capability 2"}&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --interactive --tty --cap-drop=all --cap-add={"NET_ADMIN","SYS_ADMIN"} centos:latest /bin/bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Based on what Linux Kernel Capabilities were added or dropped, restrictions within the container would apply.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: CapAdd={{ .HostConfig.CapAdd }} CapDrop={{ .HostConfig.CapDrop }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Verify that the added and dropped Linux Kernel Capabilities are in line with the ones needed for container process for each container instance.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.4" name="Ensure privileged containers are not used" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Using the --privileged flag gives all Linux Kernel Capabilities to the container thus overwriting the --cap-add and --cap-drop flags. Ensure that it is not used.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The --privileged flag gives all capabilities to the container, and it also lifts all the limitations enforced by the device cgroup controller. In other words, the container can then do almost everything that the host can do. This flag exists to allow special use-cases, like running Docker within Docker.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not run container with the --privileged flag.&amp;lt;br /&amp;gt;For example, do not start a container as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --interactive --tty --privileged centos /bin/bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Linux Kernel Capabilities other than defaults would not be available for use within container.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Privileged={{ .HostConfig.Privileged }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should return Privileged=false for each container instance.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.5" name="Ensure sensitive host system directories are not mounted on containers" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Sensitive host system directories such as below should not be allowed to be mounted as container volumes especially in read-write mode.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;/ &amp;lt;br /&amp;gt;/boot&amp;lt;br /&amp;gt;/dev&amp;lt;br /&amp;gt;/etc&amp;lt;br /&amp;gt;/lib&amp;lt;br /&amp;gt;/proc&amp;lt;br /&amp;gt;/sys&amp;lt;br /&amp;gt;/usr&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;If sensitive directories are mounted in read-write mode, it would be possible to make changes to files within those sensitive directories. The changes might bring down security implications or unwarranted changes that could put the Docker host in compromised state.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not mount host sensitive directories on containers especially in read-write mode.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Volumes={{ .Mounts }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above commands would return the list of current mapped directories and whether they are mounted in read-write mode for each container instance.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.12" name="Ensure the container's root filesystem is mounted as read only" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The container's root filesystem should be treated as a 'golden image' by using Docker run's --read-only option. This prevents any writes to the container's root filesystem at container runtime and enforces the principle of immutable infrastructure.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Enabling this option forces containers at runtime to explicitly define their data writing strategy to persist or not persist their data.&amp;lt;br /&amp;gt;This also reduces security attack vectors since the container instance's filesystem cannot be tampered with or written to unless it has explicit read-write permissions on its filesystem folder and directories.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Add a --read-only flag at a container's runtime to enforce the container's root filesystem to be mounted as read only.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run &amp;lt;Run arguments&amp;gt; --read-only &amp;lt;Container Image Name or ID&amp;gt; &amp;lt;Command&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Enabling the --read-only option at a container's runtime should be used by administrators to force a container's executable processes to only write container data to explicit storage locations during the container's runtime.&amp;lt;br /&amp;gt;Examples of explicit storage locations during a container's runtime include, but not limited to:&amp;lt;br /&amp;gt;1. Use the --tmpfs option to mount a temporary file system for non-persistent data writes.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --interactive --tty --read-only --tmpfs "/run" --tmpfs "/tmp" centos /bin/bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;2. Enabling Docker rw mounts at a container's runtime to persist container data directly on the Docker host filesystem.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --interactive --tty --read-only -v /opt/app/data:/run/app/data:rw centos /bin/bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;3. Utilizing Docker shared-storage volume plugins for Docker data volume to persist container data.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker volume create -d convoy --opt o=size=20GB my-named-volume docker run --interactive --tty --read-only -v my-named-volume:/run/app/data centos /bin/bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;4. Transmitting container data outside of the docker during the container's runtime for container data to persist container data. Examples include hosted databases, network file shares, and APIs.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Enabling --read-only at container runtime may break some container OS packages if a data writing strategy is not defined.&amp;lt;br /&amp;gt;Define what the container's data should and should not persist at runtime to determine which recommendation procedure to utilize.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run the following command on the docker host:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: ReadonlyRootfs={{ .HostConfig.ReadonlyRootfs }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;If the above command returns true, it means the container's root filesystem is mounted read-only.&amp;lt;br /&amp;gt;If the above command returns false, it means the container's root filesystem is writable.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.21" name="Ensure the default seccomp profile is not Disabled" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Seccomp filtering provides a means for a process to specify a filter for incoming system calls. The default Docker seccomp profile works on whitelist basis and allows 311 system calls blocking all others. It should not be disabled unless it hinders your container application usage.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;A large number of system calls are exposed to every userland process with many of them going unused for the entire lifetime of the process. Most of the applications do not need all the system calls and thus benefit by having a reduced set of available system calls. The reduced set of system calls reduces the total kernel surface exposed to the application and thus improvises application security.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;By default, seccomp profiles are enabled. You do not need to do anything unless you want to modify and use the modified seccomp profile.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;With Docker 1.10 and greater, the default seccomp profile blocks syscalls, regardless of --cap-add passed to the container. You should create your own custom seccomp profile in such cases. You may also disable the default seccomp profile by passing --security-opt=seccomp:unconfined on docker run.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: SecurityOpt={{ .HostConfig.SecurityOpt }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should return &amp;lt;no value&amp;gt; or your modified seccomp profile. If it returns [seccomp:unconfined], that means this recommendation is non-compliant and the container is running without any seccomp profiles.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.22" name="Ensure docker exec commands are not used with privileged option" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Do not docker exec with --privileged option.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Using --privileged option in docker exec gives extended Linux capabilities to the command. This could potentially be insecure and unsafe to do especially when you are running containers with dropped capabilities or with enhanced restrictions.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not use --privileged option in docker exec command.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None. If you need enhanced capabilities within the container, then run the container with the needed capabilities.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>If you have auditing enabled, you can use the below command to filter out docker exec commands that used --privileged option.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;ausearch -k docker | grep exec | grep privileged</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.23" name="Ensure docker exec commands are not used with user option" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Do not docker exec with --user option.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Using --user option in docker exec executes the command within the container as that user. This could potentially be insecure and unsafe to do especially when you are running containers with dropped capabilities or with enhanced restrictions.&amp;lt;br /&amp;gt;For example, suppose your container is running as tomcat user (or any other non-root user), it would be possible to run a command through docker exec as rootwith --user=root option. This could potentially be dangerous.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not use --user option in docker exec command.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>If you have auditing enabled as prescribed in Section 1, you can use the below command to filter out docker exec commands that used --user option.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;ausearch -k docker | grep exec | grep user</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.24" name="Ensure cgroup usage is confirmed" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>It is possible to attach to a particular cgroup on container run. Confirming cgroup usage would ensure that containers are running under defined cgroups.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;System administrators typically define cgroups under which containers are supposed to run. Even if cgroups are not explicitly defined by the system administrators, containers run under docker cgroup by default.&amp;lt;br /&amp;gt;At run-time, it is possible to attach to a different cgroup other than the one that was expected to be used. This usage should be monitored and confirmed. By attaching to a different cgroup than the one that is expected, excess permissions and resources might be granted to the container and thus, can prove to be unsafe.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not use --cgroup-parent option in docker run command unless needed.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: CgroupParent={{ .HostConfig.CgroupParent }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command would return the cgroup under which the containers are running. If it is blank, it means containers are running under default docker cgroup. In that case, this recommendation is compliant. If the containers are found to be running under cgroup other than the one that was expected, this recommendation is non-compliant.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.25" name="Ensure the container is restricted from acquiring additional privileges" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Restrict the container from acquiring additional privileges via suid or sgid bits.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;A process can set the no_new_priv bit in the kernel. It persists across fork, clone and execve. The no_new_priv bit ensures that the process or its children processes do not gain any additional privileges via suid or sgid bits. This way a lot of dangerous operations become a lot less dangerous because there is no possibility of subverting privileged binaries.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;For example, you should start your container as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --rm -it --security-opt=no-new-privileges ubuntu bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;no_new_priv prevents LSMs like SELinux from transitioning to process labels that have access not allowed to the current process.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: SecurityOpt={{ .HostConfig.SecurityOpt }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should return all the security options currently configured for the containers. no-new-privileges should also be one of them.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.31" name="Ensure the Docker socket is not mounted inside any containers" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The docker socket docker.sock should not be mounted inside a container.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;If the docker socket is mounted inside a container it would allow processes running within the container to execute docker commands which effectively allows for full control of the host.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Ensure that no containers mount docker.sock as a volume.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Volumes={{ .Mounts }}' | grep docker.sock&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command would return any instances where docker.sock had been mapped to a container as a volume.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.17" name="Ensure host devices are not directly exposed to containers" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Host devices can be directly exposed to containers at runtime. Do not directly expose host devices to containers especially for containers that are not trusted.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The --device option exposes the host devices to the containers and consequently, the containers can directly access such host devices. You would not require the container to run in privileged mode to access and manipulate the host devices. By default, the container will be able to read, write and mknod these devices. Additionally, it is possible for containers to remove block devices from the host. Hence, do not expose host devices to containers directly.&amp;lt;br /&amp;gt;If at all, you would want to expose the host device to a container, use the sharing permissions appropriately:&amp;lt;br /&amp;gt;• r &amp;lt;li&amp;gt;r&amp;lt;/li&amp;gt;ad only&amp;lt;br /&amp;gt;• w &amp;lt;li&amp;gt;writable&amp;lt;br /&amp;gt;• m &amp;lt;li&amp;gt;mknod allowed&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not directly expose the host devices to containers. If at all, you need to expose the host devices to containers, use the correct set of permissions:&amp;lt;br /&amp;gt;For example, do not start a container as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --interactive --tty --device=/dev/tty0:/dev/tty0:rwm --device=/dev/temp_sda:/dev/temp_sda:rwm centos bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;For example, share the host device with correct permissions:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --interactive --tty --device=/dev/tty0:/dev/tty0:rw --device=/dev/temp_sda:/dev/temp_sda:r centos bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;You would not be able to use the host devices directly within the containers.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Devices={{ .HostConfig.Devices }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command would list out each device with below information:&amp;lt;br /&amp;gt;• CgroupPermissions &amp;lt;li&amp;gt;For exam&amp;lt;/li&amp;gt;le, rwm&amp;lt;br /&amp;gt;• PathInContainer &amp;lt;li&amp;gt;Device path within the container&amp;lt;br /&amp;gt;• PathOnHost &amp;lt;li&amp;gt;Device path on the host&amp;lt;br /&amp;gt;Verify that the host device is needed to be accessed from within the container and the permissions required are correctly set. If the above command returns [], then the container does not have access to host devices. This recommendation can be assumed to be compliant.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.19" name="Ensure mount propagation mode is not set to shared" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Mount propagation mode allows mounting volumes in shared, slave or private mode on a container. Do not use shared mount propagation mode until needed.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;A shared mount is replicated at all mounts and the changes made at any mount point are propagated to all mounts. Mounting a volume in shared mode does not restrict any other container to mount and make changes to that volume. This might be catastrophic if the mounted volume is sensitive to changes. Do not set mount propagation mode to shared until needed.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not mount volumes in shared mode propagation.&amp;lt;br /&amp;gt;For example, do not start container as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run &amp;lt;Run arguments&amp;gt; --volume=/hostPath:/containerPath:shared &amp;lt;Container Image Name or ID&amp;gt; &amp;lt;Command&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Propagation={{range $mnt := .Mounts}} {{json $mnt.Propagation}} {{end}}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command would return the propagation mode for mounted volumes. Propagation mode should not be set to shared unless needed. The above command might throw errors if there are no mounts. In that case, this recommendation is not applicable.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.15" name="Ensure the host's process namespace is not shared" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Process ID (PID) namespaces isolate the process ID number space, meaning that processes in different PID namespaces can have the same PID. This is process level isolation between containers and the host.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;PID namespace provides separation of processes. The PID Namespace removes the view of the system processes, and allows process ids to be reused including PID 1. If the host's PID namespace is shared with the container, it would basically allow processes within the container to see all of the processes on the host system. This breaks the benefit of process level isolation between the host and the containers. Someone having access to the container can eventually know all the processes running on the host system and can even kill the host system processes from within the container. This can be catastrophic. Hence, do not share the host's process namespace with the containers.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not start a container with --pid=host argument.&amp;lt;br /&amp;gt;For example, do not start a container as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --interactive --tty --pid=host centos /bin/bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Container processes cannot see the processes on the host system. In certain cases, you want your container to share the host's process namespace. For example, you could build a container with debugging tools like strace or gdb, but want to use these tools when debugging processes within the container. If this is desired, then share only one (or needed) host process by using the -p switch.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --pid=host rhel7 strace -p 1234</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: PidMode={{ .HostConfig.PidMode }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;If the above command returns host, it means the host PID namespace is shared with the container else this recommendation is compliant.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.16" name="Ensure the host's IPC namespace is not shared" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>IPC (POSIX/SysV IPC) namespace provides separation of named shared memory segments, semaphores and message queues. IPC namespace on the host thus should not be shared with the containers and should remain isolated.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;IPC namespace provides separation of IPC between the host and containers. If the host's IPC namespace is shared with the container, it would basically allow processes within the container to see all of the IPC on the host system. This breaks the benefit of IPC level isolation between the host and the containers. Someone having access to the container can eventually manipulate the host IPC. This can be catastrophic. Hence, do not share the host's IPC namespace with the containers.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not start a container with --ipc=host argument. For example, do not start a container as below:&amp;lt;br /&amp;gt;docker run --interactive --tty --ipc=host centos /bin/bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Shared memory segments are used to accelerate inter-process communication. It is commonly used by high-performance applications. If such applications are containerized into multiple containers, you might need to share the IPC namespace of the containers to achieve high performance. In such cases, you should still be sharing container specific IPC namespaces only and not the host IPC namespace. You may share the container's IPC namespace with another container as below:&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;docker run --interactive --tty --ipc=container:e3a7a1a97c58 centos /bin/bash</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: IpcMode={{ .HostConfig.IpcMode }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;If the above command returns host, it means the host IPC namespace is shared with the container. If the above command returns nothing, then the host's IPC namespace is not shared. This recommendation is then compliant.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.20" name="Ensure the host's UTS namespace is not shared" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>UTS namespaces provide isolation of two system identifiers: the hostname and the NIS domain name. It is used for setting the hostname and the domain that is visible to running processes in that namespace. Processes running within containers do not typically require to know hostname and domain name. Hence, the namespace should not be shared with the host.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Sharing the UTS namespace with the host provides full permission to the container to change the hostname of the host. This is insecure and should not be allowed.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not start a container with --uts=host argument.&amp;lt;br /&amp;gt;For example, do not start a container as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --rm --interactive --tty --uts=host rhel7.2&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: UTSMode={{ .HostConfig.UTSMode }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;If the above command returns host, it means the host UTS namespace is shared with the container and this recommendation is non-compliant. If the above command returns nothing, then the host's UTS namespace is not shared. This recommendation is then compliant.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.30" name="Ensure the host's user namespaces is not shared" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Do not share the host's user namespaces with the containers.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;User namespaces ensure that a root process inside the container will be mapped to a non-root process outside the container. Sharing the user namespaces of the host with the container thus does not isolate users on the host with users on the containers.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not share user namespaces between host and containers.&amp;lt;br /&amp;gt;For example, do not run a container as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --rm -it --userns=host ubuntu bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run the below command and ensure that it does not return any value for UsernsMode. If it returns a value of host, it means the host user namespace is shared with the containers.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: UsernsMode={{ .HostConfig.UsernsMode }}'</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.1" name="Ensure AppArmor Profile is Enabled" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>AppArmor is an effective and easy-to-use Linux application security system. It is available on quite a few Linux distributions by default such as Debian and Ubuntu.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;AppArmor protects the Linux OS and applications from various threats by enforcing security policy which is also known as AppArmor profile. You can create your own AppArmor profile for containers or use the Docker's default AppArmor profile. This would enforce security policies on the containers as defined in the profile.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;If AppArmor is applicable for your Linux OS, use it. You may have to follow below set of steps:&amp;lt;br /&amp;gt;1. Verify if AppArmor is installed. If not, install it.&amp;lt;br /&amp;gt;2. Create or import a AppArmor profile for Docker containers.&amp;lt;br /&amp;gt;3. Put this profile in enforcing mode.&amp;lt;br /&amp;gt;4. Start your Docker container using the customized AppArmor profile. For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --interactive --tty --security-opt="apparmor:PROFILENAME" centos /bin/bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Alternatively, you can keep the docker's default apparmor profile.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The container (process) would have set of restrictions as defined in AppArmor profile. If your AppArmor profile is mis-configured, then the container may not entirely work as expected.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: AppArmorProfile={{ .AppArmorProfile }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should return a valid AppArmor Profile for each container instance.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.2" name="Ensure SELinux security options are set, if applicable" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>SELinux is an effective and easy-to-use Linux application security system. It is available on quite a few Linux distributions by default such as Red Hat and Fedora.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;SELinux provides a Mandatory Access Control (MAC) system that greatly augments the default Discretionary Access Control (DAC) model. You can thus add an extra layer of safety by enabling SELinux on your Linux host, if applicable.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;If SELinux is applicable for your Linux OS, use it. You may have to follow below set of steps:&amp;lt;br /&amp;gt;1. Set the SELinux State.&amp;lt;br /&amp;gt;2. Set the SELinux Policy.&amp;lt;br /&amp;gt;3. Create or import a SELinux policy template for Docker containers.&amp;lt;br /&amp;gt;4. Start Docker in daemon mode with SELinux enabled. For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker daemon --selinux-enabled&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;5. Start your Docker container using the security options. For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --interactive --tty --security-opt label=level:TopSecret centos /bin/bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The container (process) would have set of restrictions as defined in SELinux policy. If your SELinux policy is mis-configured, then the container may not entirely work as expected.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: SecurityOpt={{ .HostConfig.SecurityOpt }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should return all the security options currently configured for the containers.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.6" name="Ensure SSH is not run within containers" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>SSH server should not be running within the container. You should SSH into the Docker host, and use nsenter tool to enter a container from a remote host.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Running SSH within the container increases the complexity of security management by making it&amp;lt;br /&amp;gt;• Difficult to manage access policies and security compliance for SSH server&amp;lt;br /&amp;gt;• Difficult to manage keys and passwords across various containers&amp;lt;br /&amp;gt;• Difficult to manage security upgrades for SSH server&amp;lt;br /&amp;gt;It is possible to have shell access to a container without using SSH, the needlessly increasing the complexity of security management should be avoided.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Uninstall SSH server from the container and use nsenteror any other commands such as docker exec or docker attach to interact with the container instance.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker exec --interactive --tty $INSTANCE_ID sh&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;OR&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker attach $INSTANCE_ID&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Step 1: List all the running instances of containers by executing below command:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker ps --quiet&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Step 2: For each container instance, execute the below command:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker exec $INSTANCE_ID ps -el&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Ensure that there is no process for SSH server.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.7" name="Ensure privileged ports are not mapped within containers" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The TCP/IP port numbers below 1024 are considered privileged ports. Normal users and processes are not allowed to use them for various security reasons. Docker allows a container port to be mapped to a privileged port.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;By default, if the user does not specifically declare the container port to host port mapping, Docker automatically and correctly maps the container port to one available in 49153-65535 block on the host. But, Docker allows a container port to be mapped to a privileged port on the host if the user explicitly declared it. This is so because containers are executed with NET_BIND_SERVICE Linux kernel capability that does not restrict the privileged port mapping. The privileged ports receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not map the container ports to privileged host ports when starting a container. Also, ensure that there is no such container to host privileged port mapping declarations in the Dockerfile.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>List all running containers instances and their port mapping by executing the below command:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Ports={{ .NetworkSettings.Ports }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Review the list and ensure that container ports are not mapped to host port numbers below 1024.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.8" name="Ensure only needed ports are open on the container" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Dockerfile for a container image defines the ports to be opened by default on a container instance. The list of ports may or may not be relevant to the application you are running within the container.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;A container can be run just with the ports defined in the Dockerfile for its image or can be arbitrarily passed run time parameters to open a list of ports. Additionally, Overtime, Dockerfile may undergo various changes and the list of exposed ports may or may not be relevant to the application you are running within the container. Opening unneeded ports increase the attack surface of the container and the containerized application. As a recommended practice, do not open unneeded ports.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Fix the Dockerfile of the container image to expose only needed ports by your containerized application. You can also completely ignore the list of ports defined in the Dockerfile by NOT using -P (UPPERCASE) or --publish-all flag when starting the container. Use the -p (lowercase) or --publish flag to explicitly define the ports that you need for a particular container instance.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --interactive --tty --publish 5000 --publish 5001 --publish 5002 centos /bin/bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>List all the running instances of containers and their port mapping by executing the below command:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Ports={{ .NetworkSettings.Ports }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Review the list and ensure that the ports mapped are the ones that are really needed for the container.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.9" name="Ensure the host's network namespace is not shared" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The networking mode on a container when set to --net=host, skips placing the container inside separate network stack. In essence, this choice tells Docker to not containerize the container's networking. This would network-wise mean that the container lives "outside" in the main Docker host and has full access to its network interfaces.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;This is potentially dangerous. It allows the container process to open low-numbered ports like any other root process. It also allows the container to access network services like D-bus on the Docker host. Thus, a container process can potentially do unexpected things such as shutting down the Docker host. You should not use this option.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Do not pass --net=host option when starting the container.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: NetworkMode={{ .HostConfig.NetworkMode }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;If the above command returns NetworkMode=host, it means that --net=host option was passed when container was started. This would be non-compliant.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.10" name="Ensure memory usage for container is limited" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>By default, all containers on a Docker host share the resources equally. By using the resource management capabilities of Docker host, such as memory limit, you can control the amount of memory that a container may consume.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;By default, container can use all of the memory on the host. You can use memory limit mechanism to prevent a denial of service arising from one container consuming all of the host’s resources such that other containers on the same host cannot perform their intended functions. Having no limit on memory can lead to issues where one container can easily make the whole system unstable and as a result unusable.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Run the container with only as much memory as required. Always run the container using the --memory argument.&amp;lt;br /&amp;gt;For example, you could run a container as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --interactive --tty --memory 256m centos /bin/bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;In the above example, the container is started with a memory limit of 256 MB.&amp;lt;br /&amp;gt;Note: Please note that the output of the below command would return values in scientific notation if memory limits are in place.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker inspect --format='{{.Config.Memory}}' 7c5a2d4c7fe0&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;For example, if the memory limit is set to 256 MB for the above container instance, the output of the above command would be 2.68435456e+08 and NOT 256m. You should convert this value using a scientific calculator or programmatic methods.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;If you do not set proper limits, the container process may have to starve.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Memory={{ .HostConfig.Memory }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;If the above command returns 0, it means the memory limits are not in place. If the above command returns a non-zero value, it means memory limits are in place.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.11" name="Ensure CPU priority is set appropriately on the container" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>By default, all containers on a Docker host share the resources equally. By using the resource management capabilities of Docker host, such as CPU shares, you can control the host CPU resources that a container may consume.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;By default, CPU time is divided between containers equally. If it is desired, to control the CPU time amongst the container instances, you can use CPU sharing feature. CPU sharing allows to prioritize one container over the other and forbids the lower priority container to claim CPU resources more often. This ensures that the high priority containers are served better.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Manage the CPU shares between your containers. To do so start the container using the --cpu-shares argument.&amp;lt;br /&amp;gt;For example, you could run a container as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --interactive --tty --cpu-shares 512 centos /bin/bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;In the above example, the container is started with CPU shares of 50% of what the other containers use. So, if the other container has CPU shares of 80%, this container will have CPU shares of 40%.&amp;lt;br /&amp;gt;Note: Every new container will have 1024 shares of CPU by default. However, this value is shown as 0 if you run the command mentioned in the audit section.&amp;lt;br /&amp;gt;Alternatively,&amp;lt;br /&amp;gt;1. Navigate to /sys/fs/cgroup/cpu/system.slice/ directory.&amp;lt;br /&amp;gt;2. Check your container instance ID using docker ps.&amp;lt;br /&amp;gt;3. Now, inside the above directory (in step 1), you would have a directory by name docker-&amp;lt;Instance ID&amp;gt;.scope. For example, docker-4acae729e8659c6be696ee35b2237cc1fe4edd2672e9186434c5116e1a6fbed6.scope. Navigate to this directory.&amp;lt;br /&amp;gt;4. You will find a file named cpu.shares. Execute cat cpu.shares. This will always give you the CPU share value based on the system. So, even if there is no CPU shares configured using -c or --cpu-shares argument in the docker run command, this file will have a value of 1024.&amp;lt;br /&amp;gt;If we set one container’s CPU shares to 512 it will receive half of the CPU time compared to the other container. So, take 1024 as 100% and then do quick math to derive the number that you should set for respective CPU shares. For example, use 512 if you want to set 50% and 256 if you want to set 25%.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;If you do not set proper CPU shares, the container process may have to starve if the resources on the host are not available. If the CPU resources on the host are free, CPU shares do not place any restrictions on the CPU that the container may use.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: CpuShares={{ .HostConfig.CpuShares }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;If the above command returns 0 or 1024, it means the CPU shares are not in place. If the above command returns a non-zero value other than 1024, it means CPU shares are in place.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.13" name="Ensure incoming container traffic is binded to a specific host interface" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>By default, Docker containers can make connections to the outside world, but the outside world cannot connect to containers. Each outgoing connection will appear to originate from one of the host machine's own IP addresses. Only allow container services to be contacted through a specific external interface on the host machine.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;If you have multiple network interfaces on your host machine, the container can accept connections on the exposed ports on any network interface. This might not be desired and may not be secured. Many a times a particular interface is exposed externally and services such as intrusion detection, intrusion prevention, firewall, load balancing, etc. are run on those interfaces to screen incoming public traffic. Hence, you should not accept incoming connections on any interface. You should only allow incoming connections from a particular external interface.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Bind the container port to a specific host interface on the desired host port.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --detach --publish 10.2.3.4:49153:80 nginx&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;In the example above, the container port 80 is bound to the host port on 49153 and would accept incoming connection only from 10.2.3.4 external interface.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>List all the running instances of containers and their port mapping by executing the below command:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Ports={{ .NetworkSettings.Ports }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Review the list and ensure that the exposed container ports are tied to a particular interface and not to the wildcard IP address &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;.0.0.0.&amp;lt;br /&amp;gt;For example, if the above command returns as below, then this is non-compliant and the container can accept connections on any host interface on the specified port 49153.&amp;lt;br /&amp;gt;Ports=map[443/tcp:&amp;lt;nil&amp;gt; 80/tcp:[map[HostPort:49153 HostIp:0.0.0.0]]]&amp;lt;br /&amp;gt;However, if the exposed port is tied to a particular interface on the host as below, then this recommendation is configured as desired and is compliant.&amp;lt;br /&amp;gt;Ports=map[443/tcp:&amp;lt;nil&amp;gt; 80/tcp:[map[HostIp:10.2.3.4 HostPort:49153]]]</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.14" name="Ensure 'on-failure' container restart policy is set to '5'" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Using the --restart flag in docker run command you can specify a restart policy for how a container should or should not be restarted on exit. You should choose the on-failure restart policy and limit the restart attempts to 5.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;If you indefinitely keep trying to start the container, it could possibly lead to a denial of service on the host. It could be an easy way to do a distributed denial of service attack especially if you have many containers on the same host. Additionally, ignoring the exit status of the container and always attempting to restart the container leads to non-investigation of the root cause behind containers getting terminated. If a container gets terminated, you should investigate on the reason behind it instead of just attempting to restart it indefinitely. Thus, it is recommended to use on-failure restart policy and limit it to maximum of 5 restart attempts.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;If a container is desired to be restarted of its own, then, for example, you could start the container as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --detach --restart=on-failure:5 nginx&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;The container would attempt to restart only for 5 times.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: RestartPolicyName={{ .HostConfig.RestartPolicy.Name }} MaximumRetryCount={{ .HostConfig.RestartPolicy.MaximumRetryCount }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;• If the above command returns RestartPolicyName=always, then the system is not configured as desired and hence this recommendation is non-compliant.&amp;lt;br /&amp;gt;• If the above command returns RestartPolicyName=no or just RestartPolicyName=, then the restart policies are not being used and the container would never be restarted of its own. This recommendation is then Not Applicable and can be assumed to be compliant.&amp;lt;br /&amp;gt;• If the above command returns RestartPolicyName=on-failure, then verify that the number of restart attempts is set to 5 or less by looking at MaximumRetryCount.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.18" name="Ensure the default ulimit is overwritten at runtime, only if needed" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>The default ulimit is set at the Docker daemon level. However, you may override the default ulimit setting, if needed, during container runtime.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;ulimit provides control over the resources available to the shell and to processes started by it. Setting system resource limits judiciously saves you from many disasters such as a fork bomb. Sometimes, even friendly users and legitimate processes can overuse system resources and in-turn can make the system unusable.&amp;lt;br /&amp;gt;The default ulimit set at the Docker daemon level should be honored. If the default ulimit settings are not appropriate for a particular container instance, you may override them as an exception. But, do not make this a practice. If most of the container instances are overriding default ulimit settings, consider changing the default ulimit settings to something that is appropriate for your needs.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Only override the default ulimit settings if needed.&amp;lt;br /&amp;gt;For example, to override default ulimit settings start a container as below:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run --ulimit nofile=1024:1024 --interactive --tty centos /bin/bash&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;If the ulimits are not set properly, the desired resource control might not be achieved and might even make the system unusable.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Ulimits={{ .HostConfig.Ulimits }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The above command should return Ulimits=&amp;lt;no value&amp;gt; for each container instance until and unless there is an exception and a need to override the default ulimit settings.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.26" name="Ensure container health is checked at runtime" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>If the container image does not have an HEALTHCHECK instruction defined, use --health-cmd parameter at container runtime for checking container health.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;One of the important security triads is availability. If the container image you are using does not have a pre-defined HEALTHCHECK instruction, use the --health-cmd parameter to check container health at runtime.&amp;lt;br /&amp;gt;Based on the reported health status, you could take necessary actions.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Run the container using --health-cmd and the other parameters.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run -d --health-cmd='stat /etc/passwd || exit 1' nginx&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run the below command and ensure that all the containers are reporting health status:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Health={{ .State.Health.Status }}'</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.28" name="Ensure PIDs cgroup limit is used" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Use --pids-limit flag at container runtime.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Attackers could launch a fork bomb with a single command inside the container. This fork bomb can crash the entire system and requires a restart of the host to make the system functional again. PIDs cgroup --pids-limit will prevent this kind of attacks by restricting the number of forks that can happen inside a container at a given time.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Use --pids-limit flag while launching the container with an appropriate value.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker run -it --pids-limit 100 &amp;lt;Image_ID&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;In the above example, the number of processes allowed to run at any given time is set to 100. After a limit of 100 concurrently running processes is reached, docker would restrict any new process creation.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Set the PIDs limit value as appropriate. Incorrect values might leave the containers unusable.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run the below command and ensure that PidsLimit is not set to 0 or -1. A PidsLimit of 0 or -1 means that any number of processes can be forked inside the container concurrently.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: PidsLimit={{ .HostConfig.PidsLimit }}'</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.29" name="Ensure Docker's default bridge docker0 is not used" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Do not use Docker's default bridge docker0. Use docker's user-defined networks for container networking.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Docker connects virtual interfaces created in the bridge mode to a common bridge called docker0. This default networking model is vulnerable to ARP spoofing and MAC flooding attacks since there is no filtering applied.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Follow Docker documentation and setup a user-defined network. Run all the containers in the defined network.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;You have to manage the user-defined networks.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run the below command, and verify that containers are on a user-defined network and not the default docker0 bridge.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker network ls --quiet | xargs xargs docker network inspect --format '{{ .Name }}: {{ .Options }}'</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D5.27" name="Ensure docker commands always get the latest version of the image" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Always ensure that you are using the latest version of the image within your repository and not the cached older versions.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Multiple docker commands such as docker pull, docker run, etc. are known to have an issue that by default, they extract the local copy of the image, if present, even though there is an updated version of the image with the "same tag" in the upstream repository. This could lead to using older and vulnerable images.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Use proper version pinning mechanisms (the latest tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting the cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images too. You can customize version pinning rules as per your requirements.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Step 1: Open your image repository and list the image version history for the image you are inspecting.&amp;lt;br /&amp;gt;Step 2: Observe the status when the docker pull command is triggered.&amp;lt;br /&amp;gt;If the status is shown as Image is up to date, it means that you are getting the cached version of the image.&amp;lt;br /&amp;gt;Step 3: Match the version of the image you are running with the latest version reported in your repository which tells if you are running the cached version or the latest copy.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="DOCKER AUTHENTICATION AND AUTHORIZATION" name="Docker Authentication and Authorization" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D5.3" mitigation="8"/>
                                <control ref="D5.4" mitigation="8"/>
                                <control ref="D5.5" mitigation="8"/>
                                <control ref="D5.12" mitigation="8"/>
                                <control ref="D5.21" mitigation="8"/>
                                <control ref="D5.22" mitigation="8"/>
                                <control ref="D5.23" mitigation="8"/>
                                <control ref="D5.24" mitigation="8"/>
                                <control ref="D5.25" mitigation="8"/>
                                <control ref="D5.31" mitigation="8"/>
                                <control ref="D5.17" mitigation="8"/>
                                <control ref="D5.19" mitigation="8"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-276">
                                    <controls>
                                        <control ref="D5.3" mitigation="8"/>
                                        <control ref="D5.4" mitigation="8"/>
                                        <control ref="D5.5" mitigation="8"/>
                                        <control ref="D5.12" mitigation="8"/>
                                        <control ref="D5.21" mitigation="8"/>
                                        <control ref="D5.22" mitigation="8"/>
                                        <control ref="D5.23" mitigation="8"/>
                                        <control ref="D5.24" mitigation="8"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-250">
                                    <controls>
                                        <control ref="D5.3" mitigation="8"/>
                                        <control ref="D5.4" mitigation="8"/>
                                        <control ref="D5.5" mitigation="8"/>
                                        <control ref="D5.12" mitigation="8"/>
                                        <control ref="D5.21" mitigation="8"/>
                                        <control ref="D5.22" mitigation="8"/>
                                        <control ref="D5.23" mitigation="8"/>
                                        <control ref="D5.24" mitigation="8"/>
                                        <control ref="D5.25" mitigation="8"/>
                                        <control ref="D5.31" mitigation="8"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-732">
                                    <controls>
                                        <control ref="D5.3" mitigation="8"/>
                                        <control ref="D5.4" mitigation="8"/>
                                        <control ref="D5.5" mitigation="8"/>
                                        <control ref="D5.12" mitigation="8"/>
                                        <control ref="D5.17" mitigation="8"/>
                                        <control ref="D5.19" mitigation="8"/>
                                        <control ref="D5.21" mitigation="8"/>
                                        <control ref="D5.22" mitigation="8"/>
                                        <control ref="D5.23" mitigation="8"/>
                                        <control ref="D5.24" mitigation="8"/>
                                        <control ref="D5.25" mitigation="8"/>
                                        <control ref="D5.31" mitigation="8"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="DOCKER GENERAL" name="Docker General" desc="" library="">
                    <threats>
                        <threat ref="OWASP A6:2017" name="Exploitation of Security Misconfiguration" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attackers will often attempt to exploit&amp;lt;br /&amp;gt;unpatched flaws or access default&amp;lt;br /&amp;gt;accounts, unused pages, unprotected&amp;lt;br /&amp;gt;files and directories, etc to gain&amp;lt;br /&amp;gt;unauthorized access or knowledge of&amp;lt;br /&amp;gt;the system.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D5.15" mitigation="5"/>
                                <control ref="D5.16" mitigation="5"/>
                                <control ref="D5.20" mitigation="5"/>
                                <control ref="D5.30" mitigation="5"/>
                                <control ref="D5.1" mitigation="5"/>
                                <control ref="D5.2" mitigation="5"/>
                                <control ref="D5.6" mitigation="5"/>
                                <control ref="D5.7" mitigation="5"/>
                                <control ref="D5.8" mitigation="5"/>
                                <control ref="D5.9" mitigation="5"/>
                                <control ref="D5.10" mitigation="5"/>
                                <control ref="D5.11" mitigation="5"/>
                                <control ref="D5.13" mitigation="5"/>
                                <control ref="D5.14" mitigation="5"/>
                                <control ref="D5.18" mitigation="5"/>
                                <control ref="D5.26" mitigation="5"/>
                                <control ref="D5.28" mitigation="5"/>
                                <control ref="D5.29" mitigation="5"/>
                                <control ref="D5.27" mitigation="5"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-485">
                                    <controls>
                                        <control ref="D5.15" mitigation="5"/>
                                        <control ref="D5.16" mitigation="5"/>
                                        <control ref="D5.20" mitigation="5"/>
                                        <control ref="D5.30" mitigation="5"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-2">
                                    <controls>
                                        <control ref="D5.1" mitigation="5"/>
                                        <control ref="D5.2" mitigation="5"/>
                                        <control ref="D5.6" mitigation="5"/>
                                        <control ref="D5.7" mitigation="5"/>
                                        <control ref="D5.8" mitigation="5"/>
                                        <control ref="D5.9" mitigation="5"/>
                                        <control ref="D5.10" mitigation="5"/>
                                        <control ref="D5.11" mitigation="5"/>
                                        <control ref="D5.13" mitigation="5"/>
                                        <control ref="D5.14" mitigation="5"/>
                                        <control ref="D5.18" mitigation="5"/>
                                        <control ref="D5.26" mitigation="5"/>
                                        <control ref="D5.28" mitigation="5"/>
                                        <control ref="D5.29" mitigation="5"/>
                                    </controls>
                                </weakness>
                                <weakness ref="UNPATCHED-SERVER">
                                    <controls>
                                        <control ref="D5.27" mitigation="5"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-125" name="Flooding" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D5.10" mitigation="20"/>
                                <control ref="D5.11" mitigation="20"/>
                                <control ref="D5.14" mitigation="20"/>
                                <control ref="D5.18" mitigation="20"/>
                                <control ref="D5.28" mitigation="20"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-400">
                                    <controls>
                                        <control ref="D5.10" mitigation="20"/>
                                        <control ref="D5.11" mitigation="20"/>
                                        <control ref="D5.14" mitigation="20"/>
                                        <control ref="D5.18" mitigation="20"/>
                                        <control ref="D5.28" mitigation="20"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-37" name="Retrieve Embedded Sensitive Data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D5.5" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-200">
                                    <controls>
                                        <control ref="D5.5" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="DOCKER NETWORKING" name="Docker Networking" desc="" library="">
                    <threats>
                        <threat ref="DOCKER-WIDE-ATTACK-SURFACE" name="Exploitation of a wide attack surface" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Every point of network interaction is a potential part of the network attack surface having exploitable vulnerabilities.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D5.7" mitigation="20"/>
                                <control ref="D5.8" mitigation="20"/>
                                <control ref="D5.9" mitigation="20"/>
                                <control ref="D5.13" mitigation="20"/>
                                <control ref="D5.29" mitigation="20"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="UNRESTRICTED-NETWORK">
                                    <controls>
                                        <control ref="D5.7" mitigation="20"/>
                                        <control ref="D5.8" mitigation="20"/>
                                        <control ref="D5.9" mitigation="20"/>
                                        <control ref="D5.13" mitigation="20"/>
                                        <control ref="D5.29" mitigation="20"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="DOCKER-SWARM" name="Docker Swarm" desc="" tags="" position="8" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CSD-SESS-REAUTH" name="The application does not re-authenticate on critical functions" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The application does not require the user to re-authenticate for specific critical functions, like password change or changes to sensitive security settings. </desc>
                </weakness>
                <weakness ref="CWE-732" name="Incorrect Permission Assignment for Critical Resource" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.
When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.  </desc>
                </weakness>
                <weakness ref="CWE-324" name="Use of a Key Past its Expiration Date" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.
While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength.</desc>
                </weakness>
                <weakness ref="CWE-485" name="The application does not define isolated boundaries (Insufficient Encapsulation)" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The application does not sufficiently encapsulate critical data or functionality. Encapsulation is about drawing strong boundaries. In a web browser that might mean ensuring that your mobile code cannot be abused by other mobile code. On the server it might mean differentiation between validated data and unvalidated data, between one user's data and another's, or between data users are allowed to see and data that they are not.
 </desc>
                </weakness>
                <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>This is a generic weakness that includes several different situations, they are all related to unexpected environmental conditions and they could be related to:   
• Misconfiguration. 
• Uncleared buffers, shared memory, files, etc. 
• Problems between the interaction of two different entities that cause unexpected behaviour.   </desc>
                </weakness>
                <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not encrypt sensitive or critical information before storage or transmission. The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys. </desc>
                </weakness>
                <weakness ref="CWE-287" name="Improper Server's Identity Validation" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not validate, or incorrectly validates, the server's identity. 
If the server's identity is not validated, an attacker could spoof a trusted entity by using a man-in-the-middle (MITM) attack. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host. 
 
One way to perform server's authentication is by using X509 certificates over TLS. 
 </desc>
                </weakness>
                <weakness ref="UNRESTRICTED-NETWORK" name="Service is exposed to a wide attack surface" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product is exposed or reachable to an unnecessarily large group of potential attackers. An over-exposure of a component increases the chance of an attacker gaining access to the system through a vulnerability. </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="D7.6" name="Ensure swarm manager is running in auto-lock mode" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Run Docker swarm manager in auto-lock mode.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;When Docker restarts, both the TLS key used to encrypt communication among swarm nodes, and the key used to encrypt and decrypt Raft logs on disk, are loaded into each manager node's memory. You should protect the mutual TLS encryption key and the key used to encrypt and decrypt Raft logs at rest. This protection could be enabled by initializing swarm with --autolock flag.&amp;lt;br /&amp;gt;With --autolockenabled, when Docker restarts, you must unlock the swarm first, using a key encryption key generated by Docker when the swarm was initialized.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;If you are initializing swarm, use the below command.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker swarm init --autolock&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;If you want to set --autolock on an existing swarm manager node, use the below command.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker swarm update --autolock&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;A swarm in auto-lock mode won't recover from a re-start without manual intervention from a user to enter the unlock key. In some deployments, this might not be good for availability.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run the below command. If it outputs the key, it means swarm was initialized with the --autolock flag. If the output is no unlock key is set, it means that swarm was NOT initialized with the --autolock flag and is non-compliant with respect to this recommendation.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker swarm unlock-key</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D7.2" name="Ensure the minimum number of manager nodes have been created in a swarm" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Ensure that the minimum number of required manager nodes is created in a swarm.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Manager nodes within a swarm have control over the swarm and change its configuration modifying security parameters. Having excessive manager nodes could render the swarm more susceptible to compromise.&amp;lt;br /&amp;gt;If fault tolerance is not required in the manager nodes, a single node should be elected as a manger. If fault tolerance is required then the smallest practical odd number to achieve the appropriate level of tolerance should be configured.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;If an excessive number of managers is configured, the excess can be demoted as worker using the following command:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker node demote &amp;lt;ID&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Where is the node ID value of the manager to be demoted.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run docker info and verify the number of managers.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker info --format '{{ .Swarm.Managers }}'&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Alternatively run the below command.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker node ls | grep 'Leader'</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D7.7" name="Ensure swarm manager auto-lock key is rotated periodically" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Rotate swarm manager auto-lock key periodically.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Swarm manager auto-lock key is not automatically rotated. You should rotate them periodically as a best practice.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Run the below command to rotate the keys.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker swarm unlock-key --rotate&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Additionally, to facilitate audit for this recommendation, maintain key rotation records and ensure that you establish a pre-defined frequency for key rotation.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Currently, there is no mechanism to find out when the key was last rotated on a swarm manager node. You should check with the system administrator if there is a key rotation record and the keys were rotated at a pre-defined frequency.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D7.10" name="Ensure management plane traffic has been separated from data plane traffic" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Separate management plane traffic from data plane traffic.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Separating the management plane traffic from data plane traffic ensures that these traffics are on their respective paths. These paths could then be individually monitored and could be tied to different traffic control policies and monitoring. It also ensures that management plane is always reachable despite the huge volume of data flow.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Initialize Swarm with dedicated interfaces for management and data planes respectively.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker swarm init --advertise-addr=192.168.0.1 --data-path-addr=17.1.0.3&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;You would require 2 network interface cards per node.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run the below command on each swarm node and ensure that the management plane address is different from data plane address.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker node inspect --format '{{ .Status.Addr }}' self&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Note: At the time of writing of this benchmark, there is no way to inspect data plane address. An issue has been raised and is in the reference link.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D7.1" name="Ensure swarm mode is not Enabled, if not needed" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Do not enable swarm mode on a docker engine instance unless needed.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;By default, a Docker engine instance will not listen on any network ports, with all communications with the client coming over the Unix socket. When Docker swarm mode is enabled on a docker engine instance, multiple network ports are opened on the system and made available to other systems on the network for the purposes of cluster management and node communications.&amp;lt;br /&amp;gt;Opening network ports on a system increase its attack surface and this should be avoided unless required.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;If swarm mode has been enabled on a system in error, run:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker swarm leave&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None.</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Review the output of the docker info command. If the output includes Swarm: active it indicates that swarm mode has been activated on the Docker engine. Confirm if swarm mode on the docker engine instance is actually needed.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D7.3" name="Ensure swarm services are binded to a specific host interface" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>By default, the docker swarm services will listen to all interfaces on the host, which may not be necessary for the operation of the swarm where the host has multiple network interfaces.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;When a swarm is initialized the default value for the --listen-addr flag is 0.0.0.0:2377 which means that the swarm services will listen on all interfaces on the host. If a host has multiple network interfaces this may be undesirable as it may expose the docker swarm services to networks which are not involved in the operation of the swarm.&amp;lt;br /&amp;gt;By passing a specific IP address to the --listen-addr, a specific network interface can be specified limiting this exposure.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Remediation of this requires re-initialization of the swarm specifying a specific interface for the --listen-addr parameter.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>List the network listener on port 2377/TCP (the default for docker swarm) and confirm that it is only listening on specific interfaces. For example, using ubuntu this could be done with the following command:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;netstat -lt | grep -i 2377</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D7.5" name="Ensure Docker's secret management commands are used for managing secrets in a Swarm cluster" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Use Docker's in-built secret management command.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Docker has various commands for managing secrets in a Swarm cluster. This is the foundation for future secret support in Docker with potential improvements such as Windows support, different backing stores, etc.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Follow docker secret documentation and use it to manage secrets effectively.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>On a swarm manager node, run the below command and ensure docker secret management is used in your environment, if applicable.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker secret ls</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D7.4" name="Ensure data exchanged between containers are encrypted on different nodes on the overlay network" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Encrypt data exchanged between containers on different nodes on the overlay network.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;By default, data exchanged between containers on different nodes on the overlay network is not encrypted. This could potentially expose traffic between the container nodes.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Create overlay network with --opt encrypted flag.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run the below command and ensure that each overlay network has been encrypted.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker network ls --filter driver=overlay --quiet | xargs docker network inspect --format '{{.Name}} {{ .Options }}'</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D7.8" name="Ensure node certificates are rotated as appropriate" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Rotate swarm node certificates as appropriate.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Docker Swarm uses mutual TLS for clustering operations amongst its nodes. Certificate rotation ensures that in an event such as compromised node or key, it is difficult to impersonate a node. By default, node certificates are rotated every 90 days. You should rotate it more often or as appropriate in your environment.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Run the below command to set the desired expiry time.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker swarm update --cert-expiry 48h&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Run the below command and ensure that the node certificate Expiry Duration is set as appropriate.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker info | grep "Expiry Duration"</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="D7.9" name="Ensure CA certificates are rotated as appropriate" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>Rotate root CA certificates as appropriate.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Rationale:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Docker Swarm uses mutual TLS for clustering operations amongst its nodes. Certificate rotation ensures that in an event such as compromised node or key, it is difficult to impersonate a node. Node certificates depend upon root CA certificates. For operational security, it is important to rotate these frequently. Currently, root CA certificates are not rotated automatically. You should thus establish a process to rotate it at the desired frequency.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Remediation:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;Run the below command to rotate the certificate.&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;docker swarm ca --rotate&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;Impact:&amp;lt;/b&amp;gt; &amp;lt;br /&amp;gt;None</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>Based on your installation path, check the time stamp on the root CA certificate file.&amp;lt;br /&amp;gt;For example,&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;ls -l /var/lib/docker/swarm/certificates/swarm-root-ca.crt&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;The certificate should have been rotated at the established frequency.</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-12-14T14:35:41">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="DOCKER AUTHENTICATION AND AUTHORIZATION" name="Docker Authentication and Authorization" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D7.6" mitigation="33"/>
                                <control ref="D7.2" mitigation="33"/>
                                <control ref="D7.7" mitigation="33"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CSD-SESS-REAUTH">
                                    <controls>
                                        <control ref="D7.6" mitigation="33"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-732">
                                    <controls>
                                        <control ref="D7.2" mitigation="33"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-324">
                                    <controls>
                                        <control ref="D7.7" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="DOCKER GENERAL" name="Docker General" desc="" library="">
                    <threats>
                        <threat ref="OWASP A6:2017" name="Exploitation of Security Misconfiguration" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Attackers will often attempt to exploit&amp;lt;br /&amp;gt;unpatched flaws or access default&amp;lt;br /&amp;gt;accounts, unused pages, unprotected&amp;lt;br /&amp;gt;files and directories, etc to gain&amp;lt;br /&amp;gt;unauthorized access or knowledge of&amp;lt;br /&amp;gt;the system.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D7.10" mitigation="25"/>
                                <control ref="D7.1" mitigation="25"/>
                                <control ref="D7.3" mitigation="25"/>
                                <control ref="D7.5" mitigation="25"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-485">
                                    <controls>
                                        <control ref="D7.10" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-2">
                                    <controls>
                                        <control ref="D7.1" mitigation="25"/>
                                        <control ref="D7.3" mitigation="25"/>
                                        <control ref="D7.5" mitigation="25"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="DOCKER NETWORKING" name="Docker Networking" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-157" name="Sniffing Attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D7.4" mitigation="50"/>
                                <control ref="D7.6" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-311">
                                    <controls>
                                        <control ref="D7.4" mitigation="50"/>
                                        <control ref="D7.6" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-94" name="Man in the Middle Attack" state="Expose" source="MANUAL" owner="" library="">
                            <desc>This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed on to the other component as if it was never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identify between two components.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D7.8" mitigation="50"/>
                                <control ref="D7.9" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-287">
                                    <controls>
                                        <control ref="D7.8" mitigation="50"/>
                                        <control ref="D7.9" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="DOCKER-WIDE-ATTACK-SURFACE" name="Exploitation of a wide attack surface" state="Expose" source="MANUAL" owner="" library="">
                            <desc>Every point of network interaction is a potential part of the network attack surface having exploitable vulnerabilities.</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="D7.1" mitigation="50"/>
                                <control ref="D7.3" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="UNRESTRICTED-NETWORK">
                                    <controls>
                                        <control ref="D7.1" mitigation="50"/>
                                        <control ref="D7.3" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
    </components>
    <rules/>
</project>
