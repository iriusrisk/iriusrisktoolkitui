Category|Ref|Req.|Included
OWASP-ASVS-Level-1|OWASP-ASVS-Level-1||
V1. Architecture, design and threat modelling|1.1|Verify that all application components are identified and are known to be needed.|x
V1. Architecture, design and threat modelling|1.2|Verify that all components, such as libraries, modules, and external systems, that are not part of the application but that the application relies on to operate are identified.|x
V1. Architecture, design and threat modelling|1.3|Verify that a high-level architecture for the application has been defined.|x
V1. Architecture, design and threat modelling|1.4|Verify that all application components are defined in terms of the business functions and/or security functions they provide.|x
V1. Architecture, design and threat modelling|1.5|Verify that all components that are not part of the application but that the application relies on to operate are defined in terms of the functions, and/or security functions, they provide.|x
V1. Architecture, design and threat modelling|1.6|Verify that a threat model for the target application has been produced and covers off risks associated with Spoofing, Tampering, Repudiation, Information Disclosure, and Elevation of privilege (STRIDE).|x
V1. Architecture, design and threat modelling|1.7|Verify all security controls (including libraries that call external security services) have a centralized implementation.|x
V1. Architecture, design and threat modelling|1.8|Verify that components are segregated from each other via a defined security control, such as network segmentation, firewall rules, or cloud based security groups.|x
V1. Architecture, design and threat modelling|1.9|Verify the application has a clear separation between the data layer, controller layer and the display layer, such that security decisions can be enforced on trusted systems.|x
V1. Architecture, design and threat modelling|1.10|Verify that there is no sensitive business logic, secret keys or other proprietary information in client side code.|x
V1. Architecture, design and threat modelling|1.11|Verify that all application components, libraries, modules, frameworks, platform, and operating systems are free from known vulnerabilities.|x
V2: Authentication Verification Requirements|2.1|Verify all pages and resources by default require authentication except those specifically intended to be public (Principle of complete mediation).|x
V2: Authentication Verification Requirements|2.2|Verify that forms containing credentials are not filled in by the application. Pre-filling by the application implies that credentials are stored in plaintext or a reversible format, which is explicitly prohibited. |x
V2: Authentication Verification Requirements|2.4|Verify all authentication controls are enforced on the server side.|x
V2: Authentication Verification Requirements|2.6|Verify all authentication controls fail securely to ensure attackers cannot log in.|x
V2: Authentication Verification Requirements|2.7|Verify password entry fields allow, or encourage, the use of passphrases, and do not prevent password managers, long passphrases or highly complex passwords being entered.|x
V2: Authentication Verification Requirements|2.8|Verify all account identity authentication functions (such as update profile, forgot password, disabled/lost token, help desk or IVR) that might regain access to the account are at least as resistant to attack as the primary authentication mechanism.|x
V2: Authentication Verification Requirements|2.9|Verify that the changing password functionality includes the old password, the new password, and a password confirmation.|x
V2: Authentication Verification Requirements|2.12|Verify that all authentication decisions can be logged, without storing sensitive session identifiers or passwords. This should include requests with relevant metadata needed for security investigations.|x
V2: Authentication Verification Requirements|2.13|Verify that account passwords are one way hashed with a salt, and there is sufficient work factor to defeat brute force and password hash recovery attacks. |x
V2: Authentication Verification Requirements|2.16|Verify that credentials are transported using a suitable encrypted link and that all pages/functions that require a user to enter credentials are done so using an encrypted link.|x
V2: Authentication Verification Requirements|2.17|Verify that the forgotten password function and other recovery paths do not reveal the current password and that the new password is not sent in clear text to the user.|x
V2: Authentication Verification Requirements|2.18|Verify that information enumeration is not possible via login, password reset, or forgot account functionality.|x
V2: Authentication Verification Requirements|2.19|Verify there are no default passwords in use for the application framework or any components used by the application (such as 'admin/password'.|x
V2: Authentication Verification Requirements|2.20|Verify that anti-automation is in place to prevent breached credential testing, brute forcing, and account lockout attacks.|x
V2: Authentication Verification Requirements|2.21|Verify that all authentication credentials for accessing services external to the application are encrypted and stored in a protected location.|x
V2: Authentication Verification Requirements|2.22|Verify that forgotten password and other recovery paths use a TOTP or other soft token, mobile push, or other offline recovery mechanism. Use of a random value in an e-mail or SMS should be a last resort and is known weak.|x
V2: Authentication Verification Requirements|2.23|Verify that account lockout is divided into soft and hard lock status, and these are not mutually exclusive. If an account is temporarily soft locked out due to a brute force attack, this should not reset the hard lock status.|x
V2: Authentication Verification Requirements|2.24|"Verify that if shared knowledge based questions (also known as ""secret questions"") are required, the questions do not violate privacy laws and are sufficiently strong to protect accounts from malicious recovery. "|x
V2: Authentication Verification Requirements|2.25|Verify that the system can be configured to disallow the use of a configurable number of previous passwords.|x
V2: Authentication Verification Requirements|2.26|Verify that risk based re-authentication, two factor or transaction signing is in place for high value transactions. |x
V2: Authentication Verification Requirements|2.27|Verify that measures are in place to block the use of commonly chosen passwords and weak passphrases.|x
V2: Authentication Verification Requirements|2.28|Verify that all authentication challenges, whether successful or failed, should respond in the same average response time.|x
V2: Authentication Verification Requirements|2.29|Verify that secrets, API keys, and passwords are not included in the source code, or online source code repositories.|x
V2: Authentication Verification Requirements|2.31|Verify that if an application allows users to authenticate, they can authenticate using two-factor authentication or other strong authentication, or any similar scheme that provides protection against username + password disclosure.|x
V2: Authentication Verification Requirements|2.32|Verify that administrative interfaces are not accessible to untrusted parties.|x
V2: Authentication Verification Requirements|2.33|Browser autocomplete, and integration with password managers are permitted unless prohibited by risk based policy.|x
V3: Session Management Verification Requirements|3.1|Verify that there is no custom session manager, or that the custom session manager is resistant against all common session management attacks.|x
V3: Session Management Verification Requirements|3.2|Verify that sessions are invalidated when the user logs out.|x
V3: Session Management Verification Requirements|3.3|Verify that sessions timeout after a specified period of inactivity.|x
V3: Session Management Verification Requirements|3.4|Verify that sessions timeout after an administratively-configurable maximum time period regardless of activity (an absolute timeout).|x
V3: Session Management Verification Requirements|3.5|Verify that all pages that require authentication have easy and visible access to logout functionality.|x
V3: Session Management Verification Requirements|3.6|Verify that the session id is never disclosed in URLs, error messages, or logs. This includes verifying that the application does not support URL rewriting of session cookies.|x
V3: Session Management Verification Requirements|3.7|Verify that all successful authentication and re-authentication generates a new session and session id.|x
V3: Session Management Verification Requirements|3.10|Verify that only session ids generated by the application framework are recognized as active by the application.|x
V3: Session Management Verification Requirements|3.11|Verify that session ids are sufficiently long, random and unique across the correct active session base.|x
V3: Session Management Verification Requirements|3.12|Verify that session ids stored in cookies have their path set to an appropriately restrictive value for the application, and authentication session tokens additionally set the ??ttpOnly??and ??ecure??attributes|x
V3: Session Management Verification Requirements|3.16|Verify that the application limits the number of active concurrent sessions.|x
V3: Session Management Verification Requirements|3.17|Verify that an active session list is displayed in the account profile or similar of each user. The user should be able to terminate any active session.|x
V3: Session Management Verification Requirements|3.18|Verify the user is prompted with the option to terminate all other active sessions after a successful change password process.|x
V4: Access Control Verification Requirements|4.1|Verify that the principle of least privilege exists - users should only be able to access functions, data files, URLs, controllers, services, and other resources, for which they possess specific authorization. This implies protection against spoofing and elevation of privilege.|x
V4: Access Control Verification Requirements|4.4|Verify that access to sensitive records is protected, such that only authorized objects or data is accessible to each user (for example, protect against users tampering with a parameter to see or alter another user's account).|x
V4: Access Control Verification Requirements|4.5|Verify that directory browsing is disabled unless deliberately desired. Additionally, applications should not allow discovery or disclosure of file or directory metadata, such as Thumbs.db, .DS_Store, .git or .svn folders.|x
V4: Access Control Verification Requirements|4.8|Verify that access controls fail securely.|x
V4: Access Control Verification Requirements|4.9|Verify that the same access control rules implied by the presentation layer are enforced on the server side.|x
V4: Access Control Verification Requirements|4.10|Verify that all user and data attributes and policy information used by access controls cannot be manipulated by end users unless specifically authorized.|x
V4: Access Control Verification Requirements|4.11|Verify that there is a centralized mechanism (including libraries that call external authorization services) for protecting access to each type of protected resource.|x
V4: Access Control Verification Requirements|4.12|Verify that all access control decisions can be logged and all failed decisions are logged.|x
V4: Access Control Verification Requirements|4.13|Verify that the application or framework uses strong random anti-CSRF tokens or has another transaction protection mechanism.|x
V4: Access Control Verification Requirements|4.14|Verify the system can protect against aggregate or continuous access of secured functions, resources, or data. For example, consider the use of a resource governor to limit the number of edits per hour or to prevent the entire database from being scraped by an individual user.|x
V4: Access Control Verification Requirements|4.15|Verify the application has additional authorization (such as step up or adaptive authentication) for lower value systems, and / or segregation of duties for high value applications to enforce anti-fraud controls as per the risk of application and past fraud.|x
V4: Access Control Verification Requirements|4.16|Verify that the application correctly enforces context-sensitive authorisation so as to not allow unauthorised manipulation by means of parameter tampering.|x
V5: Malicious input handling verification requirements|5.1|Verify that the runtime environment is not susceptible to buffer overflows, or that security controls prevent buffer overflows.|x
V5: Malicious input handling verification requirements|5.3|Verify that server side input validation failures result in request rejection and are logged.|x
V5: Malicious input handling verification requirements|5.5|Verify that input validation routines are enforced on the server side.|x
V5: Malicious input handling verification requirements|5.6|Verify that a single input validation control is used by the application for each type of data that is accepted.|x
V5: Malicious input handling verification requirements|5.10|Verify that all SQL queries, HQL, OSQL, NOSQL and stored procedures, calling of stored procedures are protected by the use of prepared statements or query parameterization, and thus not susceptible to SQL injection|x
V5: Malicious input handling verification requirements|5.11|Verify that the application is not susceptible to LDAP Injection, or that security controls prevent LDAP Injection.|x
V5: Malicious input handling verification requirements|5.12|Verify that the application is not susceptible to OS Command Injection, or that security controls prevent OS Command Injection.|x
V5: Malicious input handling verification requirements|5.13|Verify that the application is not susceptible to Remote File Inclusion (RFI) or Local File Inclusion (LFI) when content is used that is a path to a file.|x
V5: Malicious input handling verification requirements|5.14|Verify that the application is not susceptible to common XML attacks, such as XPath query tampering, XML External Entity attacks, and XML injection attacks.|x
V5: Malicious input handling verification requirements|5.15|Ensure that all string variables placed into HTML or other web client code is either properly contextually encoded manually, or utilize templates that automatically encode contextually to ensure the application is not susceptible to reflected, stored and DOM Cross-Site Scripting (XSS) attacks.|x
V5: Malicious input handling verification requirements|5.16|If the application framework allows automatic mass parameter assignment (also called automatic variable binding) from the inbound request to a model, verify that security sensitive fields such as ?? ccountBalance ?? ?? ole ??or ?? assword ??are protected from malicious automatic binding.|x
V5: Malicious input handling verification requirements|5.17|Verify that the application has defenses against HTTP parameter pollution attacks, particularly if the application framework makes no distinction about the source of request parameters (GET, POST, cookies, headers, environment, etc.)|x
V5: Malicious input handling verification requirements|5.18|Verify that client side validation is used as a second line of defense, in addition to server side validation.|x
V5: Malicious input handling verification requirements|5.19|Verify that all input data is validated, not only HTML form fields but all sources of input such as REST calls, query parameters, HTTP headers, cookies, batch files, RSS feeds, etc; using positive validation (whitelisting), then lesser forms of validation such as greylisting (eliminating known bad strings), or rejecting bad inputs (blacklisting).|x
V5: Malicious input handling verification requirements|5.20|Verify that structured data is strongly typed and validated against a defined schema including allowed characters, length and pattern (e.g. credit card numbers or telephone, or validating that two related fields are reasonable, such as validating suburbs and zip or post codes match).|x
V5: Malicious input handling verification requirements|5.21|Verify that unstructured data is sanitized to enforce generic safety measures such as allowed characters and length, and characters potentially harmful in given context should be escaped (e.g. natural names with Unicode or apostrophes, such as ?��? or O'Hara)|x
V5: Malicious input handling verification requirements|5.22|Make sure untrusted HTML from WYSIWYG editors or similar are properly sanitized with an HTML sanitizer and handle it appropriately according to the input validation task and encoding task.|x
V5: Malicious input handling verification requirements|5.23|For auto-escaping template technology, if UI escaping is disabled, ensure that HTML sanitization is enabled instead.|x
V5: Malicious input handling verification requirements|5.24|Verify that data transferred from one DOM context to another, uses safe JavaScript methods, such as using .innerText and .val.|x
V5: Malicious input handling verification requirements|5.25|Verify when parsing JSON in browsers, that JSON.parse is used to parse JSON on the client. Do not use eval() to parse JSON on the client.|x
V5: Malicious input handling verification requirements|5.26|Verify that authenticated data is cleared from client storage, such as the browser DOM, after the session is terminated.|x
V7: Cryptography at rest verification requirements|7.2|Verify that all cryptographic modules fail securely, and errors are handled in a way that does not enable oracle padding.|x
V7: Cryptography at rest verification requirements|7.6|Verify that all random numbers, random file names, random GUIDs, and random strings are generated using the cryptographic module?? approved random number generator when these random values are intended to be not guessable by an attacker.|x
V7: Cryptography at rest verification requirements|7.7|Verify that cryptographic algorithms used by the application have been validated against FIPS 140-2 or an equivalent standard.|x
V7: Cryptography at rest verification requirements|7.8|Verify that cryptographic modules operate in their approved mode according to their published security policies.|x
V7: Cryptography at rest verification requirements|7.9|Verify that there is an explicit policy for how cryptographic keys are managed (e.g., generated, distributed, revoked, and expired). Verify that this key lifecycle is properly enforced.|x
V7: Cryptography at rest verification requirements|7.11|Verify that all consumers of cryptographic services do not have direct access to key material. Isolate cryptographic processes, including master secrets and consider the use of a virtualized or physical hardware key vault (HSM). |x
V7: Cryptography at rest verification requirements|7.12|Personally Identifiable Information should be stored encrypted at rest and ensure that communication goes via protected channels.|x
V7: Cryptography at rest verification requirements|7.13|Verify that sensitive passwords or key material maintained in memory is overwritten with zeros as soon as it no longer required, to mitigate memory dumping attacks.|x
V7: Cryptography at rest verification requirements|7.14|Verify that all keys and passwords are replaceable, and are generated or replaced at installation time.|x
V7: Cryptography at rest verification requirements|7.15|Verify that random numbers are created with proper entropy even when the application is under heavy load, or that the application degrades gracefully in such circumstances.|x
V8: Error handling and logging verification requirements|8.1|Verify that the application does not output error messages or stack traces containing sensitive data that could assist an attacker, including session id, software/framework versions and personal information|x
V8: Error handling and logging verification requirements|8.2|Verify that error handling logic in security controls denies access by default.|x
V8: Error handling and logging verification requirements|8.3|Verify security logging controls provide the ability to log success and particularly failure events that are identified as security-relevant.|x
V8: Error handling and logging verification requirements|8.4|Verify that each log event includes necessary information that would allow for a detailed investigation of the timeline when an event happens.|x
V8: Error handling and logging verification requirements|8.5|Verify that all events that include untrusted data will not execute as code in the intended log viewing software.|x
V8: Error handling and logging verification requirements|8.6|Verify that security logs are protected from unauthorized access and modification.|x
V8: Error handling and logging verification requirements|8.7|Verify that the application does not log sensitive data as defined under local privacy laws or regulations, organizational sensitive data as defined by a risk assessment, or sensitive authentication data that could assist an attacker, including user?? session identifiers, passwords, hashes, or API tokens.|x
V8: Error handling and logging verification requirements|8.8|Verify that all non-printable symbols and field separators are properly encoded in log entries, to prevent log injection.|x
V8: Error handling and logging verification requirements|8.9|Verify that log fields from trusted and untrusted sources are distinguishable in log entries.|x
V8: Error handling and logging verification requirements|8.10|Verify that an audit log or similar allows for non-repudiation of key transactions.|x
V8: Error handling and logging verification requirements|8.11|Verify that security logs have some form of integrity checking or controls to prevent unauthorized modification.|x
V8: Error handling and logging verification requirements|8.12|Verify that the logs are stored on a different partition than the application is running with proper log rotation.|x
V8: Error handling and logging verification requirements|8.13|Time sources should be synchronized to ensure logs have the correct time|x
V9: Data protection verification requirements|9.1|Verify that all forms containing sensitive information have disabled client side caching, including autocomplete features.|x
V9: Data protection verification requirements|9.2|Verify that the list of sensitive data processed by the application is identified, and that there is an explicit policy for how access to this data must be controlled, encrypted and enforced under relevant data protection directives.|x
V9: Data protection verification requirements|9.3|Verify that all sensitive data is sent to the server in the HTTP message body or headers (i.e., URL parameters are never used to send sensitive data).|x
V9: Data protection verification requirements|9.4|Verify that the application sets appropriate anti-caching headers as per the risk of the application|x
V9: Data protection verification requirements|9.5|Verify that on the server, all cached or temporary copies of sensitive data stored are protected from unauthorized access or purged/invalidated after the authorized user accesses the sensitive data.|x
V9: Data protection verification requirements|9.6|Verify that there is a method to remove each type of sensitive data from the application at the end of the required retention policy.|x
V9: Data protection verification requirements|9.7|Verify the application minimizes the number of parameters in a request, such as hidden fields, Ajax variables, cookies and header values.|x
V9: Data protection verification requirements|9.8|Verify the application has the ability to detect and alert on abnormal numbers of requests for data harvesting for an example screen scraping.|x
V9: Data protection verification requirements|9.9|Verify that data stored in client side storage (such as HTML5 local storage, session storage, IndexedDB, regular cookies or Flash cookies) does not contain sensitive data or PII.|x
V9: Data protection verification requirements|9.10|Verify accessing sensitive data is logged, if the data is collected under relevant data protection directives or where logging of accesses is required.|x
V9: Data protection verification requirements|9.11|Verify that sensitive information maintained in memory is overwritten with zeros as soon as it no longer required, to mitigate memory dumping attacks.|x
V10: Communications security verification requirements|10.1|Verify that a path can be built from a trusted CA to each Transport Layer Security (TLS) server certificate, and that each server certificate is valid.|x
V10: Communications security verification requirements|10.3|Verify that TLS is used for all connections (including both external and backend connections) that are authenticated or that involve sensitive data or functions, and does not fall back to insecure or unencrypted protocols. Ensure the strongest alternative is the preferred algorithm.|x
V10: Communications security verification requirements|10.4|Verify that backend TLS connection failures are logged.|x
V10: Communications security verification requirements|10.5|Verify that certificate paths are built and verified for all client certificates using configured trust anchors and revocation information.|x
V10: Communications security verification requirements|10.6|Verify that all connections to external systems that involve sensitive information or functions are authenticated.|x
V10: Communications security verification requirements|10.8|Verify that there is a single standard TLS implementation that is used by the application that is configured to operate in an approved mode of operation.|x
V10: Communications security verification requirements|10.10|Verify that TLS certificate public key pinning (HPKP) is implemented with production and backup public keys. For more information, please see the references below. |x
V10: Communications security verification requirements|10.11|Verify that HTTP Strict Transport Security headers are included on all requests and for all subdomains, such as Strict-Transport-Security: max-age=15724800; includeSubdomains|x
V10: Communications security verification requirements|10.12|Verify that production website URL has been submitted to preloaded list of Strict Transport Security domains maintained by web browser vendors. Please see the references below.|x
V10: Communications security verification requirements|10.13|Ensure forward secrecy ciphers are in use to mitigate passive attackers recording traffic.|x
V10: Communications security verification requirements|10.14|Verify that proper certification revocation, such as Online Certificate Status Protocol (OSCP) Stapling, is enabled and configured.|x
V10: Communications security verification requirements|10.15|Verify that only strong algorithms, ciphers, and protocols are used, through all the certificate hierarchy, including root and intermediary certificates of your selected certifying authority.|x
V10: Communications security verification requirements|10.16|Verify that the TLS settings are in line with current leading practice, particularly as common configurations, ciphers, and algorithms become insecure.|x
V11: HTTP security configuration verification requirements|11.1|Verify that the application accepts only a defined set of required HTTP request methods, such as GET and POST are accepted, and unused methods (e.g. TRACE, PUT, and DELETE) are explicitly blocked.|x
V11: HTTP security configuration verification requirements|11.2|Verify that every HTTP response contains a content type header specifying a safe character set (e.g., UTF-8, ISO 8859-1).|x
V11: HTTP security configuration verification requirements|11.3|Verify that HTTP headers added by a trusted proxy or SSO devices, such as a bearer token, are authenticated by the application.|x
V11: HTTP security configuration verification requirements|11.4|Verify that a suitable X-FRAME-OPTIONS header is in use for sites where content should not be viewed in a 3rd-party X-Frame|x
V11: HTTP security configuration verification requirements|11.5|Verify that the HTTP headers or any part of the HTTP response do not expose detailed version information of system components.|x
V11: HTTP security configuration verification requirements|11.6|"Verify that all API responses contain X-Content-Type-Options: nosniff and Content-Disposition: attachment; filename=""api.json"" (or other appropriate filename for the content type)."|x
V11: HTTP security configuration verification requirements|11.7|Verify that a content security policy (CSPv2) is in place that helps mitigate common DOM, XSS, JSON, and JavaScript injection vulnerabilities. |x
V11: HTTP security configuration verification requirements|11.8|Verify that the X-XSS-Protection: 1; mode=block header is in place.|x
V13: Malicious controls verification requirements|13.1|Verify all malicious activity is adequately sandboxed, containerized or isolated to delay and deter attackers from attacking other applications.|x
V13: Malicious controls verification requirements|13.2|Verify that the application source code, and as many third party libraries as possible, does not contain back doors, Easter eggs, and logic flaws in authentication, access control, input validation, and the business logic of high value transactions. |x
V15: Business logic verification requirements|15.1|Verify the application will only process business logic flows in sequential step order, with all steps being processed in realistic human time, and not process out of order, skipped steps, process steps from another user, or too quickly submitted transactions.|x
V15: Business logic verification requirements|15.2|Verify the application has business limits and correctly enforces on a per user basis, with configurable alerting and automated reactions to automated or unusual attack.|x
V16: Files and resources verification requirements|16.1|Verify that URL redirects and forwards only allow whitelisted destinations, or show a warning when redirecting to potentially untrusted content.|x
V16: Files and resources verification requirements|16.2|Verify that untrusted file data submitted to the application is not used directly with file I/O commands, particularly to protect against path traversal, local file include, file mime type, and OS command injection vulnerabilities.|x
V16: Files and resources verification requirements|16.3|Verify that files obtained from untrusted sources are validated to be of expected type and scanned by antivirus scanners to prevent upload of known malicious content.|x
V16: Files and resources verification requirements|16.4|Verify that untrusted data is not used within inclusion, class loader, or reflection capabilities to prevent remote/local file inclusion vulnerabilities.|x
V16: Files and resources verification requirements|16.5|Verify that untrusted data is not used within cross-domain resource sharing (CORS) to protect against arbitrary remote content.|x
V16: Files and resources verification requirements|16.6|Verify that files obtained from untrusted sources are stored outside the webroot, with limited permissions, preferably with strong validation.|x
V16: Files and resources verification requirements|16.7|Verify that the web or application server is configured by default to deny access to remote resources or systems outside the web or application server.|x
V16: Files and resources verification requirements|16.8|Verify the application code does not execute uploaded data obtained from untrusted sources.|x
V16: Files and resources verification requirements|16.9|Do not use Flash, Active-X, Silverlight, NACL, client-side Java or other client side technologies not supported natively via W3C browser standards.|x
V17: Mobile verification requirements|17.1|Verify that ID values stored on the device and retrievable by other applications, such as the UDID or IMEI number are not used as authentication tokens.|x
V17: Mobile verification requirements|17.2|Verify that the mobile app does not store sensitive data onto potentially unencrypted shared resources on the device (e.g. SD card or shared folders).|x
V17: Mobile verification requirements|17.3|Verify that sensitive data is not stored unprotected on the device, even in system protected areas such as key chains.|x
V17: Mobile verification requirements|17.4|Verify that secret keys, API tokens, or passwords are dynamically generated in mobile applications.|x
V17: Mobile verification requirements|17.5|Verify that the mobile app prevents leaking of sensitive information (for example, screenshots are saved of the current application as the application is backgrounded or writing sensitive information in console).|x
V17: Mobile verification requirements|17.6|Verify that the application is requesting minimal permissions for required functionality and resources.|x
V17: Mobile verification requirements|17.7|Verify that the application sensitive code is laid out unpredictably in memory (For example ASLR).|x
V17: Mobile verification requirements|17.8|Verify that there are anti-debugging techniques present that are sufficient enough to deter or delay likely attackers from injecting debuggers into the mobile app (For example GDB).|x
V17: Mobile verification requirements|17.9|Verify that the app does not export sensitive activities, intents, content providers etc., for other mobile apps on the same device to exploit.|x
V17: Mobile verification requirements|17.10|Verify that sensitive information maintained in memory is overwritten with zeros as soon as it no longer required, to mitigate memory dumping attacks.|x
V17: Mobile verification requirements|17.11|Verify that the app validates input to exported activities, intents, or content providers.|x
V18: Web services verification requirements|18.1|Verify that the same encoding style is used between the client and the server.|x
V18: Web services verification requirements|18.2|Verify that access to administration and management functions within the Web Service Application is limited to web service administrators.|x
V18: Web services verification requirements|18.3|Verify that XML or JSON schema is in place and verified before accepting input.|x
V18: Web services verification requirements|18.4|Verify that all input is limited to an appropriate size limit.|x
V18: Web services verification requirements|18.5|Verify that SOAP based web services are compliant with Web Services-Interoperability (WS-I) Basic Profile at minimum. This essentially means TLS encryption. |x
V18: Web services verification requirements|18.6|"Verify the use of session-based authentication and authorization. Please refer to sections 2, 3 and 4 for further guidance. Avoid the use of static ""API keys"" and similar."|x
V18: Web services verification requirements|18.7|Verify that the REST service is protected from Cross-Site Request Forgery via the use of at least one or more of the following: ORIGIN checks, double submit cookie pattern, CSRF nonces, and referrer checks.|x
V18: Web services verification requirements|18.8|Verify the REST service explicitly check the incoming Content-Type to be the expected one, such as application/xml or application/json.|x
V18: Web services verification requirements|18.9|Verify that the message payload is signed to ensure reliable transport between client and service, using JSON Web Signing or WS-Security for SOAP requests.|x
V18: Web services verification requirements|18.10|Verify that alternative and less secure access paths do not exist.|x
V19. Configuration|19.1|All components should be up to date with proper security configuration(s) and version(s). This should include removal of unneeded configurations and folders such as sample applications, platform documentation, and default or example users.|x
V19. Configuration|19.2|Communications between components, such as between the application server and the database server, should be encrypted, particularly when the components are in different containers or on different systems.|x
V19. Configuration|19.3|Communications between components, such as between the application server and the database server should be authenticated using an account with the least necessary privileges.|x
V19. Configuration|19.4|Verify application deployments are adequately sandboxed, containerized or isolated to delay and deter attackers from attacking other applications.|x
V19. Configuration|19.5|Verify that the application build and deployment processes are performed in a secure fashion.|x
V19. Configuration|19.6|Verify that authorised administrators have the capability to verify the integrity of all security-relevant configurations to ensure that they have not been tampered with.|x
V19. Configuration|19.7|Verify that all application components are signed.|x
V19. Configuration|19.8|Verify that third party components come from trusted repositories.|x
V19. Configuration|19.9|Ensure that build processes for system level languages have all security flags enabled, such as ASLR, DEP, and security checks.|x
V19. Configuration|19.10|Verify that all application assets are hosted by the application, such as JavaScript libraries, CSS stylesheets and web fonts are hosted by the application rather than rely on a CDN or external provider.|x
