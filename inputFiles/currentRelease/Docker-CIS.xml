<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (c) 2012-2019 Continuum Security.  All rights reserved.
     The content of this library is the property of Continuum Security SL and may only be used in whole or in part with a valid license for IriusRisk. -->
<project ref='Docker CIS' name='Docker CIS' revision='9' type='LIBRARY' status='OPEN' enabled='true' priority='0' tags=''>
  <desc>&lt;div&gt;
        This library provides a baseline set of risks for anyone implementing a Docker environment. The risk pattern
        contents were obtained from the CIS Benchmark &amp;quot;CIS Docker Community Edition Benchmark v1.1.0&amp;quot;.
        This benchmark covers Docker based environments on Linux OS hosts with &amp;quot;Docker Swarm&amp;quot; as
        an Docker orchestration tool.
        &lt;/div&gt;
    </desc>
  <categoryComponents>
    <categoryComponent ref='docker-category' name='Docker' />
  </categoryComponents>
  <componentDefinitions>
    <componentDefinition ref='docker-environment' name='Docker Environment' desc='' categoryRef='docker-category'>
      <riskPatterns>
        <riskPattern ref='DOCKER' />
      </riskPatterns>
    </componentDefinition>
  </componentDefinitions>
  <supportedStandards>
    <supportedStandard ref='Level 1 - Linux Host OS' name='CIS Docker Linux Host OS Level 1' />
    <supportedStandard ref='Level 2 - Docker' name='CIS Docker - Level 2' />
    <supportedStandard ref='Level 1 - Docker' name='CIS Docker - Level 1' />
  </supportedStandards>
  <udts />
  <components>
    <component ref='DOCKER-CONTAINER-RUNTIME' name='Docker Container Runtime' desc='The ways in which a container is started governs a lot of the security implications. It is possible to provide potentially dangerous runtime parameters that might compromise the host and other containers on the host. Verifying container runtime is thus very important. This Risk Pattern contains various recommendations to assess the container runtime.' groupName='' tags='' position='2' library='' diagramPositionX='0' diagramPositionY='0' componentDefinitionRef=''>
      <weaknesses>
        <weakness ref='CWE-250' name='Execution with Unnecessary Privileges' state='0' impact='100'>
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses. New
                        weaknesses can be exposed because running with extra privileges, such as root or Administrator,
                        can disable the normal security checks being performed by the operating system or surrounding
                        environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur
                        while operating at raised privileges.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Privilege management functions can behave in some less-than-obvious ways, and they have
                        different quirks on different platforms. These inconsistencies are particularly pronounced if
                        you are transitioning from one non-root user to another. Signal handlers and spawned processes
                        run at the privilege of the owning process, so if a process is running as root when a signal
                        fires or a sub-process is executed, the signal handler or sub-process will operate with root
                        privileges.
                        &lt;/div&gt;
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:05.980'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-250: Execution with Unnecessary Privileges' url='https://cwe.mitre.org/data/definitions/250.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-276' name='Incorrect Default Permissions' state='0' impact='100'>
          <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to
                        an unintended actor.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:05.950'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-276: Incorrect Default Permissions' url='https://cwe.mitre.org/data/definitions/276.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-732' name='Incorrect Permission Assignment for Critical Resource' state='0' impact='100'>
          <desc>The software specifies permissions for a security-critical resource in a way that allows that
                        resource to be read or modified by unintended actors.
                        When a resource is given a permissions setting that provides access to a wider range of actors
                        than required, it could lead to the exposure of sensitive information, or the modification of
                        that resource by unintended parties. This is especially dangerous when the resource is related
                        to program configuration, execution or sensitive user data.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:05.995'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-732: Incorrect Permission Assignment for Critical Resource' url='https://cwe.mitre.org/data/definitions/732.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-200' name='Information Exposure' state='0' impact='100'>
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:06.066'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-200: Information Exposure' url='https://cwe.mitre.org/data/definitions/200.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='UNPATCHED-SERVER' name='Recommended security patches are not applied' state='0' impact='100'>
          <desc>When patches are not applied in a timely manner then the server or system could be vulnerable
                        to known security issues. These issues could be used by an attacker to gain access to the
                        system.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:06.039'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </weakness>
        <weakness ref='UNRESTRICTED-NETWORK' name='Service is exposed to a wide attack surface' state='0' impact='100'>
          <desc>The product is exposed or reachable to an unnecessarily large group of potential attackers. An
                        over-exposure of a component increases the chance of an attacker gaining access to the system
                        through a vulnerability.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:06.081'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-485' name='The application does not define isolated boundaries (Insufficient Encapsulation)' state='0' impact='100'>
          <desc>The application does not sufficiently encapsulate critical data or functionality.
                        Encapsulation is about drawing strong boundaries. In a web browser that might mean ensuring your
                        mobile code cannot be abused by other mobile code. On the server it might mean differentiation
                        between validated data and unvalidated data, between one user's data and another's, or between
                        data users are allowed to see and data they are not.

                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:06.010'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-485: The application does not define isolated boundaries (Insufficient Encapsulation)' url='https://cwe.mitre.org/data/definitions/485.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-400' name='Uncontrolled Resource Consumption (&apos;Resource Exhaustion&apos;)' state='0' impact='100'>
          <desc>The software does not properly restrict the size or amount of resources that are requested or
                        influenced by an actor, which can be used to consume more resources than intended.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:06.051'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-400: Uncontrolled Resource Consumption (&apos;Resource Exhaustion&apos;)' url='https://cwe.mitre.org/data/definitions/400.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-2' name='Unexpected Environment Condition' state='0' impact='100'>
          <desc>This is a generic weakness that includes several different situations, they are all related to
                        unexpected environmental conditions and they could be related to:&amp;nbsp;
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Misconfiguration.&lt;/li&gt;
                        &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                        behavior.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:06.024'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-2: Unexpected Environment Condition' url='https://cwe.mitre.org/data/definitions/2.html' />
            </references>
            <udts />
          </test>
        </weakness>
      </weaknesses>
      <controls>
        <control ref='D5.1' name='Ensure AppArmor Profile is Enabled' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>AppArmor is an effective and easy-to-use Linux application security system. It is available on
                        quite a few Linux distributions by default such as Debian and Ubuntu. Rationale: AppArmor
                        protects the Linux OS and applications from various threats by enforcing security policy which
                        is also known as AppArmor profile. You can create your own AppArmor profile for containers or
                        use the Docker's default AppArmor profile. This would enforce security policies on the
                        containers as defined in the profile.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If AppArmor is applicable for your Linux OS, use it. You may have to follow below set of steps:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Verify if AppArmor is installed. If not, install it.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create or import an AppArmor profile for Docker containers.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Put this profile in enforcing mode.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Start your Docker container using the customized AppArmor profile. For example,&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --security-opt=&amp;quot;apparmor:PROFILENAME&amp;quot; centos
                        /bin/bash
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;Alternatively, you can keep the docker's default apparmor profile.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The container (process) would have a set of restrictions as defined in the AppArmor profile. If
                        your AppArmor profile is mis-configured, then the container may not entirely work as expected.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Apparmor' url='https://docs.docker.com/engine/security/apparmor/' />
            <reference name='Docker docs: other kernel security features' url='https://docs.docker.com/engine/security/security/#other-kernel-security-features' />
            <reference name='Docker docs: security configuration' url='https://docs.docker.com/engine/reference/run/#security-configuration' />
          </references>
          <standards>
            <standard ref='5.1' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: AppArmorProfile={{
                            .AppArmorProfile }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return a valid AppArmor Profile for each container instance.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.24' name='Ensure cgroup usage is confirmed' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>It is possible to attach to a particular cgroup on container run. Confirming cgroup usage
                        would ensure that containers are running under defined cgroups.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        System administrators typically define cgroups under which containers are supposed to run. Even
                        if cgroups are not explicitly defined by the system administrators, containers run under docker
                        cgroup by default. At run-time, it is possible to attach to a different cgroup other than the
                        one that was expected to be used. This usage should be monitored and confirmed. By attaching to
                        a different cgroup than the one that is expected, excess permissions and resources might be
                        granted to the container and thus, can prove to be unsafe.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not use --cgroup-parent option in docker run command unless needed.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: custom cgroups' url='https://docs.docker.com/engine/reference/run/#specify-custom-cgroups' />
            <reference name='Docker redhat: resource management' url='https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Resource_Management_Guide/ch01.html' />
          </references>
          <standards>
            <standard ref='5.24' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: CgroupParent={{
                            .HostConfig.CgroupParent }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command would return the cgroup under which the containers are running. If it is
                            blank, it means containers are running under default docker cgroup. In that case, this
                            recommendation is compliant. If the containers are found to be running under cgroup other
                            than the one that was expected, this recommendation is non-compliant.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.26' name='Ensure container health is checked at runtime' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>If the container image does not have an HEALTHCHECK instruction defined, use --health-cmd
                        parameter at container runtime for checking container health.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        One of the important security triads is availability. If the container image you are using does
                        not have a predefined HEALTHCHECK instruction, use the --health-cmd parameter to check container
                        health at runtime. Based on the reported health status, you could take necessary actions.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Run the container using --health-cmd and the other parameters. For example, docker run -d
                        --health-cmd='stat /etc/passwd || exit 1' nginx&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: run healthcheck' url='https://docs.docker.com/engine/reference/run/#healthcheck' />
          </references>
          <standards>
            <standard ref='5.26' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run the below command and ensure that all the containers are reporting health status:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Health={{ .State.Health.Status
                            }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.11' name='Ensure CPU priority is set appropriately on the container' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>By default, all containers on a Docker host share the resources equally. By using the resource
                        management capabilities of Docker host, such as CPU shares, you can control the host CPU
                        resources that a container may consume.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, CPU time is divided between containers equally. If it is desired, to control the CPU
                        time amongst the container instances, you can use the CPU sharing feature. CPU sharing allows
                        prioritization of one container over the other and forbids the lower priority container claiming
                        CPU resources more often. This ensures that the high priority containers are served better.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Manage the CPU shares between your containers. To do so, start the container using the
                        --cpu-shares argument. For example, you could run a container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --cpu-shares 512 centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        In the above example, the container is started with CPU shares of 50% of what the other
                        containers use. So, if the other container has CPU shares of 80%, this container will have CPU
                        shares of 40%.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note: Every new container will have 1024 shares of CPU by default. However, this value is shown
                        as 0 if you run the command mentioned in the audit section. Alternatively,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Navigate to /sys/fs/cgroup/cpu/system.slice/ directory.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Check your container instance ID using docker ps.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Now, inside the above directory (in step 1), you would have a directory named
                        docker-.scope. For example,
                        docker-4acae729e8659c6be696ee35b2237cc1fe4edd2672e9186434c5116e1a6fbed6.scope. Navigate to this
                        directory.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You will find a file named cpu.shares. Execute cat cpu.shares.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;This will always give you the CPU share value based on the system. So, even if there
                        is no CPU shares configured using -c or --cpu-shares argument in the docker run command, this
                        file will have a value of 1024. If we set one container's CPU shares to 512
                        it will receive half
                        of the CPU time compared to the other container. So, take 1024 as 100% and then do quick math to
                        derive the number that you should set for respective CPU shares. For example, use 512 if you
                        want to set 50% and 256 if you want to set 25%.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If you do not set proper CPU shares, the container process may have to starve if the resources
                        on the host are not available. If the CPU resources on the host are free, CPU shares do not
                        place any restrictions on the CPU that the container may use.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: run metrics' url='https://docs.docker.com/engine/admin/runmetrics/' />
            <reference name='Docker docs: run options' url='https://docs.docker.com/engine/reference/commandline/run/#options' />
            <reference name='Goldmann blog: run options' url='https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/' />
          </references>
          <standards>
            <standard ref='5.11' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: CpuShares={{
                            .HostConfig.CpuShares }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns 0 or 1024, it means the CPU shares are not in place. If the
                            above command returns a non-zero value other than 1024, it means CPU shares are in place.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.27' name='Ensure docker commands always get the latest version of the image' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Always ensure that you are using the latest version of the image within your repository and
                        not the cached older versions.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Multiple docker commands such as docker pull, docker run, etc. are known to have an issue that
                        by default, they extract the local copy of the image, if present, even though there is an
                        updated version of the image with the &amp;quot;same tag&amp;quot; in the upstream repository.
                        This could lead to using older and vulnerable images.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use proper version pinning mechanisms (the latest tag which is assigned by default is still
                        vulnerable to caching attacks) to avoid extracting the cached older versions. Version pinning
                        mechanisms should be used for base images, packages, and entire images too. You can customize
                        version pinning rules as per your requirements.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker github: 16609' url='https://github.com/docker/docker/pull/16609' />
          </references>
          <standards>
            <standard ref='5.27' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;Open your image repository and list the image version history
                            for the image you are inspecting.&amp;nbsp;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; Observe the status when the docker pull command is triggered. If
                            the status is shown as Image is up to date, it means that you are getting the cached version
                            of the image.&amp;nbsp;
                            &lt;div&gt;
                            &lt;b&gt; Step 3:&lt;/b&gt; Match the version of the image you are running with the latest
                            version reported in your repository which tells if you are running the cached version or the
                            latest copy.
                            &lt;/div&gt;
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.22' name='Ensure docker exec commands are not used with privileged option' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Do not use docker exec with --privileged option.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Using --privileged option in docker exec gives extended Linux capabilities to the command. This
                        could be potentially insecure and unsafe to do especially when you are running containers with
                        dropped capabilities or with enhanced restrictions.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not use --privileged option in docker exec command.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None. If you need enhanced capabilities within the container, then run the container with the
                        required capabilities.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: exec' url='https://docs.docker.com/engine/reference/commandline/exec/' />
          </references>
          <standards>
            <standard ref='5.22' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>If you have auditing enabled, you can use the below command to filter out docker exec
                            commands that used --privileged option.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            ausearch -k docker | grep exec | grep privileged
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.23' name='Ensure docker exec commands are not used with user option' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Do not use docker exec with --user option.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Using --user option in docker exec executes the command within the container as that user. This
                        could be potentially insecure and unsafe to do especially when you are running containers with
                        dropped capabilities or with enhanced restrictions. For example, suppose your container is
                        running as tomcat user (or any other non-root user), it would be possible to run a command
                        through docker exec as root with --user=root option. This could be potentially dangerous.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not use --user option in docker exec command.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: exec' url='https://docs.docker.com/engine/reference/commandline/exec/' />
          </references>
          <standards>
            <standard ref='5.23' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>If you have auditing enabled as prescribed in Section 1, you can use the below command to
                            filter out docker exec commands that used --user option.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            ausearch -k docker | grep exec | grep user
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.29' name='Ensure Docker&apos;s default bridge docker0 is not used' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Do not use Docker's default bridge docker0. Use docker's user-defined networks for container
                        networking.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker connects virtual interfaces created in the bridge mode to a common bridge called docker0.
                        This default networking model is vulnerable to ARP spoofing and MAC flooding attacks since there
                        is no filtering applied.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Follow Docker documentation and set up a user-defined network. Run all the containers in the
                        defined network.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You have to manage the user-defined networks.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker arxiv' url='https://arxiv.org/pdf/1501.02967' />
            <reference name='Docker docs: Networking' url='https://docs.docker.com/engine/userguide/networking/' />
            <reference name='Niantec github: narwhal' url='https://github.com/nyantec/narwhal' />
          </references>
          <standards>
            <standard ref='5.29' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run the below command, and verify that containers are on a user-defined network and not
                            the default docker0 bridge.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker network ls --quiet | xargs xargs docker network inspect --format '{{ .Name }}: {{
                            .Options }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.17' name='Ensure host devices are not directly exposed to containers' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Host devices can be directly exposed to containers at runtime. Do not directly expose host
                        devices to containers especially for containers that are not trusted.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The --device option exposes the host devices to the containers and consequently, the containers
                        can directly access such host devices. You would not require the container to run in privileged
                        mode to access and manipulate the host devices. By default, the container will be able to read,
                        write and mknod these devices.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Additionally, it is possible for containers to remove block devices from the host. Hence, do not
                        expose host devices to containers directly. If at all you would want to expose the host device
                        to a container, use the sharing permissions appropriately:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;r - read only&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;w - writable&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;m - mknod allowed&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not directly expose the host devices to containers. If at all you need to expose the host
                        devices to containers, use the correct set of permissions: For example, do not start a container
                        as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --device=/dev/tty0:/dev/tty0:rwm
                        --device=/dev/temp_sda:/dev/temp_sda:rwm centos bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        For example, share the host device with correct permissions:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --device=/dev/tty0:/dev/tty0:rw
                        --device=/dev/temp_sda:/dev/temp_sda:r centos bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact: &lt;/b&gt;You would not be able to use the host devices directly within the
                        containers.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: run options' url='https://docs.docker.com/engine/reference/commandline/run/#options' />
          </references>
          <standards>
            <standard ref='5.17' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Devices={{
                            .HostConfig.Devices }}'
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command would list out each device with below information:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;CgroupPermissions - For example, rwm&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;PathInContainer - Device path within the container&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;PathOnHost - Device path on the host&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;Verify that the host device is required to be accessed from within the container
                            and the permissions required are correctly set. If the above command returns [], then the
                            container does not have access to host devices. This recommendation can be assumed to be
                            compliant.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.13' name='Ensure incoming container traffic is binded to a specific host interface' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>By default, Docker containers can make connections to the outside world, but the outside world
                        cannot connect to containers. Each outgoing connection will appear to originate from one of the
                        host machine's own IP addresses. Only allow container services to be contacted through a
                        specific external interface on the host machine.&amp;nbsp;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If you have multiple network interfaces on your host machine, the container can accept
                        connections on the exposed ports on any network interface. This might not be desired and may not
                        be secured. Many times a particular interface is exposed externally and services such as
                        intrusion detection, intrusion prevention, firewall, load balancing, etc. are run on those
                        interfaces to screen incoming public traffic.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Hence, you should not accept incoming connections on any interface. You should only allow
                        incoming connections from a particular external interface.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Bind the container port to a specific host interface on the desired host port. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --detach --publish 10.2.3.4:49153:80 nginx&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        In the example above, the container port 80 is bound to the host port on 49153 and would accept
                        incoming connection only from 10.2.3.4 external interface. Impact: None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Networking' url='https://docs.docker.com/engine/userguide/networking/' />
          </references>
          <standards>
            <standard ref='5.13' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>List all the running instances of containers and their port mapping by executing the
                            below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Ports={{
                            .NetworkSettings.Ports }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            Review the list and ensure that the exposed container ports are tied to a particular
                            interface and not to the wildcard IP address - 0.0.0.0. For example, if the above command
                            returns as below, then this is non-compliant and the container can accept connections on any
                            host interface on the specified port 49153.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Ports=map[443/tcp: 80/tcp:[map[HostPort:49153 HostIp:0.0.0.0]]]&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            However, if the exposed port is tied to a particular interface on the host as below, then
                            this recommendation is configured as desired and is compliant.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Ports=map[443/tcp: 80/tcp:[map[HostIp:10.2.3.4 HostPort:49153]]]
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.3' name='Ensure Linux Kernel Capabilities are restricted within containers' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>By default, Docker starts containers with a restricted set of Linux Kernel Capabilities. This
                        means that any process may be granted the required capabilities instead of root access. Using
                        Linux Kernel Capabilities, the processes do not have to run as root for almost all the specific
                        areas where root privileges are usually needed.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker supports the addition and removal of capabilities, allowing the use of a non-default
                        profile. This may make Docker more secure through capability removal, or less secure through the
                        addition of capabilities. It is thus recommended to remove all capabilities except those
                        explicitly required for your container process. For example, capabilities such as below are
                        usually not needed for container process: NET_ADMIN SYS_ADMIN SYS_MODULE&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Execute the below command to add needed capabilities:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        $&amp;gt; docker run --cap-add={&amp;quot;Capability 1&amp;quot;,&amp;quot;Capability 2&amp;quot;}&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;For example,&amp;nbsp;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --cap-add={&amp;quot;NET_ADMIN&amp;quot;,&amp;quot;SYS_ADMIN&amp;quot;}
                        centos:latest /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;Execute the below command to drop unneeded capabilities:&amp;nbsp;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        $&amp;gt; docker run --cap-drop={&amp;quot;Capability 1&amp;quot;,&amp;quot;Capability 2&amp;quot;}&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --cap-drop={&amp;quot;SETUID&amp;quot;,&amp;quot;SETGID&amp;quot;}
                        centos:latest /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Alternatively, You may choose to drop all capabilities and add only the needed ones:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        $&amp;gt; docker run --cap-drop=all --cap-add={&amp;quot;Capability 1&amp;quot;,&amp;quot;Capability
                        2&amp;quot;}&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --cap-drop=all --cap-add= &amp;quot;NET_ADMIN&amp;quot;,&amp;quot;SYS_ADMIN&amp;quot;}
                        centos:latest /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Based on what Linux Kernel Capabilities were added or dropped, restrictions within the container
                        would apply.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Linux kernel capabilities' url='https://docs.docker.com/engine/security/security/#linux-kernel-capabilities' />
            <reference name='Docker linux: capabilities' url='http://man7.org/linux/man-pages/man7/capabilities.7.html' />
            <reference name='Docker oreily: Docker security' url='http://www.oreilly.com/webops-perf/free/files/docker-security.pdf' />
          </references>
          <standards>
            <standard ref='5.3' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: CapAdd={{
                            .HostConfig.CapAdd }} CapDrop={{ .HostConfig.CapDrop }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Verify that the added and dropped Linux Kernel Capabilities are in line with the ones needed
                            for container process for each container instance.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.10' name='Ensure memory usage for container is limited' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>By default, all containers on a Docker host share the resources equally. By using the resource
                        management capabilities of Docker host, such as memory limit, you can control the amount of
                        memory that a container may consume.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, container can use all of the memory on the host. You can use memory limit mechanism
                        to prevent a denial of service arising from one container consuming all of the host's resources
                        such that other containers on the same host cannot perform their intended functions. Having no
                        limit on memory can lead to issues where one container can easily make the whole system unstable
                        and as a result unusable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Run the container with only as much memory as required. Always run the container using the
                        --memory argument. For example, you could run a container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --memory 256m centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;In the above example, the container is started with a memory limit of 256 MB.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note: Please note that the output of the below command would return values in scientific
                        notation if memory limits are in place.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker inspect --format='{{.Config.Memory}}' 7c5a2d4c7fe0&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;For example, if the memory limit is set to 256 MB for the above container
                        instance, the output of the above command would be 2.68435456e+08 and NOT 256mb. You should
                        convert this value using a scientific calculator or programmatic methods. Impact: If you do not
                        set proper limits, the container process may have to starve.
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: run metrics' url='https://docs.docker.com/engine/admin/runmetrics/' />
            <reference name='Docker docs: run options' url='https://docs.docker.com/engine/reference/commandline/run/#options' />
            <reference name='Goldmann blog: run options' url='https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/' />
          </references>
          <standards>
            <standard ref='5.10' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Memory={{
                            .HostConfig.Memory }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns 0, it means the memory limits are not in place. If the above
                            command returns a non-zero value, it means memory limits are in place.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.19' name='Ensure mount propagation mode is not set to shared' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Mount propagation mode allows mounting volumes in shared, slave or private mode on a
                        container. Do not use shared mount propagation mode until needed.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A shared mount is replicated at all mounts and the changes made at any mount point are
                        propagated to all mounts. Mounting a volume in shared mode does not restrict any other container
                        to mount and make changes to that volume. This might be catastrophic if the mounted volume is
                        sensitive to changes. Do not set mount propagation mode to shared until needed.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not mount volumes in shared mode propagation. For example, do not start container as below:
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --volume=/hostPath:/containerPath:shared&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;b&gt;Impact:&lt;/b&gt; None.
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: volume shared filesystems' url='https://docs.docker.com/engine/reference/run/#volume-shared-filesystems' />
            <reference name='Docker github: 17034' url='https://github.com/docker/docker/pull/17034' />
            <reference name='Kernel: shared sub tree' url='https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt' />
          </references>
          <standards>
            <standard ref='5.19' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Propagation={{range $mnt
                            := .Mounts}} {{json $mnt.Propagation}} {{end}}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command would return the propagation mode for mounted volumes. Propagation mode
                            should not be set to shared unless needed. The above command might throw errors if there are
                            no mounts. In that case, this recommendation is not applicable.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.14' name='Ensure &apos;on-failure&apos; container restart policy is set to &apos;5&apos;' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Using the --restart flag in docker run command you can specify a restart policy for how a
                        container should or should not be restarted on exit. You should choose the on-failure restart
                        policy and limit the restart attempts to 5.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If you indefinitely keep trying to start the container, it could possibly lead to a denial of
                        service on the host. It could be an easy way to do a distributed denial of service attack
                        especially if you have many containers on the same host. Additionally, ignoring the exit status
                        of the container and always attempting to restart the container leads to non-investigation of
                        the root cause behind containers getting terminated. If a container gets terminated, you should
                        investigate the reason behind it instead of just attempting to restart it indefinitely. Thus, it
                        is recommended to use on-failure restart policy and limit it to a maximum of 5 restart attempts.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If a container is desired to be restarted on its own, then, for example, you could start the
                        container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --detach --restart=on-failure:5 nginx&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The container would attempt to restart only 5 times.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: restart policies' url='https://docs.docker.com/engine/reference/commandline/run/#restart-policies-restart' />
          </references>
          <standards>
            <standard ref='5.14' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: RestartPolicyName={{
                            .HostConfig.RestartPolicy.Name }} MaximumRetryCount={{
                            .HostConfig.RestartPolicy.MaximumRetryCount }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;If the above command returns RestartPolicyName=always, then the system is not
                            configured as desired and hence this recommendation is non-compliant.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If the above command returns RestartPolicyName=no or just RestartPolicyName=, then
                            the restart policies are not being used and the container would never be restarted on its
                            own. This recommendation is then Not Applicable and can be assumed to be compliant.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If the above command returns RestartPolicyName=on-failure, then verify that the
                            number of restart attempts is set to 5 or less by looking at MaximumRetryCount.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.8' name='Ensure only needed ports are open on the container' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Dockerfile for a container image defines the ports to be opened by default on a container
                        instance. The list of ports may or may not be relevant to the application you are running within
                        the container.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A container can be run just with the ports defined in the Dockerfile for its image or can be
                        arbitrarily passed run time parameters to open a list of ports. Additionally, over time,
                        Dockerfile may undergo various changes and the list of exposed ports may or may not be relevant
                        to the application you are running within the container. Opening unneeded ports increases the
                        attack surface of the container and the containerized application. As a recommended practice, do
                        not open unneeded ports.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Fix the Dockerfile of the container image to expose only needed ports by your containerized
                        application. You can also completely ignore the list of ports defined in the Dockerfile by NOT
                        using -P (UPPERCASE) or --publish-all flag when starting the container. Use the -p (lowercase)
                        or --publish flag to explicitly define the ports that you need for a particular container
                        instance. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --publish 5000 --publish 5001 --publish 5002 centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Networking' url='https://docs.docker.com/engine/userguide/networking/' />
          </references>
          <standards>
            <standard ref='5.8' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>List all the running instances of containers and their port mapping by executing the
                            below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Ports={{
                            .NetworkSettings.Ports }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Review the list and ensure that the ports mapped are the ones that are really needed for the
                            container.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.28' name='Ensure PIDs cgroup limit is used' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Use --pids-limit flag at container runtime.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Attackers could launch a fork bomb with a single command inside the container. This fork bomb
                        can crash the entire system and requires a restart of the host to make the system functional
                        again. PIDs cgroup --pids-limit will prevent this kind of attack by restricting the number of
                        forks that can happen inside a container at a given time.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use --pids-limit flag while launching the container with an appropriate value. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run -it --pids-limit 100&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        In the above example, the number of processes allowed to run at any given time is set to 100.
                        After a limit of 100 concurrently running processes is reached, docker would restrict any new
                        process creations.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Set the PIDs limit value as appropriate. Incorrect values might render the containers unusable.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: run options' url='https://docs.docker.com/engine/reference/commandline/run/#options' />
            <reference name='Docker github: 18697' url='https://github.com/docker/docker/pull/18697' />
          </references>
          <standards>
            <standard ref='5.28' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run the below command and ensure that PidsLimit is not set to 0 or -1. A PidsLimit of 0
                            or -1 means that any number of processes can be forked inside the container concurrently.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: PidsLimit={{
                            .HostConfig.PidsLimit }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.4' name='Ensure privileged containers are not used' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Using the --privileged flag gives all Linux Kernel Capabilities to the container thus
                        overwriting the --cap-add and --cap-drop flags. Ensure that it is not used.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The --privileged flag gives all capabilities to the container, and it also lifts all the
                        limitations enforced by the device cgroup controller. In other words, the container can then do
                        almost everything the host can do. This flag exists to allow special use-cases, like running
                        Docker within Docker.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not run container with the --privileged flag. For example, do not start a container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --privileged centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Linux Kernel Capabilities other than defaults would not be available for use within container.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs:Runtime privilege and linux capabilities' url='https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities' />
          </references>
          <standards>
            <standard ref='5.4' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Privileged={{
                            .HostConfig.Privileged }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return Privileged=false for each container instance.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.7' name='Ensure privileged ports are not mapped within containers' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>The TCP/IP port numbers below 1024 are considered privileged ports. Normal users and processes
                        are not allowed to use them for various security reasons. Docker allows a container port to be
                        mapped to a privileged port.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, if the user does not specifically declare the container port to host port mapping,
                        Docker automatically and correctly maps the container port to one available in 49153-65535 block
                        on the host. But, Docker allows a container port to be mapped to a privileged port on the host
                        if the user explicitly declared it. This is so because containers are executed with
                        NET_BIND_SERVICE Linux kernel capability that does not restrict the privileged port mapping. The
                        privileged ports receive and transmit various sensitive and privileged data. Allowing containers
                        to use them can bring about serious implications.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not map the container ports to privileged host ports when starting a container. Also, ensure
                        that there is no such container to host privileged port mapping declarations in the Dockerfile.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Networking' url='https://docs.docker.com/engine/userguide/networking/' />
          </references>
          <standards>
            <standard ref='5.7' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>List all running containers instances and their port mapping by executing the below
                            command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet | xargs docker inspect --format '{{ .Id }}: Ports={{
                            .NetworkSettings.Ports }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Review the list and ensure that container ports are not mapped to host port numbers below
                            1024.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.2' name='Ensure SELinux security options are set, if applicable' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>SELinux is an effective and easy-to-use Linux application security system. It is available on
                        quite a few Linux distributions by default such as Red Hat and Fedora.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        SELinux provides a Mandatory Access Control (MAC) system that greatly augments the default
                        Discretionary Access Control (DAC) model. You can thus add an extra layer of safety by enabling
                        SELinux on your Linux host, if applicable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If SELinux is applicable for your Linux OS, use it. You may have to follow the below set of
                        steps:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Set the SELinux State.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Set the SELinux Policy.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create or import a SELinux policy template for Docker containers.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Start Docker in daemon mode with SELinux enabled. For example, docker daemon
                        --selinux-enabled&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Start your Docker container using the security options. For example, docker run
                        --interactive --tty --security-opt label=level:TopSecret centos /bin/bash&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The container (process) would have a set of restrictions as defined in the SELinux policy. If
                        your SELinux policy is mis-configured, then the container may not entirely work as expected.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: other kernel security features' url='https://docs.docker.com/engine/security/security/#other-kernel-security-features' />
            <reference name='Docker docs: security configuration' url='https://docs.docker.com/engine/reference/run/#security-configuration' />
            <reference name='Docker redhat: seLinux security profile' url='https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html/container_security_guide/docker_selinux_security_policy' />
            <reference name='Fedora docs: Linux security' url='http://docs.fedoraproject.org/en-US/Fedora/13/html/Security-Enhanced_Linux/' />
          </references>
          <standards>
            <standard ref='5.2' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: SecurityOpt={{
                            .HostConfig.SecurityOpt }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return all the security options currently configured for the
                            containers.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.5' name='Ensure sensitive host system directories are not mounted on containers' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Sensitive host system directories such as below should not be allowed to be mounted as
                        container volumes especially in read-write mode. / /boot /dev /etc /lib /proc /sys /usr&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If sensitive directories are mounted in read-write mode, it would be possible to make changes to
                        files within those sensitive directories. The changes might have negative security implications
                        or unwarranted changes that could put the Docker host in compromised state.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not mount host sensitive directories on containers especially in read-write mode.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Volumes' url='https://docs.docker.com/engine/tutorials/dockervolumes/' />
          </references>
          <standards>
            <standard ref='5.5' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Volumes={{ .Mounts }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above commands would return the list of current mapped directories and whether they are
                            mounted in read-write mode for each container instance.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.6' name='Ensure SSH is not run within containers' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>SSH server should not be running within the container. You should SSH into the Docker host,
                        and use nsenter tool to enter a container from a remote host.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Running SSH within the container increases the complexity of security management by making it&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Difficult to manage access policies and security compliance for SSH server&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Difficult to manage keys and passwords across various containers&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Difficult to manage security upgrades for SSH server It is possible to have shell
                        access to a container without using SSH.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;Needlessly increasing the complexity of security management should be avoided.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Uninstall SSH server from the container and use nsenteror or any other commands such as docker
                        exec or docker attach to interact with the container instance.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker exec --interactive --tty $INSTANCE_ID sh&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        OR&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker attach $INSTANCE_ID&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker blog: docker sshd' url='http://blog.docker.com/2014/06/why-you-dont-need-to-run-sshd-in-docker/' />
          </references>
          <standards>
            <standard ref='5.6' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;List all the running instances of containers by executing
                            below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; For each container instance, execute the below command:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker exec $INSTANCE_ID ps -el&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Ensure that there is no process for SSH server.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.25' name='Ensure the container is restricted from acquiring additional privileges' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Restrict the container from acquiring additional privileges via suid or sgid bits.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A process can set the no_new_priv bit in the kernel. It persists across fork, clone and execve.
                        The no_new_priv bit ensures that the process or its children processes do not gain any
                        additional privileges via suid or sgid bits. This way a lot of dangerous operations become a lot
                        less dangerous because there is no possibility of subverting privileged binaries.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        For example, you should start your container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        docker run --rm -it --security-opt=no-new-privileges ubuntu bash
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        no_new_priv prevents LSMs like SELinux from transitioning to process labels that have access not
                        allowed to the current process.
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker github: 20727' url='https://github.com/docker/docker/pull/20727' />
            <reference name='Docker github: 269' url='https://github.com/projectatomic/atomic-site/issues/269' />
            <reference name='Docker lwn: 475362' url='https://lwn.net/Articles/475362/' />
            <reference name='Docker lwn: 475678' url='https://lwn.net/Articles/475678/' />
            <reference name='Kernel: No new privs' url='https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt' />
          </references>
          <standards>
            <standard ref='5.25' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: SecurityOpt={{
                            .HostConfig.SecurityOpt }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return all the security options currently configured for the
                            containers. no-new-privileges should also be one of them.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.12' name='Ensure the container&apos;s root filesystem is mounted as read only' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>The container's root filesystem should be treated as a 'golden image' by using Docker run's
                        --read-only option. This prevents any writes to the container's root filesystem at container
                        runtime and enforces the principle of immutable infrastructure.&amp;nbsp;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Enabling this option forces containers at runtime to explicitly define their data writing
                        strategy to persist or not persist their data. This also reduces security attack vectors since
                        the container instance's filesystem cannot be tampered with or written to unless it has explicit
                        read-write permissions on its filesystem folder and directories.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Add a --read-only flag at a container's runtime to enforce the container's root filesystem to be
                        mounted as read only. docker run --read-only Enabling the --read-only option at a container's
                        runtime should be used by administrators to force a container's executable processes to only
                        write container data to explicit storage locations during the container's runtime.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Examples of explicit storage locations during a container's runtime include, but are not limited
                        to:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Use the --tmpfs option to mount a temporary file system for non-persistent data
                        writes. docker run --interactive --tty --read-only --tmpfs &amp;quot;/run&amp;quot; --tmpfs
                        &amp;quot;/tmp&amp;quot; centos /bin/bash&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Enabling Docker rw mounts at a container's runtime to persist container data directly
                        on the Docker host filesystem. docker run --interactive --tty --read-only -v
                        /opt/app/data:/run/app/data:rw centos /bin/bash&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Utilizing Docker shared-storage volume plugins for Docker data volume to persist
                        container data. docker volume create -d convoy --opt o=size=20GB my-named-volume docker run
                        --interactive --tty --read-only -v my-named-volume:/run/app/data centos /bin/bash&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Transmitting container data outside of the docker during the container's runtime for
                        container data to persist container data. Examples include hosted databases, network file
                        shares, and APIs.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Enabling --read-only at container runtime may break some container OS packages if a data writing
                        strategy is not defined. Define what the container's data should and should not persist at
                        runtime to determine which recommendation procedure to utilize.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: mount tmpfs' url='https://docs.docker.com/engine/reference/commandline/run/#mount-tmpfs-tmpfs' />
            <reference name='Docker docs: run' url='http://docs.docker.com/reference/commandline/cli/#run' />
            <reference name='Docker docs: Volumes' url='https://docs.docker.com/engine/tutorials/dockervolumes/' />
            <reference name='Docker: images in production' url='http://www.projectatomic.io/blog/2015/12/making-docker-images-write-only-in-production/' />
          </references>
          <standards>
            <standard ref='5.12' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run the following command on the docker host:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: ReadonlyRootfs={{
                            .HostConfig.ReadonlyRootfs }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            If the above command returns true, it means the container's root filesystem is mounted
                            read-only. If the above command returns false, it means the container's root filesystem is
                            writable.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.21' name='Ensure the default seccomp profile is not Disabled' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Seccomp filtering provides a means for a process to specify a filter for incoming system
                        calls. The default Docker seccomp profile works on whitelist basis and allows 311 system calls
                        blocking all others. It should not be disabled unless it hinders your container application
                        usage.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A large number of system calls are exposed to every userland process with many of them going
                        unused for the entire lifetime of the process. Most of the applications do not need all the
                        system calls and thus benefit by having a reduced set of available system calls. The reduced set
                        of system calls reduces the total kernel surface exposed to the application and thus improves
                        application security.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, seccomp profiles are enabled. You do not need to do anything unless you want to
                        modify and use the modified seccomp profile.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        With Docker 1.10 and greater, the default seccomp profile blocks syscalls, regardless of
                        --cap-add passed to the container. You should create your own custom seccomp profile in such
                        cases. You may also disable the default seccomp profile by passing
                        --security-opt=seccomp:unconfined on docker run.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker blog: Seccomp profiles' url='http://blog.scalock.com/new-docker-security-features-and-what-they-mean-seccomp-profiles' />
            <reference name='Docker docs: Seccomp' url='https://docs.docker.com/engine/security/seccomp/' />
            <reference name='Docker docs: security configuration' url='https://docs.docker.com/engine/reference/run/#security-configuration' />
            <reference name='Docker github: 22870' url='https://github.com/docker/docker/issues/22870' />
            <reference name='Docker github: Seccomp' url='https://github.com/docker/docker/blob/master/profiles/seccomp/default.json' />
            <reference name='Seccomp kernel' url='https://www.kernel.org/doc/Documentation/prctl/seccomp_filter.txt' />
          </references>
          <standards>
            <standard ref='5.21' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: SecurityOpt={{
                            .HostConfig.SecurityOpt }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return or your modified seccomp profile. If it returns
                            [seccomp:unconfined], that means this recommendation is non-compliant and the container is
                            running without any seccomp profiles.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.18' name='Ensure the default ulimit is overwritten at runtime, only if needed' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>The default ulimit is set at the Docker daemon level. However, you may override the default
                        ulimit setting, if needed, during container runtime.&amp;nbsp;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        ulimit provides control over the resources available to the shell and to processes started by
                        it. Setting system resource limits judiciously saves you from many disasters such as a fork
                        bomb. Sometimes, even friendly users and legitimate processes can overuse system resources and
                        in-turn can make the system unusable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The default ulimit set at the Docker daemon level should be honored. If the default ulimit
                        settings are not appropriate for a particular container instance, you may override them as an
                        exception. But, do not make this a practice. If most of the container instances are overriding
                        default ulimit settings, consider changing the default ulimit settings to something that is
                        appropriate for your needs.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Only override the default ulimit settings if needed. For example, to override default ulimit
                        settings start a container as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --ulimit nofile=1024:1024 --interactive --tty centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If the ulimits are not set properly, the desired resource control might not be achieved and
                        might even make the system unusable.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: set ulimits in container' url='https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container-ulimit' />
            <reference name='Docker oreily: Docker security' url='http://www.oreilly.com/webops-perf/free/files/docker-security.pdf' />
          </references>
          <standards>
            <standard ref='5.18' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Ulimits={{
                            .HostConfig.Ulimits }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return Ulimits= for each container instance until and unless there
                            is an exception and a need to override the default ulimit settings.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.31' name='Ensure the Docker socket is not mounted inside any containers' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>The docker socket docker.sock should not be mounted inside a container.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If the docker socket is mounted inside a container it would allow processes running within the
                        container to execute docker commands which effectively allows for full control of the host.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;&lt;/b&gt;Ensure that no containers mount docker.sock as a volume.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker forums: docker in docker vs mounting var run docker sock' url='https://forums.docker.com/t/docker-in-docker-vs-mounting-var-run-docker-sock/9450/2' />
            <reference name='Docker github: 21109' url='https://github.com/docker/docker/issues/21109' />
            <reference name='Docker raesene github' url='https://raesene.github.io/blog/2016/03/06/The-Dangers-Of-Docker.sock/' />
          </references>
          <standards>
            <standard ref='5.31' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: Volumes={{ .Mounts }}' |
                            grep docker.sock&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command would return any instances where docker.sock had been mapped to a
                            container as a volume.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.16' name='Ensure the host&apos;s IPC namespace is not shared' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>IPC (POSIX/SysV IPC) namespace provides separation of named shared memory segments, semaphores
                        and message queues. IPC namespace on the host thus should not be shared with the containers and
                        should remain isolated.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        IPC namespace provides separation of IPC between the host and containers. If the host's IPC
                        namespace is shared with the container, it would basically allow processes within the container
                        to see all of the IPC on the host system. This breaks the benefit of IPC level isolation between
                        the host and the containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Someone having access to the container can eventually manipulate the host IPC. This can be
                        catastrophic. Hence, do not share the host's IPC namespace with the containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;Do not start a container with --ipc=host argument. For example, do not start a
                        container as below:
                        &lt;div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --ipc=host centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt; Shared memory segments are used to accelerate inter-process
                        communication. It is commonly used by high-performance applications. If such applications are
                        containerized into multiple containers, you might need to share the IPC namespace of the
                        containers to achieve high performance. In such cases, you should still be sharing container
                        specific IPC namespaces only and not the host IPC namespace. You may share the container's IPC
                        namespace with another container as below: For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --ipc=container:e3a7a1a97c58 centos /bin/bash
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: ipc settings' url='https://docs.docker.com/engine/reference/run/#ipc-settings-ipc' />
            <reference name='Linux: namespaces' url='http://man7.org/linux/man-pages/man7/namespaces.7.html' />
          </references>
          <standards>
            <standard ref='5.16' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: IpcMode={{
                            .HostConfig.IpcMode }}'
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns host, it means the host IPC namespace is shared with the
                            container.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            If the above command returns nothing, then the host's IPC namespace is not shared. This
                            recommendation is then compliant.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.9' name='Ensure the host&apos;s network namespace is not shared' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>The networking mode on a container when set to --net=host, skips placing the container inside
                        a separate network stack. In essence, this choice tells Docker to not containerize the
                        container's networking. This would network-wise mean that the container lives &amp;quot;outside&amp;quot;
                        in the main Docker host and has full access to its network interfaces.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This is potentially dangerous. It allows the container process to open low-numbered ports like
                        any other root process. It also allows the container to access network services like D-bus on
                        the Docker host. Thus, a container process can potentially do unexpected things such as shutting
                        down the Docker host. You should not use this option.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not pass --net=host option when starting the container.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Networking' url='https://docs.docker.com/engine/userguide/networking/' />
            <reference name='Docker docs: Network settings' url='https://docs.docker.com/engine/reference/run/#network-settings' />
          </references>
          <standards>
            <standard ref='5.9' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: NetworkMode={{
                            .HostConfig.NetworkMode }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns NetworkMode=host, it means that --net=host option was passed
                            when the container was started. This would be non-compliant.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.15' name='Ensure the host&apos;s process namespace is not shared' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Process ID (PID) namespaces isolate the process ID number space, meaning that processes in
                        different PID namespaces can have the same PID. This is process level isolation between
                        containers and the host.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        PID namespace provides separation of processes. The PID Namespace removes the view of the system
                        processes, and allows process ids to be reused including PID 1. If the host's PID namespace is
                        shared with the container, it would basically allow processes within the container to see all of
                        the processes on the host system. This breaks the benefit of process level isolation between the
                        host and the containers.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Someone having access to the container can eventually know all the processes running on the host
                        system and can even kill the host system processes from within the container. This can be
                        catastrophic. Hence, do not share the host's process namespace with the containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not start a container with --pid=host argument. For example, do not start a container as
                        below:
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --interactive --tty --pid=host centos /bin/bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Container processes cannot see the processes on the host system. In certain cases, you want your
                        container to share the host's process namespace. For example, you could build a container with
                        debugging tools like strace or gdb, but want to use these tools when debugging processes within
                        the container. If this is desired, then share only one (or needed) host process by using the -p
                        switch. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --pid=host rhel7 strace -p 1234
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: pid settings' url='https://docs.docker.com/engine/reference/run/#pid-settings-pid' />
            <reference name='Linux: pid namespaces' url='http://man7.org/linux/man-pages/man7/pid_namespaces.7.html' />
          </references>
          <standards>
            <standard ref='5.15' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: PidMode={{
                            .HostConfig.PidMode }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns host, it means the host PID namespace is shared with the
                            container, if not, this recommendation is compliant.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.30' name='Ensure the host&apos;s user namespaces is not shared' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Do not share the host's user namespaces with the containers.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        User namespaces ensure that a root process inside the container will be mapped to a non-root
                        process outside the container. Sharing the user namespaces of the host with the container thus
                        does not isolate users on the host with users on the containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not share user namespaces between host and containers. For example, do not run a container as
                        below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker run --rm -it --userns=host ubuntu bash&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: run options' url='https://docs.docker.com/engine/reference/commandline/run/#options' />
            <reference name='Docker docs: userns remap' url='https://docs.docker.com/engine/security/userns-remap/' />
            <reference name='Docker github: 12648' url='https://github.com/docker/docker/pull/12648' />
            <reference name='Linux foundation: user namespaces' url='https://events.linuxfoundation.org/sites/events/files/slides/User%20Namespaces%20-%20ContainerCon%202015%20-%2016-9-final_0.pdf' />
          </references>
          <standards>
            <standard ref='5.30' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run the below command and ensure that it does not return any value for UsernsMode. If it
                            returns a value of host, it means the host user namespace is shared with the containers.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: UsernsMode={{
                            .HostConfig.UsernsMode }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D5.20' name='Ensure the host&apos;s UTS namespace is not shared' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>UTS namespaces provide isolation of two system identifiers: the hostname and the NIS domain
                        name. It is used for setting the hostname and the domain that is visible to running processes in
                        that namespace. Processes running within containers do not typically require to know hostname
                        and domain name. Hence, the namespace should not be shared with the host.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Sharing the UTS namespace with the host provides full permission to the container to change the
                        hostname of the host. This is insecure and should not be allowed.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        Do not start a container with --uts=host argument. For example, do not start a container as
                        below: docker run --rm --interactive --tty --uts=host rhel7.2&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt; None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: uts settings' url='https://docs.docker.com/engine/reference/run/#uts-settings-uts' />
            <reference name='Linux: namespaces' url='http://man7.org/linux/man-pages/man7/namespaces.7.html' />
          </references>
          <standards>
            <standard ref='5.20' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: UTSMode={{
                            .HostConfig.UTSMode }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the above command returns host, it means the host UTS namespace is shared with the
                            container and this recommendation is non-compliant. If the above command returns nothing,
                            then the host's UTS namespace is not shared. This recommendation is then compliant.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
      </controls>
      <usecases>
        <usecase ref='AUTHENTICATION AND AUTHORIZATION' name='Authentication and Authorization' desc='' library=''>
          <threats>
            <threat ref='CAPEC-122-DOCKER-CONTAINER-RUNTIME' name='Attakers gain access without the necessary privileged to the docker container runtime' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An adversary is able to exploit features of the target that should be reserved for
                                privileged users or administrators but are exposed to use by lower or non-privileged
                                accounts. Access to sensitive information and functionality must be controlled to ensure
                                that only authorized users are able to access these resources. If access control
                                mechanisms are absent or misconfigured, a user may be able to access resources that are
                                intended only for higher level users. An adversary may be able to exploit this to
                                utilize a less trusted account to gain information and perform activities reserved for
                                more trusted accounts. This attack differs from privilege escalation and other privilege
                                stealing attacks in that the adversary never actually escalates their privileges but
                                instead is able to use a lesser degree of privilege to access resources that should be
                                (but are not) reserved for higher privilege accounts. Likewise, the adversary does not
                                exploit trust or subvert systems - all control functionality is working as configured
                                but the configuration does not adequately protect sensitive resources at an appropriate
                                level.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='50' easeOfExploitation='50' />
              <references />
              <weaknesses>
                <weakness ref='CWE-250'>
                  <controls>
                    <control ref='D5.12' mitigation='9' />
                    <control ref='D5.21' mitigation='9' />
                    <control ref='D5.22' mitigation='9' />
                    <control ref='D5.23' mitigation='8' />
                    <control ref='D5.24' mitigation='8' />
                    <control ref='D5.25' mitigation='8' />
                    <control ref='D5.3' mitigation='8' />
                    <control ref='D5.31' mitigation='8' />
                    <control ref='D5.4' mitigation='9' />
                    <control ref='D5.5' mitigation='8' />
                  </controls>
                </weakness>
                <weakness ref='CWE-276'>
                  <controls>
                    <control ref='D5.12' mitigation='9' />
                    <control ref='D5.21' mitigation='9' />
                    <control ref='D5.22' mitigation='9' />
                    <control ref='D5.23' mitigation='8' />
                    <control ref='D5.24' mitigation='8' />
                    <control ref='D5.3' mitigation='8' />
                    <control ref='D5.4' mitigation='9' />
                    <control ref='D5.5' mitigation='8' />
                  </controls>
                </weakness>
                <weakness ref='CWE-732'>
                  <controls>
                    <control ref='D5.12' mitigation='9' />
                    <control ref='D5.17' mitigation='8' />
                    <control ref='D5.19' mitigation='8' />
                    <control ref='D5.21' mitigation='9' />
                    <control ref='D5.22' mitigation='9' />
                    <control ref='D5.23' mitigation='8' />
                    <control ref='D5.24' mitigation='8' />
                    <control ref='D5.25' mitigation='8' />
                    <control ref='D5.3' mitigation='8' />
                    <control ref='D5.31' mitigation='8' />
                    <control ref='D5.4' mitigation='9' />
                    <control ref='D5.5' mitigation='8' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D5.12' mitigation='9' />
                <control ref='D5.17' mitigation='8' />
                <control ref='D5.19' mitigation='8' />
                <control ref='D5.21' mitigation='9' />
                <control ref='D5.22' mitigation='9' />
                <control ref='D5.23' mitigation='8' />
                <control ref='D5.24' mitigation='8' />
                <control ref='D5.25' mitigation='8' />
                <control ref='D5.3' mitigation='8' />
                <control ref='D5.31' mitigation='8' />
                <control ref='D5.4' mitigation='9' />
                <control ref='D5.5' mitigation='8' />
              </controls>
            </threat>
          </threats>
        </usecase>
        <usecase ref='GENERAL' name='General' desc='' library=''>
          <threats>
            <threat ref='CAPEC-125-CONTAINER-RUNTIME' name='Attackers consume the resources of the Container Runtime by rapidly engaging to do the target inaccessible or to break the target' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An adversary consumes the resources of a target by rapidly engaging in a large number
                                of interactions with the target. This type of attack generally exposes a weakness in
                                rate limiting or flow. When successful this attack prevents legitimate users from
                                accessing the service and can cause the target to crash. This attack differs from
                                resource depletion through leaks or allocations in that the latter attacks do not rely
                                on the volume of requests made to the target but instead focus on manipulation of the
                                target's operations. The key factor in a flooding attack is the number of requests the
                                adversary can make in a given period of time. The greater this number, the more likely
                                an attack is to succeed against a given target.
                            </desc>
              <riskRating confidentiality='50' integrity='50' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-400'>
                  <controls>
                    <control ref='D5.10' mitigation='20' />
                    <control ref='D5.11' mitigation='20' />
                    <control ref='D5.14' mitigation='20' />
                    <control ref='D5.18' mitigation='20' />
                    <control ref='D5.28' mitigation='20' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D5.10' mitigation='20' />
                <control ref='D5.11' mitigation='20' />
                <control ref='D5.14' mitigation='20' />
                <control ref='D5.18' mitigation='20' />
                <control ref='D5.28' mitigation='20' />
              </controls>
            </threat>
            <threat ref='CAPEC-37-CONTAINER-RUNTIME' name='Attackers gain access to the docker container by using sensitive data which was found embedded within it' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An attacker examines a target system to find sensitive data that has been embedded
                                within it. This information can reveal confidential contents, such as account numbers or
                                individual keys/credentials which can be used as an intermediate step in a larger
                                attack.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-200'>
                  <controls>
                    <control ref='D5.5' mitigation='100' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D5.5' mitigation='100' />
              </controls>
            </threat>
            <threat ref='OWASP A6:2017-DOCKER-CONTAINER-RUNTIME' name='Exploitation of Security Misconfiguration of the Docker container runtime' state='Expose' source='MANUAL' owner='' library=''>
              <desc>Attackers will often attempt to exploit unpatched flaws or access default accounts,
                                unused pages, unprotected files and directories, etc to gain unauthorized access or
                                knowledge of the system.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='50' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='UNPATCHED-SERVER'>
                  <controls>
                    <control ref='D5.27' mitigation='10' />
                  </controls>
                </weakness>
                <weakness ref='CWE-485'>
                  <controls>
                    <control ref='D5.15' mitigation='5' />
                    <control ref='D5.16' mitigation='5' />
                    <control ref='D5.20' mitigation='5' />
                    <control ref='D5.30' mitigation='5' />
                  </controls>
                </weakness>
                <weakness ref='CWE-2'>
                  <controls>
                    <control ref='D5.1' mitigation='5' />
                    <control ref='D5.10' mitigation='5' />
                    <control ref='D5.11' mitigation='5' />
                    <control ref='D5.13' mitigation='5' />
                    <control ref='D5.14' mitigation='5' />
                    <control ref='D5.18' mitigation='5' />
                    <control ref='D5.2' mitigation='5' />
                    <control ref='D5.26' mitigation='5' />
                    <control ref='D5.28' mitigation='5' />
                    <control ref='D5.29' mitigation='5' />
                    <control ref='D5.6' mitigation='5' />
                    <control ref='D5.7' mitigation='5' />
                    <control ref='D5.8' mitigation='5' />
                    <control ref='D5.9' mitigation='5' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D5.1' mitigation='5' />
                <control ref='D5.10' mitigation='5' />
                <control ref='D5.11' mitigation='5' />
                <control ref='D5.13' mitigation='5' />
                <control ref='D5.14' mitigation='5' />
                <control ref='D5.15' mitigation='5' />
                <control ref='D5.16' mitigation='5' />
                <control ref='D5.18' mitigation='5' />
                <control ref='D5.2' mitigation='5' />
                <control ref='D5.20' mitigation='5' />
                <control ref='D5.26' mitigation='5' />
                <control ref='D5.27' mitigation='10' />
                <control ref='D5.28' mitigation='5' />
                <control ref='D5.29' mitigation='5' />
                <control ref='D5.30' mitigation='5' />
                <control ref='D5.6' mitigation='5' />
                <control ref='D5.7' mitigation='5' />
                <control ref='D5.8' mitigation='5' />
                <control ref='D5.9' mitigation='5' />
              </controls>
            </threat>
          </threats>
        </usecase>
        <usecase ref='NETWORKING' name='Networking' desc='' library=''>
          <threats>
            <threat ref='DOCKER-WIDE-ATTACK-SURFACE-CONTAINER' name='Attackers gain access to the Docker container by exploiting the vulnerabilities of the network' state='Expose' source='MANUAL' owner='' library=''>
              <desc>Every point of network interaction is a potential part of the network attack surface
                                having exploitable vulnerabilities.
                            </desc>
              <riskRating confidentiality='50' integrity='50' availability='75' easeOfExploitation='75' />
              <references />
              <weaknesses>
                <weakness ref='UNRESTRICTED-NETWORK'>
                  <controls>
                    <control ref='D5.13' mitigation='20' />
                    <control ref='D5.29' mitigation='20' />
                    <control ref='D5.7' mitigation='20' />
                    <control ref='D5.8' mitigation='20' />
                    <control ref='D5.9' mitigation='20' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D5.13' mitigation='20' />
                <control ref='D5.29' mitigation='20' />
                <control ref='D5.7' mitigation='20' />
                <control ref='D5.8' mitigation='20' />
                <control ref='D5.9' mitigation='20' />
              </controls>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component ref='DOCKER-DAEMON-CONFIGURATION' name='Docker daemon configuration' desc='This Risk Pattern lists the recommendations that alter and secure the behavior of the Docker daemon. The settings that are under this section affect ALL container instances.' groupName='' tags='' position='3' library='' diagramPositionX='0' diagramPositionY='0' componentDefinitionRef=''>
      <weaknesses>
        <weakness ref='CWE-250' name='Execution with Unnecessary Privileges' state='0' impact='100'>
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses. New
                        weaknesses can be exposed because running with extra privileges, such as root or Administrator,
                        can disable the normal security checks being performed by the operating system or surrounding
                        environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur
                        while operating at raised privileges.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Privilege management functions can behave in some less-than-obvious ways, and they have
                        different quirks on different platforms. These inconsistencies are particularly pronounced if
                        you are transitioning from one non-root user to another. Signal handlers and spawned processes
                        run at the privilege of the owning process, so if a process is running as root when a signal
                        fires or a sub-process is executed, the signal handler or sub-process will operate with root
                        privileges.
                        &lt;/div&gt;
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:00.015'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-250: Execution with Unnecessary Privileges' url='https://cwe.mitre.org/data/definitions/250.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-287' name='Improper Server&apos;s Identity Validation' state='0' impact='100'>
          <desc>The software does not validate, or incorrectly validates, the server's identity.
                        If the server's identity is not validated, an attacker could spoof a trusted entity by using a
                        man-in-the-middle (MITM) attack. The software might connect to a malicious host while believing
                        it is a trusted host, or the software might be deceived into accepting spoofed data that appears
                        to originate from a trusted host.

                        One way to perform server's authentication is by using X509 certificates over TLS.

                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:00.072'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-287: Improper Server&apos;s Identity Validation' url='https://cwe.mitre.org/data/definitions/287.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-276' name='Incorrect Default Permissions' state='0' impact='100'>
          <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to
                        an unintended actor.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:51:59.994'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-276: Incorrect Default Permissions' url='https://cwe.mitre.org/data/definitions/276.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-732' name='Incorrect Permission Assignment for Critical Resource' state='0' impact='100'>
          <desc>The software specifies permissions for a security-critical resource in a way that allows that
                        resource to be read or modified by unintended actors.
                        When a resource is given a permissions setting that provides access to a wider range of actors
                        than required, it could lead to the exposure of sensitive information, or the modification of
                        that resource by unintended parties. This is especially dangerous when the resource is related
                        to program configuration, execution or sensitive user data.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:00.025'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-732: Incorrect Permission Assignment for Critical Resource' url='https://cwe.mitre.org/data/definitions/732.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-778' name='Insufficient Logging' state='0' impact='100'>
          <desc>When a security-critical event occurs, the software either does not record the event or omits
                        important details about the event when logging it.
                        When security-critical events are not logged properly, such as a failed login attempt, this can
                        make malicious behavior more difficult to detect and may hinder forensic analysis after an
                        attack succeeds.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:00.055'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-778: Insufficient Logging' url='https://cwe.mitre.org/data/definitions/778.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='UNRESTRICTED-NETWORK' name='Service is exposed to a wide attack surface' state='0' impact='100'>
          <desc>The product is exposed or reachable to an unnecessarily large group of potential attackers. An
                        over-exposure of a component increases the chance of an attacker gaining access to the system
                        through a vulnerability.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:00.082'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-400' name='Uncontrolled Resource Consumption (&apos;Resource Exhaustion&apos;)' state='0' impact='100'>
          <desc>The software does not properly restrict the size or amount of resources that are requested or
                        influenced by an actor, which can be used to consume more resources than intended.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:00.046'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-400: Uncontrolled Resource Consumption (&apos;Resource Exhaustion&apos;)' url='https://cwe.mitre.org/data/definitions/400.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-2' name='Unexpected Environment Condition' state='0' impact='100'>
          <desc>This is a generic weakness that includes several different situations, they are all related to
                        unexpected environmental conditions and they could be related to:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Misconfiguration.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                        behavior.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:00.036'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-2: Unexpected Environment Condition' url='https://cwe.mitre.org/data/definitions/2.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='SSL-WEAK-PROTOCOL' name='Use of weak TLS protocols' state='0' impact='100'>
          <desc>A cryptographically weak SSL/TLS protocol could allow an attacker to sniff the traffic or
                        impersonate the server.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:00.065'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </weakness>
      </weaknesses>
      <controls>
        <control ref='D2.8' name='Enable user namespace support' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Enable user namespace support in Docker daemon to utilize container user to host user
                        re-mapping. This recommendation is beneficial where containers you are using do not have an
                        explicit container user defined in the container image. If container images that you are using
                        have a pre-defined non-root user, this recommendation may be skipped since this feature is still
                        in its infancy and might give you unpredictable issues and complexities.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The Linux kernel user namespace support in Docker daemon provides additional security for the
                        Docker host system. It allows a container to have a unique range of user and group IDs which are
                        outside the traditional user and group range utilized by the host system. For example, the root
                        user will have expected administrative privilege inside the container but can effectively be
                        mapped to an unprivileged UID on the host system.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Please consult Docker documentation for various ways in which this can be configured depending
                        upon your requirements. Your steps might also vary based on platform - For example, on Red Hat,
                        sub-UIDs and sub-GIDs mapping creation does not work automatically. You might have to create
                        your own mapping. However, the high-level steps are as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Step 1: Ensure that the files /etc/subuid and /etc/subgid exist. touch /etc/subuid /etc/subgid&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Step 2: Start the docker daemon with --userns-remap flag dockerd --userns-remap=default&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        User namespace remapping makes quite a few Docker features incompatible and also currently
                        breaks a few functionalities. Check out the Docker documentation and referenced links for
                        details.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Daemon user namespace options' url='https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-user-namespace-options' />
            <reference name='Docker - linux foundation: Namespaces' url='http://events.linuxfoundation.org/sites/events/files/slides/User%20Namespaces%20-%20ContainerCon%202015%20-%2016-9-final_0.pdf' />
            <reference name='Docker linux: user namespaces' url='http://man7.org/linux/man-pages/man7/user_namespaces.7.html' />
          </references>
          <standards>
            <standard ref='2.8' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            ps -p $(docker inspect --format='{{ .State.Pid }}' ) -o pid,user&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command would find the PID of the container and then would list the host user
                            associated with the container process. If the container process is running as root, then
                            this recommendation is non-compliant. Alternatively, you can run docker info to ensure that
                            the userns is listed under Security Options:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker info --format '{{ .SecurityOptions }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.5' name='Ensure aufs storage driver is not used' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Do not use aufs as storage driver for your Docker instance.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The aufs storage driver is the oldest storage driver. It is based on a Linux kernel patch-set
                        that is unlikely to be merged into the main Linux kernel. aufs driver is also known to cause
                        some serious kernel crashes. aufs just has legacy support from Docker. Most importantly, aufs is
                        not a supported driver in many Linux distributions using latest Linux kernels.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not explicitly use aufs as storage driver. For example, do not start Docker daemon as below:
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        dockerd --storage-driver aufs&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        aufs is the only storage driver that allows containers to share executable and shared library
                        memory. It might be useful if you are running thousands of containers with the same program or
                        libraries.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Storage driver' url='https://docs.docker.com/engine/userguide/storagedriver/' />
            <reference name='Docker docs: Supported backing filesystems' url='https://docs.docker.com/engine/userguide/storagedriver/selectadriver/#supported-backing-filesystems' />
            <reference name='Docker github:Deep dive into docker storage drivers' url='http://jpetazzo.github.io/assets/2015-03-05-deep-dive-into-docker-storage-drivers.html#1' />
            <reference name='Docker muehe: Switching docker from devicemapper' url='http://muehe.org/posts/switching-docker-from-aufs-to-devicemapper/' />
          </references>
          <standards>
            <standard ref='2.5' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command and verify that aufs is not used as storage driver:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker info | grep -e &amp;quot;^Storage Driver:\s*aufs\s*$&amp;quot;&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should not return anything.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.10' name='Ensure base device size is not changed until needed' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>In certain circumstances, you might need containers bigger than 10G in size. In these cases,
                        carefully choose the base device size.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The base device size can be increased at daemon restart. Increasing the base device size allows
                        all future images and containers to be of the new base device size. A user can use this option
                        to expand the base device size however shrinking is not permitted. This value affects the
                        system-wide "base" empty filesystem that may already be initialized and inherited by pulled
                        images. Though the file system does not allot the increased size if it is empty, it will use
                        more space for the empty case depending upon the device size. This may cause a denial of service
                        by ending up in file system being over-allocated or full.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not set --storage-opt dm.basesize until needed.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Storage drive options' url='https://docs.docker.com/engine/reference/commandline/dockerd/#storage-driver-options' />
          </references>
          <standards>
            <standard ref='2.10' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            ps -ef | grep dockerd&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Execute the above command and it should not show any --storage-opt dm.basesize parameters.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.12' name='Ensure centralized and remote logging is configured' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Docker now supports various log drivers. A preferable way to store logs is the one that
                        supports centralized and remote logging.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Centralized and remote logging ensures that all important log records are safe despite
                        catastrophic events. Docker now supports various such logging drivers. Use the one that suits
                        your environment the best.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Step 1: Setup the desired log driver by following its documentation.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Step 2: Start the docker daemon with that logging driver. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        dockerd --log-driver=syslog --log-opt syslog-address=tcp://192.xxx.xxx.xxx&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Logging' url='https://docs.docker.com/engine/admin/logging/overview/' />
          </references>
          <standards>
            <standard ref='2.12' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run docker info and ensure that the Logging Driver property set as appropriate.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker info --format '{{ .LoggingDriver }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Alternatively, the below command would give you the --log-driver setting, if configured.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            Ensure that it is set as appropriate.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            ps -ef | grep dockerd
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.18' name='Ensure containers are restricted from acquiring new privileges' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Restrict containers from acquiring additional privileges via suid or sgid bits, by default.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A process can set the no_new_priv bit in the kernel. It persists across fork, clone and execve.
                        The no_new_priv bit ensures that the process or its children processes do not gain any
                        additional privileges via suid or sgid bits. This way a lot of dangerous operations become a lot
                        less dangerous because there is no possibility of subverting privileged binaries. Setting this
                        at the daemon level ensures that by default all new containers are restricted from acquiring new
                        privileges.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Run the Docker daemon as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        dockerd --no-new-privileges&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        no_new_priv prevents LSMs like SELinux from transitioning to process labels that have access not
                        allowed to the current process.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker github: Moby 20727' url='https://github.com/moby/moby/pull/20727' />
            <reference name='Docker github: Moby 29984' url='https://github.com/moby/moby/pull/29984' />
          </references>
          <standards>
            <standard ref='2.18' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            ps -ef | grep dockerd&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Ensure that the --no-new-privileges parameter is present and is not set to false.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.16' name='Ensure daemon-wide custom seccomp profile is applied, if needed' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>You can choose to apply your custom seccomp profile at the daemon-wide level if needed and
                        override Docker's default seccomp profile.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A large number of system calls are exposed to every userland process with many of them going
                        unused for the entire lifetime of the process. Most of the applications do not need all the
                        system calls and thus benefit by having a reduced set of available system calls. The reduced set
                        of system calls reduces the total kernel surface exposed to the application and thus improves
                        application security. You could apply your own custom seccomp profile instead of Docker's
                        default seccomp profile. Alternatively, if Docker's default profile is good for your
                        environment, you can choose to ignore this recommendation.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, Docker's default seccomp profile is applied. If this is good for your environment,
                        no action is necessary. Alternatively, if you choose to apply your own seccomp profile, use the
                        --seccomp-profile flag at daemon start or put it in the daemon runtime parameters file.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        dockerd --seccomp-profile&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A misconfigured seccomp profile could possibly interrupt your container environment.
                        Docker-default blocked calls have been carefully scrutinized. These address some critical
                        vulnerabilities/issues within container environments (for example, kernel key ring calls). So,
                        you should be very careful while overriding the defaults.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Seccomp' url='https://docs.docker.com/engine/security/seccomp/' />
            <reference name='Docker github: docker 26276' url='https://github.com/docker/docker/pull/26276' />
          </references>
          <standards>
            <standard ref='2.16' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run the below command and review the seccomp profile listed in the Security Options
                            section. If it is default, that means, Docker's default seccomp profile is applied.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker info --format '{{ .SecurityOptions }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.3' name='Ensure Docker is allowed to make changes to iptables' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Iptables are used to set up, maintain, and inspect the tables of IP packet filter rules in the
                        Linux kernel. Allow the Docker daemon to make changes to the iptables.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker will never make changes to your system iptables rules if you choose to set it so. Docker
                        server would automatically make the needed changes to iptables based on how you choose your
                        networking options for the containers if it is allowed to do so. It is recommended to let Docker
                        server make changes to iptables automatically to avoid networking misconfiguration that might
                        hamper the communication between containers and to the outside world. Additionally, it would
                        save you the hassle of updating iptables every time you choose to run the containers or modify
                        networking options.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not run the Docker daemon with --iptables=false parameter. For example, do not start the
                        Docker daemon as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        dockerd --iptables=false&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker daemon service start requires iptables rules to be enabled before it starts. Any restarts
                        of iptables during docker daemon operation may result in losing docker-created rules. Adding
                        iptables-persistent to your iptables install can assist with mitigating this impact.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker and Iptables' url='https://fralef.me/docker-and-iptables.html' />
            <reference name='Docker docs: Container communication' url='https://docs.docker.com/engine/userguide/networking/default_network/container-communication/' />
          </references>
          <standards>
            <standard ref='2.3' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            ps -ef | grep dockerd&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Ensure that the --iptables parameter is either not present or not set to false.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.17' name='Ensure experimental features are avoided in production' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Avoid experimental features in production.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Experimental is now a runtime docker daemon flag instead of a separate build. Passing
                        --experimental as a runtime flag to the docker daemon, activates experimental features.
                        Experimental is now considered a stable release, but with a couple of features which might not
                        have tested and guaranteed API stability.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not pass --experimental as a runtime parameter to the docker daemon.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Dockerd options' url='https://docs.docker.com/edge/engine/reference/commandline/dockerd/#options' />
          </references>
          <standards>
            <standard ref='2.17' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run the below command and ensure that the Experimental property is set to false in the
                            Server section.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker version --format '{{ .Server.Experimental }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.4' name='Ensure insecure registries are not used' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Docker considers a private registry either secure or insecure. By default, registries are
                        considered secure.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A secure registry uses TLS. A copy of registry's CA certificate is placed on the Docker host at
                        /etc/docker/certs.d// directory. An insecure registry is one not having either valid registry
                        certificate or is not using TLS. You should not be using any insecure registries in the
                        production environment. Insecure registries can be tampered with leading to possible compromise
                        of your production system.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Additionally, If a registry is marked as insecure then docker pull, docker push, and docker
                        search commands will not result in an error message and the user might be indefinitely working
                        with insecure registries without ever being notified of potential danger.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not use any insecure registries. For example, do not start the Docker daemon as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        dockerd --insecure-registry 10.1.0.0/16&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Insecure registry' url='https://docs.docker.com/registry/insecure/' />
          </references>
          <standards>
            <standard ref='2.4' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run docker info or execute the below command to find out if any insecure registries are
                            used:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            ps -ef | grep dockerd&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Ensure that the --insecure-registry parameter is not present.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.14' name='Ensure live restore is Enabled' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>The --live-restore enables full support of daemon-less containers in docker. It ensures that
                        docker does not stop containers on shutdown or restore and properly reconnects to the container
                        when restarted.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        One of the important security triads is availability. Setting --live-restore flag in the docker
                        daemon ensures that container execution is not interrupted when the docker daemon is not
                        available. This also means that it is now easier to update and patch the docker daemon without
                        execution downtime.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Run the docker in daemon mode and pass --live-restore as an argument. For Example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        dockerd --live-restore&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Live restore' url='https://docs.docker.com/engine/admin/live-restore/' />
          </references>
          <standards>
            <standard ref='2.14' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run docker info and ensure that the Live Restore Enabled property is set to true.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker info --format '{{ .LiveRestoreEnabled }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Alternatively run the below command and ensure that --live-restore is used.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            ps -ef | grep dockerd
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.13' name='Ensure operations on legacy registry (v1) are Disabled' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>The latest Docker registry is v2. All operations on the legacy registry version (v1) should be
                        restricted.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker registry v2 brings in many performance and security improvements over v1. It supports
                        container image provenance and other security features such as image signing and verification.
                        Hence, operations on Docker legacy registry should be restricted.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Start the docker daemon as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        dockerd --disable-legacy-registry&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Legacy registry operations would be restricted.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker blog: Trusted registry' url='https://blog.docker.com/2015/07/new-tool-v1-registry-docker-trusted-registry-v2-open-source/' />
            <reference name='Docker: Creating private docker registry 2.0 with token authentication service' url='https://the.binbashtheory.com/creating-private-docker-registry-2-0-with-token-authentication-service/' />
            <reference name='Docker docs: Legacy registries' url='https://docs.docker.com/edge/engine/reference/commandline/dockerd/#legacy-registries' />
            <reference name='Docker docs: Registry API' url='https://docs.docker.com/registry/spec/api/' />
            <reference name='Docker slideshare: Registry' url='http://www.slideshare.net/Docker/docker-registry-v2' />
          </references>
          <standards>
            <standard ref='2.13' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            ps -ef | grep dockerd&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should list --disable-legacy-registry as an option passed to the docker
                            daemon.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.11' name='Ensure that authorization for Docker client commands are enabled' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Use native Docker authorization plugins or a third party authorization mechanism with Docker
                        daemon to manage access to Docker client commands.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker's out-of-the-box authorization model is all or nothing. Any user with
                        permission to access the Docker daemon can run any Docker client command. The same is true for callers using
                        Docker's remote API to contact the daemon. If you require greater access
                        control, you can create authorization plugins and add them to your Docker daemon configuration. Using an authorization
                        plugin, a Docker administrator can configure granular access policies for managing access to
                        Docker daemon. Third party integrations of Docker may implement their own authorization models
                        to require authorization with the Docker daemon outside of docker's native authorization plugin
                        (i.e. Kubernetes, Cloud Foundry, Openshift).&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Step 1: Install/Create an authorization plugin.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Step 2: Configure the authorization policy as desired.
                        &lt;/div&gt;
                        &lt;div&gt;
                        Step 3: Start the docker daemon as below: dockerd --authorization-plugin=&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Each docker command specifically passes through an authorization plugin mechanism. This might
                        introduce a slight performance drop. Third party use of alternative container engines that
                        utilize the docker daemon may provide alternative mechanisms to provide this security control.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Authorization access' url='https://docs.docker.com/engine/reference/commandline/dockerd/#access-authorization' />
            <reference name='Docker docs: Authorization plugins' url='https://docs.docker.com/engine/extend/plugins_authorization/' />
            <reference name='Docker github: Authorization twistlock' url='https://github.com/twistlock/authz' />
          </references>
          <standards>
            <standard ref='2.11' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            ps -ef | grep dockerd&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Ensure that the --authorization-plugin parameter is set as appropriate if using docker
                            native authorization.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker search hello-world&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Ensure that docker daemon requires authorization to perform the above command.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.9' name='Ensure the default cgroup usage has been confirmed' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>The --cgroup-parent option allows you to set the default cgroup parent to use for all the
                        containers. If there is no specific use case, this setting should be left at its default.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        System administrators typically define cgroups under which containers are supposed to run. Even
                        if cgroups are not explicitly defined by the system administrators, containers run under docker
                        cgroup by default. It is possible to attach to a different cgroup other than that which is the
                        default. This usage should be monitored and confirmed. By attaching to a different cgroup other
                        than the one that is a default, it is possible to share resources unevenly and thus might starve
                        the host for resources.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The default setting is good enough and can be left as-is. If you want to specifically set a
                        non-default cgroup, pass --cgroup-parent parameter to the docker daemon when starting it. For
                        Example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        dockerd --cgroup-parent=/foobar&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Dockerd default cgroup parent' url='https://docs.docker.com/engine/reference/commandline/dockerd/#default-cgroup-parent' />
          </references>
          <standards>
            <standard ref='2.9' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            ps -ef | grep dockerd&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Ensure that the --cgroup-parent parameter is either not set or is set as appropriate
                            non-default cgroup.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.7' name='Ensure the default ulimit is configured appropriately' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Set the default ulimit options as appropriate in your environment.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        ulimit provides control over the resources available to the shell and to processes started by
                        it. Setting system resource limits judiciously saves you from many disasters such as a fork
                        bomb. Sometimes, even friendly users and legitimate processes can overuse system resources and
                        in-turn can make the system unusable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Setting default ulimit for the Docker daemon would enforce the ulimit for all container
                        instances. You would not need to set up ulimit for each container instance. However, the default
                        ulimit can be overridden during container runtime, if needed. Hence, to control the system
                        resources, define a default ulimit as needed in your environment.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Run the docker in daemon mode and pass --default-ulimit as argument with respective ulimits as
                        appropriate in your environment. For Example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        dockerd --default-ulimit nproc=1024:2048 --default-ulimit nofile=100:200&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If the ulimits are not set properly, the desired resource control might not be achieved and
                        might even make the system unusable.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Dockerd default ulimits' url='https://docs.docker.com/edge/engine/reference/commandline/dockerd/#default-ulimits' />
          </references>
          <standards>
            <standard ref='2.7' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            ps -ef | grep dockerd&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Ensure that the --default-ulimit parameter is set as appropriate.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.2' name='Ensure the logging level is set to &apos;info&apos;' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Set Docker daemon log level to info.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Setting up an appropriate log level, configures the Docker daemon to log events that you would
                        want to review later. A base log level of info and above would capture all logs except debug
                        logs. Until and unless required, you should not run Docker daemon at debug log level.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Run the Docker daemon as below:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        dockerd --log-level=&amp;quot;info&amp;quot;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Dockerd' url='https://docs.docker.com/edge/engine/reference/commandline/dockerd/' />
          </references>
          <standards>
            <standard ref='2.2' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            ps -ef | grep docker&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Ensure that either the --log-level parameter is not present or if present, then it is set to
                            info.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.6' name='Ensure TLS authentication for Docker daemon is configured' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>It is possible to make the Docker daemon listen on a specific IP and port and any other Unix
                        socket other than default Unix socket. Configure TLS authentication to restrict access to Docker
                        daemon via IP and port.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, Docker daemon binds to a non-networked Unix socket and runs with root privileges. If
                        you change the default docker daemon binding to a TCP port or any other Unix socket, anyone with
                        access to that port or socket can have full access to Docker daemon and in turn to the host
                        system. Hence, you should not bind the Docker daemon to another IP/port or a Unix socket. If you
                        must expose the Docker daemon via a network socket, configure TLS authentication for the daemon
                        and Docker Swarm APIs (if using). This would restrict the connections to your Docker daemon over
                        the network to a limited number of clients who could successfully authenticate over TLS.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Follow the steps mentioned in the Docker documentation or other references.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You would need to manage and guard certificates and keys for Docker daemon and Docker clients.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Security https' url='https://docs.docker.com/engine/security/https/' />
          </references>
          <standards>
            <standard ref='2.6' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            ps -ef | grep dockerd&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Ensure that the below parameters are present:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            --tlsverify&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            --tlscacert&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            --tlscert&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            --tlskey
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D2.15' name='Ensure Userland Proxy is Disabled' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>The docker daemon starts a userland proxy service for port forwarding whenever a port is
                        exposed. Where hairpin NAT is available, this service is generally superfluous to requirements
                        and can be disabled.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker engine provides two mechanisms for forwarding ports from the host to containers, hairpin
                        NAT, and a userland proxy. In most circumstances, the hairpin NAT mode is preferred as it
                        improves performance and makes use of native Linux iptables functionality instead of an
                        additional component. Where hairpin NAT is available, the userland proxy should be disabled on
                        startup to reduce the attack surface of the installation.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Run the Docker daemon as below: dockerd --userland-proxy=false&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Some systems with older Linux kernels may not be able to support hairpin NAT and therefore
                        require the userland proxy service. Also, some networking setups can be impacted by the removal
                        of the userland proxy.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Binding' url='https://docs.docker.com/engine/userguide/networking/default_network/binding/' />
            <reference name='Docker github: 14856' url='https://github.com/docker/docker/issues/14856' />
            <reference name='Docker github: 22741' url='https://github.com/docker/docker/issues/22741' />
            <reference name='Docker windsock: The docker proxy' url='http://windsock.io/the-docker-proxy/' />
          </references>
          <standards>
            <standard ref='2.15' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            ps -ef | grep dockerd&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Ensure that the --userland-proxy parameter is set to false.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
      </controls>
      <usecases>
        <usecase ref='AUTHENTICATION AND AUTHORIZATION' name='Authentication and Authorization' desc='' library=''>
          <threats>
            <threat ref='CAPEC-122-DOCKER-DAEMON-CONFIG' name='Attakers gain access without the necessary privileged to the docker daemon configuration' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An adversary is able to exploit features of the target that should be reserved for
                                privileged users or administrators but are exposed to use by lower or non-privileged
                                accounts. Access to sensitive information and functionality must be controlled to ensure
                                that only authorized users are able to access these resources. If access control
                                mechanisms are absent or misconfigured, a user may be able to access resources that are
                                intended only for higher level users. An adversary may be able to exploit this to
                                utilize a less trusted account to gain information and perform activities reserved for
                                more trusted accounts. This attack differs from privilege escalation and other privilege
                                stealing attacks in that the adversary never actually escalates their privileges but
                                instead is able to use a lesser degree of privilege to access resources that should be
                                (but are not) reserved for higher privilege accounts. Likewise, the adversary does not
                                exploit trust or subvert systems - all control functionality is working as configured
                                but the configuration does not adequately protect sensitive resources at an appropriate
                                level.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='50' easeOfExploitation='50' />
              <references />
              <weaknesses>
                <weakness ref='CWE-250'>
                  <controls>
                    <control ref='D2.11' mitigation='17' />
                    <control ref='D2.16' mitigation='17' />
                    <control ref='D2.18' mitigation='17' />
                    <control ref='D2.3' mitigation='17' />
                    <control ref='D2.8' mitigation='16' />
                  </controls>
                </weakness>
                <weakness ref='CWE-276'>
                  <controls>
                    <control ref='D2.11' mitigation='17' />
                    <control ref='D2.18' mitigation='17' />
                    <control ref='D2.3' mitigation='17' />
                    <control ref='D2.4' mitigation='16' />
                  </controls>
                </weakness>
                <weakness ref='CWE-732'>
                  <controls>
                    <control ref='D2.11' mitigation='17' />
                    <control ref='D2.18' mitigation='17' />
                    <control ref='D2.3' mitigation='17' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D2.11' mitigation='17' />
                <control ref='D2.16' mitigation='17' />
                <control ref='D2.18' mitigation='17' />
                <control ref='D2.3' mitigation='17' />
                <control ref='D2.4' mitigation='16' />
                <control ref='D2.8' mitigation='16' />
              </controls>
            </threat>
          </threats>
        </usecase>
        <usecase ref='GENERAL' name='General' desc='' library=''>
          <threats>
            <threat ref='CAPEC-125-DAEMON' name='Attackers consume the resources of the Daemon by rapidly engaging to do the target inaccessible or to break the target' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An adversary consumes the resources of a target by rapidly engaging in a large number
                                of interactions with the target. This type of attack generally exposes a weakness in
                                rate limiting or flow. When successful this attack prevents legitimate users from
                                accessing the service and can cause the target to crash. This attack differs from
                                resource depletion through leaks or allocations in that the latter attacks do not rely
                                on the volume of requests made to the target but instead focus on manipulation of the
                                target's operations. The key factor in a flooding attack is the number of requests the
                                adversary can make in a given period of time. The greater this number, the more likely
                                an attack is to succeed against a given target.
                            </desc>
              <riskRating confidentiality='50' integrity='50' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-400'>
                  <controls>
                    <control ref='D2.10' mitigation='33' />
                    <control ref='D2.7' mitigation='33' />
                    <control ref='D2.9' mitigation='34' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D2.10' mitigation='33' />
                <control ref='D2.7' mitigation='33' />
                <control ref='D2.9' mitigation='34' />
              </controls>
            </threat>
            <threat ref='OWASP A6:2017-DOCKER-DAEMON-CONFIG' name='Exploitation of Security Misconfiguration of the docker daemon&#10;&#10;' state='Expose' source='MANUAL' owner='' library=''>
              <desc>Attackers will often attempt to exploit unpatched flaws or access default accounts,
                                unused pages, unprotected files and directories, etc to gain unauthorized access or
                                knowledge of the system.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='50' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-2'>
                  <controls>
                    <control ref='D2.10' mitigation='8' />
                    <control ref='D2.13' mitigation='9' />
                    <control ref='D2.14' mitigation='8' />
                    <control ref='D2.15' mitigation='8' />
                    <control ref='D2.17' mitigation='8' />
                    <control ref='D2.3' mitigation='9' />
                    <control ref='D2.4' mitigation='8' />
                    <control ref='D2.5' mitigation='8' />
                    <control ref='D2.6' mitigation='9' />
                    <control ref='D2.7' mitigation='8' />
                    <control ref='D2.8' mitigation='8' />
                    <control ref='D2.9' mitigation='9' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D2.10' mitigation='8' />
                <control ref='D2.13' mitigation='9' />
                <control ref='D2.14' mitigation='8' />
                <control ref='D2.15' mitigation='8' />
                <control ref='D2.17' mitigation='8' />
                <control ref='D2.3' mitigation='9' />
                <control ref='D2.4' mitigation='8' />
                <control ref='D2.5' mitigation='8' />
                <control ref='D2.6' mitigation='9' />
                <control ref='D2.7' mitigation='8' />
                <control ref='D2.8' mitigation='8' />
                <control ref='D2.9' mitigation='9' />
              </controls>
            </threat>
          </threats>
        </usecase>
        <usecase ref='LOGGING AND MONITORING' name='Logging and Monitoring' desc='' library=''>
          <threats>
            <threat ref='OWASP A10:2017-DAEMON' name='Attackers make undetected and unaudited changes to docker daemon configurations' state='Expose' source='MANUAL' owner='' library=''>
              <desc>Exploitation of insufficient logging and monitoring is the bedrock of nearly every
                                major incident.
                                Attackers rely on the lack of monitoring and timely response to achieve their goals
                                without being detected.
                            </desc>
              <riskRating confidentiality='25' integrity='75' availability='50' easeOfExploitation='25' />
              <references />
              <weaknesses>
                <weakness ref='CWE-778'>
                  <controls>
                    <control ref='D2.12' mitigation='50' />
                    <control ref='D2.2' mitigation='50' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D2.12' mitigation='50' />
                <control ref='D2.2' mitigation='50' />
              </controls>
            </threat>
          </threats>
        </usecase>
        <usecase ref='NETWORKING' name='Networking' desc='' library=''>
          <threats>
            <threat ref='DOCKER-WIDE-ATTACK-SURFACE-DAEMON' name='Attackers gain access to the Docker daemon by exploiting the vulnerabilities of the network' state='Expose' source='MANUAL' owner='' library=''>
              <desc>Every point of network interaction is a potential part of the network attack surface
                                having exploitable vulnerabilities.
                            </desc>
              <riskRating confidentiality='50' integrity='50' availability='75' easeOfExploitation='75' />
              <references />
              <weaknesses>
                <weakness ref='UNRESTRICTED-NETWORK'>
                  <controls>
                    <control ref='D2.15' mitigation='50' />
                    <control ref='D2.6' mitigation='50' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D2.15' mitigation='50' />
                <control ref='D2.6' mitigation='50' />
              </controls>
            </threat>
            <threat ref='CAPEC-157-DAEMON' name='Attackers get sensitive data from docker daemon through sniffing the transmisions between components' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An attacker monitors information transmitted between logical or physical nodes of a
                                network. The attacker need not be able to prevent reception or change content but must
                                simply be able to observe and read the traffic. The attacker might precipitate or
                                indirectly influence the content of the observed transaction, but the attacker is never
                                the intended recipient of the information. Any transmission medium can theoretically be
                                sniffed if the attacker can listen to the contents between the sender and recipient.
                            </desc>
              <riskRating confidentiality='50' integrity='50' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='SSL-WEAK-PROTOCOL'>
                  <controls>
                    <control ref='D2.4' mitigation='100' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D2.4' mitigation='100' />
              </controls>
            </threat>
            <threat ref='CAPEC-94-DAEMON' name='Attackers get sensitive data from the docker daemon by listening the communication between components' state='Expose' source='MANUAL' owner='' library=''>
              <desc>This type of attack targets the communication between two components (typically client
                                and server). The attacker places himself in the communication channel between the two
                                components. Whenever one component attempts to communicate with the other (data flow,
                                authentication challenges, etc.), the data first goes to the attacker, who has the
                                opportunity to observe or alter it, and it is then passed on to the other component as
                                if it was never intercepted. This interposition is transparent leaving the two
                                compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identify between two components.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='100' easeOfExploitation='100' />
              <references>
                <reference name='CAPEC-94: Man in the Middle Attack' url='https://capec.mitre.org/data/definitions/94.html' />
              </references>
              <weaknesses>
                <weakness ref='CWE-287'>
                  <controls>
                    <control ref='D2.4' mitigation='50' />
                    <control ref='D2.6' mitigation='50' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D2.4' mitigation='50' />
                <control ref='D2.6' mitigation='50' />
              </controls>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component ref='DOCKER-DAEMON-CONFIGURATION-FILES' name='Docker Daemon Configuration Files' desc='This Risk Pattern covers Docker related files and directory permissions and ownership. Keeping the files and directories that may contain sensitive parameters secure, is important for correct and secure functioning of Docker daemon.' groupName='' tags='' position='4' library='' diagramPositionX='0' diagramPositionY='0' componentDefinitionRef=''>
      <weaknesses>
        <weakness ref='CWE-250' name='Execution with Unnecessary Privileges' state='0' impact='100'>
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses. New
                        weaknesses can be exposed because running with extra privileges, such as root or Administrator,
                        can disable the normal security checks being performed by the operating system or surrounding
                        environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur
                        while operating at raised privileges.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Privilege management functions can behave in some less-than-obvious ways, and they have
                        different quirks on different platforms. These inconsistencies are particularly pronounced if
                        you are transitioning from one non-root user to another. Signal handlers and spawned processes
                        run at the privilege of the owning process, so if a process is running as root when a signal
                        fires or a sub-process is executed, the signal handler or sub-process will operate with root
                        privileges.
                        &lt;/div&gt;
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:01.960'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-250: Execution with Unnecessary Privileges' url='https://cwe.mitre.org/data/definitions/250.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-276' name='Incorrect Default Permissions' state='0' impact='100'>
          <desc>The software, upon installation, sets incorrect permissions for an object which exposes it to
                        an unintended actor.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:01.937'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-276: Incorrect Default Permissions' url='https://cwe.mitre.org/data/definitions/276.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-708' name='Incorrect Ownership Assignment' state='0' impact='100'>
          <desc>The software assigns an owner to a resource, but the owner is outside of the intended control
                        sphere.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:01.976'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-708: Incorrect Ownership Assignment' url='https://cwe.mitre.org/data/definitions/708.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-732' name='Incorrect Permission Assignment for Critical Resource' state='0' impact='100'>
          <desc>The software specifies permissions for a security-critical resource in a way that allows that
                        resource to be read or modified by unintended actors.
                        When a resource is given a permissions setting that provides access to a wider range of actors
                        than required, it could lead to the exposure of sensitive information, or the modification of
                        that resource by unintended parties. This is especially dangerous when the resource is related
                        to program configuration, execution or sensitive user data.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:01.989'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-732: Incorrect Permission Assignment for Critical Resource' url='https://cwe.mitre.org/data/definitions/732.html' />
            </references>
            <udts />
          </test>
        </weakness>
      </weaknesses>
      <controls>
        <control ref='D3.17' name='Ensure that daemon.json file ownership is set to root:root' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the daemon.json file ownership and group-ownership is correctly set to root.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        daemon.json file contains sensitive parameters that may alter the behavior of docker daemon.
                        Hence, it should be owned and group-owned by root to maintain the integrity of the file.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chown root:root /etc/docker/daemon.json&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        This would set the ownership and group-ownership for the file to root.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Daemon configuration file' url='https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file' />
          </references>
          <standards>
            <standard ref='3.17' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify the file is owned and group-owned by root:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %U:%G /etc/docker/daemon.json | grep -v root:root&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should not return anything.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.18' name='Ensure that daemon.json file permissions are set to 644 or more restrictive' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the daemon.json file permissions are correctly set to 644 or more restrictive.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        daemon.json file contains sensitive parameters that may alter the behavior of docker daemon.
                        Hence, it should be writable only by root to maintain the integrity of the file.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chmod 644 /etc/docker/daemon.json&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        This would set the file permissions for this file to 644.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Daemon configuration file' url='https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file' />
          </references>
          <standards>
            <standard ref='3.18' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify the file permissions are correctly set to 644 or more
                            restrictive:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %a /etc/docker/daemon.json
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.11' name='Ensure that Docker server certificate file ownership is set to root:root' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the Docker server certificate file (the file that is passed along with --tlscert
                        parameter) is owned and group-owned by root.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The Docker server certificate file should be protected from any tampering. It is used to
                        authenticate Docker server based on the given server certificate. Hence, it must be owned and
                        group-owned by root to maintain the integrity of the certificate.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chown root:root&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        This would set the ownership and group-ownership for the Docker server certificate file to root.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Insecure registry' url='https://docs.docker.com/registry/insecure/' />
            <reference name='Docker docs: Security https' url='https://docs.docker.com/engine/security/https/' />
          </references>
          <standards>
            <standard ref='3.11' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify the Docker server certificate file is owned and
                            group-owned by root:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %U:%G | grep -v root:root&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should not return anything.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.12' name='Ensure that Docker server certificate file permissions are set to 444 or more restrictive' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the Docker server certificate file (the file that is passed along with --tlscert
                        parameter) has permissions of 444 or more restrictive.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The Docker server certificate file should be protected from any tampering. It is used to
                        authenticate Docker server based on the given server certificate. Hence, it must have
                        permissions of 444 to maintain the integrity of the certificate.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chmod 444&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        This would set the file permissions of the Docker server file to 444.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Insecure registry' url='https://docs.docker.com/registry/insecure/' />
            <reference name='Docker docs: Security https' url='https://docs.docker.com/engine/security/https/' />
          </references>
          <standards>
            <standard ref='3.12' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify the Docker server certificate file has permissions of
                            444 or more restrictive:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %a
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.13' name='Ensure that Docker server certificate key file ownership is set to root:root' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the Docker server certificate key file (the file that is passed along with
                        --tlskey parameter) is owned and group-owned by root.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The Docker server certificate key file should be protected from any tampering or unneeded reads.
                        It holds the private key for the Docker server certificate. Hence, it must be owned and
                        group-owned by root to maintain the integrity of the Docker server certificate.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chown root:root&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        This would set the ownership and group-ownership for the Docker server certificate key file to
                        root.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Insecure registry' url='https://docs.docker.com/registry/insecure/' />
            <reference name='Docker docs: Security https' url='https://docs.docker.com/engine/security/https/' />
          </references>
          <standards>
            <standard ref='3.13' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify the Docker server certificate key file is owned and
                            group-owned by root:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %U:%G | grep -v root:root&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should not return anything.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.14' name='Ensure that Docker server certificate key file permissions are set to 400' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the Docker server certificate key file (the file that is passed along with
                        --tlskey parameter) has permissions of 400.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The Docker server certificate key file should be protected from any tampering or unneeded reads.
                        It holds the private key for the Docker server certificate. Hence, it must have permissions of
                        400 to maintain the integrity of the Docker server certificate.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chmod 400&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        This would set the Docker server certificate key file permissions to 400.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Insecure registry' url='https://docs.docker.com/registry/insecure/' />
            <reference name='Docker docs: Security https' url='https://docs.docker.com/engine/security/https/' />
          </references>
          <standards>
            <standard ref='3.14' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify the Docker server certificate key file has
                            permissions of 400:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %a
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.1' name='Ensure that docker.service file ownership is set to root:root' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the docker.service file ownership and group-ownership are correctly set to root.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        docker.service file contains sensitive parameters that may alter the behavior of Docker daemon.
                        Hence, it should be owned and group-owned by root to maintain the integrity of the file.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Step 1: Find out the file location: systemctl show -p FragmentPath docker.service&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Step 2: If the file does not exist, this recommendation is not applicable. If the file exists,
                        execute the below command with the correct file path to set the ownership and group ownership
                        for the file to root. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chown root:root /usr/lib/systemd/system/docker.service&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Systemd' url='https://docs.docker.com/engine/admin/systemd/' />
          </references>
          <standards>
            <standard ref='3.1' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1:&lt;/b&gt; Find out the file location: systemctl show -p FragmentPath
                            docker.service&amp;nbsp;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; If the file does not exist, this recommendation is not
                            applicable. If the file exists, execute the below command with the correct file path to
                            verify that the file is owned and group-owned by root. For example,&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %U:%G /usr/lib/systemd/system/docker.service | grep -v root:root&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should not return anything.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.2' name='Ensure that docker.service file permissions are set to 644 or more restrictive' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the docker.service file permissions are correctly set to 644 or more restrictive.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        docker.service file contains sensitive parameters that may alter the behavior of Docker daemon.
                        Hence, it should not be writable by any other user other than root to maintain the integrity of
                        the file.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Step 1: Find out the file location:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        systemctl show -p FragmentPath docker.service&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Step 2: If the file does not exist, this recommendation is not applicable. If the file exists,
                        execute the below command with the correct file path to set the file permissions to 644. For
                        example, chmod 644 /usr/lib/systemd/system/docker.service&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Systemd' url='https://docs.docker.com/articles/systemd/' />
          </references>
          <standards>
            <standard ref='3.2' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;Find out the file location:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            systemctl show -p FragmentPath docker.service&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; If the file does not exist, this recommendation is not
                            applicable. If the file exists, execute the below command with the correct file path to
                            verify that the file permissions are set to 644 or more restrictive. For example,&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            stat -c %a /usr/lib/systemd/system/docker.service
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.15' name='Ensure that Docker socket file ownership is set to root:docker' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the Docker socket file is owned by root and group-owned by docker.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker daemon runs as root. The default Unix socket hence must be owned by root. If any other
                        user or process owns this socket, then it might be possible for that non-privileged user or
                        process to interact with Docker daemon. Also, such a non-privileged user or process might
                        interact with containers. This is neither secure nor desired behavior.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Additionally, the Docker installer creates a Unix group called docker. You can add users to this
                        group, and then those users would be able to read and write to default Docker Unix socket. The
                        membership to the docker group is tightly controlled by the system administrator. If any other
                        group owns this socket, then it might be possible for members of that group to interact with
                        Docker daemon. Also, such a group might not be as tightly controlled as the docker group. This
                        is neither secure nor desired behavior. Hence, the default Docker Unix socket file must be owned
                        by root and group-owned by docker to maintain the integrity of the socket file.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chown root:docker /var/run/docker.sock&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        This would set the ownership to root and group-ownership to docker for default Docker socket
                        file.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Bind docker to port or socket' url='https://docs.docker.com/engine/reference/commandline/dockerd/#bind-docker-to-another-hostport-or-a-unix-socket' />
            <reference name='Docker docs: Daemon socket option' url='https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-socket-option' />
          </references>
          <standards>
            <standard ref='3.15' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify the Docker socket file is owned by root and
                            group-owned by docker:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %U:%G /var/run/docker.sock | grep -v root:docker&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;The above command should not return anything.
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.3' name='Ensure that docker.socket file ownership is set to root:root' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the docker.socket file ownership and group ownership is correctly set to root.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        docker.socket file contains sensitive parameters that may alter the behavior of Docker remote
                        API. Hence, it should be owned and group-owned by root to maintain the integrity of the file.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Step 1: Find out the file location:
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        systemctl show -p FragmentPath docker.socket&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Step 2: If the file does not exist, this recommendation is not applicable. If the file exists,
                        execute the below command with the correct file path to set the ownership and group ownership
                        for the file to root. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chown root:root /usr/lib/systemd/system/docker.socket&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Daemon socket option' url='https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-socket-option' />
            <reference name='Docker github: Docker socket' url='https://github.com/docker/docker-ce/blob/master/components/packaging/deb/systemd/docker.socket' />
          </references>
          <standards>
            <standard ref='3.3' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1:&lt;/b&gt; Find out the file location:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            systemctl show -p FragmentPath docker.socket&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; If the file does not exist, this recommendation is not
                            applicable. If the file exists, execute the below command with the correct file path to
                            verify that the file is owned and group-owned by root. For example,&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %U:%G /usr/lib/systemd/system/docker.socket | grep -v root:root&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should not return anything.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.4' name='Ensure that docker.socket file permissions are set to 644 or more restrictive' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the docker.socket file permissions are correctly set to 644 or more restrictive.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        docker.socket file contains sensitive parameters that may alter the behavior of Docker remote
                        API. Hence, it should be writable only by root to maintain the integrity of the file.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Step 1: Find out the file location:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        systemctl show -p FragmentPath docker.socket&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Step 2: If the file does not exist, this recommendation is not applicable. If the file exists,
                        execute the below command with the correct file path to set the file permissions to 644. For
                        example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chmod 644 /usr/lib/systemd/system/docker.socket&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Bind docker to port or socket' url='https://docs.docker.com/engine/reference/commandline/dockerd/#bind-docker-to-another-hostport-or-a-unix-socket' />
            <reference name='Docker fedora: Socket' url='https://github.com/YungSang/fedora-atomic-packer/blob/master/oem/docker.socket} [Docker centos 7|http://daviddaeschler.com/2014/12/14/centos-7rhel-7-and-docker-containers-on-boot/' />
          </references>
          <standards>
            <standard ref='3.4' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;Find out the file location:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            systemctl show -p FragmentPath docker.socket&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2: &lt;/b&gt;If the file does not exist, this recommendation is not
                            applicable. If the file exists, execute the below command with the correct file path to
                            verify that the file permissions are set to 644 or more restrictive. For example,&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %a /usr/lib/systemd/system/docker.socket
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.16' name='Ensure that Docker socket file permissions are set to 660 or more restrictive' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the Docker socket file has permissions of 660 or more restrictive.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Only root and members of docker group should be allowed to read and write to default Docker Unix
                        socket. Hence, the Docket socket file must have permissions of 660 or more restrictive.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        chmod 660 /var/run/docker.sock&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        This would set the file permissions of the Docker socket file to 660.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Bind docker to port or socket' url='https://docs.docker.com/engine/reference/commandline/dockerd/#bind-docker-to-another-hostport-or-a-unix-socket' />
            <reference name='Docker docs: Daemon socket option' url='https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-socket-option' />
          </references>
          <standards>
            <standard ref='3.16' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify the Docker socket file has permissions of 660 or more
                            restrictive:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %a /var/run/docker.sock
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.19' name='Ensure that /etc/default/docker file ownership is set to root:root' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the /etc/default/docker file ownership and group-ownership is correctly set to
                        root.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        /etc/default/docker file contains sensitive parameters that may alter the behavior of docker
                        daemon. Hence, it should be owned and group-owned by root to maintain the integrity of the file.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chown root:root /etc/default/docker&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        This would set the ownership and group-ownership for the file to root.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Configuring' url='https://docs.docker.com/engine/admin/configuring/' />
          </references>
          <standards>
            <standard ref='3.19' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify the file is owned and group-owned by root:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %U:%G /etc/default/docker | grep -v root:root&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should not return anything.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.20' name='Ensure that /etc/default/docker file permissions are set to 644 or more restrictive' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the /etc/default/docker file permissions are correctly set to 644 or more
                        restrictive.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        /etc/default/docker file contains sensitive parameters that may alter the behavior of docker
                        daemon. Hence, it should be writable only by root to maintain the integrity of the file.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chmod 644 /etc/default/docker&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        This would set the file permissions for this file to 644.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Configuring' url='https://docs.docker.com/engine/admin/configuring/' />
          </references>
          <standards>
            <standard ref='3.20' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify the file permissions are correctly set to 644 or more
                            restrictive:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %a /etc/default/docker
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.5' name='Ensure that /etc/docker directory ownership is set to root:root' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the /etc/docker directory ownership and group-ownership is correctly set to root.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        /etc/docker directory contains certificates and keys in addition to various sensitive files.
                        Hence, it should be owned and group-owned by root to maintain the integrity of the directory.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chown root:root /etc/docker&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        This would set the ownership and group-ownership for the directory to root.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Security https' url='https://docs.docker.com/engine/security/https/' />
          </references>
          <standards>
            <standard ref='3.5' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify that the directory is owned and group-owned by root:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %U:%G /etc/docker | grep -v root:root&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should not return anything.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.6' name='Ensure that /etc/docker directory permissions are set to 755 or more restrictive' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the /etc/docker directory permissions are correctly set to 755 or more
                        restrictive.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        /etc/docker directory contains certificates and keys in addition to various sensitive files.
                        Hence, it should only be writable by root to maintain the integrity of the directory.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chmod 755 /etc/docker&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        This would set the permissions for the directory to 755.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Security https' url='https://docs.docker.com/engine/security/https/' />
          </references>
          <standards>
            <standard ref='3.6' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify that the directory has permissions of 755 or more
                            restrictive:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %a /etc/docker
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.7' name='Ensure that registry certificate file ownership is set to root:root' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that all the registry certificate files (usually found under /etc/docker/certs.d/
                        directory) are owned and group-owned by root.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        /etc/docker/certs.d/ directory contains Docker registry certificates. These certificate files
                        must be owned and group-owned by root to maintain the integrity of the certificates.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chown root:root /etc/docker/certs.d//*&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        This would set the ownership and group-ownership for the registry certificate files to root.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Insecure registry' url='https://docs.docker.com/registry/insecure/' />
          </references>
          <standards>
            <standard ref='3.7' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify that the registry certificate files are owned and
                            group-owned by root:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %U:%G /etc/docker/certs.d/* | grep -v root:root&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should not return anything.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.8' name='Ensure that registry certificate file permissions are set to 444 or more restrictive' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that all the registry certificate files (usually found under /etc/docker/certs.d/
                        directory) have permissions of 444 or more restrictive.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        /etc/docker/certs.d/ directory contains Docker registry certificates. These certificate files
                        must have permissions of 444 to maintain the integrity of the certificates.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chmod 444 /etc/docker/certs.d//*
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        This would set the permissions for registry certificate files to 444.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Insecure registry' url='https://docs.docker.com/registry/insecure/' />
          </references>
          <standards>
            <standard ref='3.8' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify that the registry certificate files have permissions
                            of 444 or more restrictive:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %a /etc/docker/certs.d//*
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.9' name='Ensure that TLS CA certificate file ownership is set to root:root' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify the TLS CA certificate file (the file that is passed along with --tlscacert parameter)
                        is owned and group-owned by root.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The TLS CA certificate file should be protected from any tampering. It is used to authenticate
                        Docker server based on given CA certificate. Hence, it must be owned and group-owned by root to
                        maintain the integrity of the CA certificate.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        chown root:root&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        This would set the ownership and group-ownership for the TLS CA certificate file to root.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Insecure registry' url='https://docs.docker.com/registry/insecure/' />
            <reference name='Docker docs: Security https' url='https://docs.docker.com/engine/security/https/' />
          </references>
          <standards>
            <standard ref='3.9' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify that the TLS CA certificate file is owned and
                            group-owned by root:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %U:%G | grep -v root:root&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should not return anything.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D3.10' name='Ensure that TLS CA certificate file permissions are set to 444 or more restrictive' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify that the TLS CA certificate file (the file that is passed along with --tlscacert
                        parameter) has permissions of 444 or more restrictive.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The TLS CA certificate file should be protected from any tampering. It is used to authenticate
                        Docker server based on given CA certificate. Hence, it must have permissions of 444 to maintain
                        the integrity of the CA certificate.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        chmod 444 This would set the file permissions of the TLS CA file to 444.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Insecure registry' url='https://docs.docker.com/registry/insecure/' />
            <reference name='Docker docs: Security https' url='https://docs.docker.com/engine/security/https/' />
          </references>
          <standards>
            <standard ref='3.10' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command to verify the TLS CA certificate file has permissions of 444 or
                            more restrictive:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            stat -c %a
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
      </controls>
      <usecases>
        <usecase ref='AUTHENTICATION AND AUTHORIZATION' name='Authentication and Authorization' desc='' library=''>
          <threats>
            <threat ref='CAPEC-122-DOCKER-DAEMON-CONFIG-FILES' name='Attakers gain access without the necessary privileged to the docker daemon configuration files&#10;&#10;' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An adversary is able to exploit features of the target that should be reserved for
                                privileged users or administrators but are exposed to use by lower or non-privileged
                                accounts. Access to sensitive information and functionality must be controlled to ensure
                                that only authorized users are able to access these resources. If access control
                                mechanisms are absent or misconfigured, a user may be able to access resources that are
                                intended only for higher level users. An adversary may be able to exploit this to
                                utilize a less trusted account to gain information and perform activities reserved for
                                more trusted accounts. This attack differs from privilege escalation and other privilege
                                stealing attacks in that the adversary never actually escalates their privileges but
                                instead is able to use a lesser degree of privilege to access resources that should be
                                (but are not) reserved for higher privilege accounts. Likewise, the adversary does not
                                exploit trust or subvert systems - all control functionality is working as configured
                                but the configuration does not adequately protect sensitive resources at an appropriate
                                level.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='50' easeOfExploitation='50' />
              <references />
              <weaknesses>
                <weakness ref='CWE-250'>
                  <controls>
                    <control ref='D3.1' mitigation='5' />
                    <control ref='D3.10' mitigation='5' />
                    <control ref='D3.11' mitigation='5' />
                    <control ref='D3.12' mitigation='5' />
                    <control ref='D3.13' mitigation='5' />
                    <control ref='D3.14' mitigation='5' />
                    <control ref='D3.15' mitigation='5' />
                    <control ref='D3.16' mitigation='5' />
                    <control ref='D3.17' mitigation='5' />
                    <control ref='D3.18' mitigation='5' />
                    <control ref='D3.19' mitigation='5' />
                    <control ref='D3.2' mitigation='5' />
                    <control ref='D3.20' mitigation='5' />
                    <control ref='D3.3' mitigation='5' />
                    <control ref='D3.4' mitigation='5' />
                    <control ref='D3.5' mitigation='5' />
                    <control ref='D3.6' mitigation='5' />
                    <control ref='D3.7' mitigation='5' />
                    <control ref='D3.8' mitigation='5' />
                    <control ref='D3.9' mitigation='5' />
                  </controls>
                </weakness>
                <weakness ref='CWE-276'>
                  <controls>
                    <control ref='D3.1' mitigation='5' />
                    <control ref='D3.10' mitigation='5' />
                    <control ref='D3.11' mitigation='5' />
                    <control ref='D3.12' mitigation='5' />
                    <control ref='D3.13' mitigation='5' />
                    <control ref='D3.14' mitigation='5' />
                    <control ref='D3.15' mitigation='5' />
                    <control ref='D3.16' mitigation='5' />
                    <control ref='D3.17' mitigation='5' />
                    <control ref='D3.18' mitigation='5' />
                    <control ref='D3.19' mitigation='5' />
                    <control ref='D3.2' mitigation='5' />
                    <control ref='D3.20' mitigation='5' />
                    <control ref='D3.3' mitigation='5' />
                    <control ref='D3.4' mitigation='5' />
                    <control ref='D3.5' mitigation='5' />
                    <control ref='D3.6' mitigation='5' />
                    <control ref='D3.7' mitigation='5' />
                    <control ref='D3.8' mitigation='5' />
                    <control ref='D3.9' mitigation='5' />
                  </controls>
                </weakness>
                <weakness ref='CWE-708'>
                  <controls>
                    <control ref='D3.1' mitigation='5' />
                    <control ref='D3.11' mitigation='5' />
                    <control ref='D3.13' mitigation='5' />
                    <control ref='D3.15' mitigation='5' />
                    <control ref='D3.17' mitigation='5' />
                    <control ref='D3.19' mitigation='5' />
                    <control ref='D3.3' mitigation='5' />
                    <control ref='D3.5' mitigation='5' />
                    <control ref='D3.7' mitigation='5' />
                    <control ref='D3.9' mitigation='5' />
                  </controls>
                </weakness>
                <weakness ref='CWE-732'>
                  <controls>
                    <control ref='D3.1' mitigation='5' />
                    <control ref='D3.10' mitigation='5' />
                    <control ref='D3.11' mitigation='5' />
                    <control ref='D3.12' mitigation='5' />
                    <control ref='D3.13' mitigation='5' />
                    <control ref='D3.14' mitigation='5' />
                    <control ref='D3.15' mitigation='5' />
                    <control ref='D3.16' mitigation='5' />
                    <control ref='D3.17' mitigation='5' />
                    <control ref='D3.18' mitigation='5' />
                    <control ref='D3.19' mitigation='5' />
                    <control ref='D3.2' mitigation='5' />
                    <control ref='D3.20' mitigation='5' />
                    <control ref='D3.3' mitigation='5' />
                    <control ref='D3.4' mitigation='5' />
                    <control ref='D3.5' mitigation='5' />
                    <control ref='D3.6' mitigation='5' />
                    <control ref='D3.7' mitigation='5' />
                    <control ref='D3.8' mitigation='5' />
                    <control ref='D3.9' mitigation='5' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D3.1' mitigation='5' />
                <control ref='D3.10' mitigation='5' />
                <control ref='D3.11' mitigation='5' />
                <control ref='D3.12' mitigation='5' />
                <control ref='D3.13' mitigation='5' />
                <control ref='D3.14' mitigation='5' />
                <control ref='D3.15' mitigation='5' />
                <control ref='D3.16' mitigation='5' />
                <control ref='D3.17' mitigation='5' />
                <control ref='D3.18' mitigation='5' />
                <control ref='D3.19' mitigation='5' />
                <control ref='D3.2' mitigation='5' />
                <control ref='D3.20' mitigation='5' />
                <control ref='D3.3' mitigation='5' />
                <control ref='D3.4' mitigation='5' />
                <control ref='D3.5' mitigation='5' />
                <control ref='D3.6' mitigation='5' />
                <control ref='D3.7' mitigation='5' />
                <control ref='D3.8' mitigation='5' />
                <control ref='D3.9' mitigation='5' />
              </controls>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component ref='DOCKER' name='Docker Environment' desc='' groupName='' tags='' position='1' library='' diagramPositionX='0' diagramPositionY='0' componentDefinitionRef=''>
      <weaknesses />
      <controls />
      <usecases />
    </component>
    <component ref='DOCKER-IMAGES-BUILD-FILE' name='Docker Images and Build File' desc='Container base images and build files govern the fundamentals of how a container instance from a particular image would behave. Ensuring that you are using proper base images and appropriate build files can be very important for building your containerized infrastructure. This Risk Pattern contains some of the recommendations that you should follow for container base images and build files to ensure that your containerized infrastructure is secure.' groupName='' tags='' position='5' library='' diagramPositionX='0' diagramPositionY='0' componentDefinitionRef=''>
      <weaknesses>
        <weakness ref='CWE-250' name='Execution with Unnecessary Privileges' state='0' impact='100'>
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses. New
                        weaknesses can be exposed because running with extra privileges, such as root or Administrator,
                        can disable the normal security checks being performed by the operating system or surrounding
                        environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur
                        while operating at raised privileges.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Privilege management functions can behave in some less-than-obvious ways, and they have
                        different quirks on different platforms. These inconsistencies are particularly pronounced if
                        you are transitioning from one non-root user to another. Signal handlers and spawned processes
                        run at the privilege of the owning process, so if a process is running as root when a signal
                        fires or a sub-process is executed, the signal handler or sub-process will operate with root
                        privileges.
                        &lt;/div&gt;
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:04.558'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-250: Execution with Unnecessary Privileges' url='https://cwe.mitre.org/data/definitions/250.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-287' name='Improper Server&apos;s Identity Validation' state='0' impact='100'>
          <desc>The software does not validate, or incorrectly validates, the server's identity.
                        If the server's identity is not validated, an attacker could spoof a trusted entity by using a
                        man-in-the-middle (MITM) attack. The software might connect to a malicious host while believing
                        it is a trusted host, or the software might be deceived into accepting spoofed data that appears
                        to originate from a trusted host.

                        One way to perform server's authentication is by using X509 certificates over TLS.

                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:04.637'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-287: Improper Server&apos;s Identity Validation' url='https://cwe.mitre.org/data/definitions/287.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-276' name='Incorrect Default Permissions' state='0' impact='100'>
          <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to
                        an unintended actor.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:04.524'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-276: Incorrect Default Permissions' url='https://cwe.mitre.org/data/definitions/276.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-732' name='Incorrect Permission Assignment for Critical Resource' state='0' impact='100'>
          <desc>The software specifies permissions for a security-critical resource in a way that allows that
                        resource to be read or modified by unintended actors.
                        When a resource is given a permissions setting that provides access to a wider range of actors
                        than required, it could lead to the exposure of sensitive information, or the modification of
                        that resource by unintended parties. This is especially dangerous when the resource is related
                        to program configuration, execution or sensitive user data.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:04.572'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-732: Incorrect Permission Assignment for Critical Resource' url='https://cwe.mitre.org/data/definitions/732.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='UNPATCHED-SERVER' name='Recommended security patches are not applied' state='0' impact='100'>
          <desc>When patches are not applied in a timely manner then the server or system could be vulnerable
                        to known security issues. These issues could be used by an attacker to gain access to the
                        system.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:04.600'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-312' name='Secrets, API keys and or passwords are included in the source code or online repositories' state='0' impact='100'>
          <desc>API keys, passwords or secrets included in the source code or in the configuration files can
                        be leaked to users with access to the code. This access can be incidentally granted by
                        publishing the source code on a package-form or an online, public repository.
                        The unauthorized access to any of those secrets could lead to a compromise of sensitive data or
                        a system.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:04.610'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories' url='https://cwe.mitre.org/data/definitions/312.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-327' name='The component uses a weak TLS implementation' state='0' impact='100'>
          <desc>The use of an unverified TLS library could lead to the use of weak or faulty implementations
                        of the TLS protocol and cipher suites.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:04.625'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-327: The component uses a weak TLS implementation' url='https://cwe.mitre.org/data/definitions/327.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-2' name='Unexpected Environment Condition' state='0' impact='100'>
          <desc>This is a generic weakness that includes several different situations, they are all related to
                        unexpected environmental conditions and they could be related to:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Misconfiguration.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                        behavior.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:04.587'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-2: Unexpected Environment Condition' url='https://cwe.mitre.org/data/definitions/2.html' />
            </references>
            <udts />
          </test>
        </weakness>
      </weaknesses>
      <controls>
        <control ref='D4.1' name='Ensure a user for the container has been created' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Create a non-root user for the container in the Dockerfile for the container image.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        It is a good practice to run the container as a non-root user, if possible. Though user
                        namespace mapping is now available, if a user is already defined in the container image, the
                        container is run as that user by default and specific user namespace remapping is not required.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Ensure that the Dockerfile for the container image contains the below instruction: USER Where
                        username or ID refers to the user that could be found in the container base image. If there is
                        no specific user created in the container base image, then add a useradd command to add the
                        specific user before USER instruction. For example, add the below lines in the Dockerfile to
                        create a user in the container:
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        RUN useradd -d /home/username -m -s /bin/bash username USER username&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        Note: If there are users in the image that the containers do not need, consider deleting them.
                        After deleting those users, commit the image and then generate new instances of containers for
                        use.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker github: 2918' url='https://github.com/docker/docker/issues/2918' />
            <reference name='Docker github: 4572' url='https://github.com/docker/docker/pull/4572' />
            <reference name='Docker github: 7906' url='https://github.com/docker/docker/issues/7906' />
          </references>
          <standards>
            <standard ref='4.1' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}: User={{ .Config.User }}'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command should return container username or user ID. If it is blank it means, the
                            container is running as root.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D4.5' name='Ensure Content trust for Docker is Enabled' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Content trust is disabled by default. You should enable it.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Content trust provides the ability to use digital signatures for data sent to and received from
                        remote Docker registries. These signatures allow client-side verification of the integrity and
                        publisher of specific image tags. This ensures provenance of container images.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        To enable content trust in a bash shell, enter the following command:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        export DOCKER_CONTENT_TRUST=1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Alternatively, set this environment variable in your profile file so that content trust in
                        enabled on every login.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        In an environment where DOCKER_CONTENT_TRUST is set, you are required to follow trust procedures
                        while working with images - build, create, pull, push and run. You can use the
                        --disable-content-trust flag to run individual operations on tagged images without content trust
                        on an as-needed basis but that defeats the purpose of enabling content trust and hence, should
                        be avoided wherever possible.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note: Content trust is currently only available for users of the public Docker Hub. It is
                        currently not available for the Docker Trusted Registry or for private registries.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Content trust' url='https://docs.docker.com/engine/security/trust/content_trust/' />
            <reference name='Docker docs: Environment variables' url='https://docs.docker.com/engine/reference/commandline/cli/#environment-variables' />
            <reference name='Docker docs: Notary' url='https://docs.docker.com/engine/reference/commandline/cli/#notary' />
          </references>
          <standards>
            <standard ref='4.5' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;blockquote&gt;
                            echo $DOCKER_CONTENT_TRUST&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            This should return 1.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D4.9' name='Ensure COPY is used instead of ADD in Dockerfile' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Use COPY instruction instead of ADD instruction in the Dockerfile.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        COPY instruction just copies the files from the local host machine to the container file system.
                        ADD instruction potentially could retrieve files from remote URLs and perform operations such as
                        unpacking. Thus, ADD instruction introduces risks such as adding malicious files from URLs
                        without scanning and unpacking procedures for vulnerabilities.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use COPY instructions in Dockerfiles.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You would need to take care of the functionalities provided by ADD instructions such as fetching
                        files from remote URLs.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: add or copy' url='https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#add-or-copy' />
          </references>
          <standards>
            <standard ref='4.9' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;Run the below command to get the list of images:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker images&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2: &lt;/b&gt;Run the below command for each image in the list above and look
                            for any ADD instructions:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            docker history
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            Alternatively, if you have access to Dockerfile for the image, verify that there are no ADD
                            instructions.
                            &lt;/div&gt;
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D4.6' name='Ensure HEALTHCHECK instructions have been added to the container image' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Add HEALTHCHECK instruction in your docker container images to perform the health check on
                        running containers.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        One of the important security triads is availability. Adding HEALTHCHECK instruction to your
                        container image ensures that the docker engine periodically checks the running container
                        instances against that instruction to ensure that the instances are still working. Based on the
                        reported health status, the docker engine could then exit non-working containers and instantiate
                        new ones.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Follow Docker documentation and rebuild your container image with HEALTHCHECK instruction.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Healthcheck' url='https://docs.docker.com/engine/reference/builder/#healthcheck' />
          </references>
          <standards>
            <standard ref='4.6' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run the below command and ensure that the docker image has appropriate HEALTHCHECK
                            instruction set up.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker inspect --format='{{ .Config.Healthcheck }}'
                            &lt;img /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D4.4' name='Ensure images are scanned and rebuilt to include security patches' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Images should be scanned "frequently" for any vulnerabilities. Rebuild the images to include
                        patches and then instantiate new containers from it.

                        Rationale:
                        Vulnerabilities are loopholes/bugs that can be exploited and security patches are updates to
                        resolve these vulnerabilities. We can use image vulnerability scanning tools to find any kind of
                        vulnerabilities within the images and then check for available patches to mitigate these
                        vulnerabilities. Patches update the system to the most recent code base. Being on the current
                        code base is important because that's where vendors focus on fixing problems. Evaluate the
                        security patches before applying and follow the patching best practices.
                        Also, it would be better if, image vulnerability scanning tools could perform binary level
                        analysis or hash based verification instead of just version string matching.

                        Remediation:
                        Follow the below steps to rebuild the images with security patches:

                        Step 1: Pull all the base images (i.e., given your set of Dockerfiles, extract all images
                        declared in FROM instructions, and re-pull them to check for an updated/patched versions). Patch
                        the packages within the images too.

                        docker pull

                        Step 2: Force a rebuild of each image:

                        docker build --no-cache

                        Step 3: Restart all containers with the updated images.
                        You could also use ONBUILD directive in the Dockerfile to trigger particular update instructions
                        for images that you know are used as base images frequently.

                        Impact:
                        None
                    </desc>
          <implementations />
          <references>
            <reference name='Docker blog: security images scan' url='https://blog.docker.com/2016/05/docker-security-scanning/' />
            <reference name='Docker docs: Docker images' url='https://docs.docker.com/userguide/dockerimages/' />
            <reference name='Docker docs: Image scan' url='https://docs.docker.com/docker-cloud/builds/image-scan/' />
            <reference name='Docker docs: Onbuild' url='https://docs.docker.com/engine/reference/builder/#/onbuild' />
          </references>
          <standards>
            <standard ref='4.4' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1:&lt;/b&gt; List all the running instances of containers by executing
                            below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; For each container instance, execute the below or equivalent
                            command to find the list of packages installed within the container. Ensure that the
                            security updates for various affected packages are installed.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker exec $INSTANCE_ID rpm -qa&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Alternatively, you could run image vulnerability scanning tools which can scan all the
                            images in your ecosystem and then apply patches for the detected vulnerabilities based on
                            your patch management procedures.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D4.10' name='Ensure secrets are not stored in Dockerfiles' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Do not store any secrets in Dockerfiles.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Dockerfiles could be backtracked easily by using native Docker commands such as docker history
                        and various tools and utilities. Also, as a general practice, image publishers provide
                        Dockerfiles to build the credibility for their images. Hence, the secrets within these
                        Dockerfiles could be easily exposed and potentially be exploited.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Do not store any kind of secrets within Dockerfiles.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You would need to identify a way to handle secrets for your Docker images.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker 12factor: config' url='http://12factor.net/config' />
            <reference name='Docker avicoder: dump' url='https://avicoder.me/2016/07/22/Twitter-Vine-Source-code-dump/' />
            <reference name='Docker github: 13490' url='https://github.com/docker/docker/issues/13490' />
          </references>
          <standards>
            <standard ref='4.10' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;Run the below command to get the list of images:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker images&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; Run the below command for each image in the list above, and look
                            for any secrets:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker history&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Alternatively, if you have access to Dockerfile for the image, verify that there are no
                            secrets as described above.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D4.8' name='Ensure setuid and setgid permissions are removed in the images' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Removing setuid and setgid permissions in the images will help prevent privilege escalation
                        attacks in the containers.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        setuid and setgid permissions could be used for elevating privileges. While these permissions
                        are at times legitimately needed, these could potentially be used in privilege escalation
                        attacks. Thus, you should consider dropping these permissions for the packages which do not need
                        them within the images.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Allow setuid and setgid permissions only on executables which need them. You could remove these
                        permissions during build time by adding the following command in your Dockerfile, preferably
                        towards the end of the Dockerfile:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        RUN find / -perm +6000 -type f -exec chmod a-s {} \; || true&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Above command breaks all the executables that depend on setuid or setgid permissions including
                        the legitimate ones. Hence, be careful to modify the command to suit your requirements so that
                        it does not drop the permissions of legitimate programs. This requires a careful examination of
                        each executable and fine tuning the permissions.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker container solutions' url='http://container-solutions.com/content/uploads/2015/06/15.06.15_DockerCheatSheet_A2.pdf' />
            <reference name='Docker linux: setgid' url='http://man7.org/linux/man-pages/man2/setgid.2.html' />
            <reference name='Docker linux: setuid' url='http://man7.org/linux/man-pages/man2/setuid.2.html' />
            <reference name='Docker oreily: Docker security' url='http://www.oreilly.com/webops-perf/free/files/docker-security.pdf' />
          </references>
          <standards>
            <standard ref='4.8' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run the below command on the image to list the executables having setuid and setgid
                            permissions:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker run find / -perm +6000 -type f -exec ls -ld {} \; 2&amp;gt; /dev/null&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Carefully, review the list and ensure that it is legitimate.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D4.3' name='Ensure unnecessary packages are not installed in the container' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Containers tend to be minimal and slimmed down versions of the Operating System. Do not
                        install anything that does not justify the purpose of the container.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Bloated containers with unnecessary software could possibly increase the attack surface of the
                        container. This also voids the concept of minimal and slimmed down versions of container images.
                        Hence, do not install anything else apart from what is truly needed for the purpose of the
                        container.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        At the outset, do not install anything on the container that does not justify the purpose. If
                        the image had some packages that your container does not use, uninstall them. Consider using a
                        minimal base image rather than the standard Redhat/Centos/Debian images if you can. Some of the
                        options include BusyBox and Alpine. Not only does this trim your image size from &amp;gt;150Mb
                        to ~20 Mb, there are also fewer tools and paths to escalate privileges. You can even remove the
                        package installer as a final hardening measure for leaf/production containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Docker images' url='https://docs.docker.com/userguide/dockerimages/' />
            <reference name='Docker github: busybox' url='https://github.com/progrium/busybox' />
            <reference name='Docker linux: slimming down' url='http://www.livewyer.com/blog/2015/02/24/slimming-down-your-docker-containers-alpine-linux' />
          </references>
          <standards>
            <standard ref='4.3' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1:&lt;/b&gt; List all the running instances of containers by executing
                            below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker ps --quiet&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; For each container instance, execute the below or equivalent
                            command:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker exec $INSTANCE_ID rpm -qa&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The above command will list the packages installed on the container. Review the list and
                            ensure that it is legitimate.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D4.7' name='Ensure update instructions are not used alone in the Dockerfile' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Do not use update instructions such as apt-get update alone or in a single line in the
                        Dockerfile.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Adding the update instructions in a single line on the Dockerfile will cache the update layer.
                        Thus, when you build any image later using the same instruction, previously cached update layer
                        will be used. This could potentially deny any fresh updates to go in the later builds.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use update instructions along with install instructions (or any other) and version pinning for
                        packages while installing them. This would bust the cache and force extraction of the required
                        versions.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Alternatively, you could use --no-cache flag during docker build process to avoid using cached
                        layers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Best practices' url='https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#run' />
            <reference name='Docker github: 3313' url='https://github.com/docker/docker/issues/3313' />
          </references>
          <standards>
            <standard ref='4.7' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;Run the below command to get the list of images:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker images&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; Run the below command for each image in the list above, and look
                            for any update instructions being in a single line:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker history&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Alternatively, if you have access to Dockerfile for the image, verify that there are no
                            update instructions as described above.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D4.11' name='Ensure verified packages only are Installed' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Verify authenticity of the packages before installing them in the image.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Verifying authenticity of the packages is essential for building a secure container image.
                        Tampered packages could potentially be malicious or have some known vulnerabilities that could
                        be exploited.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Use GPG keys for downloading and verifying packages or any other secure package distribution
                        mechanism of your choice.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker github: Dockerfile' url='https://github.com/docker-library/httpd/blob/12bf8c8883340c98b3988a7bade8ef2d0d6dcf8a/2.4/Dockerfile' />
            <reference name='Docker github: Dockerfile alpine' url='https://github.com/docker-library/php/blob/d8a4ccf4d620ec866d5b42335b699742df08c5f0/7.0/alpine/Dockerfile' />
            <reference name='Docker oreily: Docker security' url='http://www.oreilly.com/webops-perf/free/files/docker-security.pdf' />
            <reference name='Docker redhat: team key' url='https://access.redhat.com/security/team/key' />
          </references>
          <standards>
            <standard ref='4.11' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1:&lt;/b&gt; Run the below command to get the list of images:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker images&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; Run the below command for each image in the list above, and look
                            for how the authenticity of the packages is determined. This could be via the use of GPG
                            keys or other secure package distribution mechanisms:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker history&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Alternatively, if you have access to Dockerfile for the image, verify that the authenticity
                            of the packages is checked.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
      </controls>
      <usecases>
        <usecase ref='AUTHENTICATION AND AUTHORIZATION' name='Authentication and Authorization' desc='' library=''>
          <threats>
            <threat ref='CAPEC-122-DOCKER-IMAGES-BUILD-FILES' name='Attakers gain access without the necessary privileged to the docker images and build files' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An adversary is able to exploit features of the target that should be reserved for
                                privileged users or administrators but are exposed to use by lower or non-privileged
                                accounts. Access to sensitive information and functionality must be controlled to ensure
                                that only authorized users are able to access these resources. If access control
                                mechanisms are absent or misconfigured, a user may be able to access resources that are
                                intended only for higher level users. An adversary may be able to exploit this to
                                utilize a less trusted account to gain information and perform activities reserved for
                                more trusted accounts. This attack differs from privilege escalation and other privilege
                                stealing attacks in that the adversary never actually escalates their privileges but
                                instead is able to use a lesser degree of privilege to access resources that should be
                                (but are not) reserved for higher privilege accounts. Likewise, the adversary does not
                                exploit trust or subvert systems - all control functionality is working as configured
                                but the configuration does not adequately protect sensitive resources at an appropriate
                                level.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='50' easeOfExploitation='50' />
              <references />
              <weaknesses>
                <weakness ref='CWE-250'>
                  <controls>
                    <control ref='D4.1' mitigation='50' />
                    <control ref='D4.8' mitigation='50' />
                  </controls>
                </weakness>
                <weakness ref='CWE-276'>
                  <controls>
                    <control ref='D4.1' mitigation='50' />
                    <control ref='D4.8' mitigation='50' />
                  </controls>
                </weakness>
                <weakness ref='CWE-732'>
                  <controls>
                    <control ref='D4.1' mitigation='50' />
                    <control ref='D4.8' mitigation='50' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D4.1' mitigation='50' />
                <control ref='D4.8' mitigation='50' />
              </controls>
            </threat>
          </threats>
        </usecase>
        <usecase ref='GENERAL' name='General' desc='' library=''>
          <threats>
            <threat ref='CAPEC-37-IMAGES-BUILD-FILE' name='Attackers gain access to the docker images and build files by using sensitive data which was found embedded within it' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An attacker examines a target system to find sensitive data that has been embedded
                                within it. This information can reveal confidential contents, such as account numbers or
                                individual keys/credentials that can be used as an intermediate step in a larger attack.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-312'>
                  <controls>
                    <control ref='D4.10' mitigation='100' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D4.10' mitigation='100' />
              </controls>
            </threat>
            <threat ref='OWASP A6:2017-DOCKER-IMAGES-BUILD-FILES' name='Exploitation of Security Misconfiguration of the Docker images and build files security&#10;&#10;' state='Expose' source='MANUAL' owner='' library=''>
              <desc>Attackers will often attempt to exploit unpatched flaws or access default accounts,
                                unused pages, unprotected files and directories, etc to gain unauthorized access or
                                knowledge of the system.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='50' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='UNPATCHED-SERVER'>
                  <controls>
                    <control ref='D4.4' mitigation='12' />
                  </controls>
                </weakness>
                <weakness ref='CWE-2'>
                  <controls>
                    <control ref='D4.11' mitigation='12' />
                    <control ref='D4.3' mitigation='13' />
                    <control ref='D4.5' mitigation='13' />
                    <control ref='D4.6' mitigation='13' />
                    <control ref='D4.7' mitigation='12' />
                    <control ref='D4.8' mitigation='13' />
                    <control ref='D4.9' mitigation='12' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D4.11' mitigation='12' />
                <control ref='D4.3' mitigation='13' />
                <control ref='D4.4' mitigation='12' />
                <control ref='D4.5' mitigation='13' />
                <control ref='D4.6' mitigation='13' />
                <control ref='D4.7' mitigation='12' />
                <control ref='D4.8' mitigation='13' />
                <control ref='D4.9' mitigation='12' />
              </controls>
            </threat>
          </threats>
        </usecase>
        <usecase ref='NETWORKING' name='Networking' desc='' library=''>
          <threats>
            <threat ref='CAPEC-157-IMAGES-BUILD-FILES' name='Attackers get sensitive data from docker images and build files through sniffing the transmisions between components' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An attacker monitors information transmitted between logical or physical nodes of a
                                network. The attacker need not be able to prevent reception or change content but must
                                simply be able to observe and read the traffic. The attacker might precipitate or
                                indirectly influence the content of the observed transaction, but the attacker is never
                                the intended recipient of the information. Any transmission medium can theoretically be
                                sniffed if the attacker can listen to the contents between the sender and recipient.
                            </desc>
              <riskRating confidentiality='50' integrity='50' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-327'>
                  <controls>
                    <control ref='D4.5' mitigation='100' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D4.5' mitigation='100' />
              </controls>
            </threat>
            <threat ref='CAPEC-94-IMAGES-BUILD-FILES' name='Attackers steal sensitive data from the docker images and build files by listening the communication between components' state='Expose' source='MANUAL' owner='' library=''>
              <desc>This type of attack targets the communication between two components (typically client
                                and server). The attacker places himself in the communication channel between the two
                                components. Whenever one component attempts to communicate with the other (data flow,
                                authentication challenges, etc.), the data first goes to the attacker, who has the
                                opportunity to observe or alter it, and it is then passed on to the other component as
                                if it was never intercepted. This interposition is transparent leaving the two
                                compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identify between two components.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-287'>
                  <controls>
                    <control ref='D4.5' mitigation='100' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D4.5' mitigation='100' />
              </controls>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component ref='DOCKER-LINUX-HOST-OS' name='Docker Linux Host OS' desc='The Docker Linux Host OS Risk Pattern is based on CIS Docker CE 17.06 Benchmark, which provides prescriptive guidance for establishing a secure configuration posture for Docker CE container version 17.06 and pertains to the Linux Host OS.' groupName='' tags='' position='6' library='' diagramPositionX='0' diagramPositionY='0' componentDefinitionRef=''>
      <weaknesses>
        <weakness ref='CWE-120' name='Buffer Copy without Checking Size of Input (&apos;Classic Buffer Overflow&apos;)' state='0' impact='100'>
          <desc>The program copies an input buffer to an output buffer without verifying that the size of the
                        input buffer is less than the size of the output buffer, leading to a buffer overflow.
                        A buffer overflow condition exists when a program attempts to put more data in a buffer than it
                        can hold, or when a program attempts to put data in a memory area outside of the boundaries of a
                        buffer. The simplest type of error, and the most common cause of buffer overflows, is the
                        "classic" case in which the program copies the buffer without restricting how much is copied.
                        Other variants exist, but the existence of a classic overflow strongly suggests that the
                        programmer is not considering even the most basic of security protections.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:12.917'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-120: Buffer Copy without Checking Size of Input (&apos;Classic Buffer Overflow&apos;)' url='https://cwe.mitre.org/data/definitions/120.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='MOB-DATA' name='Data is stored into unprotected locations' state='0' impact='100'>
          <desc>When sensitive data is stored into unprotected locations, an attacker with access to the
                        device through physical access or a remote exploit, could gain access to it.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:13.027'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-250' name='Execution with Unnecessary Privileges' state='0' impact='100'>
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses. New
                        weaknesses can be exposed because running with extra privileges, such as root or Administrator,
                        can disable the normal security checks being performed by the operating system or surrounding
                        environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur
                        while operating at raised privileges.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Privilege management functions can behave in some less-than-obvious ways, and they have
                        different quirks on different platforms. These inconsistencies are particularly pronounced if
                        you are transitioning from one non-root user to another. Signal handlers and spawned processes
                        run at the privilege of the owning process, so if a process is running as root when a signal
                        fires or a sub-process is executed, the signal handler or sub-process will operate with root
                        privileges.
                        &lt;/div&gt;
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:12.727'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-250: Execution with Unnecessary Privileges' url='https://cwe.mitre.org/data/definitions/250.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-276' name='Incorrect Default Permissions' state='0' impact='100'>
          <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to
                        an unintended actor.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:12.752'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-276: Incorrect Default Permissions' url='https://cwe.mitre.org/data/definitions/276.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-708' name='Incorrect Ownership Assignment' state='0' impact='100'>
          <desc>The software assigns an owner to a resource, but the owner is outside of the intended control
                        sphere.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:12.771'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-708: Incorrect Ownership Assignment' url='https://cwe.mitre.org/data/definitions/708.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-732' name='Incorrect Permission Assignment for Critical Resource' state='0' impact='100'>
          <desc>The software specifies permissions for a security-critical resource in a way that allows that
                        resource to be read or modified by unintended actors.
                        When a resource is given a permissions setting that provides access to a wider range of actors
                        than required, it could lead to the exposure of sensitive information, or the modification of
                        that resource by unintended parties. This is especially dangerous when the resource is related
                        to program configuration, execution or sensitive user data.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:12.790'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-732: Incorrect Permission Assignment for Critical Resource' url='https://cwe.mitre.org/data/definitions/732.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-524' name='Information Exposure Through Caching' state='0' impact='100'>
          <desc>The application uses a cache to maintain a pool of objects, threads, connections, pages, or
                        passwords to minimize the time it takes to access them or the resources to which they connect.
                        If implemented improperly, these caches can allow access to unauthorized information or cause a
                        denial of service vulnerability.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:13.007'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-524: Information Exposure Through Caching' url='https://cwe.mitre.org/data/definitions/524.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-922' name='Information Exposure Through Local Storage' state='0' impact='100'>
          <desc>The software stores sensitive information without properly limiting read or write access by
                        unauthorized actors.
                        If read access is not properly restricted, then attackers can steal the sensitive information.
                        If write access is not properly restricted, then attackers can modify and possibly delete the
                        data, causing incorrect results and possibly a denial of service.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:12.809'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-922: Information Exposure Through Local Storage' url='https://cwe.mitre.org/data/definitions/922.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-778' name='Insufficient Logging' state='0' impact='100'>
          <desc>When a security-critical event occurs, the software either does not record the event or omits
                        important details about the event when logging it.
                        When security-critical events are not logged properly, such as a failed login attempt, this can
                        make malicious behavior more difficult to detect and may hinder forensic analysis after an
                        attack succeeds.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:12.859'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-778: Insufficient Logging' url='https://cwe.mitre.org/data/definitions/778.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-485-PREPROD' name='Production data used in pre-production system' state='0' impact='100'>
          <desc>Production data used in pre-production system might not be properly protected as applications
                        in pre-production are not usually well tested. pre-production environments usually lack the
                        strong Countermeasures that are set for production environments.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:12.986'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-485: Production data used in pre-production system' url='https://cwe.mitre.org/data/definitions/485.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='UNPATCHED-SERVER' name='Recommended security patches are not applied' state='0' impact='100'>
          <desc>When patches are not applied in a timely manner then the server or system could be vulnerable
                        to known security issues. These issues could be used by an attacker to gain access to the
                        system.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:12.901'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-398' name='The application has not been securely developed' state='0' impact='100'>
          <desc>The code has features that do not directly introduce weakness or vulnerabilities, but indicate
                        that the product has not been carefully developed or maintained. Programs are more likely to be
                        secure when good development practices are followed. If a program is complex, difficult to
                        maintain, not portable, or shows evidence of neglect, then there is a higher likelihood that
                        weaknesses are buried in the code.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:12.964'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-398: The application has not been securely developed' url='https://cwe.mitre.org/data/definitions/398.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-284' name='The service contains vulnerabilities that could grant access to data' state='0' impact='100'>
          <desc>The services may contain security vulnerabilities that can be exploited by attackers to gain
                        unauthorized access to data or additional services.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:12.937'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-284: The service contains vulnerabilities that could grant access to data' url='https://cwe.mitre.org/data/definitions/284.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-400' name='Uncontrolled Resource Consumption (&apos;Resource Exhaustion&apos;)' state='0' impact='100'>
          <desc>The software does not properly restrict the size or amount of resources that are requested or
                        influenced by an actor, which can be used to consume more resources than intended.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:13.043'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-400: Uncontrolled Resource Consumption (&apos;Resource Exhaustion&apos;)' url='https://cwe.mitre.org/data/definitions/400.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-2' name='Unexpected Environment Condition' state='0' impact='100'>
          <desc>This is a generic weakness that includes several different situations, they are all related to
                        unexpected environmental conditions and they could be related to:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Misconfiguration.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                        behavior.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:12.879'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-2: Unexpected Environment Condition' url='https://cwe.mitre.org/data/definitions/2.html' />
            </references>
            <udts />
          </test>
        </weakness>
      </weaknesses>
      <controls>
        <control ref='D1.1' name='Ensure a separate partition for containers has been created' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>All Docker containers and their data and metadata is stored under /var/lib/docker directory.
                        By default, /var/lib/docker would be mounted under / or /var partitions based on availability.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker depends on /var/lib/docker as the default directory where all Docker related files,
                        including the images, are stored. This directory might fill up fast and soon Docker and the host
                        could become unusable. So, it is advisable to create a separate partition (logical volume) for
                        storing Docker files.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        For new installations, create a separate partition for /var/lib/docker mount point. For systems
                        that were previously installed, use the Logical Volume Manager (LVM) to create partitions.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker recommendation storage' url='https://www.projectatomic.io/docs/docker-storage-recommendation/' />
          </references>
          <standards>
            <standard ref='1.1' supportedStandardRef='Level 1 - Linux Host OS' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>In the Docker host execute the below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            grep /var/lib/docker /etc/fstab&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            This should return the partition details for /var/lib/docker mount point.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D1.8' name='Ensure auditing is configured for Docker files and directories - docker.service' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Audit docker.service, if applicable.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Apart from auditing your regular Linux file system and system calls, audit all Docker related
                        files and directories. Docker daemon runs with root privileges. Its behavior depends on some key
                        files and directories. docker.service is one such file. The docker.service file might be present
                        if the daemon parameters have been changed by an administrator. It holds various parameters for
                        Docker daemon. It must be audited, if applicable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If the file exists, add a rule for it. For example, Add the line as below in
                        /etc/audit/audit.rules file:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        -w /usr/lib/systemd/system/docker.service -k docker&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Then, restart the audit daemon. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        service auditd restart&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Auditing generates quite big log files. Ensure to rotate and archive them periodically. Also,
                        create a separate partition of audit logs to avoid filling root file system.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker redhat: chap system auditin' url='https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/chap-system_auditing.html' />
          </references>
          <standards>
            <standard ref='1.8' supportedStandardRef='Level 1 - Linux Host OS' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1:&lt;/b&gt; Find out the file location:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            systemctl show -p FragmentPath docker.service&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2: &lt;/b&gt;If the file does not exist, this recommendation is not
                            applicable. If the file exists, verify that there is an audit rule corresponding to the
                            file: For example, execute the below command:
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            auditctl -l | grep docker.service&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            This should list a rule for docker.service as per its location.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D1.9' name='Ensure auditing is configured for Docker files and directories - docker.socket' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Audit docker.socket, if applicable.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Apart from auditing your regular Linux file system and system calls, audit all Docker related
                        files and directories. Docker daemon runs with root privileges. Its behavior depends on some key
                        files and directories. docker.socket is one such file. It holds various parameters for Docker
                        daemon socket. It must be audited, if applicable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If the file exists, add a rule for it. For example, Add the line as below in
                        /etc/audit/audit.rules file:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        -w /usr/lib/systemd/system/docker.socket -k docker&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Then, restart the audit daemon.For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        service auditd restart&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Auditing generates quite big log files. Ensure to rotate and archive them periodically. Also,
                        create a separate partition of audit logs to avoid filling root file system.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker redhat: chap system auditin' url='https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/chap-system_auditing.html' />
          </references>
          <standards>
            <standard ref='1.9' supportedStandardRef='Level 1 - Linux Host OS' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1: &lt;/b&gt;Find out the file location:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            systemctl show -p FragmentPath docker.socket&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2: &lt;/b&gt;If the file does not exist, this recommendation is not
                            applicable. If the file exists, verify that there is an audit rule corresponding to the
                            file: For example, execute the below command:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            auditctl -l | grep docker.socket&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            This should list a rule for docker.socket as per its location.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D1.10' name='Ensure auditing is configured for Docker files and directories - /etc/default/docker' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Audit /etc/default/docker, if applicable.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Apart from auditing your regular Linux file system and system calls, audit all Docker related
                        files and directories. Docker daemon runs with root privileges. Its behavior depends on some key
                        files and directories. /etc/default/docker is one such file. It holds various parameters for
                        Docker daemon. It must be audited, if applicable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Add a rule for /etc/default/docker file. For example, Add the line as below in
                        /etc/audit/audit.rules file:
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        -w /etc/default/docker -k docker&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Then, restart the audit daemon. For example, service auditd restart&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Auditing generates quite big log files. Ensure to rotate and archive them periodically. Also,
                        create a separate partition of audit logs to avoid filling root file system.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker redhat: chap system auditin' url='https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/chap-system_auditing.html' />
          </references>
          <standards>
            <standard ref='1.10' supportedStandardRef='Level 1 - Linux Host OS' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Verify that there is an audit rule corresponding to /etc/default/docker file. For
                            example, execute below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            auditctl -l | grep /etc/default/docker&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            This should list a rule for /etc/default/docker file.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D1.7' name='Ensure auditing is configured for Docker files and directories - /etc/docker' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Audit /etc/docker.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Apart from auditing your regular Linux file system and system calls, audit all Docker related
                        files and directories. Docker daemon runs with root privileges. Its behavior depends on some key
                        files and directories. /etc/docker is one such directory. It holds various certificates and keys
                        used for TLS communication between Docker daemon and Docker client. It must be audited.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Add a rule for /etc/docker directory. For example, Add the line as below in
                        /etc/audit/audit.rules file:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        -w /etc/docker -k docker&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Then, restart the audit daemon. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        service auditd restart&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Auditing generates quite big log files. Ensure to rotate and archive them periodically. Also,
                        create a separate partition of audit logs to avoid filling root file system.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker redhat: chap system auditin' url='https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/chap-system_auditing.html' />
          </references>
          <standards>
            <standard ref='1.7' supportedStandardRef='Level 1 - Linux Host OS' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Verify that there is an audit rule corresponding to /etc/docker directory. For example,
                            execute below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            auditctl -l | grep /etc/docker&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            This should list a rule for /etc/docker directory.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D1.11' name='Ensure auditing is configured for Docker files and directories - /etc/docker/daemon.json' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Audit /etc/docker/daemon.json, if applicable.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Apart from auditing your regular Linux file system and system calls, audit all Docker related
                        files and directories. Docker daemon runs with root privileges. Its behavior depends on some key
                        files and directories. /etc/docker/daemon.json is one such file. It holds various parameters for
                        Docker daemon. It must be audited, if applicable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Add a rule for /etc/docker/daemon.json file. For example, Add the line as below in
                        /etc/audit/audit.rules file:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        -w /etc/docker/daemon.json -k docker&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Then, restart the audit daemon. For example, service auditd restart&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Auditing generates quite big log files. Ensure to rotate and archive them periodically. Also,
                        create a separate partition of audit logs to avoid filling root file system.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Daemon configuration file' url='https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file' />
            <reference name='Docker redhat: chap system auditin' url='https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/chap-system_auditing.html' />
          </references>
          <standards>
            <standard ref='1.11' supportedStandardRef='Level 1 - Linux Host OS' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Verify that there is an audit rule corresponding to /etc/docker/daemon.json file. For
                            example, execute below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            auditctl -l | grep /etc/docker/daemon.json&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            This should list a rule for /etc/docker/daemon.json file.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D1.12' name='Ensure auditing is configured for Docker files and directories - /usr/bin/docker-containerd' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Audit /usr/bin/docker-containerd, if applicable.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Apart from auditing your regular Linux file system and system calls, audit all Docker related
                        files and directories. Docker daemon runs with root privileges. Its behavior depends on some key
                        files and directories. /usr/bin/docker-containerd is one such file. Docker now relies on
                        containerd and runC to spawn containers. It must be audited, if applicable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Add a rule for /usr/bin/docker-containerd file. For example, Add the line as below in
                        /etc/audit/audit.rules file:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        -w /usr/bin/docker-containerd -k docker&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Then, restart the audit daemon. For example, service auditd restart
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Auditing generates quite big log files. Ensure to rotate and archive them periodically. Also,
                        create a separate partition of audit logs to avoid filling root file system.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Containerd tools' url='https://containerd.tools/' />
            <reference name='Docker github: 20662' url='https://github.com/docker/docker/pull/20662' />
            <reference name='Docker redhat: chap system auditin' url='https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/chap-system_auditing.html' />
          </references>
          <standards>
            <standard ref='1.12' supportedStandardRef='Level 1 - Linux Host OS' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Verify that there is an audit rule corresponding to /usr/bin/docker-containerd file. For
                            example, execute below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            auditctl -l | grep /usr/bin/docker-containerd&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            This should list a rule for /usr/bin/docker-containerd file.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D1.13' name='Ensure auditing is configured for Docker files and directories - /usr/bin/docker-runc' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Audit /usr/bin/docker-runc, if applicable.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Apart from auditing your regular Linux file system and system calls, audit all Docker related
                        files and directories. Docker daemon runs with root privileges. Its behavior depends on some key
                        files and directories. /usr/bin/docker-runc is one such file. Docker now relies on containerd
                        and runC to spawn containers. It must be audited, if applicable.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Add a rule for /usr/bin/docker-runc file. For example, Add the line as below in
                        /etc/audit/audit.rules file:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        -w /usr/bin/docker-runc -k docker&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Then, restart the audit daemon. For example, service auditd restart&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Auditing generates quite big log files. Ensure to rotate and archive them periodically. Also,
                        create a separate partition of audit logs to avoid filling root file system.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Containerd tools' url='https://containerd.tools/' />
            <reference name='Docker github: 20662' url='https://github.com/docker/docker/pull/20662' />
            <reference name='Docker redhat: chap system auditin' url='https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/chap-system_auditing.html' />
            <reference name='Opencontainers github: runc' url='https://github.com/opencontainers/runc' />
          </references>
          <standards>
            <standard ref='1.13' supportedStandardRef='Level 1 - Linux Host OS' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Verify that there is an audit rule corresponding to /usr/bin/docker-runc file. For
                            example, execute below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            auditctl -l | grep /usr/bin/docker-runc&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            This should list a rule for /usr/bin/docker-runc file.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D1.6' name='Ensure auditing is configured for Docker files and directories - /var/lib/docker' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Audit /var/lib/docker.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Apart from auditing your regular Linux file system and system calls, audit all Docker related
                        files and directories. Docker daemon runs with root privileges. Its behavior depends on some key
                        files and directories. /var/lib/docker is one such directory. It holds all the information about
                        containers. It must be audited.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Add a rule for /var/lib/docker directory. For example, Add the line as below in
                        /etc/audit/audit.rules file:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        -w /var/lib/docker -k docker&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Then, restart the audit daemon. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        service auditd restart&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Auditing generates quite big log files. Ensure to rotate and archive them periodically. Also,
                        create a separate partition of audit logs to avoid filling root file system.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker redhat: chap system auditin' url='https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/chap-system_auditing.html' />
          </references>
          <standards>
            <standard ref='1.6' supportedStandardRef='Level 1 - Linux Host OS' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Verify that there is an audit rule corresponding to /var/lib/docker directory. For
                            example, execute the below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            auditctl -l | grep /var/lib/docker&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            This should list a rule for /var/lib/docker directory.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D1.5' name='Ensure auditing is configured for the docker daemon' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Audit all Docker daemon activities.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Apart from auditing your regular Linux file system and system calls, audit Docker daemon as
                        well. Docker daemon runs with root privileges. It is thus necessary to audit its activities and
                        usage.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Add a rule for Docker daemon. For example, Add the line as below in /etc/audit/audit.rules file:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        -w /usr/bin/docker -k docker&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Then, restart the audit daemon. For example, service auditd restart&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Auditing generates quite big log files. Ensure to rotate and archive them periodically. Also,
                        create a separate partition of audit logs to avoid filling the root file system.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker redhat: chap system auditin' url='https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/chap-system_auditing.html' />
          </references>
          <standards>
            <standard ref='1.5' supportedStandardRef='Level 1 - Linux Host OS' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Verify that there is an audit rule for Docker daemon. For example, execute the below
                            command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            auditctl -l | grep /usr/bin/docker
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D6.2' name='Ensure container sprawl is avoided' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Do not keep a large number of containers on the same host.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The flexibility of containers makes it easy to run multiple instances of applications and
                        indirectly leads to Docker images that exist at varying security patch levels. It also means
                        that you are consuming host resources that otherwise could have been used for running 'useful'
                        containers. Having more than just the manageable number of containers on a particular host makes
                        the situation vulnerable to mishandling, misconfiguration and fragmentation. Thus, avoid
                        container sprawl and keep the number of containers on a host to a manageable total.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Periodically check your container inventory per host and clean up the stopped containers using
                        the below command:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker container prune&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If you keep too few containers per host, then perhaps you are not utilizing your host resources
                        adequately.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker techtarget' url='http://searchsdn.techtarget.com/feature/Docker-networking-How-Linux-containers-will-change-your-network' />
            <reference name='Zeltser: Security risks and benefits of docker application' url='https://zeltser.com/security-risks-and-benefits-of-docker-application/' />
          </references>
          <standards>
            <standard ref='6.2' supportedStandardRef='Level 1 - Linux Host OS' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1:&lt;/b&gt; Find the total number of containers you have on the host:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker info --format '{{ .Containers }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2:&lt;/b&gt; Execute the below commands to find the total number of
                            containers that are actually running or in the stopped state on the host.&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker info --format '{{ .ContainersStopped }}' docker info --format '{{ .ContainersRunning
                            }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If the difference between the number of containers that are stopped on the host and the
                            number of containers that are actually running on the host is large (say 25 or more), then
                            perhaps, the containers are sprawled on the host.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D1.3' name='Ensure Docker is up to date' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>There are frequent releases for Docker software that address security vulnerabilities, product
                        bugs and bring in new functionality. Keep a tab on these product updates and upgrade as
                        frequently as new security vulnerabilities are fixed or deemed correct for your organization.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By staying up to date on Docker updates, vulnerabilities in the Docker software can be
                        mitigated. An educated attacker may exploit known vulnerabilities when attempting to attain
                        access or elevate privileges. Not installing regular Docker updates may leave you running
                        vulnerable Docker software. It might lead to elevation privileges, unauthorized access or other
                        security breaches. Keep a track of new releases and update as necessary.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Keep a track of Docker releases and update as necessary.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Perform a risk assessment for docker version updates of how they may impact your Docker
                        operations. Be aware that several third-party products that use Docker may require older major
                        version of Docker to be supported.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: installation' url='https://docs.docker.com/engine/installation/' />
            <reference name='Docker github: docker-ce' url='https://github.com/docker/docker-ce/releases/latest' />
            <reference name='Moby github: docker-ce' url='https://github.com/moby/moby/releases/latest' />
          </references>
          <standards>
            <standard ref='1.3' supportedStandardRef='Level 1 - Linux Host OS' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command and verify that the Docker version is up to date as deemed
                            necessary. It is not a mandate to be on the latest version, though.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker version
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D6.1' name='Ensure image sprawl is avoided' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Do not keep a large number of container images on the same host. Use only tagged images as
                        appropriate.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Tagged images are useful to fall back from &amp;quot;latest&amp;quot; to a specific version of
                        an image in production. Images with unused or old tags may contain vulnerabilities that might be
                        exploited, if instantiated. Additionally, if you fail to remove unused images from the system
                        and there are various such redundant and unused images, the host filesystem may become full and
                        could lead to denial of service.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Keep the set of the images that you actually need and establish a workflow to remove old or
                        stale images from the host. Additionally, use features such as pull-by-digest to get specific
                        images from the registry. Additionally, you can follow the below set of steps to find unused
                        images on the system and delete them.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        Step 1 Make a list of all image IDs that are currently instantiated by executing below command:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker images --quiet | xargs docker inspect --format '{{ .Id }}: Image={{ .Config.Image }}'&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        Step 2: List all the images present on the system by executing the below command:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker images&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        Step 3: Compare the list of image IDs populated from Step 1 and Step 2 and find images that are
                        currently not being instantiated.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Step 4: Decide if you want to keep the images that are not currently in use. If not. delete them
                        by executing the below command:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker rmi $IMAGE_ID&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker clean up unused docker containers' url='http://craiccomputing.blogspot.in/2014/09/clean-up-unused-docker-containers-and.html' />
            <reference name='Docker docs: pull' url='https://docs.docker.com/engine/reference/commandline/pull/' />
            <reference name='Docker docs: rmi' url='https://docs.docker.com/engine/reference/commandline/rmi/' />
            <reference name='Docker forums: removed all unused images' url='https://forums.docker.com/t/command-to-remove-all-unused-images/20/8' />
            <reference name='Docker github: 11109' url='https://github.com/docker/docker/pull/11109' />
            <reference name='Docker github: 9054' url='https://github.com/docker/docker/issues/9054' />
          </references>
          <standards>
            <standard ref='6.1' supportedStandardRef='Level 1 - Linux Host OS' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1:&lt;/b&gt; Make a list of all image IDs that are currently instantiated
                            by executing the below command:
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker images --quiet | xargs docker inspect --format '{{ .Id }}: Image={{ .Config.Image }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 2: &lt;/b&gt;List all the images present on the system by executing the below
                            command:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker images&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;b&gt; Step 3:&lt;/b&gt; Compare the list of image IDs populated from Step 1 and Step 2
                            and find images that are currently not being instantiated. If any such unused or old images
                            are found, discuss with the system administrator the need to keep such images on the system.
                            If such a need is not justified enough, then this recommendation is non-compliant.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D1.4' name='Ensure only trusted users are allowed to control Docker daemon' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>The Docker daemon currently requires root privileges. A user added to the docker group gives
                        him full root access rights.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker allows you to share a directory between the Docker host and a guest container without
                        limiting the access rights of the container. This means that you can start a container and map
                        the / directory on your host to the container. The container will then be able to alter your
                        host file system without any restrictions. In simple terms, this means that you can attain
                        elevated privileges with just being a member of the docker group and then starting a container
                        with mapped / directory on the host.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Remove any users from the docker group that are not trusted. Additionally, do not create a
                        mapping of sensitive directories on host to container volumes.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Rights to build and execute containers as normal user would be restricted.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Daemon attack surface' url='https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface' />
            <reference name='Docker fedora: non root' url='http://www.projectatomic.io/blog/2015/08/why-we-dont-let-non-root-users-run-docker-in-centos-fedora-or-rhel/' />
            <reference name='Docker group cpnsidered harmful' url='https://www.andreas-jung.com/contents/on-docker-security-docker-group-considered-harmful' />
          </references>
          <standards>
            <standard ref='1.4' supportedStandardRef='Level 1 - Linux Host OS' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Execute the below command on the docker host and ensure that only trusted users are
                            members of the docker group.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            getent group docker
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D1.2' name='Ensure the container host has been Hardened' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Containers run on a Linux host. A container host can run one or more containers. It is of
                        utmost importance to harden the host to mitigate host security misconfiguration.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You should follow infrastructure security best practices and harden your host OS. Keeping the
                        host system hardened would ensure that the host vulnerabilities are mitigated. Not hardening the
                        host system could lead to security exposures and breaches.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You may consider various CIS Security Benchmarks for your container host. If you have other
                        security guidelines or regulatory requirements to adhere to, please follow them as appropriate
                        in your environment.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Additionally, you can run a kernel with grsecurity and PaX. This would add many safety checks,
                        both at compile-time and run-time. It is also designed to defeat many exploits and has powerful
                        security features. These features do not require Docker-specific configuration, since these
                        security features apply system-wide, independent of containers.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker benchmarks' url='https://learn.cisecurity.org/benchmarks' />
            <reference name='Docker docs: other kernel security features' url='https://docs.docker.com/engine/security/security/#other-kernel-security-features' />
            <reference name='Docker docs: Security' url='https://docs.docker.com/engine/security/security/' />
            <reference name='Grsecurity' url='https://grsecurity.net/' />
            <reference name='Grsecurity book' url='https://en.wikibooks.org/wiki/Grsecurity' />
            <reference name='Grsecurity pax' url='https://pax.grsecurity.net/' />
            <reference name='Pax' url='http://en.wikipedia.org/wiki/PaX' />
          </references>
          <standards>
            <standard ref='1.2' supportedStandardRef='Level 1 - Linux Host OS' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Ensure that the host specific security guidelines are followed. Ask the system
                            administrators which security benchmark the current host system complies with.&amp;nbsp;
                            &lt;div&gt;
                            Ensure that the host systems actually complies with that host specific security benchmark.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
      </controls>
      <usecases>
        <usecase ref='AUTHENTICATION AND AUTHORIZATION' name='Authentication and Authorization' desc='' library=''>
          <threats>
            <threat ref='CAPEC-122-DOCKER-LINUX' name='Attakers gain access without the necessary privileged to Linux security configurations' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An adversary is able to exploit features of the target that should be reserved for
                                privileged users or administrators but are exposed to use by lower or non-privileged
                                accounts. Access to sensitive information and functionality must be controlled to ensure
                                that only authorized users are able to access these resources. If access control
                                mechanisms are absent or misconfigured, a user may be able to access resources that are
                                intended only for higher level users. An adversary may be able to exploit this to
                                utilize a less trusted account to gain information and perform activities reserved for
                                more trusted accounts. This attack differs from privilege escalation and other privilege
                                stealing attacks in that the adversary never actually escalates their privileges but
                                instead is able to use a lesser degree of privilege to access resources that should be
                                (but are not) reserved for higher privilege accounts. Likewise, the adversary does not
                                exploit trust or subvert systems - all control functionality is working as configured
                                but the configuration does not adequately protect sensitive resources at an appropriate
                                level.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-250'>
                  <controls>
                    <control ref='D1.4' mitigation='25' />
                  </controls>
                </weakness>
                <weakness ref='CWE-276'>
                  <controls>
                    <control ref='D1.4' mitigation='25' />
                  </controls>
                </weakness>
                <weakness ref='CWE-708'>
                  <controls>
                    <control ref='D1.4' mitigation='25' />
                  </controls>
                </weakness>
                <weakness ref='CWE-732'>
                  <controls>
                    <control ref='D1.4' mitigation='25' />
                  </controls>
                </weakness>
                <weakness ref='CWE-922'>
                  <controls>
                    <control ref='D1.1' mitigation='25' />
                    <control ref='D6.1' mitigation='25' />
                    <control ref='D6.2' mitigation='25' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D1.1' mitigation='25' />
                <control ref='D1.4' mitigation='25' />
                <control ref='D6.1' mitigation='25' />
                <control ref='D6.2' mitigation='25' />
              </controls>
            </threat>
          </threats>
        </usecase>
        <usecase ref='GENERAL' name='General' desc='' library=''>
          <threats>
            <threat ref='CAPEC-125-LINUX' name='Attackers consume the resources of the Linux Host OS by rapidly engaging to do the target inaccessible or to break the target' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An adversary consumes the resources of a target by rapidly engaging in a large number
                                of interactions with the target. This type of attack generally exposes a weakness in
                                rate limiting or flow. When successful this attack prevents legitimate users from
                                accessing the service and can cause the target to crash. This attack differs from
                                resource depletion through leaks or allocations in that the latter attacks do not rely
                                on the volume of requests made to the target but instead focus on manipulation of the
                                target's operations. The key factor in a flooding attack is the number of requests the
                                adversary can make in a given period of time. The greater this number, the more likely
                                an attack is to succeed against a given target.
                            </desc>
              <riskRating confidentiality='50' integrity='50' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-400'>
                  <controls>
                    <control ref='D6.1' mitigation='50' />
                    <control ref='D6.2' mitigation='50' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D6.1' mitigation='50' />
                <control ref='D6.2' mitigation='50' />
              </controls>
            </threat>
            <threat ref='OWASP A6:2017-LINUX' name='Exploitation of Security Misconfiguration of the Linux system&#10;&#10;' state='Expose' source='MANUAL' owner='' library=''>
              <desc>Attackers will often attempt to exploit unpatched flaws or access default accounts,
                                unused pages, unprotected files and directories, etc to gain unauthorized access or
                                knowledge of the system.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='50' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-120'>
                  <controls>
                    <control ref='D1.2' mitigation='20' />
                    <control ref='D1.3' mitigation='20' />
                  </controls>
                </weakness>
                <weakness ref='MOB-DATA'>
                  <controls>
                    <control ref='D6.1' mitigation='20' />
                    <control ref='D6.2' mitigation='20' />
                  </controls>
                </weakness>
                <weakness ref='CWE-524'>
                  <controls>
                    <control ref='D6.1' mitigation='20' />
                    <control ref='D6.2' mitigation='20' />
                  </controls>
                </weakness>
                <weakness ref='CWE-485-PREPROD'>
                  <controls>
                    <control ref='D6.1' mitigation='20' />
                    <control ref='D6.2' mitigation='20' />
                  </controls>
                </weakness>
                <weakness ref='UNPATCHED-SERVER'>
                  <controls>
                    <control ref='D1.3' mitigation='20' />
                  </controls>
                </weakness>
                <weakness ref='CWE-398'>
                  <controls>
                    <control ref='D6.1' mitigation='20' />
                  </controls>
                </weakness>
                <weakness ref='CWE-284'>
                  <controls>
                    <control ref='D1.3' mitigation='20' />
                  </controls>
                </weakness>
                <weakness ref='CWE-2'>
                  <controls>
                    <control ref='D1.1' mitigation='20' />
                    <control ref='D1.2' mitigation='20' />
                    <control ref='D6.1' mitigation='20' />
                    <control ref='D6.2' mitigation='20' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D1.1' mitigation='20' />
                <control ref='D1.2' mitigation='20' />
                <control ref='D1.3' mitigation='20' />
                <control ref='D6.1' mitigation='20' />
                <control ref='D6.2' mitigation='20' />
              </controls>
            </threat>
          </threats>
        </usecase>
        <usecase ref='LOGGING AND MONITORING' name='Logging and Monitoring' desc='' library=''>
          <threats>
            <threat ref='OWASP A10:2017-LINUX' name='Attackers make undetected and unaudited changes to Linux host OS configurations' state='Expose' source='MANUAL' owner='' library=''>
              <desc>Exploitation of insufficient logging and monitoring is the bedrock of nearly every
                                major incident.
                                Attackers rely on the lack of monitoring and timely response to achieve their goals
                                without being detected.
                            </desc>
              <riskRating confidentiality='25' integrity='75' availability='50' easeOfExploitation='25' />
              <references />
              <weaknesses>
                <weakness ref='CWE-778'>
                  <controls>
                    <control ref='D1.10' mitigation='11' />
                    <control ref='D1.11' mitigation='11' />
                    <control ref='D1.12' mitigation='11' />
                    <control ref='D1.13' mitigation='11' />
                    <control ref='D1.5' mitigation='11' />
                    <control ref='D1.6' mitigation='11' />
                    <control ref='D1.7' mitigation='11' />
                    <control ref='D1.8' mitigation='11' />
                    <control ref='D1.9' mitigation='12' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D1.10' mitigation='11' />
                <control ref='D1.11' mitigation='11' />
                <control ref='D1.12' mitigation='11' />
                <control ref='D1.13' mitigation='11' />
                <control ref='D1.5' mitigation='11' />
                <control ref='D1.6' mitigation='11' />
                <control ref='D1.7' mitigation='11' />
                <control ref='D1.8' mitigation='11' />
                <control ref='D1.9' mitigation='12' />
              </controls>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component ref='DOCKER-SWARM' name='Docker Swarm' desc='This Risk Pattern lists the recommendations that alter and secure the behavior of Docker Swarm.' groupName='' tags='' position='7' library='' diagramPositionX='0' diagramPositionY='0' componentDefinitionRef=''>
      <weaknesses>
        <weakness ref='CWE-287' name='Improper Server&apos;s Identity Validation' state='0' impact='100'>
          <desc>The software does not validate, or incorrectly validates, the server's identity.
                        If the server's identity is not validated, an attacker could spoof a trusted entity by using a
                        man-in-the-middle (MITM) attack. The software might connect to a malicious host while believing
                        it is a trusted host, or the software might be deceived into accepting spoofed data that appears
                        to originate from a trusted host.

                        One way to perform server authentication is by using X509 certificates over TLS.

                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:11.282'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-287: Improper Server&apos;s Identity Validation' url='https://cwe.mitre.org/data/definitions/287.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-732' name='Incorrect Permission Assignment for Critical Resource' state='0' impact='100'>
          <desc>The software specifies permissions for a security-critical resource in a way that allows that
                        resource to be read or modified by unintended actors.
                        When a resource is given a permissions setting that provides access to a wider range of actors
                        than required, it could lead to the exposure of sensitive information, or the modification of
                        that resource by unintended parties. This is especially dangerous when the resource is related
                        to program configuration, execution or sensitive user data.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:11.176'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-732: Incorrect Permission Assignment for Critical Resource' url='https://cwe.mitre.org/data/definitions/732.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-311' name='Missing Encryption of Sensitive Data' state='0' impact='100'>
          <desc>The software does not encrypt sensitive or critical information before storage or
                        transmission. The lack of proper data encryption negates the guarantees of confidentiality,
                        integrity, and accountability that properly implemented encryption conveys.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:11.264'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-311: Missing Encryption of Sensitive Data' url='https://cwe.mitre.org/data/definitions/311.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='UNRESTRICTED-NETWORK' name='Service is exposed to a wide attack surface' state='0' impact='100'>
          <desc>The product is exposed or reachable to an unnecessarily large group of potential attackers. An
                        over-exposure of a component increases the chance of an attacker gaining access to the system
                        through a vulnerability.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:11.300'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-485' name='The application does not define isolated boundaries (Insufficient Encapsulation)' state='0' impact='100'>
          <desc>The application does not sufficiently encapsulate critical data or functionality.
                        Encapsulation is about drawing strong boundaries. In a web browser that might mean ensuring that
                        your mobile code cannot be abused by other mobile code. On the server it might mean
                        differentiation between validated data and unvalidated data, between one user's data and
                        another's, or between data users are allowed to see and data that they are not.

                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:11.214'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-485: The application does not define isolated boundaries (Insufficient Encapsulation)' url='https://cwe.mitre.org/data/definitions/485.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CSD-SESS-REAUTH' name='The application does not re-authenticate on critical functions' state='0' impact='100'>
          <desc>The application does not require the user to re-authenticate for specific critical functions,
                        like password changes or changes to sensitive security settings.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:11.154'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-2' name='Unexpected Environment Condition' state='0' impact='100'>
          <desc>This is a generic weakness that includes several different situations, they are all related to
                        unexpected environmental conditions and they could be related to:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Misconfiguration.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                        behavior.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:11.232'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-2: Unexpected Environment Condition' url='https://cwe.mitre.org/data/definitions/2.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-324' name='Use of a Key Past its Expiration Date' state='0' impact='100'>
          <desc>The product uses a cryptographic key or password past its expiration date, which diminishes
                        its safety significantly by increasing the timing window for cracking attacks against that key.
                        While the expiration of keys does not necessarily ensure that they are compromised, it is a
                        significant concern that keys which remain in use for prolonged periods of time have a
                        decreasing probability of integrity. For this reason, it is important to replace keys within a
                        period of time proportional to their strength.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:11.194'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-324: Use of a Key Past its Expiration Date' url='https://cwe.mitre.org/data/definitions/324.html' />
            </references>
            <udts />
          </test>
        </weakness>
      </weaknesses>
      <controls>
        <control ref='D7.9' name='Ensure CA certificates are rotated as appropriate' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Rotate root CA certificates as appropriate.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker Swarm uses mutual TLS for clustering operations amongst its nodes. Certificate rotation
                        ensures that in an event such as compromised node or key, it is difficult to impersonate a node.
                        Node certificates depend upon root CA certificates. For operational security, it is important to
                        rotate these frequently. Currently, root CA certificates are not rotated automatically. You
                        should thus establish a process to rotate it at the desired frequency.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Run the below command to rotate the certificate.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker swarm ca --rotate&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Swarm roating certificate' url='https://docs.docker.com/engine/swarm/how-swarm-mode-works/pki/#rotating-the-ca-certificate' />
          </references>
          <standards>
            <standard ref='7.9' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Based on your installation path, check the time stamp on the root CA certificate file.
                            For example,&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            ls -l /var/lib/docker/swarm/certificates/swarm-root-ca.crt&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            The certificate should have been rotated at the established frequency.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D7.4' name='Ensure data exchanged between containers are encrypted on different nodes on the overlay network' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Encrypt data exchanged between containers on different nodes on the overlay network.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, data exchanged between containers on different nodes on the overlay network is not
                        encrypted. This could potentially expose traffic between the container nodes.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Create overlay network with --opt encrypted flag.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Networking overlay security model' url='https://docs.docker.com/engine/userguide/networking/overlay-security-model/' />
            <reference name='Docker github: 24253' url='https://github.com/docker/docker/issues/24253' />
          </references>
          <standards>
            <standard ref='7.4' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run the below command and ensure that each overlay network has been encrypted.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker network ls --filter driver=overlay --quiet | xargs docker network inspect --format
                            '{{.Name}} {{ .Options }}'
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D7.5' name='Ensure Docker&apos;s secret management commands are used for managing secrets in a Swarm cluster' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Use Docker's in-built secret management command.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker has various commands for managing secrets in a Swarm cluster. This is the foundation for
                        future secret support in Docker with potential improvements such as Windows support, different
                        backing stores, etc.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Follow docker secret documentation and use it to manage secrets effectively.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: secret' url='https://docs.docker.com/engine/reference/commandline/secret/' />
          </references>
          <standards>
            <standard ref='7.5' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>On a swarm manager node, run the below command and ensure docker secret management is
                            used in your environment, if applicable.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker secret ls
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D7.10' name='Ensure management plane traffic has been separated from data plane traffic' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Separate management plane traffic from data plane traffic.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Separating the management plane traffic from data plane traffic ensures that this traffic are on
                        their respective paths. These paths could then be individually monitored and could be tied to
                        different traffic control policies and monitoring. This also ensures that the management plane
                        is always reachable despite the huge volume of data flow.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Initialize Swarm with dedicated interfaces for management and data planes respectively. For
                        example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker swarm init --advertise-addr=192.168.0.1 --data-path-addr=17.1.0.3&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;div&gt;
                        You would require 2 network interface cards per node.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Swarm data path addr' url='https://docs.docker.com/engine/reference/commandline/swarm_init/#--data-path-addr' />
            <reference name='Moby github: 32717' url='https://github.com/moby/moby/pull/32717' />
            <reference name='Moby github: 33938' url='https://github.com/moby/moby/issues/33938' />
          </references>
          <standards>
            <standard ref='7.10' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run the below command on each swarm node and ensure that the management plane address is
                            different from the data plane address.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker node inspect --format '{{ .Status.Addr }}' self&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Note: At the time of writing this benchmark, there is no way to inspect the data plane
                            address. An issue has been raised and is in the reference link.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D7.8' name='Ensure node certificates are rotated as appropriate' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Rotate swarm node certificates as appropriate.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Docker Swarm uses mutual TLS for clustering operations amongst its nodes. Certificate rotation
                        ensures that in an event such as a compromised node or key, it is difficult to impersonate a
                        node. By default, node certificates are rotated every 90 days. You should rotate it more often
                        or as appropriate in your environment.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Run the below command to set the desired expiry time. For example,&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker swarm update --cert-expiry 48h&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Swarm updates' url='https://docs.docker.com/engine/reference/commandline/swarm_update/#examples' />
          </references>
          <standards>
            <standard ref='7.8' supportedStandardRef='Level 2 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run the below command and ensure that the node certificate Expiry Duration is set as
                            appropriate.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker info | grep &amp;quot;Expiry Duration&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D7.7' name='Ensure swarm manager auto-lock key is rotated periodically' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Rotate swarm manager auto-lock key periodically.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Swarm manager auto-lock key is not automatically rotated. You should rotate them periodically as
                        a best practice.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Run the below command to rotate the keys.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker swarm unlock-key --rotate&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Additionally, to facilitate audit for this recommendation, maintain key rotation records and
                        ensure that you establish a pre-defined frequency for key rotation.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: swarm unlock key' url='https://docs.docker.com/engine/reference/commandline/swarm_unlock-key/' />
          </references>
          <standards>
            <standard ref='7.7' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Currently, there is no mechanism to find out when the key was last rotated on a swarm
                            manager node. You should check with the system administrator if there is a key rotation
                            record and the keys were rotated at a pre-defined frequency.
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D7.6' name='Ensure swarm manager is running in auto-lock mode' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Run Docker swarm manager in auto-lock mode.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        When Docker restarts, both the TLS key used to encrypt communication among swarm nodes, and the
                        key used to encrypt and decrypt Raft logs on disk, are loaded into each manager node's memory.
                        You should protect the mutual TLS encryption key and the key used to encrypt and decrypt Raft
                        logs at rest. This protection could be enabled by initializing swarm with the --autolock flag.
                        With --autolock enabled, when Docker restarts, you must unlock the swarm first, using a key
                        encryption key generated by Docker when the swarm was initialized.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If you are initializing swarm, use the below command. docker swarm init --autolock If you want
                        to set --autolock on an existing swarm manager node, use the below command.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker swarm update --autolock&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        A swarm in auto-lock mode won't recover from a re-start without manual intervention from a user
                        to enter the unlock key. In some deployments, this might not be good for availability.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Swarm manager locking' url='https://docs.docker.com/engine/swarm/swarm_manager_locking/' />
          </references>
          <standards>
            <standard ref='7.6' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run the below command. If it outputs the key, it means swarm was initialized with the
                            --autolock flag. If the output is no unlock key is set, it means that swarm was NOT
                            initialized with the --autolock flag and is non-compliant with respect to this
                            recommendation.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker swarm unlock-key
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D7.1' name='Ensure swarm mode is not Enabled, if not needed' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Do not enable swarm mode on a docker engine instance unless needed.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, a Docker engine instance will not listen on any network ports, with all
                        communication with the client coming over the Unix socket. When Docker swarm mode is enabled on
                        a docker engine instance, multiple network ports are opened on the system and made available to
                        other systems on the network for the purposes of cluster management and node communication.
                        Opening network ports on a system increase its attack surface and this should be avoided unless
                        required.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If swarm mode has been enabled on a system in error, run:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        docker swarm leave&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Swarm init' url='https://docs.docker.com/engine/reference/commandline/swarm_init/' />
          </references>
          <standards>
            <standard ref='7.1' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;ol&gt;
                            &lt;li&gt;Review the output of the docker info command. If the output includes Swarm: active
                            it indicates that swarm mode has been activated on the Docker engine.&lt;/li&gt;
                            &lt;li&gt;Confirm if swarm mode on the docker engine instance is actually needed.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;ul&gt;
                            &lt;ul&gt;
                            &lt;/ul&gt;
                            &lt;/ul&gt;
                            &lt;ul&gt;
                            &lt;/ul&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D7.3' name='Ensure swarm services are binded to a specific host interface' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>By default, the docker swarm services will listen to all interfaces on the host, which may not
                        be necessary for the operation of the swarm where the host has multiple network interfaces.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        When a swarm is initialized the default value for the --listen-addr flag is 0.0.0.0:2377 which
                        means that the swarm services will listen on all interfaces on the host. If a host has multiple
                        network interfaces this may be undesirable as it may expose the docker swarm services to
                        networks which are not involved in the operation of the swarm. By passing a specific IP address
                        to the --listen-addr, a specific network interface can be specified limiting this exposure.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Remediation of this requires re-initialization of the swarm specifying a specific interface for
                        the --listen-addr parameter.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Swarm init listen addr' url='https://docs.docker.com/engine/reference/commandline/swarm_init/#--listen-addr' />
            <reference name='Docker docs: Swarm recover from disaster' url='https://docs.docker.com/engine/swarm/admin_guide/#recover-from-disaster' />
          </references>
          <standards>
            <standard ref='7.3' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>List the network listener on port 2377/TCP (the default for docker swarm) and confirm
                            that it is only listening on specific interfaces. For example, using ubuntu this could be
                            done with the following command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            netstat -lt | grep -i 2377
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
        <control ref='D7.2' name='Ensure the minimum number of manager nodes have been created in a swarm' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Ensure that the minimum number of required manager nodes is created in a swarm.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Manager nodes within a swarm have control over the swarm and change its configuration modifying
                        security parameters. Having excessive manager nodes could render the swarm more susceptible to
                        compromise. If fault tolerance is not required in the manager nodes, a single node should be
                        elected as a manger. If fault tolerance is required then the smallest practical odd number to
                        achieve the appropriate level of tolerance should be configured.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        If an excessive number of managers is configured, the excess can be demoted as worker using the
                        following command: docker node demote Where is the node ID value of the manager to be demoted.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: add manage nodes for fault tolerance' url='https://docs.docker.com/engine/swarm/admin_guide/#/add-manager-nodes-for-fault-tolerance' />
            <reference name='Docker docs: manage nodes' url='https://docs.docker.com/engine/swarm/manage-nodes/' />
          </references>
          <standards>
            <standard ref='7.2' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run docker info and verify the number of managers.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker info --format '{{ .Swarm.Managers }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            Alternatively run the below command. docker node ls | grep 'Leader'
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
      </controls>
      <usecases>
        <usecase ref='AUTHENTICATION AND AUTHORIZATION' name='Authentication and Authorization' desc='' library=''>
          <threats>
            <threat ref='CAPEC-122-DOCKER-SWARM' name='Attakers gain access without the necessary privileged to the docker swarm' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An adversary is able to exploit features of the target that should be reserved for
                                privileged users or administrators but are exposed to use by lower or non-privileged
                                accounts. Access to sensitive information and functionality must be controlled to ensure
                                that only authorized users are able to access these resources. If access control
                                mechanisms are absent or misconfigured, a user may be able to access resources that are
                                intended only for higher level users. An adversary may be able to exploit this to
                                utilize a less trusted account to gain information and perform activities reserved for
                                more trusted accounts. This attack differs from privilege escalation and other privilege
                                stealing attacks in that the adversary never actually escalates their privileges but
                                instead is able to use a lesser degree of privilege to access resources that should be
                                (but are not) reserved for higher privilege accounts. Likewise, the adversary does not
                                exploit trust or subvert systems - all control functionality is working as configured
                                but the configuration does not adequately protect sensitive resources at an appropriate
                                level.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-732'>
                  <controls>
                    <control ref='D7.2' mitigation='33' />
                  </controls>
                </weakness>
                <weakness ref='CSD-SESS-REAUTH'>
                  <controls>
                    <control ref='D7.6' mitigation='33' />
                  </controls>
                </weakness>
                <weakness ref='CWE-324'>
                  <controls>
                    <control ref='D7.7' mitigation='34' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D7.2' mitigation='33' />
                <control ref='D7.6' mitigation='33' />
                <control ref='D7.7' mitigation='34' />
              </controls>
            </threat>
          </threats>
        </usecase>
        <usecase ref='GENERAL' name='General' desc='' library=''>
          <threats>
            <threat ref='OWASP A6:2017-DOCKER-SWARM' name='Exploitation of Security Misconfiguration of the Docker swarm' state='Expose' source='MANUAL' owner='' library=''>
              <desc>Attackers will often attempt to exploit unpatched flaws or access default accounts,
                                unused pages, unprotected files and directories, etc to gain unauthorized access or
                                knowledge of the system.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='50' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-485'>
                  <controls>
                    <control ref='D7.10' mitigation='25' />
                  </controls>
                </weakness>
                <weakness ref='CWE-2'>
                  <controls>
                    <control ref='D7.1' mitigation='25' />
                    <control ref='D7.3' mitigation='25' />
                    <control ref='D7.5' mitigation='25' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D7.1' mitigation='25' />
                <control ref='D7.10' mitigation='25' />
                <control ref='D7.3' mitigation='25' />
                <control ref='D7.5' mitigation='25' />
              </controls>
            </threat>
          </threats>
        </usecase>
        <usecase ref='NETWORKING' name='Networking' desc='' library=''>
          <threats>
            <threat ref='DOCKER-WIDE-ATTACK-SURFACE-SWARM' name='Attackers gain access to the Docker swarm by exploiting the vulnerabilities of the network' state='Expose' source='MANUAL' owner='' library=''>
              <desc>Every point of network interaction is a potential part of the network attack surface
                                having exploitable vulnerabilities.
                            </desc>
              <riskRating confidentiality='50' integrity='50' availability='75' easeOfExploitation='75' />
              <references />
              <weaknesses>
                <weakness ref='UNRESTRICTED-NETWORK'>
                  <controls>
                    <control ref='D7.1' mitigation='50' />
                    <control ref='D7.3' mitigation='50' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D7.1' mitigation='50' />
                <control ref='D7.3' mitigation='50' />
              </controls>
            </threat>
            <threat ref='CAPEC-157-SWARM' name='Attackers get sensitive data from docker swarm through sniffing the transmisions between components' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An attacker monitors information transmitted between logical or physical nodes of a
                                network. The attacker need not be able to prevent reception or change content but must
                                simply be able to observe and read the traffic. The attacker might precipitate or
                                indirectly influence the content of the observed transaction, but the attacker is never
                                the intended recipient of the information. Any transmission medium can theoretically be
                                sniffed if the attacker can listen to the contents between the sender and recipient.
                            </desc>
              <riskRating confidentiality='50' integrity='50' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-311'>
                  <controls>
                    <control ref='D7.4' mitigation='50' />
                    <control ref='D7.6' mitigation='50' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D7.4' mitigation='50' />
                <control ref='D7.6' mitigation='50' />
              </controls>
            </threat>
            <threat ref='CAPEC-94-SWARM' name='Attackers get sensitive data from the docker swarm by listening the communication between components' state='Expose' source='MANUAL' owner='' library=''>
              <desc>This type of attack targets the communication between two components (typically client
                                and server). The attacker places himself in the communication channel between the two
                                components. Whenever one component attempts to communicate with the other (data flow,
                                authentication challenges, etc.), the data first goes to the attacker, who has the
                                opportunity to observe or alter it, and it is then passed on to the other component as
                                if it was never intercepted. This interposition is transparent leaving the two
                                compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identify between two components.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-287'>
                  <controls>
                    <control ref='D7.8' mitigation='50' />
                    <control ref='D7.9' mitigation='50' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D7.8' mitigation='50' />
                <control ref='D7.9' mitigation='50' />
              </controls>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component ref='INTER-CONTAINER-COMMUNICATION' name='Inter-Container Communication' desc='This Risk Pattern contains the recommendations applied when the containers should communicate with each other.' groupName='' tags='' position='8' library='' diagramPositionX='0' diagramPositionY='0' componentDefinitionRef=''>
      <weaknesses>
        <weakness ref='CWE-276' name='Incorrect Default Permissions' state='0' impact='100'>
          <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to
                        an unintended actor.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:51:59.617'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-276: Incorrect Default Permissions' url='https://cwe.mitre.org/data/definitions/276.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-200' name='Information Exposure' state='0' impact='100'>
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:51:59.633'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-200: Information Exposure' url='https://cwe.mitre.org/data/definitions/200.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='UNRESTRICTED-NETWORK' name='Service is exposed to a wide attack surface' state='0' impact='100'>
          <desc>The product is exposed or reachable to an unnecessarily large group of potential attackers. An
                        over-exposure of a component increases the chance of an attacker gaining access to the system
                        through a vulnerability.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:51:59.645'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </weakness>
      </weaknesses>
      <controls>
        <control ref='D2.1.1' name='Ensure that only containers which are required to communicate with each other are linked together' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>By default, all network traffic is allowed between containers on the same host on the default
                        network bridge. If your containers should communicate with each other, you can create a custom
                        network and only join containers that need to communicate to that custom network. Alternatively,
                        link only specific containers together that require communication.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, unrestricted network traffic is enabled between all containers on the same host on
                        the default network bridge. Thus, each container has the potential of reading all packets across
                        the container network on the same host. This might lead to an unintended and unwanted disclosure
                        of information to other containers. Hence, create a custom network and only join containers that
                        need to communicate to that custom network or link only specific containers together that
                        require communication.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You can follow the Docker documentation to create a custom network and only join containers that
                        need to communicate to that custom network. The --icc parameter only applies to the default
                        docker bridge, if custom networks are used then the approach of segmenting networks should be
                        adopted instead.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Alternatively, follow the Docker documentation and link specific containers using the --link
                        flag.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Note: Docker warns users not to use the --link flag unless absolutely necessary, because it is a
                        legacy Docker feature and it may eventually be removed.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        You have to manage the custom networks.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Bridge' url='https://docs.docker.com/network/bridge/' />
            <reference name='Docker docs: Links' url='https://docs.docker.com/network/links/' />
          </references>
          <standards>
            <standard ref='2.1' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>The docker network inspect command returns information about a network and can be used as
                            follows:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;Step 1:&lt;/b&gt; Ensure the default bridge network has no containers:&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker network inspect bridge&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;&lt;b&gt;Step 2:&lt;/b&gt; Check your custom network for joined containers:&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker network inspect
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
      </controls>
      <usecases>
        <usecase ref='AUTHENTICATION AND AUTHORIZATION' name='Authentication and Authorization' desc='' library=''>
          <threats>
            <threat ref='CAPEC-122-DOCKER-CONTAINERS' name='Attakers gain access without the necessary privileged to the docker connection inter-container' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An adversary is able to exploit features of the target that should be reserved for
                                privileged users or administrators but are exposed to use by lower or non-privileged
                                accounts. Access to sensitive information and functionality must be controlled to ensure
                                that only authorized users are able to access these resources. If access control
                                mechanisms are absent or misconfigured, a user may be able to access resources that are
                                intended only for higher level users. An adversary may be able to exploit this to
                                utilize a less trusted account to gain information and perform activities reserved for
                                more trusted accounts. This attack differs from privilege escalation and other privilege
                                stealing attacks in that the adversary never actually escalates their privileges but
                                instead is able to use a lesser degree of privilege to access resources that should be
                                (but are not) reserved for higher privilege accounts. Likewise, the adversary does not
                                exploit trust or subvert systems - all control functionality is working as configured
                                but the configuration does not adequately protect sensitive resources at an appropriate
                                level.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-276'>
                  <controls>
                    <control ref='D2.1.1' mitigation='100' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D2.1.1' mitigation='100' />
              </controls>
            </threat>
          </threats>
        </usecase>
        <usecase ref='GENERAL' name='General' desc='' library=''>
          <threats>
            <threat ref='CAPEC-37-CONTAINER-COMMUNICATION' name='Attackers gain access to the docker container communication by using sensitive data which was found embedded within it' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An attacker examines a target system to find sensitive data that has been embedded
                                within it. This information can reveal confidential contents, such as account numbers or
                                individual keys/credentials that can be used as an intermediate step in a larger attack.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-200'>
                  <controls>
                    <control ref='D2.1.1' mitigation='100' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D2.1.1' mitigation='100' />
              </controls>
            </threat>
          </threats>
        </usecase>
        <usecase ref='NETWORKING' name='Networking' desc='' library=''>
          <threats>
            <threat ref='DOCKER-WIDE-ATTACK-SURFACE-CONTAINER-COMMUNICATION' name='Attackers gain access to the Docker container communication by exploiting the vulnerabilities of the network' state='Expose' source='MANUAL' owner='' library=''>
              <desc>Every point of network interaction is a potential part of the network attack surface
                                having exploitable vulnerabilities.
                            </desc>
              <riskRating confidentiality='50' integrity='50' availability='75' easeOfExploitation='75' />
              <references />
              <weaknesses>
                <weakness ref='UNRESTRICTED-NETWORK'>
                  <controls>
                    <control ref='D2.1.1' mitigation='100' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D2.1.1' mitigation='100' />
              </controls>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component ref='INTER-CONTAINER-RESTRICTION' name='Inter-Container Restriction' desc='This Risk Pattern contains the recommendations applied when the containers should NOT communicate with each other.' groupName='' tags='' position='9' library='' diagramPositionX='0' diagramPositionY='0' componentDefinitionRef=''>
      <weaknesses>
        <weakness ref='CWE-276' name='Incorrect Default Permissions' state='0' impact='100'>
          <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to
                        an unintended actor.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:51:59.821'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-276: Incorrect Default Permissions' url='https://cwe.mitre.org/data/definitions/276.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='CWE-200' name='Information Exposure' state='0' impact='100'>
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:51:59.830'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-200: Information Exposure' url='https://cwe.mitre.org/data/definitions/200.html' />
            </references>
            <udts />
          </test>
        </weakness>
        <weakness ref='UNRESTRICTED-NETWORK' name='Service is exposed to a wide attack surface' state='0' impact='100'>
          <desc>The product is exposed or reachable to an unnecessarily large group of potential attackers. An
                        over-exposure of a component increases the chance of an attacker gaining access to the system
                        through a vulnerability.
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:51:59.841'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </weakness>
      </weaknesses>
      <controls>
        <control ref='D2.1.2' name='Ensure all network traffic is restricted between containers on the default bridge' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>By default, all network traffic is allowed between containers on the same host on the default
                        network bridge. If not desired, restrict all inter-container communication.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        By default, unrestricted network traffic is enabled between all containers on the same host on
                        the default network bridge. Thus, each container has the potential of reading all packets across
                        the container network on the same host. This might lead to an unintended and unwanted disclosure
                        of information to other containers. Hence, restrict the inter-container communication on the
                        default network bridge.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Run the docker in daemon mode and pass --icc=false as an argument. For Example,
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        dockerd --icc=false&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Impact:&amp;nbsp;&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The inter-container communication would be disabled on the default network bridge. If any
                        communication between containers on the same host is desired in the future, then it needs to be
                        explicitly defined using container linking or alternatively custom networks have to be defined.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker docs: Bridge' url='https://docs.docker.com/network/bridge/' />
          </references>
          <standards>
            <standard ref='2.1' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>Run the below command and verify that the default network bridge has been configured to
                            restrict inter-container communication.&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker network ls --quiet | xargs docker network inspect --format '{{ .Name }}: {{ .Options
                            }}'&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            It should return com.docker.network.bridge.enable_icc:false for the default network bridge.
                            &lt;/div&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
      </controls>
      <usecases>
        <usecase ref='AUTHENTICATION AND AUTHORIZATION' name='Authentication and Authorization' desc='' library=''>
          <threats>
            <threat ref='CAPEC-122-DOCKER-CONTAINERS' name='Attakers gain access without the necessary privileged to the docker connection inter-container' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An adversary is able to exploit features of the target that should be reserved for
                                privileged users or administrators but are exposed to use by lower or non-privileged
                                accounts. Access to sensitive information and functionality must be controlled to ensure
                                that only authorized users are able to access these resources. If access control
                                mechanisms are absent or misconfigured, a user may be able to access resources that are
                                intended only for higher level users. An adversary may be able to exploit this to
                                utilize a less trusted account to gain information and perform activities reserved for
                                more trusted accounts. This attack differs from privilege escalation and other privilege
                                stealing attacks in that the adversary never actually escalates their privileges but
                                instead is able to use a lesser degree of privilege to access resources that should be
                                (but are not) reserved for higher privilege accounts. Likewise, the adversary does not
                                exploit trust or subvert systems - all control functionality is working as configured
                                but the configuration does not adequately protect sensitive resources at an appropriate
                                level.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-276'>
                  <controls>
                    <control ref='D2.1.2' mitigation='100' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D2.1.2' mitigation='100' />
              </controls>
            </threat>
          </threats>
        </usecase>
        <usecase ref='GENERAL' name='General' desc='' library=''>
          <threats>
            <threat ref='CAPEC-37-CONTAINER-COMMUNICATION' name='Attackers gain access to the docker container communication by using sensitive data which was found embedded within it' state='Expose' source='MANUAL' owner='' library=''>
              <desc>An attacker examines a target system to find sensitive data that has been embedded
                                within it. This information can reveal confidential contents, such as account numbers or
                                individual keys/credentials that can be used as an intermediate step in a larger attack.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-200'>
                  <controls>
                    <control ref='D2.1.2' mitigation='100' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D2.1.2' mitigation='100' />
              </controls>
            </threat>
          </threats>
        </usecase>
        <usecase ref='NETWORKING' name='Networking' desc='' library=''>
          <threats>
            <threat ref='DOCKER-WIDE-ATTACK-SURFACE-CONTAINER-COMMUNICATION' name='Attackers gain access to the Docker container communication by exploiting the vulnerabilities of the network' state='Expose' source='MANUAL' owner='' library=''>
              <desc>Every point of network interaction is a potential part of the network attack surface
                                having exploitable vulnerabilities.
                            </desc>
              <riskRating confidentiality='50' integrity='50' availability='75' easeOfExploitation='75' />
              <references />
              <weaknesses>
                <weakness ref='UNRESTRICTED-NETWORK'>
                  <controls>
                    <control ref='D2.1.2' mitigation='100' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D2.1.2' mitigation='100' />
              </controls>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component ref='THIRD-PARTY-PUBLIC-REPOSITORIES' name='Third Party/Public Repositories' desc='This Risk Pattern contains the recommendations applied when container images are from a third party/public repository.' groupName='' tags='' position='10' library='' diagramPositionX='0' diagramPositionY='0' componentDefinitionRef=''>
      <weaknesses>
        <weakness ref='CWE-937' name='Third party libraries contain security weaknesses' state='0' impact='100'>
          <desc>In theory, it ought to be easy to figure out if you are currently using any vulnerable
                        components or libraries. Unfortunately, vulnerability reports for commercial or open source
                        software do not always specify exactly which versions of a component are vulnerable in a
                        standard, searchable way. Further, not all libraries use an understandable version numbering
                        system. Worst of all, not all vulnerabilities are reported to a central clearing house that is
                        easy to search, although sites like CVE and NVD are becoming easier to search.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Determining if you are vulnerable requires searching these databases, as well as keeping abreast
                        of project mailing lists and announcements for anything that might be a vulnerability. If one of
                        your components does have a vulnerability, you should carefully evaluate whether you are
                        actually vulnerable by checking to see if your code uses the part of the component with the
                        vulnerability and whether the flaw could result in an impact you care about.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Component vulnerabilities can cause almost any type of risk imaginable, ranging from the trivial
                        to sophisticated malware designed to target a specific organization. Components almost always
                        run with the full privilege of the application, so flaws in any component can be serious.
                        &lt;/div&gt;
                    </desc>
          <test expiryDate='' expiryPeriod='0'>
            <steps />
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2018-05-30T14:52:05.808'>
              <output></output>
            </source>
            <references>
              <reference name='CWE-937: Third party libraries contain security weaknesses' url='https://cwe.mitre.org/data/definitions/937.html' />
            </references>
            <udts />
          </test>
        </weakness>
      </weaknesses>
      <controls>
        <control ref='D4.2' name='Ensure that containers use trusted base images' platform='' cost='1' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
          <desc>Ensure that the container image is written either from scratch or is based on another
                        established and trusted base image downloaded over a secure channel.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Rationale:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Official repositories are Docker images curated and optimized by the Docker community or the
                        vendor. There could be other potentially unsafe public repositories. Caution should be exercised
                        when obtaining container images from Docker and third parties and how they will be used for your
                        organization's data.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Configure and use Docker Content trust.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Inspect Docker image history to evaluate their risk to operate on your network.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Scan Docker images for vulnerabilities in their dependencies and configurations they
                        will impose upon your network.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;b&gt;Impact:&lt;/b&gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        None.
                        &lt;/div&gt;
                    </desc>
          <implementations />
          <references>
            <reference name='Docker blog: docker trusted registry' url='https://blog.docker.com/2015/11/docker-trusted-registry-1-4/' />
            <reference name='Docker blog: Mac shared directories' url='http://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/' />
            <reference name='Docker docs: pull' url='https://docs.docker.com/engine/reference/commandline/pull/' />
            <reference name='Docker github: 11109' url='https://github.com/docker/docker/pull/11109' />
            <reference name='Docker github: 8093' url='https://github.com/docker/docker/issues/8093' />
            <reference name='Docker hub registry' url='https://registry.hub.docker.com/' />
            <reference name='Docker insecurity' url='https://titanous.com/posts/docker-insecurity' />
          </references>
          <standards>
            <standard ref='4.2' supportedStandardRef='Level 1 - Docker' />
          </standards>
          <udts />
          <test expiryDate='' expiryPeriod='0'>
            <steps>&lt;b&gt;Step 1:&lt;/b&gt; Inspect the Docker host for Docker images used by executing
                            the below command:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker images&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            This would list all the container images that are currently available for use on the Docker
                            host. Interview the system administrator and obtain a proof of evidence that the list of
                            images were obtained from trusted sources over a secure channel or from a trusted, secure
                            private Docker registry.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;b&gt;Step 2:&lt;/b&gt; For each Docker image found on the Docker host, inspect the image
                            for how it was built to verify it is from trusted sources and an hardened configuration:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            docker history
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes />
            <source filename='' args='' type='Manual' result='Not Tested' enabled='true' timestamp='2016-08-02T10:21:32.718'>
              <output></output>
            </source>
            <references />
            <udts />
          </test>
        </control>
      </controls>
      <usecases>
        <usecase ref='GENERAL' name='General' desc='' library=''>
          <threats>
            <threat ref='OWASP A1:2017' name='Attackers gain access to the sensitive data through injecting code in the repositories' state='Expose' source='MANUAL' owner='' library=''>
              <desc>Almost any source of data can be an injection vector: environment variables,
                                parameters, external and internal web services, and all types of users. Injection flaws
                                occur when an attacker can send hostile data to an interpreter.
                            </desc>
              <riskRating confidentiality='100' integrity='100' availability='100' easeOfExploitation='100' />
              <references />
              <weaknesses>
                <weakness ref='CWE-937'>
                  <controls>
                    <control ref='D4.2' mitigation='100' />
                  </controls>
                </weakness>
              </weaknesses>
              <controls>
                <control ref='D4.2' mitigation='100' />
              </controls>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
  </components><rules>
  <rule name='Q: Docker - Orchestration' module='component' generatedByGui='true'>
    <condition name='Question is answered' type='Question' field='id' value='docker.so.linux'>
      <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);' />
    </condition>
    <condition name='Risk pattern exists' type='drools-without-variable-type' field='id' value='Docker CIS_::_DOCKER'>
      <pattern name='Risk pattern exists' pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");' />
    </condition>
    <action project='' value='docker.orchestration_::_Docker_::_What Docker container orchestration solution do you use?_::_6201_::_true_::_false_::_' name='Insert Question Group' type='drools-without-variable-type'>
      <pattern name='Action of insert question group' pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);' />
    </action>
    <content />
  </rule>
  <rule name='Q: Docker - Orchestration - *' module='component' generatedByGui='true'>
    <condition name='Question Group exists' type='drools-without-variable-type' field='id' value='docker.orchestration'>
      <pattern name='Question group exists' pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);' />
    </condition>
    <action project='' value='docker.d.swarm_::_Docker Swarm_::_' name='Insert Question' type='drools-without-variable-type'>
      <pattern name='Action of insert question' pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));' />
    </action>
    <action project='' value='docker.others_::_Others_::_' name='Insert Question' type='drools-without-variable-type'>
      <pattern name='Action of insert question' pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));' />
    </action>
    <content />
  </rule>
  <rule name='Q: Docker - Repositories' module='component' generatedByGui='true'>
    <condition name='Question is answered' type='Question' field='id' value='docker.so.linux'>
      <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);' />
    </condition>
    <condition name='Risk pattern exists' type='drools-without-variable-type' field='id' value='Docker CIS_::_DOCKER'>
      <pattern name='Risk pattern exists' pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");' />
    </condition>
    <action project='' value='docker.repo_::_Docker_::_Are you using container images from a third party/public repository?_::_6202_::_true_::_false_::_' name='Insert Question Group' type='drools-without-variable-type'>
      <pattern name='Action of insert question group' pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);' />
    </action>
    <content />
  </rule>
  <rule name='Q: Docker - Repositories - *' module='component' generatedByGui='true'>
    <condition name='Question Group exists' type='drools-without-variable-type' field='id' value='docker.repo'>
      <pattern name='Question group exists' pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);' />
    </condition>
    <action project='' value='docker.repo.no_::_No_::_' name='Insert Question' type='drools-without-variable-type'>
      <pattern name='Action of insert question' pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));' />
    </action>
    <action project='' value='docker.repo.yes_::_Yes_::_' name='Insert Question' type='drools-without-variable-type'>
      <pattern name='Action of insert question' pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));' />
    </action>
    <content />
  </rule>
  <rule name='Q: Docker - Same host' module='component' generatedByGui='true'>
    <condition name='Question is answered' type='Question' field='id' value='docker.so.linux'>
      <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);' />
    </condition>
    <condition name='Risk pattern exists' type='drools-without-variable-type' field='id' value='Docker CIS_::_DOCKER'>
      <pattern name='Risk pattern exists' pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");' />
    </condition>
    <action project='' value='docker.sameHost_::_Docker_::_Should containers that run in the same host communicate with each other?_::_6203_::_true_::_false_::_' name='Insert Question Group' type='drools-without-variable-type'>
      <pattern name='Action of insert question group' pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);' />
    </action>
    <content />
  </rule>
  <rule name='Q: Docker - Same host - *' module='component' generatedByGui='true'>
    <condition name='Question Group exists' type='drools-without-variable-type' field='id' value='docker.sameHost'>
      <pattern name='Question group exists' pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);' />
    </condition>
    <action project='' value='docker.sameHost.no_::_No_::_' name='Insert Question' type='drools-without-variable-type'>
      <pattern name='Action of insert question' pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));' />
    </action>
    <action project='' value='docker.sameHost.yes_::_Yes_::_' name='Insert Question' type='drools-without-variable-type'>
      <pattern name='Action of insert question' pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));' />
    </action>
    <content />
  </rule>
  <rule name='Q: Docker - SO' module='component' generatedByGui='true'>
    <condition name='Risk pattern exists' type='drools-without-variable-type' field='id' value='Docker CIS_::_DOCKER'>
      <pattern name='Risk pattern exists' pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");' />
    </condition>
    <action project='' value='docker.so_::_Docker_::_Which operating system is used for Docker containers?_::_6200_::_true_::_false_::_' name='Insert Question Group' type='drools-without-variable-type'>
      <pattern name='Action of insert question group' pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);' />
    </action>
    <content />
  </rule>
  <rule name='Q: Docker - SO - *' module='component' generatedByGui='true'>
    <condition name='Question Group exists' type='drools-without-variable-type' field='id' value='docker.so'>
      <pattern name='Question group exists' pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);' />
    </condition>
    <action project='' value='docker.so.linux_::_Docker over Linux_::_' name='Insert Question' type='drools-without-variable-type'>
      <pattern name='Action of insert question' pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));' />
    </action>
    <action project='' value='docker.so.others_::_Others_::_' name='Insert Question' type='drools-without-variable-type'>
      <pattern name='Action of insert question' pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));' />
    </action>
    <content />
  </rule>
  <rule name='Risk Pattern: Docker in Linux' module='component' generatedByGui='true'>
    <condition name='Question is answered' type='Question' field='id' value='docker.so.linux'>
      <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);' />
    </condition>
    <condition name='Risk pattern exists' type='drools-without-variable-type' field='id' value='Docker CIS_::_DOCKER'>
      <pattern name='Risk pattern exists' pattern='$riskPattern : ImportWholeRiskPatternAwareDto(libraryRef == "${value-1}",riskPatternRef == "${value-2}");' />
    </condition>
    <action project='Docker CIS' value='Docker CIS_::_DOCKER-CONTAINER-RUNTIME' name='Import Risk Pattern' type='drools-without-variable-type'>
      <pattern name='Action of import a risk pattern' pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));' />
    </action>
    <action project='Docker CIS' value='Docker CIS_::_DOCKER-DAEMON-CONFIGURATION' name='Import Risk Pattern' type='drools-without-variable-type'>
      <pattern name='Action of import a risk pattern' pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));' />
    </action>
    <action project='Docker CIS' value='Docker CIS_::_DOCKER-DAEMON-CONFIGURATION-FILES' name='Import Risk Pattern' type='drools-without-variable-type'>
      <pattern name='Action of import a risk pattern' pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));' />
    </action>
    <action project='Docker CIS' value='Docker CIS_::_DOCKER-IMAGES-BUILD-FILE' name='Import Risk Pattern' type='drools-without-variable-type'>
      <pattern name='Action of import a risk pattern' pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));' />
    </action>
    <content />
  </rule>
  <rule name='Risk Pattern: Docker Linux OS' module='component' generatedByGui='true'>
    <condition name='Question is answered' type='Question' field='id' value='docker.so.linux'>
      <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);' />
    </condition>
    <action project='Docker CIS' value='Docker CIS_::_DOCKER-LINUX-HOST-OS' name='Import Risk Pattern' type='drools-without-variable-type'>
      <pattern name='Action of import a risk pattern' pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));' />
    </action>
    <content />
  </rule>
  <rule name='Risk Pattern: Docker Swarm' module='component' generatedByGui='true'>
    <condition name='Question is answered' type='Question' field='id' value='docker.d.swarm'>
      <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);' />
    </condition>
    <action project='Docker CIS' value='Docker CIS_::_DOCKER-SWARM' name='Import Risk Pattern' type='drools-without-variable-type'>
      <pattern name='Action of import a risk pattern' pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));' />
    </action>
    <content />
  </rule>
  <rule name='Risk Pattern: Inter-Container Communication' module='component' generatedByGui='true'>
    <condition name='Question is answered' type='Question' field='id' value='docker.sameHost.yes'>
      <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);' />
    </condition>
    <action project='Docker CIS' value='Docker CIS_::_INTER-CONTAINER-COMMUNICATION' name='Import Risk Pattern' type='drools-without-variable-type'>
      <pattern name='Action of import a risk pattern' pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));' />
    </action>
    <content />
  </rule>
  <rule name='Risk Pattern: Inter-Container Restriction' module='component' generatedByGui='true'>
    <condition name='Question is answered' type='Question' field='id' value='docker.sameHost.no'>
      <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);' />
    </condition>
    <action project='Docker CIS' value='Docker CIS_::_INTER-CONTAINER-RESTRICTION' name='Import Risk Pattern' type='drools-without-variable-type'>
      <pattern name='Action of import a risk pattern' pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));' />
    </action>
    <content />
  </rule>
  <rule name='Risk Pattern: Third Party/Public Repositories' module='component' generatedByGui='true'>
    <condition name='Question is answered' type='Question' field='id' value='docker.repo.yes'>
      <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);' />
    </condition>
    <action project='Docker CIS' value='Docker CIS_::_THIRD-PARTY-PUBLIC-REPOSITORIES' name='Import Risk Pattern' type='drools-without-variable-type'>
      <pattern name='Action of import a risk pattern' pattern='insertLogical(ImportRiskPatternFactory.importRiskPattern("${value-1}", "${value-2}", 50));' />
    </action>
    <content />
  </rule>
</rules>
</project>
