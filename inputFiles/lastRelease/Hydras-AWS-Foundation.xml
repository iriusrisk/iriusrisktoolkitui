<?xml version="1.0" encoding="UTF-8"?>
<project ref="Hydras-AWS-Foundation" name="Hydras-AWS-Foundation" revision="21" type="LIBRARY" status="OPEN"
         enabled="true" priority="0" tags="" workflowState="">
    <desc>This library provides a baseline set of risks for anyone implementing an environment on Amazon Web Services
        (AWS). It covers foundation services such as Governance, Identity and Access Management (IAM), Logging,
        Monitoring, Network, EC2 and S3.

        This library has been supplied by Hydras IT LTD (https://hydrasit.com). Please contact Hydras for further
        information.
    </desc>
    <categoryComponents>
        <categoryComponent name="Environment" ref="environment"/>
    </categoryComponents>
    <componentDefinitions>
        <componentDefinition name="Amazon Web Services Environment" ref="amazon-web-services-environment"
                             desc="Amazon Web Services Environment. Only select this if the security of the AWS environment will be managed in this product."
                             categoryRef="environment">
            <riskPatterns>
                <riskPattern ref="HYDRAS-AWS-IAM"/>
                <riskPattern ref="HYDRAS-AWS-LOG"/>
                <riskPattern ref="HYDRAS-AWS-MON"/>
                <riskPattern ref="HYDRAS-AWS-GOV"/>
                <riskPattern ref="HYDRAS-AWS-NET"/>
            </riskPatterns>
        </componentDefinition>
    </componentDefinitions>
    <udts/>
    <dataflows/>
    <supportedStandards>
        <supportedStandard ref='CIS AWS Standard' name='CIS AWS Standard'/>
    </supportedStandards>
    <components>
        <component ref='HYDRAS-AWS-EC2' name='AWS EC2' desc='Amazon Elastic Cloud Compute' groupName='' tags=''
                   position='1' library='' diagramPositionX='0' diagramPositionY='0' componentDefinitionRef=''>
            <weaknesses>
                <weakness ref='AWS-EC2-6.2' name='The instances are not patched' state='0' impact='100' issueId=''>
                    <desc>The instances are not patched with the last updates for the correspondent Operative System
                        (OS), and the instances have got weaknesses which are solved in the last updates.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:24:57.368'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-NET-04' name='Unauthorised connection attempts are allowed on Azure resources'
                          state='0' impact='100' issueId=''>
                    <desc>Receiving unauthorized connections to Azure resources is most likely to be receiving an
                        attack. To avoid this, access to the network must be as restricted as possible using Network
                        Access Control Lists for blacklisting.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:24:57.640'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-NET-01' name='Unauthorised connection attempts are allowed on open ports' state='0'
                          impact='100' issueId=''>
                    <desc>&lt;div&gt;
                        Receiving unauthorized connections to open ports is most likely to be receiving an attack. To
                        avoid this, access to the network must be as restricted as possible, so that only the necessary
                        ports are open and the minimum inbound traffic is accepted.
                        &lt;/div&gt;
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:24:57.914'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-NET-02' name='Unauthorised connection attempts are allowed on port 22' state='0'
                          impact='100' issueId=''>
                    <desc>Receiving unauthorized connections to port 22 is most likely to be receiving an SSH attack. To
                        avoid this, access to the network must be as restricted as possible, so that only the necessary
                        ports are open and the minimum inbound traffic is accepted.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:24:58.204'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-NET-03' name='Unauthorised connection attempts are allowed on port 3389' state='0'
                          impact='100' issueId=''>
                    <desc>Receiving unauthorized connections to port 3389 is most likely to be receiving an RDP attack.
                        To avoid this, access to the network must be as restricted as possible, so that only the
                        necessary ports are open and the minimum inbound traffic is accepted.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:24:58.490'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
            </weaknesses>
            <controls>
                <control ref='Hydras-AWS-EC2-6.2' name='Maintain a patch policy and patch EC2 systems regularly '
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>Patching instances ensures that packages within the Operating System (OS) are updated to the
                        latest version and/or have security fixes applied. It is recommended to patch EC2 instances
                        every 90 days (or immediately if security patches become available) to avoid undue exposure
                        &lt;br /&gt;Remediation
                        &lt;br /&gt; 1. For linux instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-software.html
                        &lt;br /&gt;2. For Windows instances ensure your OS is updated as per
                        http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#update-windows-instance
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;For linux instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-software.html&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For Windows instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#update-windows-instance&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Ensure you have a documented patching policy.&lt;/li&gt;
                            &lt;li&gt;Ensure your systems have been patched at least every 90 days.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:24:55.614'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.6' name='Restrict all traffic with the default security group'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>Security groups are analagous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit all traffic
                        (ingress/egress) on the default security group in order to force the use of least privilege via
                        custom created security groups.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify AWS resources that exist within the default security group.&lt;/li&gt;
                        &lt;li&gt;Create a set of least privilege security groups for those resources.&lt;/li&gt;
                        &lt;li&gt;Place the resources in those security groups.&lt;/li&gt;
                        &lt;li&gt;Remove the resources noted in 1 from the default security group.&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the default security group.&lt;/li&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exist.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure no rules exist.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:24:55.908'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.7' name='Use Network Access Control Lists (NACLs) for blacklisting'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>Network Access Control Lists (NACLs) act as packet filters across subnets, allowing or deny
                        traffic per pre-created rules. It is recommened to use NACLs as a method of blacklisting IP
                        addresses, denying either inbound or outbound access across your subnets.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Network ACL's.&lt;/li&gt;
                        &lt;li&gt;For each Network ACL ID, perform the following:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the Inbound Rules tab.&lt;/li&gt;
                        &lt;li&gt;Click edit.&lt;/li&gt;
                        &lt;li&gt;add a DENY rule that will restrict inbound access from a blacklisted IP address or
                        range to a designated port or IP range.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select Network ACLs.&lt;/li&gt;
                            &lt;li&gt;For each Network ACL ID, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;ul&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure a rule exists the DENY's access from a blacklisted IP or range.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure a rule exists the DENY's access to a blacklisted IP or range.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ul&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:24:56.204'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.5'
                         name='Use security groups to block ingress to all ports from 0.0.0.0/0' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Security groups are analagous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommeneded to limit inbound access to
                        ALL TCP or ALL ports to avoid undue server exposure.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='4.3' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range of 0-1024 of 0-65535 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;br /&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:24:56.493'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.3'
                         name='Use security groups to block ingress to port 22 from 0.0.0.0/0' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Security groups are analagous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommeneded to limit inbound access to
                        port 22 (SSH) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update)&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security Groups&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt; Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='4.1' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 22
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:24:56.788'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.4'
                         name='Use security groups to block ingress to port 3389 from 0.0.0.0/0' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Security groups are analagous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommeneded to limit inbound access to
                        port 3389 (RDP) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='4.2' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 3389
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:24:57.092'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref='AMAZON-WEB-SERVICES' name='Amazon Web Services' desc='' library=''>
                    <threats>
                        <threat ref='UNAUTHORIZED-CONNECTION'
                                name='Attackers gain access to the systems through direct access' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>&lt;div&gt;
                                Attackers gain a unathorized connection to the system through misconfigured ports or
                                security network configurations.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality='25' integrity='25' availability='50' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-NET-01'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.5' mitigation='25'/>
                                        <control ref='Hydras-AWS-Network-5.6' mitigation='25'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-NET-02'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.3' mitigation='25'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-NET-03'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.4' mitigation='25'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-Network-5.3' mitigation='25'/>
                                <control ref='Hydras-AWS-Network-5.4' mitigation='25'/>
                                <control ref='Hydras-AWS-Network-5.5' mitigation='25'/>
                                <control ref='Hydras-AWS-Network-5.6' mitigation='25'/>
                            </controls>
                        </threat>
                        <threat ref='NON-UPDATED-SYSTEMS-AWS'
                                name='Attackers gain unauthorised access to data on EC2 instances' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>&lt;p&gt;Attackers cloud gain access to data on EC2 instances through the weaknesses
                                in non-updated systems.&lt;/p&gt;
                            </desc>
                            <riskRating confidentiality='25' integrity='25' availability='25' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-EC2-6.2'>
                                    <controls>
                                        <control ref='Hydras-AWS-EC2-6.2' mitigation='100'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-EC2-6.2' mitigation='100'/>
                            </controls>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref='PATCHING' name='Patching' desc='' library=''>
                    <threats>
                        <threat ref='NON-UPDATED-SYSTEMS-AWS'
                                name='Attackers gain unauthorised access to data on EC2 instances' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>&lt;p&gt;Attackers cloud gain access to data on EC2 instances through the weaknesses
                                in non-updated systems.&lt;/p&gt;
                            </desc>
                            <riskRating confidentiality='25' integrity='25' availability='25' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-NET-04'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.7' mitigation='100'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-Network-5.7' mitigation='100'/>
                            </controls>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref='HYDRAS-AWS-ELB' name='AWS ELB'
                   desc='Elastic Load Balancing automatically distributes incoming application traffic across multiple targets, such as Amazon EC2 instances, containers, and IP addresses.'
                   groupName='' tags='' position='2' library='' diagramPositionX='0' diagramPositionY='0'
                   componentDefinitionRef=''>
            <weaknesses>
                <weakness ref='CWE-326' name='Inadequate Encryption Strength' state='0' impact='100' issueId=''>
                    <desc>The software stores or transmits sensitive data using an encryption scheme that is
                        theoretically sound, but is not strong enough for the level of protection required.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:07.389'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Network-5.2' name='Networks for AWS resources are not properly segmented.' state='0'
                          impact='100' issueId=''>
                    <desc>Resources in the same VNet are compromised because when one of them is attacked and the
                        attackers gain access, they also gain access to all resources.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:07.678'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Network-5.1' name='Non-identity of resources' state='0' impact='100' issueId=''>
                    <desc>Resources are not registered in the safety net systems, and there are unidentified resources.
                        This can be a problem because these unidentified resources can have unknown weaknesses.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:07.974'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-NET-04' name='Unauthorised connection attempts are allowed on AWS resources'
                          state='0' impact='100' issueId=''>
                    <desc>Receiving unauthorized connections to AWS resources is most likely an attack. To avoid this,
                        access to the network must be as restricted as possible using Network Access Control Lists for
                        blacklisting.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:08.263'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-NET-01' name='Unauthorised connection attempts are allowed on open ports' state='0'
                          impact='100' issueId=''>
                    <desc>Receiving unauthorized connections to open ports is most likely an attack. To avoid this,
                        access to the network must be as restricted as possible, so that only the necessary ports are
                        open and the minimum inbound traffic is accepted.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:08.537'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-NET-02' name='Unauthorised connection attempts are allowed on port 22' state='0'
                          impact='100' issueId=''>
                    <desc>Receiving unauthorized connections to port 22 is most likely an SSH attack. To avoid this,
                        access to the network must be as restricted as possible, so that only the necessary ports are
                        open and the minimum inbound traffic is accepted.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:08.827'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-NET-03' name='Unauthorised connection attempts are allowed on port 3389' state='0'
                          impact='100' issueId=''>
                    <desc>Receiving unauthorized connections to port 3389 is most likely an RDP attack. To avoid this,
                        access to the network must be as restricted as possible, so that only the necessary ports are
                        open and the minimum inbound traffic is accepted.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:09.105'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
            </weaknesses>
            <controls>
                <control ref='Hydras-AWS-Network-5.6' name='Restrict all traffic with the default security group'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit all traffic
                        (ingress/egress) on the default security group in order to force the use of least privilege via
                        custom created security groups.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify AWS resources that exist within the default security group.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create a set of least privilege security groups for those resources.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Place the resources in those security groups.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Remove the resources noted in 1 from the default security group.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;ul&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the default security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exist.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rules exist.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ul&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:04.710'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-ELB-02' name='Select the Server Order Preference option' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Within Elastic Load Balancing ensure the use of newer and stronger cipher suites when
                        establishing a new connection supporting the Server Order Preference option. When this option is
                        selected, the load balancer selects the first cipher in its list that is in the client's list of
                        ciphers. &lt;br /&gt;&lt;br /&gt; &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt; &lt;br /&gt;To
                        enable Server Order Preference: &lt;br /&gt;&lt;li&gt;Open the Amazon EC2 &lt;/li&gt;onsole.&lt;br
                        /&gt;&lt;li&gt;Under LOAD BALANCING, choose Load Balancers.&lt;br /&gt;&lt;li&gt;Select your
                        Load Balancer.&lt;br /&gt;&lt;li&gt;On the Listeners tab, for Cipher, choose Change.&lt;br /&gt;&lt;li&gt;On
                        the Select a Cipher page, select Custom Security Policy.&lt;br /&gt;&lt;li&gt;For SSL Options,
                        select Server Order Preference.&lt;br /&gt;&lt;li&gt;Click Save.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ul&gt;
                            &lt;li&gt;Open the Amazon EC2 console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Under LOAD BALANCING, choose Load Balancers.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Select your Load Balancer.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;On the Listeners tab, for Cipher, choose Change.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;On the Select a Cipher page, select Custom Security Policy.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;For SSL Options, check that the option Server Order Preference is selected. &lt;/li&gt;
                            &lt;/ul&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:04.993'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.2' name='Separate VPC into zones by function' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides
                        additional security controls such as Security Groups, Network Access Control Lists (NACL's) and
                        routing. It is recommended that resources be placed into VPC's according to use case (ie
                        dev/test/prod) and that appropriate security levels be set on these VPC's. Placing such
                        resources accordingly ensures that a resource of a higher security level is not exposed by the
                        security settings of a lower labelled VPC.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify the resources that exist within &lt;/li&gt;n incorrect VPC.
                        &lt;br /&gt;
                        &lt;li&gt;Migrate or move them to the correspond VPC.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>Ensure that each AWS resource added to a VPC is isolated according to its designation (ie
                            test/dev/prod).
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:05.286'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.1' name='Use AWS VPC for networking' issueId='' platform='' cost='0'
                         risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides
                        additional security controls such as Security Groups, Network Access Control Lists (NACL's) and
                        routing. However the use of VPC is not compulsory and resources such as EC2 can be created
                        outside of VPC (usingEC2 Classic). It is recommended to make all resources a member of a VPC if
                        possible to benefit from the increased security controls they offer and reduce undue network
                        exposure.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;Move or migrate the resources to a VPC.
                        &lt;br /&gt;
                        &lt;br /&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>Ensure that each AWS resource you own that is able to exist in a VPC, does so.</steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:05.606'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.7' name='Use Network Access Control Lists (NACLs) for blacklisting'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>Network Access Control Lists (NACLs) act as packet filters across subnets, allowing or denying
                        traffic per pre-created rules. It is recommended to use NACLs as a method of blacklisting IP
                        addresses, denying either inbound or outbound access across your subnets.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Network ACL's.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each Network ACL ID, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;ul&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the Inbound Rules tab.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Click edit.&lt;/li&gt;
                        &lt;li&gt;add a DENY rule that will restrict inbound access from a blacklisted IP address or
                        range of designated ports or IP's.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Network ACLs.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each Network ACL ID, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;ul&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure a rule exists that DENIES access from a blacklisted IP or range.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure a rule exists that DENIES access to a blacklisted IP or range.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ul&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:05.907'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.5'
                         name='Use security groups to block ingress to all ports from 0.0.0.0/0' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        ALL TCP or ALL ports to avoid undue server exposure
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security groups.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the folliowing:&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;ul&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='4.3' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;ul&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range of 0-1024 or 0-65535 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ul&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:06.209'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.3'
                         name='Use security groups to block ingress to port 22 from 0.0.0.0/0' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 22 (SSH) to IP addresses that require this access to avoid undue exposure to risk &lt;br /&gt;&lt;br
                        /&gt; &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt; &lt;br /&gt;&lt;ol&gt;&lt;li&gt;Login
                        to the AWS Management Console (&lt;/li&gt;ith VPC update).&lt;br /&gt;&lt;li&gt;Select VPC from
                        the service&lt;/li&gt; menu.&lt;br /&gt;&lt;li&gt;Select Security &lt;/li&gt;roups.&lt;br /&gt;&lt;li&gt;For
                        each security group, perform the foll&lt;/li&gt;&lt;/ol&gt;ing: &lt;br /&gt;&lt;li&gt;Select the
                        securit&lt;/li&gt; group.&lt;br /&gt;&lt;li&gt;Click the Inbound tab.&lt;br /&gt;&lt;li&gt;Identify
                        the rules to be removed.&lt;br /&gt;&lt;li&gt;Click the x in the Remove column.&lt;br /&gt;&lt;li&gt;Click
                        Save.&lt;br /&gt;&lt;br /&gt;Content provided by &lt;a href="https://hydrasit.com"
                        target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='4.1' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;ul&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ul&gt;
                            &lt;br /&gt;NB: Note that if the port ranges are: 0-1024 or 0-65535 these include port 22.
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:06.510'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.4'
                         name='Use security groups to block ingress to port 3389 from 0.0.0.0/0' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 3389 (RDP) to IP addresses that require this access to avoid undue exposure to risk
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;&lt;/b&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security groups.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;ul&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='4.2' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;ul&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 3389 and has a
                            source of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ul&gt;NB: Note that if the port ranges are: 0-1024 or 0-65535 these include port 3389.
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:06.812'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-ELB-01' name='Use the Perfect Forward Secrecy feature' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>For greater communication privacy Elastic Load Balancing allows the use of Perfect Forward
                        Secrecy. This feature provides additional safeguards against eavesdropping on encrypted data,
                        through the use of a unique random session key, and therefore prevents the decoding of captured
                        data, even if the secret long-term key is compromised.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;To begin using Perfect Forward Secrecy: &lt;br /&gt;&lt;/b&gt;Configure your load
                        balancer with the newly added Elliptic Curve Cryptography (ECDHE) cipher suites.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>Check that your load balancer is configured with the newly added Elliptic Curve
                            Cryptography (ECDHE) cipher suites.
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:07.104'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref='AMAZON WEB SERVICES' name='Amazon Web Services' desc='' library=''>
                    <threats>
                        <threat ref='EAVESDROPPING-COMMUNICATIONS'
                                name='An attacker eavesdrops on the communication between the client and server and decrypts the data.'
                                state='Expose' source='MANUAL' owner='' library=''>
                            <desc>Eavesdropping on communication is a network attack that captures small packets
                                transmitted by other computers and reads the data content. This type of network attack
                                is most effective when weak encryption services are used. An attacker could eavesdrop on
                                the communication between the client and server and decrypt the encrypted data.
                            </desc>
                            <riskRating confidentiality='100' integrity='100' availability='100'
                                        easeOfExploitation='100'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='CWE-326'>
                                    <controls>
                                        <control ref='Hydras-AWS-ELB-01' mitigation='50'/>
                                        <control ref='Hydras-AWS-ELB-02' mitigation='50'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-ELB-01' mitigation='50'/>
                                <control ref='Hydras-AWS-ELB-02' mitigation='50'/>
                            </controls>
                        </threat>
                        <threat ref='UNAUTHORIZED-CONNECTION'
                                name='Attackers gain access to the systems through direct access' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>Attackers gain an unauthorized connection to the system through misconfigured ports or
                                security network configurations.
                            </desc>
                            <riskRating confidentiality='50' integrity='50' availability='50' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-NET-01'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.5' mitigation='25'/>
                                        <control ref='Hydras-AWS-Network-5.6' mitigation='25'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-NET-02'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.3' mitigation='25'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-NET-03'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.4' mitigation='25'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-Network-5.3' mitigation='25'/>
                                <control ref='Hydras-AWS-Network-5.4' mitigation='25'/>
                                <control ref='Hydras-AWS-Network-5.5' mitigation='25'/>
                                <control ref='Hydras-AWS-Network-5.6' mitigation='25'/>
                            </controls>
                        </threat>
                        <threat ref='UNAUTHORIZED-CONNECTIONS-RESOURCES'
                                name='Attackers gain unauthorized connection to the resources' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>Attackers could gain an unauthorized connection to the resources through misconfigured
                                ports or security network configurations.
                            </desc>
                            <riskRating confidentiality='50' integrity='50' availability='50' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-Network-5.2'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.2' mitigation='50'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-Network-5.1'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.1' mitigation='50'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-Network-5.1' mitigation='50'/>
                                <control ref='Hydras-AWS-Network-5.2' mitigation='50'/>
                            </controls>
                        </threat>
                        <threat ref='UNAUTHORIZED-ACCESS-NETWORK'
                                name='Sensitive data is compromised through network access' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>Attackers gain undetected access to the network systems and alterations made by the
                                attackers could not be audited or detected.
                            </desc>
                            <riskRating confidentiality='50' integrity='50' availability='50' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-NET-04'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.7' mitigation='100'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-Network-5.7' mitigation='100'/>
                            </controls>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref='HYDRAS-AWS-GOV' name='AWS Governance'
                   desc='AWS Governance is about applying good controls around how the AWS account is managed at the top level'
                   groupName='' tags='' position='3' library='' diagramPositionX='0' diagramPositionY='0'
                   componentDefinitionRef=''>
            <weaknesses>
                <weakness ref='LOST-ACCESS-ROOT-01' name='The Root Account is misconfigured' state='0' impact='75'
                          issueId=''>
                    <desc>The administrator account is misconfigured. The security question to recover or reset the
                        password and the authentication method are not configured.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:18.137'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='LOST-SECURITY-ALERTS' name='The Security Contact details are not configured' state='0'
                          impact='75' issueId=''>
                    <desc>The security contact details for the Azure subscription are not properly configured.</desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:18.426'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
            </weaknesses>
            <controls>
                <control ref='Hydras-AWS-Gov-1.1'
                         name='Configure the security challenge questions within the AWS Account' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>When an AWS account is initially created it is configured with a top level account known as
                        the &amp;quot;root&amp;quot; account that has full administration access to all resources. In
                        the event that the password or MFA device associated with this account is lost AWS support may
                        recover it by asking you to answer the security questions.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt;
                        &lt;li&gt;Click account name on the top right of the management console.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Scroll down to &amp;quot;Configure Security Challenge Questions&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click on Edit.&lt;/li&gt;
                        &lt;li&gt;For each question:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select an appropriate question.&lt;/li&gt;
                        &lt;li&gt;Enter an appropriate answer.&lt;/li&gt;
                        &lt;li&gt;Follow the aboce process for all 3 questions.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;li&gt;Click Update when complete.&lt;/li&gt;
                        &lt;li&gt;We recommend to store the questions and answers in a secure location such as a safe
                        where they can be used in case recovery is required.&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='1.15' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt;
                            &lt;li&gt;Click account name on the top right of the management console.&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Scroll down to &amp;quot;Configure Security Challenge Questions&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Confirm whether questions and answers have been saved.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:17.537'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Gov-1.2' name='Register a Security contact for your AWS account.' issueId=''
                         platform='' cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>AWS will occasionally send security advisories and alerts to the account holder. By default
                        this will go to the email address that the account is registered under. However if a security
                        contact is specified these alerts will be sent here instead. Therefore this provides the means
                        of ensuring these advisories are routed to the security team, especially if a distribution email
                        address is used.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt;
                        &lt;li&gt;Click account name on the top right of the management console.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Scroll down to &amp;quot;Alternate Contacts&amp;quot; section.&lt;/li&gt;
                        &lt;li&gt;Click on Edit.&lt;/li&gt;
                        &lt;li&gt;In the &amp;quot;Security&amp;quot; section complete the requested contact
                        information.&lt;/li&gt;
                        &lt;li&gt;Click update when complete.&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='1.17' supportedStandardRef='CIS AWS Standard'/>
                        <standard ref='1.18' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt;
                            &lt;li&gt;Click account name on the top right of the management console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Scroll down to &amp;quot;Alternate Contacts&amp;quot; section.&lt;/li&gt;
                            &lt;li&gt;Confirm whether a contact has been set for &amp;quot;Security&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;Content provided by
                            &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:17.843'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref='AUTHENTICATION' name='Authentication' desc='Authentication' library=''>
                    <threats>
                        <threat ref='AWS-LOST-ACCESS-ROOT'
                                name='Attackers gain unauthorized access to the root account due to the lack of configuration of the account'
                                state='Expose' source='MANUAL' owner='' library=''>
                            <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the administrator account due to the lack of
                                the account and its security mechanisms, like modifying credentials and adding/removing
                                user accounts.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality='100' integrity='100' availability='100'
                                        easeOfExploitation='25'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='LOST-ACCESS-ROOT-01'>
                                    <controls>
                                        <control ref='Hydras-AWS-Gov-1.1' mitigation='50'/>
                                    </controls>
                                </weakness>
                                <weakness ref='LOST-SECURITY-ALERTS'>
                                    <controls>
                                        <control ref='Hydras-AWS-Gov-1.2' mitigation='50'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-Gov-1.1' mitigation='50'/>
                                <control ref='Hydras-AWS-Gov-1.2' mitigation='50'/>
                            </controls>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref='HYDRAS-AWS-IAM' name='AWS Identity and Access Management'
                   desc='AWS Identity and Access Management is about ensuring the secure management of users, access rights and privilege levels'
                   groupName='' tags='' position='4' library='' diagramPositionX='0' diagramPositionY='0'
                   componentDefinitionRef=''>
            <weaknesses>
                <weakness ref='AWS-IAM-2.2' name='Excessive use of administrator accounts' state='0' impact='100'
                          issueId=''>
                    <desc>&lt;div&gt;
                        The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.
                        &lt;/div&gt;
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:25.289'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-IAM-2.8' name='Lack of 2FA' state='0' impact='100' issueId=''>
                    <desc>Access to sensitive systems without using MFA to log into the systems.</desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:25.556'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-IAM-1.21' name='The access keys are generated when the setup of the users is started'
                          state='0' impact='100' issueId=''>
                    <desc>&lt;div&gt;
                        The system doesn't require additional steps to create access keys, the access keys are
                        generating when the process to create an user is starting. The problem is that these keys can be
                        in use somewhere in the organization and maybe these keys are not necessary for the user.
                        &lt;/div&gt;
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-06T14:50:57.136'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-IAM-2.1'
                          name='The Authentication Method for Administrator Accounts is not configured' state='0'
                          impact='100' issueId=''>
                    <desc>&lt;div&gt;
                        The authentication method &amp;quot;Multi-factor Authentication&amp;quot; for the Administrator
                        accounts are not configured.
                        &lt;/div&gt;
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:25.841'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-IAM-2.7' name='The credentials for the groups and roles are not configured' state='0'
                          impact='100' issueId=''>
                    <desc>&lt;div&gt;
                        The credentials for the groups and roles are not correctly configured and there are user
                        accounts with more privileges than the necessary.
                        &lt;/div&gt;
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:26.131'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-EXPIRATION-DATE' name='The password expiration is not established' state='0'
                          impact='100' issueId=''>
                    <desc>The password expiration is not configured and users are not obliged to change their passwords.
                        Not change frequently the passwords gives facilities to attackers to obtain them.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:26.426'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-IAM-2.12' name='The rotation keys is not configured' state='0' impact='100'
                          issueId=''>
                    <desc>The rotation keys are not configured to avoid to use old keys.</desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:26.722'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-IAM-2.9' name='The security policies are exposed in the resources' state='0'
                          impact='100' issueId=''>
                    <desc>The security policies are not configured and the security configurations are exposed for the
                        attackers.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:27.012'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-IAM-2.6' name='The User Account is not configured' state='0' impact='100' issueId=''>
                    <desc>Key security settings such as resetting the password and other password controls are not
                        configured.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:27.297'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
            </weaknesses>
            <controls>
                <control ref='Hydras-AWS-EC2-6.3' name='Apply IAM roles for EC2 instances IAM roles for EC2 instances'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>Applications that run on an Amazon EC2 instance need credentials in order to access other AWS
                        services. To provide credentials to the application in a secure way, use IAM roles. A role is an
                        entity that has its own set of permissions, but that isn't a user or group. Roles also don't
                        have their own permanent set of credentials the way IAM users do. In the case of Amazon EC2, IAM
                        dynamically provides temporary credentials to the EC2 instance, and these credentials are
                        automatically rotated for you.
                        &lt;br /&gt;
                        &lt;br /&gt;When you launch an EC2 instance, you can specify a role for the instance as a launch
                        parameter. Applications that run on the EC2 instance can use the role's credentials when they
                        access AWS resources. The role's permissions determine what the application is allowed to do. It
                        is recommended that all EC2 instances be launched with a role, even if the role has no
                        permissions (as they can be added later if desired).
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                        &lt;li&gt;Select EC2 from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Launch Instance&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Complete the wizard until step 3 at which point ensure an IAM role is selected for the
                        &amp;quot;IAM role&amp;quot; option (note the role must already exist).&lt;/li&gt;
                        &lt;li&gt;Complete the wizard to launch the instance.&lt;/li&gt;
                        &lt;/ol&gt;NB: You cannot add a role to an instance that has been launched without one. In these
                        cases create an AMI from an existing instance and launch a new instance, assigning an IAM role
                        as detailed above.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='1.19' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select EC2 from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Instances&amp;quot; from the left hand menu.&lt;/li&gt;
                            &lt;li&gt;For each instance in the list:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;select the instance&lt;/li&gt;
                            &lt;li&gt;in the preview pane confirm the instance has an &amp;quot;IAM Role&amp;quot;
                            assigned (if a hypen &amp;quot;-&amp;quot; is shown then your instance has no role
                            assigned).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:21.409'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-IAM-2.8' name='Apply RBAC with pre-defined policies added into groups or roles'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>Instead of defining permissions for individual IAM users, it's usually more convenient to
                        create groups that relate to job functions (administrators, developers, accounting, etc.),
                        define the relevant permissions for each group, and then assign IAM users to those groups. All
                        the users in an IAM group inherit the permissions assigned to the group. That way, you can make
                        changes for everyone in a group in just one place. As people move around in your company, you
                        can simply change what IAM group their IAM user belongs to. This method is know as Role Based
                        Access Control (RBAC).
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;Remove privilege granted directly to a user:
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt;
                        &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;
                        &lt;li&gt;Click on Users.&lt;/li&gt;
                        &lt;li&gt;For each user complete the following:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the user.&lt;/li&gt;
                        &lt;li&gt;Click on the Permissions tab.&lt;/li&gt;
                        &lt;li&gt;Expand &amp;quot;Managed Policies&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Detach Policy&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Expand &amp;quot;Inline Policies&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Remove Policy&amp;quot;.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;Create a Group and add a user:
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt;
                        &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;
                        &lt;li&gt;Select Groups and click Create New Group.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;In the Group Name box, type the name of the group and click Next Step.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;In the list of policies, select the check box for each policy that you want to apply
                        to all members of the group. Click Next Step.&lt;/li&gt;
                        &lt;li&gt;Click Create Group.&lt;/li&gt;
                        &lt;li&gt;Click the new Group and select the &amp;quot;Users&amp;quot; tab.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Add Users to Group&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select the users and click &amp;quot;Add Users&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='1.16' supportedStandardRef='CIS AWS Standard'/>
                        <standard ref='1.22' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Obtain a ilist of IAM users by: aws iam list-users --query 'Users[*].UserName'
                            --output text&lt;/li&gt;
                            &lt;li&gt;Run the following to dermine if they have policies directly attached:&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws iam list-attached-user-policies --user-name user
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws iam list-user-policies --user-name user
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:21.706'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-IAM-2.1' name='Avoid the use of the root account unless absolutely necessary'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>The root account is the one which was used to open the AWS account with Amazon. Therefore it
                        has full unrestricted access to all resources within the account including billing information.
                        Reducing the use of this account and instead using personalised accounts with restricted
                        permissions ensures the principles of least privilege and can help prevent accidental disclosure
                        of credentials or unintended changes.
                        &lt;br /&gt;
                        &lt;b&gt;&lt;br /&gt;&lt;/b&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;Follow the remediation in &amp;quot;Create Individual Accounts&amp;quot;.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='1.1' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;blockquote&gt;
                            aws iam create-credential-report
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            aws iam get-credential-report --query 'Content' --output text | base64 -D | cut -d,
                            -f1,5,11,16 | grep -B1 '&amp;lt;root_account&amp;gt;'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;From the above determine the &amp;quot;password_last_used&amp;quot; time In
                            addition to the above set up a metric filter as described elsewhere in this library to
                            determine ad-hoc use of root.
                            &lt;div&gt;
                            &lt;br /&gt;Content provided by
                            &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                            &lt;/div&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:22.013'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-IAM-2.11' name='Configure password expiration' issueId='' platform='' cost='0'
                         risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Change access keys regularly, and make sure that all IAM users in your account do as well.
                        That way, if an access key is compromised without your knowledge, you limit how long the
                        credentials can be used to access your resources. Credential reports can be used to determine
                        how long access keys have been active for.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt;
                        &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;
                        &lt;li&gt;Click on Users.&lt;/li&gt;
                        &lt;li&gt;Select the user you wish to rotate the key for.&lt;/li&gt;
                        &lt;li&gt;Under access keys click &amp;quot;Create Access Key&amp;quot; (do not touch the
                        existing key yet).&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Download credentials&amp;quot; or &amp;quot;Show credentials&amp;quot;
                        so that you have a record of them.&lt;/li&gt;
                        &lt;li&gt;Update any applications with the new credentials and test (we recommend to leave a few
                        days or a week for testing).&lt;/li&gt;
                        &lt;li&gt;Once complete complete 1-4 above and for the key which needs rotating click &amp;quot;Make
                        Inactive | Delete&amp;quot; and click &amp;quot;Deactive&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Once you are confident you will no longer need the key (wait several more days) repeat
                        1-4 and select &amp;quot;Delete&amp;quot; for the inactive key.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='1.3' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;Check the access keys created time: aws iam get-credential-report --query
                            'Content' --output text | base64 -D | awk -F, '{print $1,$9,$10,$14,$15}'&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each access_key_1_active and access_key_9_active that is set to True ensure
                            the created date is within the last 90 days.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:22.311'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-IAM-1.20' name='Create an IAM role for managing incidents with AWS' issueId=''
                         platform='' cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>&lt;span style=" , Arial;"&gt;&lt;span style=""&gt;AWS provides a support center that can be
                        used for incident notification and response, as well as technical support and customer services.
                        Create an IAM Role to allow authorized users to manage incidents with AWS Support.&lt;br /&gt;&lt;br
                        /&gt;&lt;/span&gt;&lt;span style=" font-weight: bold;"&gt;Remediation:&lt;br /&gt;&lt;/span&gt;&lt;span
                        style=""&gt;Using the Amazon unified command line interface, create an IAM role for managing
                        incidents with AWS:&lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a trust relationship policy document that allows &amp;lt;iam_user&amp;gt; to
                        manage AWS incidents, and save it locally as /tmp/TrustPolicy.json:&lt;/li&gt;
                        &lt;/ul&gt;&lt;/span&gt;&lt;/span&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;{&lt;/span&gt;&lt;/span&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,&lt;/span&gt;&lt;/span&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;&amp;quot;Statement&amp;quot;: [&lt;/span&gt;&lt;/span&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;{&lt;/span&gt;&lt;/span&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;&amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,&lt;/span&gt;&lt;/span&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;&amp;quot;Principal&amp;quot;: {&lt;/span&gt;&lt;/span&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;&amp;quot;AWS&amp;quot;: &amp;quot;&amp;lt;span
                        style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;&amp;lt;iam_user&amp;gt;&amp;lt;/span&amp;gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;},&lt;/span&gt;&lt;/span&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;&amp;quot;Action&amp;quot;: &amp;quot;sts:AssumeRole&amp;quot;&lt;/span&gt;&lt;/span&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;}&lt;/span&gt;&lt;/span&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;]&lt;/span&gt;&lt;/span&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;}&lt;/span&gt;&lt;/span&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create the IAM role using the above trust policy:&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        aws iam create-role --role-name &amp;lt;aws_support_iam_role&amp;gt;
                        --assume-role-policy-document file:///tmp/TrustPolicy.json
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Attach 'AWSSupportAccess' managed policy to the created IAM role:&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        aws iam attach-role-policy --policy-arn &amp;lt;iam_policy_arn&amp;gt; --role-name &amp;lt;aws_support_iam_role&amp;gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name='Amazon docs: attach role policy'
                                   url='https://docs.aws.amazon.com/cli/latest/reference/iam/attach-role-policy.html'/>
                        <reference name='Amazon docs: list entities for policy'
                                   url='https://docs.aws.amazon.com/cli/latest/reference/iam/list-entities-for-policy.html'/>
                        <reference name='Amazon docs: list policies'
                                   url='https://docs.aws.amazon.com/cli/latest/reference/iam/list-policies.html'/>
                        <reference name='Amazon docs: managed policies and inline policies'
                                   url='https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html'/>
                    </references>
                    <standards>
                        <standard ref='1.20' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;span style=" , Arial;"&gt;Using the Amazon unified command line interface:&lt;br /&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List IAM policies, filter for the 'AWSSupportAccess' managed policy, and note the
                            &amp;quot;Arn&amp;quot; element value:&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;&lt;/span&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;aws iam list-policies --query &amp;quot;Policies[?PolicyName
                            == 'AWSSupportAccess']&amp;quot;&lt;/span&gt;&lt;/span&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;span style=" , Arial;"&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if the 'AWSSupportAccess' is attached to any IAM user, group or role:&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;&lt;/span&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;aws iam list-entities-for-policy
                            --policy-arn &amp;lt;iam_policy_arn&amp;gt;&lt;/span&gt;&lt;/span&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-06T14:22:21.861'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-IAM-2.6' name='Create a Password Policy enforcing strong passwords' issueId=''
                         platform='' cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Enforcing a strong password policy increases resilency and reduces the chances of the password
                        being compromised either through brute force attempts, keystroke logging tools or stolen
                        credentials amongst others.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to AWS Console (ensure you have permissions to update IAM).&lt;/li&gt;
                        &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;
                        &lt;li&gt;Click on Account Settings.&lt;/li&gt;
                        &lt;li&gt;Set &amp;quot;Minimum password length&amp;quot; to 8 or greater.&lt;/li&gt;
                        &lt;li&gt;Check &amp;quot;Require at least one uppercase letter&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Check &amp;quot;Require at least one lowercase letter&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Check &amp;quot;Require at least one number&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Check &amp;quot;Require at least one non-alphanumeric character&amp;quot;&lt;/li&gt;
                        &lt;li&gt;Check &amp;quot;Enable password expiration&amp;quot; and set the period to at least 90
                        days.&lt;/li&gt;
                        &lt;li&gt;Check &amp;quot;Prevent password reuse&amp;quot; and set the number to at least 10.&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='1.10' supportedStandardRef='CIS AWS Standard'/>
                        <standard ref='1.11' supportedStandardRef='CIS AWS Standard'/>
                        <standard ref='1.4' supportedStandardRef='CIS AWS Standard'/>
                        <standard ref='1.5' supportedStandardRef='CIS AWS Standard'/>
                        <standard ref='1.6' supportedStandardRef='CIS AWS Standard'/>
                        <standard ref='1.7' supportedStandardRef='CIS AWS Standard'/>
                        <standard ref='1.8' supportedStandardRef='CIS AWS Standard'/>
                        <standard ref='1.9' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:22.606'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-IAM-2.3' name='Create Individual Accounts' issueId='' platform='' cost='0'
                         risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>By creating individual IAM users for people accessing your account, you can give each IAM user
                        a unique set of security credentials. You can also grant different permissions to each IAM user.
                        If necessary, you can change or revoke an IAM user's permissions any time. (If you give out your
                        AWS root credentials, it can be difficult to revoke them, and it is impossible to restrict their
                        permissions.).
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt;
                        &lt;li&gt;Select IAM.&lt;/li&gt;
                        &lt;li&gt;Select Users.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Create New Users&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Complete the required information.&lt;/li&gt;
                        &lt;li&gt;Uncheck &amp;quot;Create access key for users&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Create&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select the user.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Manage Password&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select the required options and click &amp;quot;apply&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Show User Security Credentials&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Securely supply the password to your user.&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:22.902'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-IAM-1.21'
                         name='Do not setup access keys during initial user setup for all IAM users that have a console password'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>&lt;span style=" , Arial;"&gt;&lt;span style=""&gt;AWS console defaults the checkbox for
                        creating access keys to enabled. This results in many access keys being generated unnecessarily.
                        In addition to unnecessary credentials, it also generates unnecessary management work in
                        auditing and rotating these keys.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="
                        font-weight: bold;"&gt;Remediation:&lt;br /&gt;&lt;/span&gt;&lt;span style=""&gt;Perform the
                        following to delete access keys that do not pass the audit.&lt;/span&gt;&lt;/span&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                        &lt;li&gt;Click Services.&lt;/li&gt;
                        &lt;li&gt;Click IAM.&lt;/li&gt;
                        &lt;li&gt;Click on Users.&lt;/li&gt;
                        &lt;li&gt;Click on Security Credentials.&lt;/li&gt;
                        &lt;li&gt;As an Administrator.&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Click on Delete for keys that were created at the same time as the user profile but
                        have not been used.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;li&gt;As an IAM User.&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Click on Delete for keys that were created at the same time as the user profile but
                        have not been used.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;Via CLI:&amp;nbsp;&lt;/span&gt;&lt;/span&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;span style=" , Arial;"&gt;&lt;span style=""&gt;aws iam delete-access-key&lt;/span&gt;&lt;/span&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='1.21' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;span style=""&gt;Perform the following to determine if access keys are rotated as
                            prescribed:&lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console&lt;/li&gt;
                            &lt;li&gt;Click Services&lt;/li&gt;
                            &lt;li&gt;Click IAM&lt;/li&gt;
                            &lt;li&gt;Click on a User&lt;/li&gt;
                            &lt;li&gt;Compare the user creation date to the key 1 creation date.&lt;/li&gt;
                            &lt;li&gt;For any that match, the key was created during initial user setup.&lt;/li&gt;
                            &lt;/ol&gt;Keys that were created at the same time as the user profile and do not have a
                            last used date should be deleted.&lt;br /&gt;&lt;br /&gt;Via the CLI:&lt;br /&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Run the following command (OSX/Linux/UNIX) to generate a list of all IAM users
                            along with their access keys utilization:&lt;/li&gt;
                            &lt;/ul&gt;&lt;/span&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;span style=""&gt;aws iam generate-credential-report&lt;/span&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;span style=""&gt;&lt;br /&gt;&lt;/span&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;span style=""&gt;aws iam get-credential-report --query 'Content' --output text | base64
                            -d | cut -d, -f1,4,9,11,14,16&lt;/span&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;span style=""&gt;&lt;br /&gt;
                            &lt;ul&gt;
                            &lt;li&gt;The output of this command will produce a table similar to the following:&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;&lt;/span&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;span style=""&gt;user,password_enabled,access_key_1_active,access_key_1_last_used_date,access_&lt;/span&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;span style=""&gt;key_2_active,access_key_2_last_used_date&lt;/span&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;span style=""&gt;elise,false,true,2015-04-16T15:14:00+00:00,false,N/A&lt;/span&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;span style=""&gt;brandon,true,true,N/A,false,N/A&lt;/span&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;span style=""&gt;rakesh,false,false,N/A,false,N/A&lt;/span&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;span style=""&gt;helene,false,true,2015-11-18T17:47:00+00:00,false,N/A&lt;/span&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;span style=""&gt;paras,true,true,2016-08-28T12:04:00+00:00,true,2016-03-04T10:11:00+00:00&lt;/span&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;span style=""&gt;anitha,true,true,2016-06-08T11:43:00+00:00,true,N/A&lt;/span&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;span style=""&gt;
                            &lt;ul&gt;
                            &lt;li&gt;For any user having access_key_last_used_date set to N/A , ensure that access key
                            is deleted&lt;/li&gt;
                            &lt;/ul&gt;&lt;/span&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-06T14:34:03.637'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-IAM-2.4' name='Enable MFA for IAM console users' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Using a multi-factor authentication (MFA) device enhances the security of the login process.
                        With MFA, users have a device that generates a unique authentication code (a one-time password,
                        or OTP) and users must provide both their normal credentials (like their user name and password)
                        and the OTP.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The MFA device can either be a special piece of hardware, or it can be a virtual device. The
                        recommendation for all console login accounts is to use MFA to increase the level of security of
                        the login process.
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt;
                        &lt;li&gt;Select IAM.&lt;/li&gt;
                        &lt;li&gt;Select Users.&lt;/li&gt;
                        &lt;li&gt;For each user:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the user.&lt;/li&gt;
                        &lt;li&gt;Under &amp;quot;Sign-In Credentials&amp;quot; if &amp;quot;Password&amp;quot; is set
                        to &amp;quot;Yes&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Manage MFA Device&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Choose the type of MFA.&lt;/li&gt;
                        &lt;li&gt;Either scan the code or enter your device secret key.&lt;/li&gt;
                        &lt;li&gt;Enter the Authentication code in &amp;quot;Authentication Code 1&amp;quot; box.&lt;/li&gt;
                        &lt;li&gt;Wait for the code to change and enter the next code in &amp;quot;Authentication Code 2&amp;quot;
                        box.&lt;/li&gt;
                        &lt;li&gt;Click Activate MFA.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='1.2' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;The following command displays a list of all IAM users along with their password
                            and MFA status: aws iam get-credential-report --output text | base64 -D | cut - d, -f1,4,8&lt;/li&gt;
                            &lt;li&gt;For any column having password_enabled set to true ensure mfa_active is also set
                            to true.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:23.203'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-IAM-2.2' name='Enable MFA for root accounts' issueId='' platform='' cost='0'
                         risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Root is highly privileged and therefore using a multi-factor authentication (MFA) device
                        enhances the security of the login process. With MFA, users have a device that generates a
                        unique authentication code (a one-time password, or OTP) and users must provide both their
                        normal credentials (like their user name and password) and the OTP. The MFA device can either be
                        a special piece of hardware, or it can be a virtual device. The recommendation for the root
                        account is to use a hardware based device as it has a smaller attack surface and cannot be
                        duplicated.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console as root.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Dashboard&amp;quot; and under &amp;quot;Security Status&amp;quot;
                        choose &amp;quot;Activate MFA&amp;quot; on your root account.&lt;/li&gt;
                        &lt;li&gt;Select Activate MFA&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;In the wizard, choose &amp;quot;A hardware MFA&amp;quot; device and then select Next
                        Step.&lt;/li&gt;
                        &lt;li&gt;In the Serial Number box, enter the serial number that is found on the back of the MFA
                        device.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;In the Authentication Code 1 box, enter the six-digit number displayed by the MFA
                        device.&lt;/li&gt;
                        &lt;li&gt;Wait until the device refreshes the code, and then enter the next six-digit number
                        into the Authentication Code 2 box.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Next Step&amp;quot;.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;The MFA device is now associated with the AWS account.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='1.13' supportedStandardRef='CIS AWS Standard'/>
                        <standard ref='1.14' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws iam get-account-summary&lt;/li&gt;
                            &lt;li&gt;Ensure the AccountMFAEnabled property is 1.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:23.506'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-IAM-2.10' name='Enable setting MFA for sensitive API calls' issueId=''
                         platform='' cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>To the extent that it is practical consider enforcing MFA access for sensitve API calls. For
                        example, you can require that a user has authenticated with an MFA device in order to be allowed
                        to terminate an Amazon EC2 instance. This ensures that such high level changes to your AWS
                        environment are protected with an extra layer of security thus helping to prevent accidental or
                        malicious damage.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;The following is an example of how to create a policy that enforces MFA to terminate
                        EC2 instances:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt;
                        &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Policies&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Create Policy&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Create your own policy&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Provide a policy name and description.&lt;/li&gt;
                        &lt;li&gt;In the policy document add the following:&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;i&gt; {&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt; &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt; &amp;quot;Statement&amp;quot;: [{&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt; &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt; &amp;quot;Action&amp;quot;: [&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt; &amp;quot;ec2:StopInstances&amp;quot;,&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt; &amp;quot;ec2:TerminateInstances&amp;quot;&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt; ],&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt; &amp;quot;Resource&amp;quot;: [&amp;quot;*&amp;quot;],&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt; &amp;quot;Condition&amp;quot;: {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:MultiFactorAuthPresent&amp;quot;:
                        &amp;quot;true&amp;quot;}}&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt; }]&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt;}&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Click &amp;quot;Create policy&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;The policy may now be added to a group by following the outlines in &amp;quot;Use RBAC
                        with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                        &lt;/ul&gt; Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>The following checks that MFA is forced on a policy:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt;
                            &lt;li&gt;Go to IAM Service on the AWS Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Policies&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;In the filter select &amp;quot;Customer Managed Policies&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select the policy to check.&lt;/li&gt;
                            &lt;li&gt;In the policy document check for the presence of the line: &amp;quot;Condition&amp;quot;:
                            {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:MultiFactorAuthPresent&amp;quot;: &amp;quot;true&amp;quot;}}&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:23.813'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-IAM-2.9' name='Enforce employee lifecycle policies' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Regular reviews of accounts on the system should be conducted to ensure that stale accounts
                        cannot be abused either by those former employees using them or compromised by attackers.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;&amp;nbsp;
                        &lt;br /&gt;At least every 90 days complete the following:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt;
                        &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;
                        &lt;li&gt;Click on Users.&lt;/li&gt;
                        &lt;li&gt;For any user that should no longer exist:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;select the user,&lt;/li&gt;
                        &lt;li&gt;click &amp;quot;User Actions&amp;quot;,&lt;/li&gt;
                        &lt;li&gt;click &amp;quot;Delete&amp;quot;.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Obtain a list of IAM users by: aws iam list-users --query 'Users[*].UserName'
                            --output text&lt;/li&gt;
                            &lt;li&gt;Ensure all users are valid users.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:24.112'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-IAM-2.7' name='Enforce Least Privilege' issueId='' platform='' cost='0'
                         risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Granting least privilege ensures that users only have the permissions required to complete
                        their jobs rather than additional privileges that are not required. Following this model ensures
                        that, should an account be compromised, the blast radius of damage is limited.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                        with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                        &lt;/ul&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='1.22' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:24.400'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-IAM-2.5' name='Ensure root does not have API keys' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>You use an access key (an access key ID and secret access key) to make programmatic requests
                        to AWS. However, do not use your AWS account (root) access key. The access key for your AWS
                        account gives full access to all your resources for all AWS services, including your billing
                        information. You cannot restrict the permissions associated with your AWS account access key.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console as Root.&lt;/li&gt;
                        &lt;li&gt;Click on Account Name at the top left and select Security Credentials.&lt;/li&gt;
                        &lt;li&gt;On the pop up screen Click on Continue to Security Credentials.&lt;/li&gt;
                        &lt;li&gt;Click on Access Keys.&lt;/li&gt;
                        &lt;li&gt;Under the Status column if there are any Keys which are &amp;quot;Active&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click on &amp;quot;Make Inactive&amp;quot; and click &amp;quot;Delete&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='1.12' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;Run the following command: aws iam get-credential-report --query 'Content'
                            --output text | base64 -D | egrep &amp;quot;root|access&amp;quot; | awk -F, '{print
                            $1,$9,$14}'&lt;/li&gt;
                            &lt;li&gt;For the &amp;lt;root_account&amp;gt; user ensure access_key_1_active and
                            access_key_2_active are false.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:24.707'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-IAM-2.12' name='Rotate KMS CMK Keys at least every year' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Rotating keys regularly reduces the impact of a compromised key being used to access data
                        since old keys cannot be used once rotated.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;List keys with:&amp;nbsp; &amp;quot;aws kms list-keys&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;For each key enable rotation: &amp;quot;aws kms enable-key-rotation --key-id &amp;lt;key_id&amp;gt;&amp;quot;.&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='2.8' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;List keys with: aws kms list-keys&lt;/li&gt;
                            &lt;li&gt;For each key check for rotation:&amp;nbsp;aws kms get-key-rotation-status --key-id
                            &amp;lt;key_id&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:25.006'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref='AUTHENTICATION' name='Authentication' desc='' library=''>
                    <threats>
                        <threat ref='AWS-LOST-ACCESS-ROOT'
                                name='Attackers gain unauthorized access to the root account due to the lack of configuration of the account'
                                state='Expose' source='MANUAL' owner='' library=''>
                            <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the administrator account due to the lack of
                                the account and its security mechanisms, like modifying credentials and adding/removing
                                user accounts.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality='100' integrity='100' availability='100'
                                        easeOfExploitation='25'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-IAM-2.2'>
                                    <controls>
                                        <control ref='Hydras-AWS-IAM-2.1' mitigation='25'/>
                                        <control ref='Hydras-AWS-IAM-2.3' mitigation='25'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-IAM-2.1'>
                                    <controls>
                                        <control ref='Hydras-AWS-IAM-2.2' mitigation='25'/>
                                        <control ref='Hydras-AWS-IAM-2.5' mitigation='25'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-IAM-2.1' mitigation='25'/>
                                <control ref='Hydras-AWS-IAM-2.2' mitigation='25'/>
                                <control ref='Hydras-AWS-IAM-2.3' mitigation='25'/>
                                <control ref='Hydras-AWS-IAM-2.5' mitigation='25'/>
                            </controls>
                        </threat>
                        <threat ref='AWS-LOST-ACCESS-USER'
                                name='Attackers gain unauthorized access to the user account due to the lack of configuration of the account'
                                state='Expose' source='MANUAL' owner='' library=''>
                            <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the user account due to the lack of
                                configuration of the account, like the security question to reset the password was
                                configured incorrectly.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality='50' integrity='50' availability='50' easeOfExploitation='25'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-IAM-2.8'>
                                    <controls>
                                        <control ref='Hydras-AWS-IAM-2.4' mitigation='30'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-IAM-2.6'>
                                    <controls>
                                        <control ref='Hydras-AWS-IAM-2.6' mitigation='40'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-IAM-2.9'>
                                    <controls>
                                        <control ref='Hydras-AWS-IAM-2.9' mitigation='30'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-IAM-2.4' mitigation='30'/>
                                <control ref='Hydras-AWS-IAM-2.6' mitigation='40'/>
                                <control ref='Hydras-AWS-IAM-2.9' mitigation='30'/>
                            </controls>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref='AUTHORIZATION' name='Authorization' desc='' library=''>
                    <threats>
                        <threat ref='AWS-LOSS-CONTROL-ENV'
                                name='Attackers gain unauthorized access to the control of the environment'
                                state='Expose' source='MANUAL' owner='' library=''>
                            <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the control of the environment, due of the
                                user accounts or role groups are not well defined and configured. Therefore, attackers
                                can make changes without the root approval.&amp;nbsp;
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality='75' integrity='75' availability='75' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-IAM-2.8'>
                                    <controls>
                                        <control ref='Hydras-AWS-IAM-2.10' mitigation='10'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-IAM-1.21'>
                                    <controls>
                                        <control ref='Hydras-AWS-IAM-1.21' mitigation='10'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-IAM-2.7'>
                                    <controls>
                                        <control ref='Hydras-AWS-EC2-6.3' mitigation='10'/>
                                        <control ref='Hydras-AWS-IAM-1.20' mitigation='10'/>
                                        <control ref='Hydras-AWS-IAM-2.7' mitigation='15'/>
                                        <control ref='Hydras-AWS-IAM-2.8' mitigation='15'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-EXPIRATION-DATE'>
                                    <controls>
                                        <control ref='Hydras-AWS-IAM-2.11' mitigation='15'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-IAM-2.12'>
                                    <controls>
                                        <control ref='Hydras-AWS-IAM-2.12' mitigation='15'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-EC2-6.3' mitigation='10'/>
                                <control ref='Hydras-AWS-IAM-1.20' mitigation='10'/>
                                <control ref='Hydras-AWS-IAM-1.21' mitigation='10'/>
                                <control ref='Hydras-AWS-IAM-2.10' mitigation='10'/>
                                <control ref='Hydras-AWS-IAM-2.11' mitigation='15'/>
                                <control ref='Hydras-AWS-IAM-2.12' mitigation='15'/>
                                <control ref='Hydras-AWS-IAM-2.7' mitigation='15'/>
                                <control ref='Hydras-AWS-IAM-2.8' mitigation='15'/>
                            </controls>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref='HYDRAS-AWS-LOG' name='AWS Logging' desc='Logging and Auditing within AWS' groupName='' tags=''
                   position='5' library='' diagramPositionX='0' diagramPositionY='0' componentDefinitionRef=''>
            <weaknesses>
                <weakness ref='AWS-Logging-3.3' name='Audit logs are accesible' state='0' impact='100' issueId=''>
                    <desc>&lt;div&gt;
                        The audit logs are not encrypted and they can be accessed by attackers and obtain sensitive data
                        in clear text.
                        &lt;/div&gt;
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:42.719'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Logging-3.4' name='Non-auditable actions in the resources' state='0' impact='100'
                          issueId=''>
                    <desc>The actions in the resources are not audited and not recorded into the logs.</desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:43.014'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Logging-3.1' name='Non-auditable API calls in all regions' state='0' impact='100'
                          issueId=''>
                    <desc>The API call to the resources is not audited and the actions are not recorded into the logs.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:43.306'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Logging-3.8' name='Non-centrality audit logs' state='0' impact='100' issueId=''>
                    <desc>The audit logs are not stored in a central system. Therefore, the audit logs cannot be
                        exploited correctly by the security personnel.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:43.590'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Logging-3.7' name='Unaudited connections with the resources' state='0' impact='100'
                          issueId=''>
                    <desc>The connections with the applications and with the databases cannot be audited and not
                        detected.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:43.883'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Logging-3.9' name='Unaudited resources changes' state='0' impact='100' issueId=''>
                    <desc>The changes in the applications and in the databases and these changes are not detected and
                        not audited.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:44.176'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
            </weaknesses>
            <controls>
                <control ref='Hydras-AWS-Logging-3.9' name='Enable AWS Config across all regions' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>AWS Config tracks configuration changes to resources as they occur and is therefore a good
                        source of identifying whether unintentional or malicious changes have occured to resources with
                        the AWS account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions).&lt;/li&gt;
                        &lt;li&gt;Select Config from the services menu.&lt;/li&gt;
                        &lt;li&gt;Define which resources you want to record in the selected region.&lt;/li&gt;
                        &lt;li&gt;Choose to include global resources (IAM resources).&lt;/li&gt;
                        &lt;li&gt;Specify an S3 bucket.&lt;/li&gt;
                        &lt;li&gt;Create an SNS Topic&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='2.5' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions)&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Config from the services menu&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If presented with Setup AWS Config follow the procedure highlighted in the
                            remediation section&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the Resource inventory page, Click on &amp;quot;edit&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure 1 or both check-boxes under &amp;quot;All Resources&amp;quot; is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Include global resources related to IAM resources&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;which needs to be enabled in 1 region only.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure the correct S3 bucket has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the correct SNS topic has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Repeat steps 2 to 7 for each region (you'll need to change region in the top right
                            corner of the AWS management console to do this).&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:40.059'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Logging-3.1' name='Enable Cloudtrail in all regions' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Cloudtrail records events of all API calls made within a AWS account. This enables security
                        analysis, resource change tracking, and compliance auditing. Cloudtrail should be enabled in all
                        regions, even if they are not being used, to identify unintended or accidental changes.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation&lt;/b&gt;:
                        &lt;br /&gt;Create a global trail using a previously created S3 bucket:
                        &lt;br /&gt; aws cloudtrail create-trail --name &amp;lt;trail_name&amp;gt; --s3-bucket-name
                        &amp;lt;s3-bucket-name&amp;gt; --is-multi-region-trail
                        &lt;br /&gt;
                        &lt;br /&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='2.1' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;IsMultiRegionTrail&amp;quot; = TRUE&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:40.355'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Logging-3.2' name='Enable CloudTrail log file validation' issueId=''
                         platform='' cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Enabling log file validation will provide additional integrity checking of CloudTrail as it
                        creates a digest for each log file it writes to S3. These digests can then be used to determine
                        if a log has been modified since being written
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;aws cloudtrail update-trail --name &amp;lt;trail_name&amp;gt;
                        --enable-log-file-validation
                        &lt;br /&gt;
                        &lt;br /&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='2.2' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;blockquote&gt;
                            aws cloudtrail describe-trails&amp;nbsp;
                            &lt;/blockquote&gt;Ensure LogFileValidationEnabled = true (for each trail)
                            &lt;ol&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:40.652'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Logging-3.6' name='Enable S3 Bucket logging' issueId='' platform='' cost='0'
                         risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>S3 Bucket Access Logging generates log files that contain access records for each request made
                        to an S3 bucket. By enabling this it is possible to capture events relating to the objects
                        within that bucket thus helping to capture potential security issues or identifying threats. It
                        is recommended to enable S3 bucket logging on any S3 bucket that contains sensitive data and
                        stored the logs in a separate bucket for security analysis.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with S3 update access).&lt;/li&gt;
                        &lt;li&gt;Select S3 from the services menu.&lt;/li&gt;
                        &lt;li&gt;Under All Buckets click on the S3 bucket you wish to enable logging.&lt;/li&gt;
                        &lt;li&gt;Click on Properties in the top right of the console.&lt;/li&gt;
                        &lt;li&gt;Under Bucket:&amp;lt;bucket_name&amp;gt; click on Logging.&lt;/li&gt;
                        &lt;li&gt;Click on the &amp;quot;Enabled&amp;quot; checkbox.&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Target Bucket&amp;quot; to store the logs.&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Target Prefix&amp;quot; for the logs.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Save&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='2.6' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with S3 update access).&lt;/li&gt;
                            &lt;li&gt;Select S3 from the services menu.&lt;/li&gt;
                            &lt;li&gt;Under All Buckets click on the S3 bucket you wish to enable logging.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click on Properties in the top right of the console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Under Bucket:&amp;lt;bucket_name&amp;gt; click on Logging.&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;Enabled&amp;quot; is checked.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:40.945'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Logging-3.7' name='Enable VPC flow logs' issueId='' platform='' cost='0'
                         risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>VPC Flow logs enable the capture of IP traffic that traverses the network interfaces within a
                        VPC. These logs are captured and sent to cloudtrail logs enabling you to detect security
                        incidents that may be occuring across the network.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign into the management console.&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;In the left paneclick &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select a VPC.&lt;/li&gt;
                        &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Create Flow Log&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Choose a role (note this must be pre-created. Follow the link provided in the text
                        underneath &amp;quot;Role&amp;quot; for help).&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Destination Log Group&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Create flow Log&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='2.9' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Sign into the management console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Select a VPC.&lt;/li&gt;
                            &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                            &lt;li&gt;Ensure a Log Flow exists that has Active in the Status column.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:41.246'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Logging-3.5' name='Encrypt CloudTrail logs using KMS' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>By default, the log files delivered by CloudTrail to your bucket are encrypted by Amazon
                        server-side encryption with Amazon S3-managed encryption keys (SSE-S3). To provide a security
                        layer that is directly manageable, you can instead use server-side encryption with AWS
                        KMS–managed
                        keys (SSE-KMS) for your CloudTrail log files. This provides several advantages:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;You can create and manage the CMK encryption keys yourself.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You can use a single CMK to encrypt and decrypt log files for multiple accounts across
                        all regions.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You have control over who can use your key for encrypting and decrypting CloudTrail
                        log files.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You can assign permissions for the key to the users in your organization according to
                        your requirements.&lt;/li&gt;
                        &lt;li&gt;You have enhanced security. With this feature, in order to read log files, you now
                        need to meet two conditions:&amp;nbsp;&lt;/li&gt;
                        &lt;ol&gt;
                        &lt;li&gt;you must have S3 read permission on the bucket, and&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;you must be granted decrypt permission by the CMK policy.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/ul&gt;Because S3 automatically decrypts the log files for requests from users authorized to
                        use the CMK, SSE-KMS encryption for CloudTrail log files is backward compatible with existing
                        applications that read CloudTrail log data.&amp;nbsp;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;&amp;nbsp;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with cloudtrail update permissions).&lt;/li&gt;
                        &lt;li&gt;Select CloudTrail from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Trails&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click on a Trail.&lt;/li&gt;
                        &lt;li&gt;Under the S3 section click on the edit button.&lt;/li&gt;
                        &lt;li&gt;Click Advanced.&lt;/li&gt;
                        &lt;li&gt;Set &amp;quot;Encrypt Log Files&amp;quot; to &amp;quot;Yes&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Set &amp;quot;Create a new KMS key&amp;quot; to &amp;quot;Yes&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;In &amp;quot;KMS key&amp;quot; type a name for your key.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Save&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt; Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='2.7' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;blockquote&gt;
                            aws cloudtrail describe-trails
                            &lt;/blockquote&gt;Check that KMS is enabled if the &amp;quot;KmsKeyId&amp;quot; property is
                            set.
                            &lt;ol&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:41.532'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Logging-3.3' name='Ensure CloudTrail logs are not publically available'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>Since cloudtrail logs capture all API calls for the AWS account they should be stored in an S3
                        bucket that is not accessible to the public. Applying the correct bucket policy helps ensure the
                        confidentiality of the data.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with s3 update privileges).&lt;/li&gt;
                        &lt;li&gt;Select s3 from the services list.&lt;/li&gt;
                        &lt;li&gt;Right-click on the bucket you have used for &amp;quot;cloudtrail&amp;quot; and click
                        &amp;quot;Properties&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;In the Properties pane, click the Permissions tab.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select the row that grants permission to &amp;quot;Everyone&amp;quot; or &amp;quot;Any
                        Authenticated User&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Uncheck all the permissions granted to Everyone or Any Authenticated User.&lt;/li&gt;
                        &lt;li&gt;Click Save to save the ACL.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;If the Edit bucket policy button is present, click it.&lt;/li&gt;
                        &lt;li&gt;Remove any Statement having an Effect set to Allow and a Principal set to *.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='2.3' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Obtain the bucket name of the cloudtrail:&amp;nbsp;aws cloudtrail describe-trails
                            --query 'trailList[*].S3BucketName'&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;AllUsers&amp;quot; is not granted access to the bucket:&amp;nbsp;aws
                            s3api get-bucket-acl --bucket &amp;lt;bucket_name&amp;gt; --query
                            'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/AllUsers`]'&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;Authenticated Users&amp;quot; is not granted access to the
                            bucket: aws s3api get-bucket-acl --bucket &amp;lt;bucket_name&amp;gt; --query
                            'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/Authenticated Users`]'&lt;/li&gt;
                            &lt;li&gt;Validate the bucket policy does not grant access to all:&amp;nbsp;aws s3api
                            get-bucket-policy --bucket &amp;lt;bucket_name&amp;gt;&lt;/li&gt;
                            &lt;li&gt;Check that the above command does not provide a principal of *, with EFFECT set to
                            ALLOW.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:41.841'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Logging-3.8' name='Export EC2 OS logs to cloudwatch logs' issueId=''
                         platform='' cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Cloudwatch logs is an AWS service that allows you to send logs from an EC2 instance to
                        cloudwatch via an agent installed locally on the macine. The logs are then stored centrally
                        within cloudwatch logs and metric alerts can be configured so that security incidents can be
                        reported to the security team. It is recommended to enable cloudwatch log monitoring on all EC2
                        servers.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;Follow the directions provided in &amp;quot;http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/EC2NewInstanceCWL.html&amp;quot;
                        to install and enable Cloudwatch Logs on a new EC2 instance.
                        &lt;br /&gt;
                        &lt;br /&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Sign into the management console.&lt;/li&gt;
                            &lt;li&gt;Select Cloudwatch from the services menu.&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the left pane click &amp;quot;Logs&amp;quot;.&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click on your log group.&lt;/li&gt;
                            &lt;li&gt;Click on your log stream.&lt;/li&gt;
                            &lt;li&gt;Ensure event data is being captured as per the logs on your machine.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:42.141'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Logging-3.4' name='Integrate the CloudTail logs into Cloudwatch logs'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>One way to work with cloudtrail logs is to send them to cloudwatch logs which allows you to
                        define metric filters for alerting and monitoring. This allows you to take immediate action if a
                        certail threshold has been met. Enabling this provides the opportunity to monitor for sensitve
                        account activity.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with cloudtrail update permission).&lt;/li&gt;
                        &lt;li&gt;Select Cloudtrail from the services list.&lt;/li&gt;
                        &lt;li&gt;Under All Buckets select the target bucket you want to check.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Properties&amp;quot; then &amp;quot;Trails&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click on each trail where no CloudWatch Logs are defined.&lt;/li&gt;
                        &lt;li&gt;Go to the &amp;quot;CloudWatch Logs&amp;quot; section and click on &amp;quot;Configure&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Define a new or select an existing log group and click &amp;quot;Continue&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Configure the IAM Role which will deliver CloudTrail events to CloudWatch Logs.&lt;/li&gt;
                        &lt;li&gt;Create/Select an IAM Role and Policy Name.&lt;/li&gt;
                        &lt;li&gt;Click Allow.&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='2.4' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;blockquote&gt;
                            aws cloudtrail get-trail-status --name &amp;lt;trail_name&amp;gt;
                            &lt;/blockquote&gt;Ensure the &amp;quot;LatestcloudwatchLogdDeliveryTime&amp;quot; property
                            is set to a recent time (ie within the latest day or so).
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:42.423'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref='API LOGGING AND AUDITING' name='API Logging and Auditing'
                         desc='The logging and auditing of API calls made to AWS' library=''>
                    <threats>
                        <threat ref='UNAUDITABLE-CHANGES-AWS'
                                name='Attackers make undetected and unaudited changes to system configurations'
                                state='Expose' source='MANUAL' owner='' library=''>
                            <desc>&lt;div&gt;
                                If audit trails are not properly protected, an attacker could gain access to the system,
                                modify the status of the resources or exfiltrate sensitive data without being noticed.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality='25' integrity='50' availability='50' easeOfExploitation='25'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-Logging-3.3'>
                                    <controls>
                                        <control ref='Hydras-AWS-Logging-3.3' mitigation='20'/>
                                        <control ref='Hydras-AWS-Logging-3.5' mitigation='20'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-Logging-3.1'>
                                    <controls>
                                        <control ref='Hydras-AWS-Logging-3.1' mitigation='20'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-Logging-3.4'>
                                    <controls>
                                        <control ref='Hydras-AWS-Logging-3.2' mitigation='20'/>
                                        <control ref='Hydras-AWS-Logging-3.4' mitigation='20'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-Logging-3.1' mitigation='20'/>
                                <control ref='Hydras-AWS-Logging-3.2' mitigation='20'/>
                                <control ref='Hydras-AWS-Logging-3.3' mitigation='20'/>
                                <control ref='Hydras-AWS-Logging-3.4' mitigation='20'/>
                                <control ref='Hydras-AWS-Logging-3.5' mitigation='20'/>
                            </controls>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref='AWS RESOURCE LOGGING' name='AWS Resource Logging'
                         desc='Ensuring resources in the AWS environment are logged' library=''>
                    <threats>
                        <threat ref='UNAUDITABLE-CHANGES-RESOURCES-AWS'
                                name='Attackers make undetected and unaudited changes in the resources' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>&lt;div&gt;
                                If audit trails in the resources are not enabled or not protected, attackers could gain
                                access to the system and modify or delete data from the resources and the changes are
                                not detected.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality='50' integrity='25' availability='25' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-Logging-3.4'>
                                    <controls>
                                        <control ref='Hydras-AWS-Logging-3.6' mitigation='25'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-Logging-3.8'>
                                    <controls>
                                        <control ref='Hydras-AWS-Logging-3.8' mitigation='25'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-Logging-3.7'>
                                    <controls>
                                        <control ref='Hydras-AWS-Logging-3.7' mitigation='25'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-Logging-3.9'>
                                    <controls>
                                        <control ref='Hydras-AWS-Logging-3.9' mitigation='25'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-Logging-3.6' mitigation='25'/>
                                <control ref='Hydras-AWS-Logging-3.7' mitigation='25'/>
                                <control ref='Hydras-AWS-Logging-3.8' mitigation='25'/>
                                <control ref='Hydras-AWS-Logging-3.9' mitigation='25'/>
                            </controls>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref='HYDRAS-AWS-MON' name='AWS Monitoring'
                   desc='Monitoring and Alerting of resources and issues within AWS' groupName='' tags='' position='6'
                   library='' diagramPositionX='0' diagramPositionY='0' componentDefinitionRef=''>
            <weaknesses>
                <weakness ref='AWS-Monitoring-4.5'
                          name='Brute force attempts on the MS Azure management console cannot be detected' state='0'
                          impact='100' issueId=''>
                    <desc>The failure connection attempts (brute force) must be audited and monitored and the
                        correspondent personnel must be alerted and informed.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:57.647'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Monitoring-4.7'
                          name='Changes in the data encryption configuration cannot be detected' state='0' impact='100'
                          issueId=''>
                    <desc>The changes on the database encryption must be audited and monitored. When there are changes
                        on the database encryption, the security group must be alerted.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:57.919'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Monitoring-4.12' name='Changes in the network configuration cannot be detected'
                          state='0' impact='100' issueId=''>
                    <desc>&lt;div&gt;
                        The changes in the network configurations (NACLs, route and gateway tables) are not detected
                        because the monitorization and alerts of the network configuration are not configured to detect
                        these changes.
                        &lt;/div&gt;
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:58.206'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Monitoring-4.4' name='Changes in the security configurations can be not detected'
                          state='0' impact='100' issueId=''>
                    <desc>&lt;div&gt;
                        Monitoring and alerting for security configurations are not configured and changes cannot be
                        detected.&amp;nbsp;
                        &lt;/div&gt;
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:58.493'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Monitoring-4.10' name='Changes in the security groups cannot be detected' state='0'
                          impact='100' issueId=''>
                    <desc>The changes in the security groups must be audited and monitored and the correspondent
                        personnel must approve these changes. If the situation is not the correct, attackers can access
                        to security systems.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:58.787'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Monitoring-4.2' name='Excessive use of administrator accounts' state='0' impact='100'
                          issueId=''>
                    <desc>The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2016-07-27T15:32:06.328'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Monitoring-4.3' name='Lack of 2FA' state='0' impact='100' issueId=''>
                    <desc>Login to the console without using the Multi-factor Authentication (MFA) and they are not
                        detected. The connection without the MFA must be audited and monitored, the correct security
                        group must be informed and they must validate this connection.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2016-07-27T15:35:23.096'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
            </weaknesses>
            <controls>
                <control ref='Hydras-AWS-Monitoring-4.9' name='Create AWS Config configuration change alerts' issueId=''
                         platform='' cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is AWS Config
                        changes. AWS config tracks configuration changes within the environment and is a useful change
                        management tool. Therefore alerting on config changes ensures the continued visibility of AWS
                        configuration items.
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a metric filter that checks for AWS Config changes:&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws logs put-metric-filter&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --log-group-name &amp;lt;group&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-name &amp;lt;name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric- transformations &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-pattern '{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                        (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                        tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws cloudwatch put-metric-alarm&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --alarm-name &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric-name &amp;lt;metric_filter_name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --statistic Sum&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --period 300&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --threshold 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --comparison-operator GreaterThanOrEqualToThreshold&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --evaluation-periods 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --alarm-actions &amp;lt;topic_arn&amp;gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='3.9' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ul&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                            tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}&amp;quot;&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ul&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:53.629'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Monitoring-4.1' name='Create billing alerts to identify unusual spend'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>By setting billing alarms you can monitor your AWS spend and be alerted if it exceeds certain
                        thresholds thus protecting you from accruing unnecessary charges.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console and open the Billing and Cost Management console
                        at https://console.aws.amazon.com/billing/home#/.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;On the navigation pane, choose Preferences.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select the Receive Billing Alerts check box.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Choose Save preferences.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;If necessary, change the region on the navigation bar to US East (N. Virginia). The
                        billing metric data is stored in this region, even for resources in other regions.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;On the navigation pane, under &amp;quot;Metrics&amp;quot;, choose &amp;quot;Billing&amp;quot;.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;In the list of billing metrics, select the check box next to Currency USD, for the
                        metric named EstimatedCharges. Define the alarm as follows:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;If you want the alarm to trigger as soon as you go over the free tier, set &amp;quot;When
                        my total AWS charges for the month exceed&amp;quot; to $.01. This means that you'll receive a
                        notification as soon as you incur a charge. Otherwise, set it to the amount you want to trigger
                        the alarm, and you will be notified when you go over that amount.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Choose the &amp;quot;New list&amp;quot; link next to the &amp;quot;send a notification
                        to&amp;quot; box.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;When prompted, enter your email address or choose your Amazon SNS notification from
                        the drop down.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Choose &amp;quot;Create Alarm&amp;quot;.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;li&gt;In the &amp;quot;Confirm new email addresses&amp;quot; dialog box, confirm the email
                        address or choose &amp;quot;I will do it later&amp;quot;. If you don't confirm the email address
                        now, the alarm remains in the Pending confirmation status until you do so, and does not send an
                        alert. To view the status of your alarm, choose &amp;quot;Alarms&amp;quot; in the navigation
                        panel.&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console and open the Billing and Cost Management
                            console at https://console.aws.amazon.com/billing/home#/.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the navigation pane, choose Preferences.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the &amp;quot;Receive Billing Alerts&amp;quot; check box is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If necessary, change the region on the navigation bar to US East (N. Virginia).
                            The billing metric data is stored in this region, even for resources in other regions.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the navigation pane, under &amp;quot;Alarms&amp;quot;, check for one called
                            &amp;quot;Billing&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click on the alert if it exists and select the checkbox in the first column.&lt;/li&gt;
                            &lt;li&gt;In the preview pane check that the &amp;quot;EstimatedCharges&amp;quot; threshold
                            is set to the correct value and that the &amp;quot;Actions&amp;quot; is send an alarm to a
                            valid email address.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:53.934'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Monitoring-4.4' name='Create cloudtrail configuration changes alerts'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is changes to
                        cloudtrail. Since cloudtrail is the actual utility logging API calls it's security is paramount
                        to ensuring that this continues. Therefore alerting on changes to cloudtrail activity can
                        prevent a malious user switching off the logging in order to carry out untracked activities.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&amp;nbsp;&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                        &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;:&amp;nbsp;aws
                        logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                        ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) ||
                        ($.eventName = StartLogging) || ($.eventName = StopLogging) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4: aws
                        cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                        &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                        list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='3.1' supportedStandardRef='CIS AWS Standard'/>
                        <standard ref='3.5' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName =
                            DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:54.248'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Monitoring-4.6' name='Create IAM Policy change alerts' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is management
                        IAM policy changes. IAM manages authorisations and authentication controls with AWS and
                        therefore it is virtal that unauthorised changes are detected. Enabling monitoring of these
                        changes ensures that these policies remain intact and as desired.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for IAM policy changes: aws logs put-metric-filter
                        --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt; --metric-
                        transformations &amp;lt;value&amp;gt; --filter-pattern
                        '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=Delete
                        UserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=P
                        utUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=Cr
                        eatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)|
                        |($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUs
                        erPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above:aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='3.4' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource
                            = kms.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))} }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:54.556'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Monitoring-4.7' name='Create KMS CMK Deletion alerts' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is KMS CMK
                        deletions or deactivation. KMS CMK can be used as the master keys for encrypting data and these
                        keys are stored within AWS. However if these keys are disabled or deactivated then the data that
                        was encrypted with them cannot be accessed. Therefore any scheduled deletions or deactivation of
                        keys should be monitored.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for KMS CMK disables or deletions: aws logs
                        put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt;
                        --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{($.eventSource =
                        kms.amazonaws.com) &amp;amp;&amp;amp;
                        (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))}'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='3.7' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{($.eventSource = kms.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))} }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:&amp;nbsp;aws
                            cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic:&amp;nbsp; aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:54.864'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Monitoring-4.3'
                         name='Create management console login alerts when MFA is not used' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is login on the
                        console without MFA. Since logging on at the console should be restricted to only those users
                        with an active MFA this alert will highlight those with password only access. This helps to
                        capture weaker login procedures (password only) as they occur.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for console login without MFA: aws logs
                        put-metric-filter --log-group-name &amp;lt;cloudwatch-logs-group&amp;gt; --filter-name &amp;lt;name&amp;gt;
                        --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{
                        $.userIdentity.sessionContext.attributes.mfaAuthenticated != &amp;quot;true&amp;quot; }'&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='3.2' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;:&amp;nbsp;
                            aws logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ $.userIdentity.sessionContext.attributes.mfaAuthenticated != &amp;quot;true&amp;quot;
                            }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:&amp;nbsp;aws
                            cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:55.175'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Monitoring-4.5' name='Create management console login failure alerts'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is management
                        console login failures. The management console is the AWS account GUI where administration
                        activity is performed and is therefore a primary target for brute force attempts. To identify
                        these attempts alerts for login failures should be enabled as this can highlight suspicious
                        activity.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for console login failures: aws logs
                        put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt;
                        --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = ConsoleLogin)
                        &amp;amp;&amp;amp; ($.errorMessage = &amp;quot;Failed authentication&amp;quot;) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='3.6' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = ConsoleLogin) &amp;amp;&amp;amp; ($.errorMessage = \&amp;quot;Failed
                            authentication\&amp;quot;) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:55.494'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Monitoring-4.2' name='Create root account usage alerts' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is usage of the
                        root account. This account should not be used on a day to day basis due to its full unrestricted
                        privilege therefore usage should be by exception. Monitoring this usage should capture any
                        suspicous activity used on the account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                        &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                        &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws logs
                        describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/li&gt;
                        &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                        $.userIdentity.type = \&amp;quot;Root\&amp;quot; &amp;amp;&amp;amp; $.userIdentity.invokedBy NOT
                        EXISTS &amp;amp;&amp;amp; $.eventType != \&amp;quot;AwsServiceEvent\&amp;quot; } &amp;quot;&lt;/li&gt;
                        &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4: aws
                        cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                        &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                        list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='3.3' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            $.userIdentity.type = \&amp;quot;Root\&amp;quot; &amp;amp;&amp;amp; $.userIdentity.invokedBy
                            NOT EXISTS &amp;amp;&amp;amp; $.eventType != \&amp;quot;AwsServiceEvent\&amp;quot; } &amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:&amp;nbsp;aws
                            cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:55.810'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Monitoring-4.8' name='Create s3 bucket policy change alerts' issueId=''
                         platform='' cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is S3 bucket
                        policy changes. S3 bucket policies are a resource based policy that provide authorisations on S3
                        buckets. Making sure that their integrity remains intact is vital in ensuring the data within
                        the S3 bucket remains secure and authorisations intact. Therefore s3 bucket policy changes
                        should be alerted upon
                        &lt;br /&gt;Remediation
                        &lt;br /&gt;1. Create a metric filter that checks for S3 Bucket policy changes
                        &lt;br /&gt; aws logs put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name
                        &amp;lt;value&amp;gt; --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{
                        ($.eventSource = s3.amazonaws.com) &amp;amp;&amp;amp; (($.eventName = PutBucketAcl) ||
                        ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName =
                        PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName =
                        DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle)
                        || ($.eventName = DeleteBucketReplication)) }'
                        &lt;br /&gt;2. Create an SNS topic for notifications
                        &lt;br /&gt; &amp;quot;aws sns create-topic --name &amp;lt;topic_name&amp;gt;&amp;quot;
                        &lt;br /&gt;3. Create an SNS subscription to the topic created above
                        &lt;br /&gt; &amp;quot;aws sns subscribe --topic-arn &amp;lt;topic_arn&amp;gt; --protocol email
                        --notification-endpoint &amp;lt;email@example.com&amp;gt;&amp;quot;
                        &lt;br /&gt;4. Create an alarm based on the above steps
                        &lt;br /&gt; &amp;quot;aws cloudwatch put-metric-alarm --alarm-name &amp;lt;value&amp;gt;
                        --metric-name &amp;lt;metric_filter_name&amp;gt;
                        &lt;br /&gt;--statistic Sum --period 300 --threshold 1 --comparison-operator
                        GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace &amp;lt;CloudTrailMetrics&amp;gt;
                        -
                        &lt;br /&gt;-alarm-actions &amp;lt;topic_arn&amp;gt;&amp;quot;
                        &lt;br /&gt;Content provided by &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT
                        LTD&lt;/a&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='3.8' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;:&amp;nbsp;
                            aws logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            ($.eventSource = s3.amazonaws.com) &amp;amp;&amp;amp; (($.eventName = PutBucketAcl) ||
                            ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName =
                            PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName =
                            DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName =
                            DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:56.123'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Monitoring-4.10' name='Create security group change alerts' issueId=''
                         platform='' cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is security
                        group changes. Security groups are analagous to firewalls and therefore protect inbound and
                        outbound access to &amp;amp; from AWS resources such as ec2 instances and RDS databases (amongst
                        other things. Therefore alerting on changes to security groups helps ensure that the resources
                        protected by them are not exposed.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for security group changes: aws logs
                        put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt;
                        --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName =
                        AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName =
                        RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName =
                        CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup)}'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='3.10' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName =
                            AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName
                            = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName =
                            DeleteSecurityGroup)}&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:56.432'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Monitoring-4.13' name='Create VPC gateway change alerts' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is VPC gateway
                        changes. VPC gateways are used as a means of sending traffic outside of a VPC (ie to the
                        internet) and are vital in ensuring traffic flows to the correct destination. Therefore alerting
                        on changes to VPC gateways ensuring traffic continues to flow as expected via the correct
                        gateway.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for VPC gateway changes: aws logs put-metric-filter
                        --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt; --metric-
                        transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = CreateCustomerGateway)
                        || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) ||
                        ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName =
                        DetachInternetGateway) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='3.12' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) ||
                            ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) ||
                            ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:56.745'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Monitoring-4.11' name='Create VPC NACL change alerts' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is VPC NACL
                        changes. Network Access Control Lists (NACLS) control inbound and outbound access to &amp;amp;
                        from AWS subnets and work like packet filters to protect the network. Therefore alerting on
                        changes to NACLS helps ensure that the subnets protected by them are not exposed.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for NACL changes: aws logs put-metric-filter
                        --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt; --metric-
                        transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = CreateNetworkAcl) ||
                        ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName =
                        DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName =
                        ReplaceNetworkAclAssociation) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='3.11' supportedStandardRef='CIS AWS Standard'/>
                        <standard ref='3.14' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) ||
                            ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName =
                            ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:57.060'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Monitoring-4.12' name='Create VPC route table change alerts' issueId=''
                         platform='' cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is VPC route
                        table changes. VPC route tables provide a means of routing network traffic between subnets and
                        via gateways and ensures traffic flows via the correct path. Therefore alerting on changes to
                        route tables ensuring traffic continues to flow as expected.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for VPC route table changes: aws logs
                        put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt;
                        --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = CreateRoute)
                        || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName =
                        ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute)
                        || ($.eventName = DisassociateRouteTable) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='3.13' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName
                            = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName =
                            DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:&amp;nbsp;aws
                            cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:25:57.354'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref='CLOUDWATCH METRIC ALERTS' name='Cloudwatch Metric Alerts' desc='' library=''>
                    <threats>
                        <threat ref='UNAUTHORIZED_ACCESS_SYSTEMS_AWS'
                                name='Attackers access to the systems without being detected' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>&lt;div&gt;
                                Attackers gain access to the systems and they are not detected and the changes of the
                                attackers could not be detected and audited.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality='50' integrity='25' availability='25' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-Monitoring-4.5'>
                                    <controls>
                                        <control ref='Hydras-AWS-Monitoring-4.5' mitigation='20'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-Monitoring-4.4'>
                                    <controls>
                                        <control ref='Hydras-AWS-Monitoring-4.1' mitigation='15'/>
                                        <control ref='Hydras-AWS-Monitoring-4.4' mitigation='15'/>
                                        <control ref='Hydras-AWS-Monitoring-4.9' mitigation='15'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-Monitoring-4.2'>
                                    <controls>
                                        <control ref='Hydras-AWS-Monitoring-4.2' mitigation='20'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-Monitoring-4.3'>
                                    <controls>
                                        <control ref='Hydras-AWS-Monitoring-4.3' mitigation='15'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-Monitoring-4.1' mitigation='15'/>
                                <control ref='Hydras-AWS-Monitoring-4.2' mitigation='20'/>
                                <control ref='Hydras-AWS-Monitoring-4.3' mitigation='15'/>
                                <control ref='Hydras-AWS-Monitoring-4.4' mitigation='15'/>
                                <control ref='Hydras-AWS-Monitoring-4.5' mitigation='20'/>
                                <control ref='Hydras-AWS-Monitoring-4.9' mitigation='15'/>
                            </controls>
                        </threat>
                        <threat ref='UNAUTHORIZED-ACCESS-SECURITY-SYSTEMS-AWS'
                                name='Attackers gain undetected access to the security system configurations'
                                state='Expose' source='MANUAL' owner='' library=''>
                            <desc>&lt;div&gt;
                                Attackers could gain undetected access to the security configurations and the changes of
                                the attackers could not be detected and audited.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality='50' integrity='50' availability='50' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-Monitoring-4.7'>
                                    <controls>
                                        <control ref='Hydras-AWS-Monitoring-4.7' mitigation='25'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-Monitoring-4.4'>
                                    <controls>
                                        <control ref='Hydras-AWS-Monitoring-4.6' mitigation='25'/>
                                        <control ref='Hydras-AWS-Monitoring-4.8' mitigation='25'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-Monitoring-4.10'>
                                    <controls>
                                        <control ref='Hydras-AWS-Monitoring-4.10' mitigation='25'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-Monitoring-4.10' mitigation='25'/>
                                <control ref='Hydras-AWS-Monitoring-4.6' mitigation='25'/>
                                <control ref='Hydras-AWS-Monitoring-4.7' mitigation='25'/>
                                <control ref='Hydras-AWS-Monitoring-4.8' mitigation='25'/>
                            </controls>
                        </threat>
                        <threat ref='UNAUTHORIZED-ACCESS-NETWORK-AWS'
                                name='Sensitive data is compromised through undetected network access' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>&lt;div&gt;
                                Attackers gain undetected access to the network systems and the changes of the attackers
                                could not be audited or detected.
                                &lt;/div&gt;
                            </desc>
                            <riskRating confidentiality='50' integrity='50' availability='50' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-Monitoring-4.12'>
                                    <controls>
                                        <control ref='Hydras-AWS-Monitoring-4.11' mitigation='40'/>
                                        <control ref='Hydras-AWS-Monitoring-4.12' mitigation='30'/>
                                        <control ref='Hydras-AWS-Monitoring-4.13' mitigation='30'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-Monitoring-4.11' mitigation='40'/>
                                <control ref='Hydras-AWS-Monitoring-4.12' mitigation='30'/>
                                <control ref='Hydras-AWS-Monitoring-4.13' mitigation='30'/>
                            </controls>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref='HYDRAS-AWS-NET' name='AWS Networking'
                   desc='Configuring security for protection across the AWS network' groupName='' tags='' position='7'
                   library='' diagramPositionX='0' diagramPositionY='0' componentDefinitionRef=''>
            <weaknesses>
                <weakness ref='AWS-Network-5.2' name='Networks for Amazon resources are not properly segmentated.'
                          state='0' impact='100' issueId=''>
                    <desc>&lt;div&gt;
                        Resources in the same VNet are compromised because when one of them is attacked and the
                        attackers gain access, they also gain access to all resources.
                        &lt;/div&gt;
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:12.194'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Network-5.1' name='Non-identify the resources' state='0' impact='100' issueId=''>
                    <desc>Resources are not registered in the safety net systems, and there are more unidentified
                        resources. That can be a problem because these unidentified resources can have unknown
                        weaknesses.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:12.488'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Network-5.8' name='The access to the routing tables are not restricted' state='0'
                          impact='100' issueId=''>
                    <desc>&lt;div&gt;
                        Being highly selective in peering routing tables is a very effective way of minimizing the
                        impact of breach as resources outside of these routes are inaccessible to the peered VPC.
                        &lt;/div&gt;
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-06T14:18:07.694'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
            </weaknesses>
            <controls>
                <control ref='Hydras-AWS-Network-5.8' name='Ensure routing tables for VPC peering are "least access"'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>&lt;div&gt;
                        Once a VPC peering connection is established, routing tables must be updated to establish any
                        connections between the peered VPCs. These routes can be as specific as desired - even peering a
                        VPC to only a single host on the other side of the connection.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt; Rationale: &lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Being highly selective in peering routing tables is a very effective way of minimizing the
                        impact of breach as resources outside of these routes are inaccessible to the peered VPC.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt; Remediation: &lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Remove and add route table entries to ensure that the least number of subnets or hosts as is
                        required to accomplish the purpose for peering are routable.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Via CLI:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;For each &amp;lt;route_table_id&amp;gt; containing routes non compliant with your
                        routing policy (which grants more than desired &amp;quot;&amp;quot;least access&amp;quot;&amp;quot;),
                        delete the non compliant route:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block
                        &amp;lt;non_compliant_destination_CIDR&amp;gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a new compliant route:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block
                        &amp;lt;compliant_destination_CIDR&amp;gt; --vpc-peering-connection-id &amp;lt;peering_connection_id&amp;gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                    </desc>
                    <implementations/>
                    <references>
                        <reference name='Configurations with Specific Routes'
                                   url='https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/peering-configurations-partial-access.html'/>
                    </references>
                    <standards>
                        <standard ref='4.4' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;span style=" , Arial;"&gt;Review routing tables of peered VPCs for whether they route
                            all subnets of each VPC and whether that is necessary to accomplish the intended purposes
                            for peering the VPCs.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Via CLI:&lt;/b&gt;&lt;br /&gt;List all
                            the route tables from a VPC and check if &amp;quot;GatewayId&amp;quot; is pointing to a
                            &amp;lt;peering_connection_id&amp;gt; (e.g. pcx-1a2b3c4d) and if &amp;quot;DestinationCidrBlock&amp;quot;
                            is as specific as desired.&lt;br /&gt;&lt;/span&gt;
                            &lt;blockquote&gt;
                            &lt;span style=" , Arial;"&gt;aws ec2 describe-route-tables --filter &amp;quot;Name=vpc-id,Values=&amp;lt;vpc_id&amp;gt;&amp;quot;
                            --query &amp;quot;RouteTables[*].{RouteTableId:RouteTableId, VpcId:VpcId, Routes:Routes,
                            AssociatedSubnets:Associations[*].SubnetId}&amp;quot;&lt;/span&gt;
                            &lt;/blockquote&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-06T14:03:06.162'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-EC2-6.1' name='Launch EC2 instances into a VPC' issueId='' platform='' cost='0'
                         risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides
                        additional security controls such as Security Groups, Network Access Control Lists (NACL's) and
                        routing. However the use of VPC is not compulsory and resources such as EC2 can be created
                        outside of VPC (usingEC2 Classic). It is the recommendedation to make all resources a member of
                        a VPC if possible to benefit from the increased security controls they offer and reduce undue
                        network exposure.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                        &lt;li&gt;Select EC2 from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Launch Instance&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Complete the wizard until step 3 at which point ensure a VPC ID is selected for the
                        &amp;quot;Network&amp;quot; option, choose an appropriate &amp;quot;Subnet&amp;quot; and &amp;quot;Auto-assign
                        Public IP&amp;quot; option.&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Complete the wizard to launch the instance.&lt;/li&gt;
                        &lt;/ol&gt;NB: If you want to migrate an already running instance you will need to convert the
                        image into an AMI and then launch a new instance using the AMI and placing in a VPC as per the
                        steps above
                        &lt;br /&gt;
                        &lt;p&gt;Content provided by &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;&lt;/p&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select EC2 from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Instances&amp;quot; from the left hand menu.&lt;/li&gt;
                            &lt;li&gt;For each instance in the list:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;select the instance&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;in the preview pane confirm the instance has a &amp;quot;VPC ID&amp;quot;. If a
                            hypen &amp;quot;-&amp;quot; is shown then your instance is running in EC2-Classic mode.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:11.290'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.2' name='Seperate VPC into zones  by function' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides
                        additional security controls such as Security Groups, Network Access Control Lists (NACL's) and
                        routing. It is recommended that resources be placed into VPC's according to use case (ie
                        dev/test/prod) and that appropriate security levels be set on these VPC's. Placing such
                        resources accordingly ensures that a resource of a higher security level is not exposed by the
                        security settings of a lower labelled VPC.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify the resources that exist within an incorrect VPC.&lt;/li&gt;
                        &lt;li&gt;Migrate or move them to the correct VPC.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>Ensure that each AWS resource added to a VPC is isolated according to its designation (ie
                            test/dev/prod).
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:11.592'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.1' name='Use AWS VPC for networking' issueId='' platform='' cost='0'
                         risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides
                        additional security controls such as Security Groups, Network Access Control Lists (NACL's) and
                        routing. However the use of VPC is not compulsory and resources such as EC2 can be created
                        outside of VPC (usingEC2 Classic). It is the recommendedation to make all resources a member of
                        a VPC if possible to benefit from the increased security controls they offer and reduce undue
                        network exposure.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;Move or migrate the resources to a VPC.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt; Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>Ensure that each AWS resource you own that is able to exist in a VPC does so.</steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:11.896'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref='VIRTUAL PRIVATE CLOUD (VPC) NETWORK' name='Virtual Private Cloud (VPC) Network' desc=''
                         library=''>
                    <threats>
                        <threat ref='UNAUTHORIZED-CONECTIONS-AWS'
                                name='Attackers gain unauthorized connection to the resources' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>&lt;p&gt;Attackers could gain an unauthorized connection to the resources through
                                misconfigured ports or security network configurations.&lt;/p&gt;
                            </desc>
                            <riskRating confidentiality='50' integrity='50' availability='50' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-Network-5.2'>
                                    <controls>
                                        <control ref='Hydras-AWS-EC2-6.1' mitigation='25'/>
                                        <control ref='Hydras-AWS-Network-5.2' mitigation='25'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-Network-5.1'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.1' mitigation='25'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-Network-5.8'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.8' mitigation='25'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-EC2-6.1' mitigation='25'/>
                                <control ref='Hydras-AWS-Network-5.1' mitigation='25'/>
                                <control ref='Hydras-AWS-Network-5.2' mitigation='25'/>
                                <control ref='Hydras-AWS-Network-5.8' mitigation='25'/>
                            </controls>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref='HYDRAS-AWS-RDS' name='AWS RDS'
                   desc='Amazon Relational Database Service (Amazon RDS) provides cost-efficient and resizable capacity whilst automating time-consuming administrative tasks such as hardware provisioning, database setup, patching and backups in the cloud.'
                   groupName='' tags='' position='8' library='' diagramPositionX='0' diagramPositionY='0'
                   componentDefinitionRef=''>
            <weaknesses>
                <weakness ref='AWS-Network-5.2' name='Networks for AWS resources are not properly segmented.' state='0'
                          impact='100' issueId=''>
                    <desc>Resources in the same VNet are compromised because when one of them is attacked and the
                        attackers gain access, they also gain access to all resources.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:18.900'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-Network-5.1' name='Non-identity of resources' state='0' impact='100' issueId=''>
                    <desc>Resources are not registered in the safety net systems, and there are unidentified resources.
                        This can be a problem because these unidentified resources can have unknown weaknesses.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:19.191'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-S3-7.4' name='Sensitive data is accessible' state='0' impact='100' issueId=''>
                    <desc>Sensitive data is not encrypted and is exposed.</desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:19.472'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-S3-7.3' name='Sensitive data is exposed in transit' state='0' impact='100'
                          issueId=''>
                    <desc>Sensitive data is not encrypted in transit with HTTPS or SSL, and this data is accessible
                        whilst traversing the network.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:19.764'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-IAM-2.7' name='The credentials for groups and roles are not configured' state='0'
                          impact='100' issueId=''>
                    <desc>The credentials for groups and roles are not correctly configured and there are user accounts
                        with more privileges than necessary.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:20.045'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-NET-04' name='Unauthorised connection attempts are allowed on AWS resources'
                          state='0' impact='100' issueId=''>
                    <desc>Receiving unauthorized connections to AWS resources is most likely an attack. To avoid this,
                        access to the network must be as restricted as possible using Network Access Control Lists for
                        blacklisting.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:20.329'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-NET-01' name='Unauthorised connection attempts are allowed on open ports' state='0'
                          impact='100' issueId=''>
                    <desc>Receiving unauthorized connections to open ports is most likely an attack. To avoid this,
                        access to the network must be as restricted as possible, so that only the necessary ports are
                        open and the minimum inbound traffic is accepted.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:20.607'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-NET-03' name='Unauthorised connection attempts are allowed on port 3389' state='0'
                          impact='100' issueId=''>
                    <desc>Receiving unauthorized connections to port 3389 is most likely an RDP attack. To avoid this,
                        access to the network must be as restricted as possible, so that only the necessary ports are
                        open and the minimum inbound traffic is accepted.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:20.877'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-NET-02' name='Unauthorised connection attempts are permitted on port 22' state='0'
                          impact='100' issueId=''>
                    <desc>Receiving unauthorized connections to port 22 is an SSH attack. To avoid this, access to the
                        network must be as restricted as possible, so that only the necessary ports are open and the
                        minimum inbound traffic is accepted.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:21.164'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
            </weaknesses>
            <controls>
                <control ref='Hydras-AWS-RDS-02' name='Assign to IAM roles the permissions for RDS instances' issueId=''
                         platform='' cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>The following AWS managed policies, which you can attach to users in your account, are
                        specific to Amazon RDS:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;AmazonRDSReadOnlyAccess:&lt;/b&gt; Grants read-only access to all Amazon RDS
                        resources for the root AWS account.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;AmazonRDSFullAccess:&lt;/b&gt; Grants full access to all Amazon RDS resources
                        for the root AWS account.&lt;/li&gt;
                        &lt;/ul&gt;You can also create custom IAM policies that allow users to access the required
                        Amazon RDS API actions and resources. You can attach these custom policies to the IAM users or
                        groups that require those permissions.
                        &lt;br /&gt;
                        &lt;br /&gt;The permissions above shall be assigned to roles or groups:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The roles or groups only do calls to the API to get information, the
                        AmazonRDSReadOnlyAccess permission shall be assigned.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The roles or groups who are responsible of managing the RDS instances shall be
                        assigned the AmazonRDSFullAccess permission.&lt;/li&gt;
                        &lt;/ul&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ul&gt;
                            &lt;li&gt;Review the IAM roles and groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that all roles or groups have got the AmazonRDSReadOnlyAccess permission.&lt;/li&gt;
                            &lt;li&gt;Check that only the appropriate personnel have got AmazonRDSFullAccess permissions
                            to manage the RDS instances.&lt;/li&gt;
                            &lt;/ul&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:15.893'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-S3-7.4' name='Encrypt sensitive data at rest with KMS' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale
                        computing easier for developers. Amazon S3 has a simple web services interface that you can use
                        to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any
                        developer access to the same highly scalable, reliable, fast, inexpensive data storage
                        infrastructure that Amazon uses to run its own global network of web sites. To ensure that
                        sensitive data is encrypted at rest you can use AWS KMS–managed keys (SSE-KMS). This
                        provides several advantages:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;You can create and manage the CMK encryption keys yourself.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You can use a single CMK to encrypt and decrypt log files for multiple accounts across
                        all regions.&lt;/li&gt;
                        &lt;li&gt;You have control over who can use your key for encrypting and decrypting CloudTrail
                        log files.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You can assign permissions for the key to the users in your organization according to
                        your requirements.&lt;/li&gt;
                        &lt;li&gt;You have enhanced security. With this feature, in order to read log files, you now
                        need to meet two conditions: 1) you must have S3 read permission on the bucket, and 2) you must
                        be granted decrypt permission by the CMK policy.&lt;/li&gt;
                        &lt;/ul&gt;It is recommended to encrypt all sensitive data with SSE-KMS to avoid undue
                        disclosure of information and provide an extra layer of security.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;div&gt;
                        &lt;b&gt;&lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;The following example shows how to upload data using AWS KMS Encryption:
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        aws s3api put-object --bucket --server-side-encryption aws:kms --ssekms-key-id --key
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;blockquote&gt;
                            aws s3api head-object --bucket --ke
                            &lt;/blockquote&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;Look for the line &amp;quot;ServerSideEncryption&amp;quot; and verify that it is
                            set to &amp;quot;aws:kms&amp;quot; which indicates KMS Encryption.
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:16.193'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.6' name='Restrict all traffic with the default security group'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit all traffic
                        (ingress/egress) on the default security group in order to force the use of least privilege via
                        custom created security groups.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify AWS resources that exist within the default security group.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create a set of least privilege security groups for those resources.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Place the resources in those security groups.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Remove the resources noted in 1 from the default security group.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the default security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exist.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rules exist.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:16.483'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.2' name='Separate VPC into zones by function' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides
                        additional security controls such as Security Groups, Network Access Control Lists (NACL's) and
                        routing. It is recommended that resources be placed into VPC's according to use case (ie
                        dev/test/prod) and that appropriate security levels be set on these VPC's. Placing such
                        resources accordingly ensures that a resource of a higher security level is not exposed by the
                        security settings of a lower labelled VPC.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify the resources that exist within in incorrect VPC.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Migrate or move them to the correct VPC.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>Ensure that each AWS resource added to a VPC is isolated according to its designation (ie
                            test/dev/prod)
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:16.786'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.1' name='Use AWS VPC for networking' issueId='' platform='' cost='0'
                         risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides
                        additional security controls such as Security Groups, Network Access Control Lists (NACL's) and
                        routing. However the use of VPC is not compulsory and resources such as EC2 can be created
                        outside of VPC (usingEC2 Classic). It is recommended to make all resources a member of a VPC if
                        possible to benefit from the increased security controls they offer and reduce undue network
                        exposure. &lt;br /&gt;&lt;br /&gt; &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt; &lt;br /&gt;Move
                        or migrate the resources to a VPC.&lt;br /&gt;&lt;br /&gt;Content provided by &lt;a
                        href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>Ensure that each AWS resource you own that is able to exist in a VPC, does so.</steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:17.086'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.7' name='Use Network Access Control Lists (NACLs) for blacklisting'
                         issueId='' platform='' cost='0' risk='0' state='Recommended' owner='' library=''
                         source='MANUAL'>
                    <desc>Network Access Control Lists (NACLs) act as packet filters across subnets, allowing or denying
                        traffic per pre-created rules. It is recommended to use NACLs as a method of blacklisting IP
                        addresses, denying either inbound or outbound access across your subnets.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;&lt;/b&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (With VPC update).&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Network ACL's.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each Network ACL ID, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the Inbound Rules tab.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Click edit.&lt;/li&gt;
                        &lt;li&gt;Add a DENY rule that will restrict inbound access from a blacklisted IP address or
                        range to a designated port or IP range.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Network ACLs.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each Network ACL ID, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure a rule exists that DENIES access from a blacklisted IP or range.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure a rule exists that DENIES access to a blacklisted IP or range.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:17.392'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.5'
                         name='Use security groups to block ingress to all ports from 0.0.0.0/0' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        ALL TCP or ALL ports to avoid undue server exposure
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (With VPC update).&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security groups.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='4.3' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;Ensure no rule exists that has a port range of 0-1024 or 0-65535 and has a source
                            of 0.0.0.0/0.
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:17.704'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.3'
                         name='Use security groups to block ingress to port 22 from 0.0.0.0/0' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 22 (SSH) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (With VPC update).&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security groups.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='4.1' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 22.
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:18.016'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-Network-5.4'
                         name='Use security groups to block ingress to port 3389 from 0.0.0.0/0' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 3389 (RDP) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (With VPC update).&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security groups.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards>
                        <standard ref='4.2' supportedStandardRef='CIS AWS Standard'/>
                    </standards>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the service menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 3389 and has a
                            source of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 3389.
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:18.313'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-RDS-01' name='Use SSL to Encrypt the connection to a DB Instance' issueId=''
                         platform='' cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Use SSL from your application to encrypt a connection to a DB instance running MySQL, MariaDB,
                        Amazon Aurora, SQL Server, Oracle, or PostgreSQL. Each DB engine has its own process for
                        implementing SSL. To learn how to implement SSL for your particular DB instance, please see link
                        provided in "References" section.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>Check that the SSL protocol is used to encrypt the data in transit.</steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:18.600'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref='AMAZON WEB SERVICES' name='Amazon Web Services' desc='' library=''>
                    <threats>
                        <threat ref='UNAUTHORIZED-CONNECTION'
                                name='Attackers gain access to the systems through direct access' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>Attackers gain an unauthorized connection to the system through misconfigured ports or
                                security network configurations.
                            </desc>
                            <riskRating confidentiality='50' integrity='50' availability='50' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-NET-01'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.5' mitigation='25'/>
                                        <control ref='Hydras-AWS-Network-5.6' mitigation='25'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-NET-03'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.4' mitigation='25'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-NET-02'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.3' mitigation='25'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-Network-5.3' mitigation='25'/>
                                <control ref='Hydras-AWS-Network-5.4' mitigation='25'/>
                                <control ref='Hydras-AWS-Network-5.5' mitigation='25'/>
                                <control ref='Hydras-AWS-Network-5.6' mitigation='25'/>
                            </controls>
                        </threat>
                        <threat ref='AWS-LOSS-CONTROL-ENV'
                                name='Attackers gain unauthorized access to the control of the environment'
                                state='Expose' source='MANUAL' owner='' library=''>
                            <desc>Attackers could gain unauthorized access to the control of the environment, due to
                                user accounts or role groups not being well defined and configured. Therefore, attackers
                                can make changes without root approval.
                            </desc>
                            <riskRating confidentiality='50' integrity='100' availability='25' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-IAM-2.7'>
                                    <controls>
                                        <control ref='Hydras-AWS-RDS-02' mitigation='100'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-RDS-02' mitigation='100'/>
                            </controls>
                        </threat>
                        <threat ref='UNAUTHORIZED-CONNECTIONS-RESOURCES'
                                name='Attackers gain unauthorized connection to the resources' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>Attackers could gain an unauthorized connection to the resources through misconfigured
                                ports or security network configurations.
                            </desc>
                            <riskRating confidentiality='50' integrity='50' availability='50' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-Network-5.2'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.2' mitigation='50'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-Network-5.1'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.1' mitigation='50'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-Network-5.1' mitigation='50'/>
                                <control ref='Hydras-AWS-Network-5.2' mitigation='50'/>
                            </controls>
                        </threat>
                        <threat ref='UNAUTHORIZED-ACCESS-NETWORK'
                                name='Sensitive data is compromised through network access' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>Attackers gain undetected access to the network systems and changes made by the
                                attackers could not be audited or detected.
                            </desc>
                            <riskRating confidentiality='50' integrity='50' availability='50' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-NET-04'>
                                    <controls>
                                        <control ref='Hydras-AWS-Network-5.7' mitigation='100'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-Network-5.7' mitigation='100'/>
                            </controls>
                        </threat>
                        <threat ref='ACCESS-TO-DATA-AWS'
                                name='Sensitive data is compromised through unauthorized access to data' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>Attackers can gain access to sensitive data when the data is in transit in clear text,
                                or when the data is stored without encryption.
                            </desc>
                            <riskRating confidentiality='75' integrity='25' availability='50' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-S3-7.4'>
                                    <controls>
                                        <control ref='Hydras-AWS-S3-7.4' mitigation='50'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-S3-7.3'>
                                    <controls>
                                        <control ref='Hydras-AWS-RDS-01' mitigation='50'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-RDS-01' mitigation='50'/>
                                <control ref='Hydras-AWS-S3-7.4' mitigation='50'/>
                            </controls>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref='HYDRAS-AWS-S3' name='AWS S3' desc='AWS Simple Storage Service' groupName='' tags='' position='9'
                   library='' diagramPositionX='0' diagramPositionY='0' componentDefinitionRef=''>
            <weaknesses>
                <weakness ref='AWS-S3-7.1' name='Backup is not created' state='0' impact='100' issueId=''>
                    <desc>The sensitive data cannot be recovered because there is not any method to do a backup or to do
                        versions of the data.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:31.478'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-S3-7.2' name='Data is easily removed' state='0' impact='100' issueId=''>
                    <desc>Someone without credentials can remove sensitive data, the remove function is not protected
                        for an MFA.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:31.772'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-S3-7.4' name='Sensitive data are accessible' state='0' impact='100' issueId=''>
                    <desc>Sensitive data are not encrypted and the sensitive data is exposed.</desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:32.043'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-S3-7.3' name='Sensitive data is exposed in transit' state='0' impact='100'
                          issueId=''>
                    <desc>The sensitive data is not encrypted in transit with HTTPS or SSL, and the data is accessible
                        in the canal.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:32.312'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
            </weaknesses>
            <controls>
                <control ref='Hydras-AWS-S3-7.1' name='Configure S3 bucket versioning for sensitive data' issueId=''
                         platform='' cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale
                        computing easier for developers.
                        &lt;br /&gt;
                        &lt;br /&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve
                        any amount of data, at any time, from anywhere on the web. It gives any developer access to the
                        same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses
                        to run its own global network of web sites.
                        &lt;br /&gt;
                        &lt;br /&gt;To add an extra layer of security to data stored within S3 it is possible to enable
                        object versioning. Object versioning enables the recovery of objects from accidental overwrite
                        or accidental deletion. If an object is deleted, instead of being removed, S3 write a delete
                        marker which becomes the current version that means previous versions can always be recovered.
                        It is recommended that versioning be enabled for buckets storing sensitive data.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;aws s3api put-bucket-versioning --bucket my-bucket
                        --versioning-configuration Status=Enabled
                        &lt;br /&gt;
                        &lt;p&gt;Content provided by &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;&lt;/p&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;blockquote&gt;
                            aws s3api get-bucket-versioning --bucket my-bucket&amp;nbsp;
                            &lt;/blockquote&gt;If you don't see &amp;quot;Status&amp;quot;: &amp;quot;Enabled&amp;quot;
                            then your bucket has no versioning enabled.
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:30.306'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-S3-7.4' name='Encrypt sensitive data at rest with KMS' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale
                        computing easier for developers.
                        &lt;br /&gt;
                        &lt;br /&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve
                        any amount of data, at any time, from anywhere on the web. It gives any developer access to the
                        same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses
                        to run its own global network of web sites.
                        &lt;br /&gt;
                        &lt;br /&gt;To ensure that sensitive data is encrypted at rest you can use AWS KMS–managed
                        keys (SSE-KMS). This provides several advantages:&amp;nbsp;
                        &lt;ul&gt;
                        &lt;li&gt;You can create and manage the CMK encryption keys yourself.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You can use a single CMK to encrypt and decrypt log files for multiple accounts across
                        all regions.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You have control over who can use your key for encrypting and decrypting CloudTrail
                        log files. You can assign permissions for the key to the users in your organization according to
                        your requirements.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You have enhanced security. With this feature, in order to read log files, you now
                        need to meet two conditions: 1) you must have S3 read permission on the bucket, and 2) you must
                        be granted decrypt permission by the CMK policy.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;br /&gt;It is recommended to encrypt all sensitive data with SSE-KMS to avoid undue
                        exclosure of information and provide an extra layer of security.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;The following example shows how to upload data using AWS KMS Encryption:
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws s3api put-object --bucket &amp;lt;my_bucket&amp;gt; --server-side-encryption aws:kms
                        --ssekms-key-id &amp;lt;kms_key_id&amp;gt; --key &amp;lt;object_to_upload&amp;gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;p&gt;Content provided by &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;&lt;/p&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;blockquote&gt;
                            aws s3api head-object --bucket &amp;lt;my_bucket&amp;gt; --key &amp;lt;my_key&amp;gt;
                            &lt;/blockquote&gt;Look for the line &amp;quot;ServerSideEncryption&amp;quot; and verify
                            that it is set to &amp;quot;aws:kms&amp;quot; which indicates KMS Encryption.
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:30.592'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-S3-7.3' name='Enforce HTTPS for sensitive information' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale
                        computing easier for developers.
                        &lt;br /&gt;
                        &lt;br /&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve
                        any amount of data, at any time, from anywhere on the web. It gives any developer access to the
                        same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses
                        to run its own global network of web sites.
                        &lt;br /&gt;
                        &lt;br /&gt;To ensure that data is only accessible via HTTPS (as opposed to both HTTP and HTTPS)
                        it is possible to add a condition to the S3 bucket policy. It is recommended to enable this for
                        any bucket containing sensitive data to ensure that data is encrypted in transit.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;The following is an example of how to create an S3
                        bucket policy that enforces HTTPS/SSL only
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges)&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Go to the S3 Service on the AWS Console&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select a bucket under &amp;quot;All buckets&amp;quot;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Click the properties tab&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Under the permissions select &amp;quot;Add a bucket policy&amp;quot;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Add the following policy to ensure all objects are accessed via https only&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;i&gt; {&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;i&gt; &amp;quot;Statement&amp;quot;:[&lt;/i&gt;
                        &lt;i&gt;{&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;i&gt; &amp;quot;Action&amp;quot;: &amp;quot;s3:*&amp;quot;,&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt;&amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt;&amp;quot;Principal&amp;quot;: &amp;quot;*&amp;quot;,&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt;&amp;quot;Resource&amp;quot;:&amp;quot;arn:aws:s3:::bucketname/*&amp;quot;,&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;i&gt;&amp;quot;Condition&amp;quot;:{&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;i&gt;&amp;quot;Bool&amp;quot;:&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;i&gt;{&amp;nbsp;&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;i&gt;&amp;quot;aws:SecureTransport&amp;quot;: true&amp;nbsp;&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;i&gt;}&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;i&gt;}&lt;/i&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;i&gt; }&lt;/i&gt;
                        &lt;i&gt;]&lt;/i&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;i&gt;} &lt;/i&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Click &amp;quot;&amp;quot;Save&amp;quot;&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;Content provided by &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;&lt;/p&gt;
                        &lt;/div&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>The following checks that HTTPS is forced on a bucket policy:&amp;nbsp;
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Go to the S3 Service on the AWS Console.&lt;/li&gt;
                            &lt;li&gt;Select the S3 bucket under &amp;quot;All buckets&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the &amp;quot;properties&amp;quot; tab.&lt;/li&gt;
                            &lt;li&gt;Click &amp;quot;edit bucket policy&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the policy document check for the presence of the line &amp;quot;Condition&amp;quot;:
                            {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:SecureTransport&amp;quot;: &amp;quot;true&amp;quot;}}&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the same statement as &amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:30.884'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-S3-7.2' name='Use S3 MFA to delete sensitive information' issueId=''
                         platform='' cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale
                        computing easier for developers.
                        &lt;br /&gt;
                        &lt;br /&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve
                        any amount of data, at any time, from anywhere on the web. It gives any developer access to the
                        same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses
                        to run its own global network of web sites.
                        &lt;br /&gt;
                        &lt;br /&gt;To add an extra layer of security to data stored within S3 the account owner (root)
                        can enable MFA Delete which means that buckets and the objects within them can only be deleted
                        with the use of Multi-factor authentication device. It is recommended to enable MFA Delete on
                        any buckets containing sensitive data to protect against accidental deletion
                        &lt;br /&gt;Remediation
                        &lt;br /&gt;1. aws s3api put-bucket-versioning --bucket my-bucket --versioning-configuration
                        Status=Enabled,MFADelete=Enabled
                        &lt;br /&gt;
                        &lt;p&gt;Content provided by &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;&lt;/p&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;blockquote&gt;
                            aws s3api get-bucket-versioning --bucket my-bucket&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If you don't see &amp;quot;MFADelete&amp;quot;: &amp;quot;Enabled&amp;quot; then your bucket
                            has no MFA delete enabled.
                            &lt;/div&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:31.187'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref='AMAZON-WEB-SERVICES' name='Amazon Web Services' desc='' library=''>
                    <threats>
                        <threat ref='DATA-DELETED-EASY-AWS' name='Data is intentionally or accidentally deleted'
                                state='Expose' source='MANUAL' owner='' library=''>
                            <desc>&lt;p&gt;Data can be deleted intentionally or accidentally, and the data cannot be
                                recovered because there are not recovery systems for these scenarios or the data is easy
                                to delete it.&lt;/p&gt;
                            </desc>
                            <riskRating confidentiality='25' integrity='75' availability='25' easeOfExploitation='25'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-S3-7.1'>
                                    <controls>
                                        <control ref='Hydras-AWS-S3-7.1' mitigation='50'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-S3-7.2'>
                                    <controls>
                                        <control ref='Hydras-AWS-S3-7.2' mitigation='50'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-S3-7.1' mitigation='50'/>
                                <control ref='Hydras-AWS-S3-7.2' mitigation='50'/>
                            </controls>
                        </threat>
                        <threat ref='ACCESS-TO-DATA-AWS'
                                name='Sensitive data is compromised through unauthorized access to data' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is transit in clear
                                text or when the data is stored without encryption.&lt;/p&gt;
                            </desc>
                            <riskRating confidentiality='75' integrity='25' availability='50' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-S3-7.4'>
                                    <controls>
                                        <control ref='Hydras-AWS-S3-7.4' mitigation='50'/>
                                    </controls>
                                </weakness>
                                <weakness ref='AWS-S3-7.3'>
                                    <controls>
                                        <control ref='Hydras-AWS-S3-7.3' mitigation='50'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-S3-7.3' mitigation='50'/>
                                <control ref='Hydras-AWS-S3-7.4' mitigation='50'/>
                            </controls>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref='HYDRAS-AWS-SNS' name='AWS SNS'
                   desc='Amazon Simple Notification Service (SNS) is a flexible, fully managed pub/sub messaging and mobile notifications service for coordinating the delivery of messages to subscribing endpoints and clients.'
                   groupName='' tags='' position='10' library='' diagramPositionX='0' diagramPositionY='0'
                   componentDefinitionRef=''>
            <weaknesses>
                <weakness ref='AWS-SNS-01' name='Notifications are not centralized' state='0' impact='100' issueId=''>
                    <desc>The notifications are not centralized; therefore, the control of these notifications and who
                        receives them is not easily managed.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:37.520'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
                <weakness ref='AWS-S3-7.3' name='Sensitive data is exposed in transit' state='0' impact='100'
                          issueId=''>
                    <desc>Sensitive data is not encrypted in transit with HTTPS or SSL, and the data is accessible
                        whilst traversing the network.
                    </desc>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:37.790'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </weakness>
            </weaknesses>
            <controls>
                <control ref='Hydras-AWS-SNS-02' name='Enforce HTTPS to encrypt notifications' issueId='' platform=''
                         cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>To send messages to an HTTPS endpoint through a topic, you must subscribe the endpoint to the
                        Amazon SNS topic. You specify the endpoint using its URL. To subscribe to a topic, you can use
                        the Amazon SNS console, the sns-subscribe command, or the Subscribe API action.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console and open the Amazon SNS console at
                        https://console.aws.amazon.com/sns/v2/home.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;In the left navigation pane, click Topics and then select the topic.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Click the Other actions drop-down list and select Subscribe to topic.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;In the Protocol drop-down list, select HTTPS.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;In the Endpoint box, paste in the URL for the endpoint that you want the topic to send
                        messages to and then click Create subscription.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For the Subscription request received! message, click Close.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Your new subscription's Subscription ID displays PendingConfirmation. When you confirm
                        the subscription, Subscription ID will display the subscription ID.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;Content provided by
                        &lt;a href="https://hydrasit.com" target="_blank"&gt; Hydras IT LTD&lt;/a&gt;.
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console and open the Amazon SNS console at
                            https://console.aws.amazon.com/sns/v2/home.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the left navigation panel, click Topics and then select the topic.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Other actions drop-down list and select Subscribe to topic.I&lt;/li&gt;
                            &lt;li&gt;In the Protocol drop-down list, check that the protocol HTTPS is selected.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:36.968'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
                <control ref='Hydras-AWS-SNS-01' name='Use Amazon SNS to centralize notifications' issueId=''
                         platform='' cost='0' risk='0' state='Recommended' owner='' library='' source='MANUAL'>
                    <desc>Configure all alerts from the Amazon environment with the Amazon Simple Notification Service
                        (SNS) to have centralized notifications and control over who receives these notifications, in
                        the same place.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Go to CoudWatch alarms.&lt;/li&gt;
                        &lt;li&gt;Edit each alarm and change the notification configuration to the SNS service.&lt;/li&gt;
                        &lt;/ol&gt;
                    </desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate='' expiryPeriod='0'>
                        <steps/>
                        <notes/>
                        <source filename='' args='' type='Manual' result='Not Tested' enabled='true'
                                timestamp='2018-07-05T07:26:37.254'>
                            <output></output>
                        </source>
                        <references/>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref='CLOUDWATCH-METRIC-ALERTS' name='Cloudwatch Metric Alerts' desc='' library=''>
                    <threats>
                        <threat ref='AWS-LOST-CONTROL-NOTIFICATION'
                                name='Sensitive data is compromised through notifications' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>Attackers can gain access to the resources sensitive data if the system notifications
                                and alerts are not configured properly and the notifications are not received by the
                                appropriate personnel.
                            </desc>
                            <riskRating confidentiality='25' integrity='100' availability='50' easeOfExploitation='25'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-SNS-01'>
                                    <controls>
                                        <control ref='Hydras-AWS-SNS-01' mitigation='100'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-SNS-01' mitigation='100'/>
                            </controls>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref='VIRTUAL-PRIVATE-CLOUD-VPC-NETWORK' name='Virtual Private Cloud (VPC) Network' desc=''
                         library=''>
                    <threats>
                        <threat ref='ACCESS-TO-DATA-AWS'
                                name='Sensitive data is compromised through unauthorized access to data' state='Expose'
                                source='MANUAL' owner='' library=''>
                            <desc>Attackers can gain access to sensitive data when the data is in transit in clear text
                                or when the data is stored without encryption.
                            </desc>
                            <riskRating confidentiality='75' integrity='25' availability='50' easeOfExploitation='50'/>
                            <references/>
                            <weaknesses>
                                <weakness ref='AWS-S3-7.3'>
                                    <controls>
                                        <control ref='Hydras-AWS-SNS-02' mitigation='100'/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                            <controls>
                                <control ref='Hydras-AWS-SNS-02' mitigation='100'/>
                            </controls>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
    </components>
    <rules>
        <rule name='Q: AWS - SNS' module='component' generatedByGui='true'>
            <condition name='Risk pattern exists' type='drools-without-variable-type' field='id'
                       value='Hydras-AWS-Foundation_::_HYDRAS-AWS-GOV'>
                <pattern name='Risk pattern exists'
                         pattern='$riskPattern : RiskPattern(libraryRef == "${value-1}",ref == "${value-2}");'/>
            </condition>
            <action project=''
                    value='deployment.publicCloud.aws.useSNS_::_Amazon Web Services_::_Do you use Amazon Simple Notification Services (SNS) for the notifications?_::_6510_::_true_::_false_::_'
                    name='Insert Question Group' type='drools-without-variable-type'>
                <pattern name='Action of insert question group'
                         pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlE6IEFXUyAtIFNOUyIKbm8tbG9vcAp3aGVuCiAgICAkcHJvamVjdCA6IFByb2plY3QoKQogICAgJHJpc2tQYXR0ZXJuIDogUmlza1BhdHRlcm4obGlicmFyeVJlZiA9PSAiSHlkcmFzLUFXUy1Gb3VuZGF0aW9uIixyZWYgPT0gIkhZRFJBUy1BV1MtR09WIik7CiAgICAKdGhlbgogICAgUXVlc3Rpb25Hcm91cCBncm91cCA9IG5ldyBRdWVzdGlvbkdyb3VwKCJkZXBsb3ltZW50LnB1YmxpY0Nsb3VkLmF3cy51c2VTTlMiLCJBbWF6b24gV2ViIFNlcnZpY2VzIiwiRG8geW91IHVzZSBBbWF6b24gU2ltcGxlIE5vdGlmaWNhdGlvbiBTZXJ2aWNlcyAoU05TKSBmb3IgdGhlIG5vdGlmaWNhdGlvbnM/IiwgNjUxMCwgIiIpOyBncm91cC5zZXRGbGFncyh0cnVlLCBmYWxzZSk7IGluc2VydExvZ2ljYWwoZ3JvdXApOwplbmQKICAgIA==
            </content>
        </rule>
        <rule name='Q: AWS - SNS - *' module='component' generatedByGui='true'>
            <condition name='Question Group exists' type='drools-without-variable-type' field='id'
                       value='deployment.publicCloud.aws.useSNS'>
                <pattern name='Question group exists' pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <action project='' value='aws.sns.no_::_No_::_' name='Insert Question' type='drools-without-variable-type'>
                <pattern name='Action of insert question'
                         pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project='' value='aws.sns.yes_::_Yes_::_' name='Insert Question'
                    type='drools-without-variable-type'>
                <pattern name='Action of insert question'
                         pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlE6IEFXUyAtIFNOUyAtICoiCm5vLWxvb3AKd2hlbgogICAgJHByb2plY3QgOiBQcm9qZWN0KCkKICAgICRncm91cCA6IFF1ZXN0aW9uR3JvdXAoaWQgPT0gImRlcGxveW1lbnQucHVibGljQ2xvdWQuYXdzLnVzZVNOUyIpIEBXYXRjaCghKik7CiAgICAKdGhlbgogICAgaW5zZXJ0TG9naWNhbChuZXcgUXVlc3Rpb24oJGdyb3VwLCAiYXdzLnNucy5ubyIsICJObyIsICIiKSk7CiAgICBpbnNlcnRMb2dpY2FsKG5ldyBRdWVzdGlvbigkZ3JvdXAsICJhd3Muc25zLnllcyIsICJZZXMiLCAiIikpOwplbmQKICAgIA==
            </content>
        </rule>
        <rule name='Q: Deployed - Public Cloud - Add AWS' module='component' generatedByGui='true'>
            <condition name='Question Group exists' type='drools-without-variable-type' field='id' value='publicCloud'>
                <pattern name='Question group exists' pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name='Question is answered' type='Question' field='id' value='Public Cloud'>
                <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project='' value='aws_::_Amazon Web Services_::_' name='Insert Question'
                    type='drools-without-variable-type'>
                <pattern name='Action of insert question'
                         pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlE6IERlcGxveWVkIC0gUHVibGljIENsb3VkIC0gQWRkIEFXUyIKbm8tbG9vcAp3aGVuCiAgICAkcHJvamVjdCA6IFByb2plY3QoKQogICAgJGdyb3VwIDogUXVlc3Rpb25Hcm91cChpZCA9PSAicHVibGljQ2xvdWQiKSBAV2F0Y2goISopOwogICAgUXVlc3Rpb24oaWQgPT0gIlB1YmxpYyBDbG91ZCIsIGFuc3dlciA9PSB0cnVlKTsKICAgIAp0aGVuCiAgICBpbnNlcnRMb2dpY2FsKG5ldyBRdWVzdGlvbigkZ3JvdXAsICJhd3MiLCAiQW1hem9uIFdlYiBTZXJ2aWNlcyIsICIiKSk7CmVuZAogICAg
            </content>
        </rule>
        <rule name='Q: Deployed - Public Cloud &amp; AWS &amp; Client' module='component' generatedByGui='true'>
            <condition name='Question is answered' type='Question' field='id' value='aws'>
                <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name='Risk pattern exists' type='drools-without-variable-type' field='id'
                       value='CS-Default_::_GENERIC-CLIENT'>
                <pattern name='Risk pattern exists'
                         pattern='$riskPattern : RiskPattern(libraryRef == "${value-1}",ref == "${value-2}");'/>
            </condition>
            <action project=''
                    value='deployment.publicCloud.aws._::_Deployment_::_Which AWS Services?_::_6509_::_true_::_true_::_'
                    name='Insert Question Group' type='drools-without-variable-type'>
                <pattern name='Action of insert question group'
                         pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlE6IERlcGxveWVkIC0gUHVibGljIENsb3VkICYgQVdTICYgQ2xpZW50Igpuby1sb29wCndoZW4KICAgICRwcm9qZWN0IDogUHJvamVjdCgpCiAgICBRdWVzdGlvbihpZCA9PSAiYXdzIiwgYW5zd2VyID09IHRydWUpOwogICAgJHJpc2tQYXR0ZXJuIDogUmlza1BhdHRlcm4obGlicmFyeVJlZiA9PSAiQ1MtRGVmYXVsdCIscmVmID09ICJHRU5FUklDLUNMSUVOVCIpOwogICAgCnRoZW4KICAgIFF1ZXN0aW9uR3JvdXAgZ3JvdXAgPSBuZXcgUXVlc3Rpb25Hcm91cCgiZGVwbG95bWVudC5wdWJsaWNDbG91ZC5hd3MuIiwiRGVwbG95bWVudCIsIldoaWNoIEFXUyBTZXJ2aWNlcz8iLCA2NTA5LCAiIik7IGdyb3VwLnNldEZsYWdzKHRydWUsIHRydWUpOyBpbnNlcnRMb2dpY2FsKGdyb3VwKTsKZW5kCiAgICA=
            </content>
        </rule>
        <rule name='Q: Deployed - Public Cloud &amp; AWS &amp; Client - *' module='component' generatedByGui='true'>
            <condition name='Question Group exists' type='drools-without-variable-type' field='id'
                       value='deployment.publicCloud.aws.'>
                <pattern name='Question group exists' pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name='Risk pattern exists' type='drools-without-variable-type' field='id'
                       value='CS-Default_::_GENERIC-CLIENT'>
                <pattern name='Risk pattern exists'
                         pattern='$riskPattern : RiskPattern(libraryRef == "${value-1}",ref == "${value-2}");'/>
            </condition>
            <action project='' value='aws.ec2_::_Elastic Compute Cloud - EC2_::_' name='Insert Question'
                    type='drools-without-variable-type'>
                <pattern name='Action of insert question'
                         pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlE6IERlcGxveWVkIC0gUHVibGljIENsb3VkICYgQVdTICYgQ2xpZW50IC0gKiIKbm8tbG9vcAp3aGVuCiAgICAkcHJvamVjdCA6IFByb2plY3QoKQogICAgJGdyb3VwIDogUXVlc3Rpb25Hcm91cChpZCA9PSAiZGVwbG95bWVudC5wdWJsaWNDbG91ZC5hd3MuIikgQFdhdGNoKCEqKTsKICAgICRyaXNrUGF0dGVybiA6IFJpc2tQYXR0ZXJuKGxpYnJhcnlSZWYgPT0gIkNTLURlZmF1bHQiLHJlZiA9PSAiR0VORVJJQy1DTElFTlQiKTsKICAgIAp0aGVuCiAgICBpbnNlcnRMb2dpY2FsKG5ldyBRdWVzdGlvbigkZ3JvdXAsICJhd3MuZWMyIiwgIkVsYXN0aWMgQ29tcHV0ZSBDbG91ZCAtIEVDMiIsICIiKSk7CmVuZAogICAg
            </content>
        </rule>
        <rule name='Q: Deployed - Public Cloud &amp; AWS &amp; Datastore' module='component' generatedByGui='true'>
            <condition name='Question is answered' type='Question' field='id' value='aws'>
                <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name='Risk pattern exists' type='drools-without-variable-type' field='id'
                       value='CS-Default_::_DATASTORE'>
                <pattern name='Risk pattern exists'
                         pattern='$riskPattern : RiskPattern(libraryRef == "${value-1}",ref == "${value-2}");'/>
            </condition>
            <action project=''
                    value='deployment.publicCloud.aws._::_Deployment_::_Which AWS Services?_::_6509_::_true_::_true_::_'
                    name='Insert Question Group' type='drools-without-variable-type'>
                <pattern name='Action of insert question group'
                         pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlE6IERlcGxveWVkIC0gUHVibGljIENsb3VkICYgQVdTICYgRGF0YXN0b3JlIgpuby1sb29wCndoZW4KICAgICRwcm9qZWN0IDogUHJvamVjdCgpCiAgICBRdWVzdGlvbihpZCA9PSAiYXdzIiwgYW5zd2VyID09IHRydWUpOwogICAgJHJpc2tQYXR0ZXJuIDogUmlza1BhdHRlcm4obGlicmFyeVJlZiA9PSAiQ1MtRGVmYXVsdCIscmVmID09ICJEQVRBU1RPUkUiKTsKICAgIAp0aGVuCiAgICBRdWVzdGlvbkdyb3VwIGdyb3VwID0gbmV3IFF1ZXN0aW9uR3JvdXAoImRlcGxveW1lbnQucHVibGljQ2xvdWQuYXdzLiIsIkRlcGxveW1lbnQiLCJXaGljaCBBV1MgU2VydmljZXM/IiwgNjUwOSwgIiIpOyBncm91cC5zZXRGbGFncyh0cnVlLCB0cnVlKTsgaW5zZXJ0TG9naWNhbChncm91cCk7CmVuZAogICAg
            </content>
        </rule>
        <rule name='Q: Deployed - Public Cloud &amp; AWS &amp; Datastore - *' module='component' generatedByGui='true'>
            <condition name='Question Group exists' type='drools-without-variable-type' field='id'
                       value='deployment.publicCloud.aws.'>
                <pattern name='Question group exists' pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name='Risk pattern exists' type='drools-without-variable-type' field='id'
                       value='CS-Default_::_DATASTORE'>
                <pattern name='Risk pattern exists'
                         pattern='$riskPattern : RiskPattern(libraryRef == "${value-1}",ref == "${value-2}");'/>
            </condition>
            <action project='' value='aws.ec2_::_Elastic Compute Cloud - EC2_::_' name='Insert Question'
                    type='drools-without-variable-type'>
                <pattern name='Action of insert question'
                         pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlE6IERlcGxveWVkIC0gUHVibGljIENsb3VkICYgQVdTICYgRGF0YXN0b3JlIC0gKiIKbm8tbG9vcAp3aGVuCiAgICAkcHJvamVjdCA6IFByb2plY3QoKQogICAgJGdyb3VwIDogUXVlc3Rpb25Hcm91cChpZCA9PSAiZGVwbG95bWVudC5wdWJsaWNDbG91ZC5hd3MuIikgQFdhdGNoKCEqKTsKICAgICRyaXNrUGF0dGVybiA6IFJpc2tQYXR0ZXJuKGxpYnJhcnlSZWYgPT0gIkNTLURlZmF1bHQiLHJlZiA9PSAiREFUQVNUT1JFIik7CiAgICAKdGhlbgogICAgaW5zZXJ0TG9naWNhbChuZXcgUXVlc3Rpb24oJGdyb3VwLCAiYXdzLmVjMiIsICJFbGFzdGljIENvbXB1dGUgQ2xvdWQgLSBFQzIiLCAiIikpOwplbmQKICAgIA==
            </content>
        </rule>
        <rule name='Q: Deployed - Public Cloud &amp; AWS &amp; Datastore other - Cloud Storage' module='component'
              generatedByGui='true'>
            <condition name='Question Group exists' type='drools-without-variable-type' field='id'
                       value='deployment.publicCloud.aws.'>
                <pattern name='Question group exists' pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name='Risk pattern exists' type='drools-without-variable-type' field='id'
                       value='CS-Default_::_CLOUD-STORAGE'>
                <pattern name='Risk pattern exists'
                         pattern='$riskPattern : RiskPattern(libraryRef == "${value-1}",ref == "${value-2}");'/>
            </condition>
            <action project='' value='aws.s3_::_Simple Storage Service - S3_::_' name='Insert Question'
                    type='drools-without-variable-type'>
                <pattern name='Action of insert question'
                         pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlE6IERlcGxveWVkIC0gUHVibGljIENsb3VkICYgQVdTICYgRGF0YXN0b3JlIG90aGVyIC0gQ2xvdWQgU3RvcmFnZSIKbm8tbG9vcAp3aGVuCiAgICAkcHJvamVjdCA6IFByb2plY3QoKQogICAgJGdyb3VwIDogUXVlc3Rpb25Hcm91cChpZCA9PSAiZGVwbG95bWVudC5wdWJsaWNDbG91ZC5hd3MuIikgQFdhdGNoKCEqKTsKICAgICRyaXNrUGF0dGVybiA6IFJpc2tQYXR0ZXJuKGxpYnJhcnlSZWYgPT0gIkNTLURlZmF1bHQiLHJlZiA9PSAiQ0xPVUQtU1RPUkFHRSIpOwogICAgCnRoZW4KICAgIGluc2VydExvZ2ljYWwobmV3IFF1ZXN0aW9uKCRncm91cCwgImF3cy5zMyIsICJTaW1wbGUgU3RvcmFnZSBTZXJ2aWNlIC0gUzMiLCAiIikpOwplbmQKICAgIA==
            </content>
        </rule>
        <rule name='Q: Deployed - Public Cloud &amp; AWS &amp; Datastore SQL - *' module='component'
              generatedByGui='true'>
            <condition name='Question Group exists' type='drools-without-variable-type' field='id'
                       value='deployment.publicCloud.aws.'>
                <pattern name='Question group exists' pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name='Risk pattern exists' type='drools-without-variable-type' field='id'
                       value='CS-Default_::_DATABASE-SQL'>
                <pattern name='Risk pattern exists'
                         pattern='$riskPattern : RiskPattern(libraryRef == "${value-1}",ref == "${value-2}");'/>
            </condition>
            <action project='' value='aws.rds_::_Relational Database Service - RDS_::_' name='Insert Question'
                    type='drools-without-variable-type'>
                <pattern name='Action of insert question'
                         pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlE6IERlcGxveWVkIC0gUHVibGljIENsb3VkICYgQVdTICYgRGF0YXN0b3JlIFNRTCAtICoiCm5vLWxvb3AKd2hlbgogICAgJHByb2plY3QgOiBQcm9qZWN0KCkKICAgICRncm91cCA6IFF1ZXN0aW9uR3JvdXAoaWQgPT0gImRlcGxveW1lbnQucHVibGljQ2xvdWQuYXdzLiIpIEBXYXRjaCghKik7CiAgICAkcmlza1BhdHRlcm4gOiBSaXNrUGF0dGVybihsaWJyYXJ5UmVmID09ICJDUy1EZWZhdWx0IixyZWYgPT0gIkRBVEFCQVNFLVNRTCIpOwogICAgCnRoZW4KICAgIGluc2VydExvZ2ljYWwobmV3IFF1ZXN0aW9uKCRncm91cCwgImF3cy5yZHMiLCAiUmVsYXRpb25hbCBEYXRhYmFzZSBTZXJ2aWNlIC0gUkRTIiwgIiIpKTsKZW5kCiAgICA=
            </content>
        </rule>
        <rule name='Q: Deployed - Public Cloud &amp; AWS &amp; Load Balancer' module='component' generatedByGui='true'>
            <condition name='Question is answered' type='Question' field='id' value='aws'>
                <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name='Risk pattern exists' type='drools-without-variable-type' field='id'
                       value='CS-Default_::_LOAD-BALANCER'>
                <pattern name='Risk pattern exists'
                         pattern='$riskPattern : RiskPattern(libraryRef == "${value-1}",ref == "${value-2}");'/>
            </condition>
            <action project=''
                    value='deployment.publicCloud.aws._::_Deployment_::_Which AWS Services?_::_6509_::_true_::_true_::_'
                    name='Insert Question Group' type='drools-without-variable-type'>
                <pattern name='Action of insert question group'
                         pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlE6IERlcGxveWVkIC0gUHVibGljIENsb3VkICYgQVdTICYgTG9hZCBCYWxhbmNlciIKbm8tbG9vcAp3aGVuCiAgICAkcHJvamVjdCA6IFByb2plY3QoKQogICAgUXVlc3Rpb24oaWQgPT0gImF3cyIsIGFuc3dlciA9PSB0cnVlKTsKICAgICRyaXNrUGF0dGVybiA6IFJpc2tQYXR0ZXJuKGxpYnJhcnlSZWYgPT0gIkNTLURlZmF1bHQiLHJlZiA9PSAiTE9BRC1CQUxBTkNFUiIpOwogICAgCnRoZW4KICAgIFF1ZXN0aW9uR3JvdXAgZ3JvdXAgPSBuZXcgUXVlc3Rpb25Hcm91cCgiZGVwbG95bWVudC5wdWJsaWNDbG91ZC5hd3MuIiwiRGVwbG95bWVudCIsIldoaWNoIEFXUyBTZXJ2aWNlcz8iLCA2NTA5LCAiIik7IGdyb3VwLnNldEZsYWdzKHRydWUsIHRydWUpOyBpbnNlcnRMb2dpY2FsKGdyb3VwKTsKZW5kCiAgICA=
            </content>
        </rule>
        <rule name='Q: Deployed - Public Cloud &amp; AWS &amp; Load Balancer - *' module='component'
              generatedByGui='true'>
            <condition name='Question Group exists' type='drools-without-variable-type' field='id'
                       value='deployment.publicCloud.aws.'>
                <pattern name='Question group exists' pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name='Risk pattern exists' type='drools-without-variable-type' field='id'
                       value='CS-Default_::_LOAD-BALANCER'>
                <pattern name='Risk pattern exists'
                         pattern='$riskPattern : RiskPattern(libraryRef == "${value-1}",ref == "${value-2}");'/>
            </condition>
            <action project='' value='aws.ec2_::_Elastic Compute Cloud - EC2_::_' name='Insert Question'
                    type='drools-without-variable-type'>
                <pattern name='Action of insert question'
                         pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <action project='' value='aws.elb_::_Elastic Load Balancing - ELB_::_' name='Insert Question'
                    type='drools-without-variable-type'>
                <pattern name='Action of insert question'
                         pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlE6IERlcGxveWVkIC0gUHVibGljIENsb3VkICYgQVdTICYgTG9hZCBCYWxhbmNlciAtICoiCm5vLWxvb3AKd2hlbgogICAgJHByb2plY3QgOiBQcm9qZWN0KCkKICAgICRncm91cCA6IFF1ZXN0aW9uR3JvdXAoaWQgPT0gImRlcGxveW1lbnQucHVibGljQ2xvdWQuYXdzLiIpIEBXYXRjaCghKik7CiAgICAkcmlza1BhdHRlcm4gOiBSaXNrUGF0dGVybihsaWJyYXJ5UmVmID09ICJDUy1EZWZhdWx0IixyZWYgPT0gIkxPQUQtQkFMQU5DRVIiKTsKICAgIAp0aGVuCiAgICBpbnNlcnRMb2dpY2FsKG5ldyBRdWVzdGlvbigkZ3JvdXAsICJhd3MuZWMyIiwgIkVsYXN0aWMgQ29tcHV0ZSBDbG91ZCAtIEVDMiIsICIiKSk7CiAgICBpbnNlcnRMb2dpY2FsKG5ldyBRdWVzdGlvbigkZ3JvdXAsICJhd3MuZWxiIiwgIkVsYXN0aWMgTG9hZCBCYWxhbmNpbmcgLSBFTEIiLCAiIikpOwplbmQKICAgIA==
            </content>
        </rule>
        <rule name='Q: Deployed - Public Cloud &amp; AWS &amp; Service' module='component' generatedByGui='true'>
            <condition name='Question is answered' type='Question' field='id' value='aws'>
                <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name='Risk pattern exists' type='drools-without-variable-type' field='id'
                       value='CS-Default_::_GENERIC-SERVICE'>
                <pattern name='Risk pattern exists'
                         pattern='$riskPattern : RiskPattern(libraryRef == "${value-1}",ref == "${value-2}");'/>
            </condition>
            <action project=''
                    value='deployment.publicCloud.aws._::_Deployment_::_Which AWS Services?_::_6509_::_true_::_true_::_'
                    name='Insert Question Group' type='drools-without-variable-type'>
                <pattern name='Action of insert question group'
                         pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlE6IERlcGxveWVkIC0gUHVibGljIENsb3VkICYgQVdTICYgU2VydmljZSIKbm8tbG9vcAp3aGVuCiAgICAkcHJvamVjdCA6IFByb2plY3QoKQogICAgUXVlc3Rpb24oaWQgPT0gImF3cyIsIGFuc3dlciA9PSB0cnVlKTsKICAgICRyaXNrUGF0dGVybiA6IFJpc2tQYXR0ZXJuKGxpYnJhcnlSZWYgPT0gIkNTLURlZmF1bHQiLHJlZiA9PSAiR0VORVJJQy1TRVJWSUNFIik7CiAgICAKdGhlbgogICAgUXVlc3Rpb25Hcm91cCBncm91cCA9IG5ldyBRdWVzdGlvbkdyb3VwKCJkZXBsb3ltZW50LnB1YmxpY0Nsb3VkLmF3cy4iLCJEZXBsb3ltZW50IiwiV2hpY2ggQVdTIFNlcnZpY2VzPyIsIDY1MDksICIiKTsgZ3JvdXAuc2V0RmxhZ3ModHJ1ZSwgdHJ1ZSk7IGluc2VydExvZ2ljYWwoZ3JvdXApOwplbmQKICAgIA==
            </content>
        </rule>
        <rule name='Q: Deployed - Public Cloud &amp; AWS &amp; Service - *' module='component' generatedByGui='true'>
            <condition name='Question Group exists' type='drools-without-variable-type' field='id'
                       value='deployment.publicCloud.aws.'>
                <pattern name='Question group exists' pattern='$group : QuestionGroup(id == "${value}") @Watch(!*);'/>
            </condition>
            <condition name='Risk pattern exists' type='drools-without-variable-type' field='id'
                       value='CS-Default_::_GENERIC-SERVICE'>
                <pattern name='Risk pattern exists'
                         pattern='$riskPattern : RiskPattern(libraryRef == "${value-1}",ref == "${value-2}");'/>
            </condition>
            <action project='' value='aws.ec2_::_Elastic Compute Cloud - EC2_::_' name='Insert Question'
                    type='drools-without-variable-type'>
                <pattern name='Action of insert question'
                         pattern='insertLogical(new Question($group, "${value-1}", "${value-2}", "${value-3}"));'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlE6IERlcGxveWVkIC0gUHVibGljIENsb3VkICYgQVdTICYgU2VydmljZSAtICoiCm5vLWxvb3AKd2hlbgogICAgJHByb2plY3QgOiBQcm9qZWN0KCkKICAgICRncm91cCA6IFF1ZXN0aW9uR3JvdXAoaWQgPT0gImRlcGxveW1lbnQucHVibGljQ2xvdWQuYXdzLiIpIEBXYXRjaCghKik7CiAgICAkcmlza1BhdHRlcm4gOiBSaXNrUGF0dGVybihsaWJyYXJ5UmVmID09ICJDUy1EZWZhdWx0IixyZWYgPT0gIkdFTkVSSUMtU0VSVklDRSIpOwogICAgCnRoZW4KICAgIGluc2VydExvZ2ljYWwobmV3IFF1ZXN0aW9uKCRncm91cCwgImF3cy5lYzIiLCAiRWxhc3RpYyBDb21wdXRlIENsb3VkIC0gRUMyIiwgIiIpKTsKZW5kCiAgICA=
            </content>
        </rule>
        <rule name='Q: Deployed - Public Cloud &amp; AWS &amp; Web UI' module='component' generatedByGui='true'>
            <condition name='Question is answered' type='Question' field='id' value='aws'>
                <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name='Risk pattern exists' type='drools-without-variable-type' field='id'
                       value='CS-Default_::_BROWSER'>
                <pattern name='Risk pattern exists'
                         pattern='$riskPattern : RiskPattern(libraryRef == "${value-1}",ref == "${value-2}");'/>
            </condition>
            <action project=''
                    value='deployment.publicCloud.aws._::_Deployment_::_Which AWS Services?_::_6509_::_true_::_true_::_'
                    name='Insert Question Group' type='drools-without-variable-type'>
                <pattern name='Action of insert question group'
                         pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlE6IERlcGxveWVkIC0gUHVibGljIENsb3VkICYgQVdTICYgV2ViIFVJIgpuby1sb29wCndoZW4KICAgICRwcm9qZWN0IDogUHJvamVjdCgpCiAgICBRdWVzdGlvbihpZCA9PSAiYXdzIiwgYW5zd2VyID09IHRydWUpOwogICAgJHJpc2tQYXR0ZXJuIDogUmlza1BhdHRlcm4obGlicmFyeVJlZiA9PSAiQ1MtRGVmYXVsdCIscmVmID09ICJCUk9XU0VSIik7CiAgICAKdGhlbgogICAgUXVlc3Rpb25Hcm91cCBncm91cCA9IG5ldyBRdWVzdGlvbkdyb3VwKCJkZXBsb3ltZW50LnB1YmxpY0Nsb3VkLmF3cy4iLCJEZXBsb3ltZW50IiwiV2hpY2ggQVdTIFNlcnZpY2VzPyIsIDY1MDksICIiKTsgZ3JvdXAuc2V0RmxhZ3ModHJ1ZSwgdHJ1ZSk7IGluc2VydExvZ2ljYWwoZ3JvdXApOwplbmQKICAgIA==
            </content>
        </rule>
        <rule name='Q: Deployed - Public Cloud &amp; AWS &amp; Web UI - *' module='component' generatedByGui='true'>
            <condition name='Question is answered' type='Question' field='id' value='aws'>
                <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <condition name='Risk pattern exists' type='drools-without-variable-type' field='id'
                       value='CS-Default_::_BROWSER'>
                <pattern name='Risk pattern exists'
                         pattern='$riskPattern : RiskPattern(libraryRef == "${value-1}",ref == "${value-2}");'/>
            </condition>
            <action project=''
                    value='deployment.publicCloud.aws._::_Deployment_::_Which AWS Services?_::_6509_::_true_::_true_::_'
                    name='Insert Question Group' type='drools-without-variable-type'>
                <pattern name='Action of insert question group'
                         pattern='QuestionGroup group = new QuestionGroup("${value-1}","${value-2}","${value-3}", ${value-4}, "${value-7}"); group.setFlags(${value-5}, ${value-6}); insertLogical(group);'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlE6IERlcGxveWVkIC0gUHVibGljIENsb3VkICYgQVdTICYgV2ViIFVJIC0gKiIKbm8tbG9vcAp3aGVuCiAgICAkcHJvamVjdCA6IFByb2plY3QoKQogICAgUXVlc3Rpb24oaWQgPT0gImF3cyIsIGFuc3dlciA9PSB0cnVlKTsKICAgICRyaXNrUGF0dGVybiA6IFJpc2tQYXR0ZXJuKGxpYnJhcnlSZWYgPT0gIkNTLURlZmF1bHQiLHJlZiA9PSAiQlJPV1NFUiIpOwogICAgCnRoZW4KICAgIFF1ZXN0aW9uR3JvdXAgZ3JvdXAgPSBuZXcgUXVlc3Rpb25Hcm91cCgiZGVwbG95bWVudC5wdWJsaWNDbG91ZC5hd3MuIiwiRGVwbG95bWVudCIsIldoaWNoIEFXUyBTZXJ2aWNlcz8iLCA2NTA5LCAiIik7IGdyb3VwLnNldEZsYWdzKHRydWUsIHRydWUpOyBpbnNlcnRMb2dpY2FsKGdyb3VwKTsKZW5kCiAgICA=
            </content>
        </rule>
        <rule name='Risk Pattern: AWS - EC2' module='component' generatedByGui='true'>
            <condition name='Question is answered' type='Question' field='id' value='aws.ec2'>
                <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project='Hydras-AWS-Foundation' value='Hydras-AWS-Foundation_::_HYDRAS-AWS-EC2'
                    name='Import Risk Pattern' type='drools-without-variable-type'>
                <pattern name='Action of import a risk pattern'
                         pattern='insertLogical(RiskPattern.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlJpc2sgUGF0dGVybjogQVdTIC0gRUMyIgpuby1sb29wCndoZW4KICAgICRwcm9qZWN0IDogUHJvamVjdCgpCiAgICBRdWVzdGlvbihpZCA9PSAiYXdzLmVjMiIsIGFuc3dlciA9PSB0cnVlKTsKICAgIAp0aGVuCiAgICBpbnNlcnRMb2dpY2FsKFJpc2tQYXR0ZXJuLmltcG9ydFJpc2tQYXR0ZXJuKCJIeWRyYXMtQVdTLUZvdW5kYXRpb24iLCAiSFlEUkFTLUFXUy1FQzIiLCA1MCkpOwplbmQKICAgIA==
            </content>
        </rule>
        <rule name='Risk Pattern: AWS - ELB' module='component' generatedByGui='true'>
            <condition name='Question is answered' type='Question' field='id' value='aws.elb'>
                <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project='Hydras-AWS-Foundation' value='Hydras-AWS-Foundation_::_HYDRAS-AWS-ELB'
                    name='Import Risk Pattern' type='drools-without-variable-type'>
                <pattern name='Action of import a risk pattern'
                         pattern='insertLogical(RiskPattern.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlJpc2sgUGF0dGVybjogQVdTIC0gRUxCIgpuby1sb29wCndoZW4KICAgICRwcm9qZWN0IDogUHJvamVjdCgpCiAgICBRdWVzdGlvbihpZCA9PSAiYXdzLmVsYiIsIGFuc3dlciA9PSB0cnVlKTsKICAgIAp0aGVuCiAgICBpbnNlcnRMb2dpY2FsKFJpc2tQYXR0ZXJuLmltcG9ydFJpc2tQYXR0ZXJuKCJIeWRyYXMtQVdTLUZvdW5kYXRpb24iLCAiSFlEUkFTLUFXUy1FTEIiLCA1MCkpOwplbmQKICAgIA==
            </content>
        </rule>
        <rule name='Risk Pattern: AWS - RDS' module='component' generatedByGui='true'>
            <condition name='Question is answered' type='Question' field='id' value='aws.rds'>
                <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project='Hydras-AWS-Foundation' value='Hydras-AWS-Foundation_::_HYDRAS-AWS-RDS'
                    name='Import Risk Pattern' type='drools-without-variable-type'>
                <pattern name='Action of import a risk pattern'
                         pattern='insertLogical(RiskPattern.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlJpc2sgUGF0dGVybjogQVdTIC0gUkRTIgpuby1sb29wCndoZW4KICAgICRwcm9qZWN0IDogUHJvamVjdCgpCiAgICBRdWVzdGlvbihpZCA9PSAiYXdzLnJkcyIsIGFuc3dlciA9PSB0cnVlKTsKICAgIAp0aGVuCiAgICBpbnNlcnRMb2dpY2FsKFJpc2tQYXR0ZXJuLmltcG9ydFJpc2tQYXR0ZXJuKCJIeWRyYXMtQVdTLUZvdW5kYXRpb24iLCAiSFlEUkFTLUFXUy1SRFMiLCA1MCkpOwplbmQKICAgIA==
            </content>
        </rule>
        <rule name='Risk Pattern: AWS - S3' module='component' generatedByGui='true'>
            <condition name='Question is answered' type='Question' field='id' value='aws.s3'>
                <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project='Hydras-AWS-Foundation' value='Hydras-AWS-Foundation_::_HYDRAS-AWS-S3'
                    name='Import Risk Pattern' type='drools-without-variable-type'>
                <pattern name='Action of import a risk pattern'
                         pattern='insertLogical(RiskPattern.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlJpc2sgUGF0dGVybjogQVdTIC0gUzMiCm5vLWxvb3AKd2hlbgogICAgJHByb2plY3QgOiBQcm9qZWN0KCkKICAgIFF1ZXN0aW9uKGlkID09ICJhd3MuczMiLCBhbnN3ZXIgPT0gdHJ1ZSk7CiAgICAKdGhlbgogICAgaW5zZXJ0TG9naWNhbChSaXNrUGF0dGVybi5pbXBvcnRSaXNrUGF0dGVybigiSHlkcmFzLUFXUy1Gb3VuZGF0aW9uIiwgIkhZRFJBUy1BV1MtUzMiLCA1MCkpOwplbmQKICAgIA==
            </content>
        </rule>
        <rule name='Risk Pattern: AWS - SNS' module='component' generatedByGui='true'>
            <condition name='Question is answered' type='Question' field='id' value='aws.sns.yes'>
                <pattern name='Condition with answer' pattern='${type}(${field} == "${value}", answer == true);'/>
            </condition>
            <action project='Hydras-AWS-Foundation' value='Hydras-AWS-Foundation_::_HYDRAS-AWS-SNS'
                    name='Import Risk Pattern' type='drools-without-variable-type'>
                <pattern name='Action of import a risk pattern'
                         pattern='insertLogical(RiskPattern.importRiskPattern("${value-1}", "${value-2}", 50));'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlJpc2sgUGF0dGVybjogQVdTIC0gU05TIgpuby1sb29wCndoZW4KICAgICRwcm9qZWN0IDogUHJvamVjdCgpCiAgICBRdWVzdGlvbihpZCA9PSAiYXdzLnNucy55ZXMiLCBhbnN3ZXIgPT0gdHJ1ZSk7CiAgICAKdGhlbgogICAgaW5zZXJ0TG9naWNhbChSaXNrUGF0dGVybi5pbXBvcnRSaXNrUGF0dGVybigiSHlkcmFzLUFXUy1Gb3VuZGF0aW9uIiwgIkhZRFJBUy1BV1MtU05TIiwgNTApKTsKZW5kCiAgICA=
            </content>
        </rule>
        <rule name='Set Answer: Amazon Environment --&gt; Public Cloud' module='component' generatedByGui='true'>
            <condition name='Is specific component definition' type='drools-without-variable-type' field='id'
                       value='amazon-web-services-environment'>
                <pattern name='Is specific component definition'
                         pattern='ComponentDefinitionProperties(ref == "${value}");'/>
            </condition>
            <action project='' value='Public Cloud_::_true_::_false' name='Answer Question'
                    type='drools-without-variable-type'>
                <pattern name='Action of answer question'
                         pattern='$questionToAnswer : Question(id == "${value-1}", answer != ${value-2}); eval(!${value-3} || !$questionToAnswer.isManuallyModified());_:::_modify($questionToAnswer) { setAnswer(${value-2}), setCanBeManuallyModified(${value-3}) };'/>
            </action>
            <content>
                CnBhY2thZ2UgY29tLmlyaXVzcmlzay5kcm9vbHM7CgppbXBvcnQgY29tLmlyaXVzcmlzay5kcm9vbHMubW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2subW9kZWwuKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suKjsKaW1wb3J0IGNvbS5pcml1c3Jpc2suZmFjdG9yaWVzLkRyb29sc1ZhbHVlQ29udmVydGVyOwppbXBvcnQgY29tLmlyaXVzcmlzay51dGlscy5FbnRpdHlXaXRoVURUVXRpbDsKCmdsb2JhbCBjb20uaXJpdXNyaXNrLnNlcnZpY2VzLmRyb29scy5Ecm9vbHNTZXJ2aWNlIGRyb29sc1NlcnZpY2UKCnJ1bGUgIlNldCBBbnN3ZXI6IEFtYXpvbiBFbnZpcm9ubWVudCAtLT4gUHVibGljIENsb3VkIgpuby1sb29wCndoZW4KICAgICRwcm9qZWN0IDogUHJvamVjdCgpCiAgICBDb21wb25lbnREZWZpbml0aW9uUHJvcGVydGllcyhyZWYgPT0gImFtYXpvbi13ZWItc2VydmljZXMtZW52aXJvbm1lbnQiKTsKICAgICRxdWVzdGlvblRvQW5zd2VyIDogUXVlc3Rpb24oaWQgPT0gIlB1YmxpYyBDbG91ZCIsIGFuc3dlciAhPSB0cnVlKTsgZXZhbCghZmFsc2UgfHwgISRxdWVzdGlvblRvQW5zd2VyLmlzTWFudWFsbHlNb2RpZmllZCgpKTsKdGhlbgogICAgbW9kaWZ5KCRxdWVzdGlvblRvQW5zd2VyKSB7IHNldEFuc3dlcih0cnVlKSwgc2V0Q2FuQmVNYW51YWxseU1vZGlmaWVkKGZhbHNlKSB9OwplbmQKICAgIA==
            </content>
        </rule>
    </rules>
</project>