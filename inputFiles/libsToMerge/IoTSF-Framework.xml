<?xml version="1.0" encoding="UTF-8"?>
<project ref="iot-library-stage-1" name="IoT Library Stage 1" revision="1" type="LIBRARY" status="OPEN" enabled="true" priority="0" tags="" workflowState="">
    <desc>IoTSF-Framework</desc>
    <categoryComponents/>
    <componentDefinitions/>
    <udts/>
    <dataflows/>
    <supportedStandards/>
    <components>
        <component ref="iot-device-software" name="IoT Device Software" desc="" tags="" position="1" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-287" name="Improper Server's Identity Validation" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not validate, or incorrectly validates, the server's identity. 
If the server's identity is not validated, an attacker could spoof a trusted entity by using a man-in-the-middle (MITM) attack. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host. 
 
One way to perform server's authentication is by using X509 certificates over TLS. 
 </desc>
                </weakness>
                <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.
Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
                </weakness>
                <weakness ref="UNRESTRICTED-NETWORK" name="Service is exposed to a wide attack surface" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product is exposed or reachable to an unnecessarily large group of potential attackers. An over-exposure of a component increases the chance of an attacker gaining access to the system through a vulnerability. </desc>
                </weakness>
                <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>An information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information.</desc>
                </weakness>
                <weakness ref="CWE-209" name="Information Exposure Through an Error Message" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software generates an error message that includes sensitive information about its environment, users, or associated data.
The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.  </desc>
                </weakness>
                <weakness ref="CWE-254-PROD" name="The product lacks key security features" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product lacks of key security features such as protection against tampering, unprotected storages or it has other misconfigurations and omissions during production.</desc>
                </weakness>
                <weakness ref="UNPATCHED-PRODUCT" name="Recommended security patches are not applied" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When patches and updates are not applied in a timely manner then a product (e.g. Operating System, Software or Mobile App) or a system could be vulnerable to known security issues. These issues could be used by an attacker to gain access to the system. </desc>
                </weakness>
                <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources. 
 </desc>
                </weakness>
                <weakness ref="CWE-654" name="Reliance on a Single Factor in a Security Decision" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality. </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="IOT2.4.5.21" name="Software uses certificate pinning or public/private key equivalent for TCP/IP or UDP/IP connections." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where the device software communicates with a product related webserver or application over &lt;span class="caps"&gt;TCP&lt;/span&gt;/IP or &lt;span class="caps"&gt;UDP&lt;/span&gt;/IP, the device software uses certificate pinning or public/private key equivalent, where appropriate.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Secure connections are a cornerstone for a client/server communication. Users, developers, and applications expect end-to-end security on their secure channels, but some secure channels are not meeting the expectation. Specifically, channels built using well known protocols can be vulnerable to a number of attacks. For example, traditional certificate validation protects against many types of man-in-the-middle (&lt;span class="caps"&gt;MITM&lt;/span&gt;) attacks, but it doesn’t prevent all of them.&lt;br /&gt;
Certificate pinning can still prevent the interception of a program&amp;#8217;s network traffic. Pinning is the process of associating a host with their expected X509 certificate or public key, which can be added to an application at development time, or it can be added upon first encountering the certificate or public key.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that device software uses certificate pinning or public/private key equivalent for &lt;span class="caps"&gt;TCP&lt;/span&gt;/IP or &lt;span class="caps"&gt;UDP&lt;/span&gt;/IP connections.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Certificate and Public Key Pinning" url="https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning#What_Is_Pinning"/>
                        <reference name="Pinning Cheat Sheet" url="https://www.owasp.org/index.php/Pinning_Cheat_Sheet"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.5.4" name="Software images shall be encrypted whilst being transferred to a device. (for remote software upgrade)" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;If remote software upgrade is supported by a device, software images shall be encrypted whilst being transferred to it.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Data transmitted over a public network can be intercepted by unauthorized parties. A secure file transfer adds security features to the transmission by encrypting  the file to preserve its confidentiality and integrity. This prevents eavesdroppers on the networks between the systems from accessing the file contents and reading or modifying them, necessitating the use of encryption for software images that are used for remote software upgrades.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Utilize encrypted protocols wherever possible to protect all data in transit. Where protocol encryption is not possible consider encrypting data before transfer.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Developer IoT Security Guidance" url="https://www.owasp.org/index.php/IoT_Security_Guidance#Developer_IoT_Security_Guidance"/>
                        <reference name="Security Guide for Interconnecting Information Technology Systems" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-47.pdf"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.5.5" name="Any product's port(s) that are not required for normal operation should be restricted or disabled." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;If the product has any virtual port(s) that are not required for normal operation, they are only allowed to communicate with authorised and authenticated entities or securely disabled when shipped. &lt;br /&gt;
Where a port is used for field diagnostics, the port input commands are deactivated and the output provides no information which could compromise the device, such as credentials, memory address or function names.                                                                         &lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
One of the most important principles in information security is to reduce the attack surface. Open ports are not always a security risk, for example a web server has to have 80 or 443 open otherwise users can not connect to use the web server. Thus taking into account that every open port increases the attack surface, any product&amp;#8217;s port(s) that are not required for normal operation should be restricted or disabled.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Restrict or disable any port(s) that are not required for normal operation.&lt;br /&gt;
Deactivate port input for port(s) that are used for field diagnostics and ensure their output provides no information which could compromise the device.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Developer IoT Security Guidance" url="https://www.owasp.org/index.php/IoT_Security_Guidance#Developer_IoT_Security_Guidance"/>
                        <reference name="Top 10 2014-I3 Insecure Network Services" url="https://www.owasp.org/index.php/Top_10_2014-I3_Insecure_Network_Services"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Checking for Insecure Network Services includes:&lt;/p&gt;

	&lt;p&gt;1. Determining if insecure network services exist by reviewing your device for open ports using a port scanner.&lt;br /&gt;
2. As open ports are identified, each can be tested using any number of automated tools that look for DoS vulnerabilities, vulnerabilities related to &lt;span class="caps"&gt;UDP&lt;/span&gt; services and vulnerabilities related to buffer overflow and fuzzing attacks.&lt;br /&gt;
3. Reviewing network ports to ensure they are absolutely necessary and if there are any ports being exposed to the internet using UPnP.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.5.33" name="Memory locations used to store sensitive material (e.g. cryptographic keys, passwords/passphrases, etc.) are sanitised as soon as possible after they are no longer needed. " platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Memory locations used to store sensitive material (e.g. cryptographic keys, passwords/passphrases, etc.) are sanitised as soon as possible after they are no longer needed. These can include but are not limited to locations on the heap, the stack, and statically-allocated storage.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="MEM03-C. Clear sensitive information stored in reusable resources" url="https://wiki.sei.cmu.edu/confluence/display/c/MEM03-C.+Clear+sensitive+information+stored+in+reusable+resources"/>
                        <reference name="ISO/IEC TR 24772:2013" url="https://www.iso.org/standard/61457.html"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.5.24" name="The software has been designed to fail safely." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The software has been designed to meet the safety requirements identified in the risk assessment, i.e. in the case of unexpected invalid inputs, or erroneous software operation, the product does not become dangerous, or compromise security of other connected systems.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
A fail safe software is expected to fail, but when it does it will be in a safe way and security controls and settings remain in effect. The confidentiality and integrity of a system should remain even though availability has been lost. Attackers must not be permitted to gain access rights to privileged objects during a failure that are normally inaccessible. Upon failing, a system that reveals sensitive information about the failure to potential attackers could supply additional knowledge for creating an attack.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that software has been designed to fail safely. This typically involves several things:&lt;br /&gt;
- Secure defaults (default is to deny access)&lt;br /&gt;
- On failure undo changes and restore to a secure state&lt;br /&gt;
- Always check return values for failure &lt;br /&gt;
- In conditional code/filters make sure that there is a default case that does the right thing&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="US-CERT: Failing Securely" url="https://www.us-cert.gov/bsi/articles/knowledge/principles/failing-securely"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.5.8" name="The product has protection against software reverting." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The product has protection against reverting the software to an earlier and potentially less secure version.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Software updates perform numerous tasks and they are available for both Operating System and individual software programs. Updates can apply a wide range of revisions into a system such as adding new features, removing outdated features, updating drivers, fixing bugs, and most importantly, fixing security holes. For that reason the product should have protection against reverting software to an earlier, out-of-date and probably insecure version.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the product has mechanisms against software reverting.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Why Software Updates Are So Important" url="https://securingtomorrow.mcafee.com/consumer/consumer-threat-notices/software-updates-important/"/>
                        <reference name="The importance of general software updates and patches" url="https://ie.norton.com/internetsecurity-how-to-the-importance-of-general-software-updates-and-patches.html"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.5.25" name="Support for partially installing updates is provided." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Support for partially installing updates is provided for devices whose on-time is insufficient for the complete installation of a whole update.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Software updates perform numerous tasks and they are available for both Operating System and individual software programs. Updates can apply a wide range of revisions into a system such as adding new features, removing outdated features, updating drivers, fixing bugs, and most importantly, fixing security holes. For that reason, support for partially installing updates may be provided for devices whose on-time is insufficient for the complete installation of a whole update.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that software provides support for partially installing updates.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Why Software Updates Are So Important" url="https://securingtomorrow.mcafee.com/consumer/consumer-threat-notices/software-updates-important/"/>
                        <reference name="The importance of general software updates and patches" url="https://ie.norton.com/internetsecurity-how-to-the-importance-of-general-software-updates-and-patches.html"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.5.26" name="Support for partially downloading updates is provided." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Support for partially downloading updates is provided for devices whose network access is limited or sporadic.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Software updates perform numerous tasks and they are available for both Operating System and individual software programs. Updates can apply a wide range of revisions into a system such as adding new features, removing outdated features, updating drivers, fixing bugs, and most importantly, fixing security holes. For that reason, support for partially downloading updates may be provided for devices whose network access is limited or sporadic.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that software provides support for partially downloading updates.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Why Software Updates Are So Important" url="https://securingtomorrow.mcafee.com/consumer/consumer-threat-notices/software-updates-important/"/>
                        <reference name="The importance of general software updates and patches" url="https://ie.norton.com/internetsecurity-how-to-the-importance-of-general-software-updates-and-patches.html"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.5.29" name="Where a device cannot verify authenticity of updates itself, only local update is permitted." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where a device cannot verify authenticity of updates itself (e.g. due to no cryptographic capabilities), only local update by a physically present user is permitted.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Code signing is the process of using a certificate-based digital signature to sign executables and scripts in order to confirm the software author and ensure that the code has not been altered or corrupted since it was signed. This process is used for remote updates, too, where devices can verify the signature to confirm that the package is authentic and complete. For that reason, in case where a device cannot verify authenticity of updates itself, only local update shall be permitted.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
If the device cannot verify authenticity of updates itself, permit local update only.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="OWASP Top 10 2014-I9 Insecure Software/Firmware" url="https://www.owasp.org/index.php/Top_10_2014-I9_Insecure_Software/Firmware"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.5.30" name="When a device cannot verify authenticity of updates itself, it shall be possible revert to the last known good configuration which was stored on the device before the update was attempted." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;When a device cannot verify authenticity of updates itself, it shall be possible revert to the last known good configuration which was stored on the device before the update was attempted.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
To implement certain control capability into a system, you’ll want to remotely reset the device so as to achieve a known-good state and recover from errors and implement new configuration changes. You may also want to be able reset the device to a factory default configuration, which is useful when you want to decommission a device or as a more invasive way to recover from unknown error conditions. Lastly, issuing a command to update or reload firmware is very important in order maintain security of the remote device, implement feature enhancements, and patch bugs.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
When a device cannot verify authenticity of updates itself, it shall be possible revert to the last known good configuration which was stored on the device before the update was attempted.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Code of Practice for Consumer IoT Security" url="https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/747413/Code_of_Practice_for_Consumer_IoT_Security_October_2018.pdf"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.5.2" name="Software images are digitally signed by the organization’s approved signing authority. (for remote software upgrade)" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where remote software upgrade can be supported by the device, the software images are digitally signed by the organization’s approved signing authority.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Code signing is the process of using a certificate-based digital signature to sign executables and scripts in order to confirm the software author and ensure that the code has not been altered or corrupted since it was signed. Certificate authority (CA) acts as a trusted third party, trusted both by the software author and the device, and verifies the entity&amp;#8217;s identity.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that for remote software upgrades, the software images are digitally signed by the organization’s approved signing authority.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Protecting Software Integrity through code signing" url="https://ws680.nist.gov/publication/get_pdf.cfm?pub_id=925977"/>
                        <reference name="Technical FAQs for Code Signing Certificate" url="https://www.instantssl.com/code-signing/code-signing-technical.html"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="networking" name="Networking" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-94" name="Man in the Middle Attack" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed on to the other component as if it was never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identify between two components.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.5.21" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-287">
                                    <controls>
                                        <control ref="IOT2.4.5.21" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-157" name="Sniffing Attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.5.4" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-319">
                                    <controls>
                                        <control ref="IOT2.4.5.4" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="IOT-WIDE-ATTACK-SURFACE" name="Exploitation of a wide attack surface" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Every point of network interaction or other service is a potential part of the attack surface having exploitable vulnerabilities.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.5.5" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="UNRESTRICTED-NETWORK">
                                    <controls>
                                        <control ref="IOT2.4.5.5" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="general" name="General" desc="" library="">
                    <threats>
                        <threat ref="IOT-INSUF-SEC" name="Exploitation of insufficient IoT Security" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers will often attempt to exploit&lt;br /&gt;
insufficient tampering protection, unprotected storages or other misconfigured features.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.5.33" mitigation="14"/>
                                <control ref="IOT2.4.5.24" mitigation="14"/>
                                <control ref="IOT2.4.5.8" mitigation="14"/>
                                <control ref="IOT2.4.5.25" mitigation="14"/>
                                <control ref="IOT2.4.5.26" mitigation="14"/>
                                <control ref="IOT2.4.5.29" mitigation="14"/>
                                <control ref="IOT2.4.5.30" mitigation="14"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-200">
                                    <controls>
                                        <control ref="IOT2.4.5.33" mitigation="14"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-209">
                                    <controls>
                                        <control ref="IOT2.4.5.24" mitigation="14"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-254-PROD">
                                    <controls>
                                        <control ref="IOT2.4.5.8" mitigation="14"/>
                                    </controls>
                                </weakness>
                                <weakness ref="UNPATCHED-PRODUCT">
                                    <controls>
                                        <control ref="IOT2.4.5.25" mitigation="14"/>
                                        <control ref="IOT2.4.5.26" mitigation="14"/>
                                        <control ref="IOT2.4.5.29" mitigation="14"/>
                                        <control ref="IOT2.4.5.30" mitigation="14"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems &amp;#8211; all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.5.2" mitigation="50"/>
                                <control ref="IOT2.4.5.30" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-306">
                                    <controls>
                                        <control ref="IOT2.4.5.2" mitigation="50"/>
                                        <control ref="IOT2.4.5.30" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-654">
                                    <controls>
                                        <control ref="IOT2.4.5.30" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="iot-device-software-os" name="IoT Device Software OS" desc="" tags="" position="2" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>This is a generic weakness that includes several different situations, they are all related to unexpected environmental conditions and they could be related to:   
• Misconfiguration. 
• Uncleared buffers, shared memory, files, etc. 
• Problems between the interaction of two different entities that cause unexpected behaviour.   </desc>
                </weakness>
                <weakness ref="UNPATCHED-PRODUCT" name="Recommended security patches are not applied" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When patches and updates are not applied in a timely manner then a product (e.g. Operating System, Software or Mobile App) or a system could be vulnerable to known security issues. These issues could be used by an attacker to gain access to the system. </desc>
                </weakness>
                <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.
New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges. Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.  </desc>
                </weakness>
                <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources. 
 </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="IOT2.4.5.27" name="Update mechanisms must not interfere with performance expectations." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where real-time expectations of performance are present, update mechanisms must not interfere with meeting these expectations.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Software update mechanisms may reduce the device&amp;#8217;s performance when running simultaneously with other processes.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that update mechanisms are not interfering with performance expectations, e.g. by running update processes at low priority.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Best practices for software updates in Configuration Manager" url="https://docs.microsoft.com/en-us/sccm/sum/plan-design/software-updates-best-practices"/>
                        <reference name="Ubuntu SoftwareUpdates" url="https://wiki.ubuntu.com/SoftwareUpdates"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.5.1" name="The product has measures to prevent unauthenticated software and files being loaded onto it or to limit their permissions." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The product has measures to prevent unauthenticated software and files being loaded onto it. In the event that the product is intended to allow un-authenticated software, such software should only be run with limited permissions and/or sandbox.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
The product shall have software execution control to limit which software applications and services are able to run on the Operating System and to control the exposed attack surface of the system by reducing the number of potential vulnerabilities.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Software execution control is used in combination with an administrator defined set of rules, which define which software a non-privileged user is able to execute. These rules can be based on:&lt;br /&gt;
- Software&amp;#8217;s properties e.g. name, signature, etc.&lt;br /&gt;
- More generic rules e.g. permitting execution of files based on their storage location on the system.&lt;br /&gt;
In the event that the product is intended to allow un-authenticated software, such software should only be run with limited permissions and/or sandbox (security mechanism which executes the software in a restricted operating system environment).&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Software Execution Control: CPA SC" url="https://www.ncsc.gov.uk/documents/cpa-security-characteristic-software-execution-control"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.5.3" name="A software update package is verified by the device before the update process begins." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;A software update package has its digital signature, signing certificate and signing certificate chain verified by the device before the update process begins.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Code signing is the process of using a certificate-based digital signature to sign executables and scripts in order to confirm the software author and ensure that the code has not been altered or corrupted since it was signed. Certificate authority (CA) acts as a trusted third party, trusted both by the software author and the device, and verifies the entity&amp;#8217;s identity. A chain of trust is established by validating each certificate from the end entity to the root certificate.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the device verifies the digital signature, signing certificate and signing certificate chain of a software update before the update process begins.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="How certificate chains work" url="https://knowledge.digicert.com/solution/SO16297.html"/>
                        <reference name="Understanding An SSL Certificate Chain" url="https://ssl.comodo.com/articles/understanding-an-ssl-certificate-chain.php"/>
                        <reference name="Microsoft Trusted Root Certificate: Program Requirements" url="https://technet.microsoft.com/en-us/library/cc751157.aspx"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="general" name="General" desc="" library="">
                    <threats>
                        <threat ref="OWASP A6:2017" name="Exploitation of Security Misconfiguration" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers will often attempt to exploit&lt;br /&gt;
unpatched flaws or access default&lt;br /&gt;
accounts, unused pages, unprotected&lt;br /&gt;
files and directories, etc to gain&lt;br /&gt;
unauthorized access or knowledge of&lt;br /&gt;
the system.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.5.27" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-2">
                                    <controls>
                                        <control ref="IOT2.4.5.27" mitigation="100"/>
                                    </controls>
                                </weakness>
                                <weakness ref="UNPATCHED-PRODUCT">
                                    <controls>
                                        <control ref="IOT2.4.5.27" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems &amp;#8211; all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.5.1" mitigation="50"/>
                                <control ref="IOT2.4.5.3" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-250">
                                    <controls>
                                        <control ref="IOT2.4.5.1" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-306">
                                    <controls>
                                        <control ref="IOT2.4.5.1" mitigation="50"/>
                                        <control ref="IOT2.4.5.3" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="iot-device-operating-system" name="IoT Device Operating System" desc="" tags="" position="3" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.
New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges. Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.  </desc>
                </weakness>
                <weakness ref="CWE-732" name="Incorrect Permission Assignment for Critical Resource" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.
When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.  </desc>
                </weakness>
                <weakness ref="CWE-708" name="Incorrect Ownership Assignment" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software assigns an owner to a resource, but the owner is outside of the intended control sphere.</desc>
                </weakness>
                <weakness ref="CWE-485" name="The application does not define isolated boundaries (Insufficient Encapsulation)" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The application does not sufficiently encapsulate critical data or functionality. Encapsulation is about drawing strong boundaries. In a web browser that might mean ensuring that your mobile code cannot be abused by other mobile code. On the server it might mean differentiation between validated data and unvalidated data, between one user's data and another's, or between data users are allowed to see and data that they are not.
 </desc>
                </weakness>
                <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>This is a generic weakness that includes several different situations, they are all related to unexpected environmental conditions and they could be related to:   
• Misconfiguration. 
• Uncleared buffers, shared memory, files, etc. 
• Problems between the interaction of two different entities that cause unexpected behaviour.   </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="IOT2.4.6.3" name="OS accounts or logins have been disabled or eliminated at the end of the development process.
" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;All unnecessary Accounts or logins have been disabled or eliminated from the software at the end of the software development process. E.g. Development or debug accounts&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Interactive Operating System accounts have been used during the software development process in most of the cases have high privileges. That gives them access to critical resources and consequently they can be exploitable if they remain active after the development process. Therefore any interactive accounts or logins have to be disabled or eliminated at the end of the software development process.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Disable or eliminated all interactive Operating System accounts or logins at the end of the development process.&lt;/p&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.6.4" name="Files and directories are set to appropriate access privileges." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Files and directories are set to appropriate access privileges on a need to access basis.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Most Operating Systems have methods to assign permissions or access rights to specific users or groups. These permissions control the ability of the users to view, change, navigate, and execute the contents of the file system. Therefore files and directories should be set to appropriate access privileges according to the principle of the least privilege.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Set files, directories and persistent data to minimum access privileges required to correctly function.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="The principle of least privilege" url="https://www.owasp.org/index.php/Least_privilege"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.6.5" name="Passwords file(s) ownership and access/write permissions are set to Devices’ OS’s most privileged account." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;If passwords absolutely must be stored in a local file, then passwords file(s) are owned by and are only accessible to and writable by the by the Devices’ OS’s most privileged account.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
The Devices’ OS’s most privileged account or &amp;#8220;superuser&amp;#8221; is a special user account used for system administration, capable of making unrestricted, potentially adverse, system-wide changes. For that reason it is often recommended that no-one use &amp;#8220;superuser&amp;#8221; as their normal user account. According to the principle of least privilege, most users and applications run under an ordinary account to perform their work, and must be able to access only the information and resources that are necessary for their legitimate purpose. Thus, if a user only needs to be able to view a particular file, that user should have read-only access to it and should not be able to write to that file. Therefore all files that contain critical or sensitive data like the passwords file(s) shall have their ownership and their access/write permissions set to the Devices’ OS’s most privileged account.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Set ownership and access/write permissions for passwords file(s) to Devices’ OS’s most privileged account.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="The principle of least privilege" url="https://www.owasp.org/index.php/Least_privilege"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.6.7" name="All OS command line access to the most privileged accounts has been removed from the operating system." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;All OS command line access to the most privileged accounts has been removed from the Operating System.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
The Devices’ OS’s most privileged account or &amp;#8220;superuser&amp;#8221; is a special user account used for system administration, capable of making unrestricted, potentially adverse, system-wide changes. For that reason it is often recommended that no-one use &amp;#8220;superuser&amp;#8221; as their normal user account and any access from the command line should be removed.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Remove all OS command line access to the most privileged accounts from the Operating System.&lt;/p&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.6.8" name="OS kernel and its functions are prevented from being called by external product level interfaces and unauthorized applications." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The product’s OS kernel and its functions are prevented from being called by external product level interfaces and unauthorized applications.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
The kernel is a computer program that is the core of a computer&amp;#8217;s Operating System, with complete control over everything in the system. Therefore only internal calls shall be allowed and only from authorized applications in order to minimize the exposed attack surface.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Configure product&amp;#8217;s OS kernel and it&amp;#8217;s functions to be prevented from being called by external product level interfaces and unauthorized applications.&lt;/p&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.6.13" name="The product’s OS kernel is designed such that each component runs with the minimal security capabilities required (e.g. a microkernel architecture)" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Monolithic kernels are large in size and the structure, or lack of structure, makes them difficult to change and maintain without affecting other parts of the kernel. The microkernel approach is based on the idea of only placing essential core real-time operating system functions in the kernel, and other functionality is designed in modules that communicate through the kernel via minimal well-defined interfaces. The microkernel approach results in easy reconfigurable systems without the need to rebuild the kernel.&lt;/p&gt;

	&lt;p&gt;Modern mainstream operating systems (OSes) are designed for functionality, speed and ease of development. With the increase of functionality and support for more diverse hardware, their size and complexity keeps growing. These OSes have a monolithic structure, with most services contained in the kernel, i.e. the part of the system that executes in the privileged mode of the hardware. The result is an explosive growth in the amount of privileged code.&lt;/p&gt;

	&lt;p&gt;Any code executing in privileged mode can bypass security, and is therefore inherently part of a system&amp;#8217;s trusted computing base (&lt;span class="caps"&gt;TCB&lt;/span&gt;). Hence we are experiencing a rapid growth of the &lt;span class="caps"&gt;TCB&lt;/span&gt; of mainstream OSes. As almost all code is buggy, and the number of bugs grows with the size of the code base, this &lt;span class="caps"&gt;TCB&lt;/span&gt; growth is bound to lead to a growth of the number of vulnerabilities.&lt;br /&gt;
Microkernel design, with its ability to reduce &lt;span class="caps"&gt;TCB&lt;/span&gt; size, contain faults and encapsulateuntrusted components, is, in terms of security, superior to&lt;br /&gt;
monolithic systems.&lt;/p&gt;

	&lt;p&gt;Examples for microkernel architecture are: Mach, L4, &lt;span class="caps"&gt;QNX&lt;/span&gt;, &lt;span class="caps"&gt;MINIX&lt;/span&gt;, &lt;span class="caps"&gt;IBM&lt;/span&gt; K42.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="The Jury Is In: Monolithic OS Design Is Flawed" url="http://ts.data61.csiro.au/publications/csiro_full_text/Biggs_LH_18.pdf"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.6.11" name="The OS is separated from the application(s) and is only accessible via defined secure interfaces.
" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The Operating System is separated from the application(s) and is only accessible via defined secure interfaces.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Every device that is to be operated by an individual requires a user interface, usually referred to as a shell. This is because shell it&amp;#8217;s the outermost layer around the Operating System kernel and it&amp;#8217;s used to access its services including file management, process management (running and terminating applications), batch processing, and operating system monitoring and configuration.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the Operating System is separated from the application(s) and is only accessible via defined secure interfaces.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Operating System Structure" url="http://ycpcs.github.io/cs420-fall2014/lectures/lecture4_operating_system_structure.pdf"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.6.12" name="The OS implements a separation architecture to separate trusted from untrusted applications" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The trusted execution environment, or &lt;span class="caps"&gt;TEE&lt;/span&gt;, is an isolated area on the main processor of a device that is separate from the main operating system. It ensures that data is stored, processed and protected in a trusted environment. &lt;span class="caps"&gt;TEE&lt;/span&gt; provides protection for any connected “thing” by enabling end-to-end security, protected execution of authenticated code, confidentiality, authenticity, privacy, system integrity and data access rights.&lt;/p&gt;

	&lt;p&gt;It is already used widely in complex devices, such as smartphones, tablets and set-top boxes, and also by manufacturers of constrained chipsets and IoT devices in sectors such as industrial automation, automotive and healthcare, who are now recognizing its value in protecting connected things.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Trusted Execution Environment Provisioning (TEEP) Architecture" url="https://tools.ietf.org/id/draft-ietf-teep-architecture-01.html"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.6.10" name="All the applicable security features supported by the OS are enabled." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;All the applicable security features supported by the Operating System are enabled.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Operating System security features are essential to ensure the OS security and to prevent various types of malicious actions and attacks such as malware, viruses, etc. Therefore all the applicable security features shall be enabled.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Enable all the applicable security features supported by the Operating System such as updates, anti-spyware and anti-virus protection, etc.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Windows 10 Enterprise Security" url="https://docs.microsoft.com/en-us/windows/security/"/>
                        <reference name="Overview of Linux Kernel Security Features" url="https://www.linux.com/learn/overview-linux-kernel-security-features"/>
                        <reference name="MacOS Security. Built right in." url="https://www.apple.com/macos/security/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems &amp;#8211; all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.6.3" mitigation="14"/>
                                <control ref="IOT2.4.6.4" mitigation="14"/>
                                <control ref="IOT2.4.6.5" mitigation="14"/>
                                <control ref="IOT2.4.6.7" mitigation="14"/>
                                <control ref="IOT2.4.6.8" mitigation="14"/>
                                <control ref="IOT2.4.6.13" mitigation="14"/>
                                <control ref="IOT2.4.6.11" mitigation="14"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-250">
                                    <controls>
                                        <control ref="IOT2.4.6.3" mitigation="14"/>
                                        <control ref="IOT2.4.6.4" mitigation="14"/>
                                        <control ref="IOT2.4.6.5" mitigation="14"/>
                                        <control ref="IOT2.4.6.7" mitigation="14"/>
                                        <control ref="IOT2.4.6.8" mitigation="14"/>
                                        <control ref="IOT2.4.6.13" mitigation="14"/>
                                        <control ref="IOT2.4.6.11" mitigation="14"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-732">
                                    <controls>
                                        <control ref="IOT2.4.6.3" mitigation="14"/>
                                        <control ref="IOT2.4.6.4" mitigation="14"/>
                                        <control ref="IOT2.4.6.5" mitigation="14"/>
                                        <control ref="IOT2.4.6.7" mitigation="14"/>
                                        <control ref="IOT2.4.6.8" mitigation="14"/>
                                        <control ref="IOT2.4.6.11" mitigation="14"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-708">
                                    <controls>
                                        <control ref="IOT2.4.6.5" mitigation="14"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="general" name="General" desc="" library="">
                    <threats>
                        <threat ref="OWASP A6:2017" name="Exploitation of Security Misconfiguration" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers will often attempt to exploit&lt;br /&gt;
unpatched flaws or access default&lt;br /&gt;
accounts, unused pages, unprotected&lt;br /&gt;
files and directories, etc to gain&lt;br /&gt;
unauthorized access or knowledge of&lt;br /&gt;
the system.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.6.12" mitigation="33"/>
                                <control ref="IOT2.4.6.11" mitigation="33"/>
                                <control ref="IOT2.4.6.10" mitigation="33"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-485">
                                    <controls>
                                        <control ref="IOT2.4.6.12" mitigation="33"/>
                                        <control ref="IOT2.4.6.11" mitigation="33"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-2">
                                    <controls>
                                        <control ref="IOT2.4.6.10" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="iot-authentication-and-authorization" name="IoT Authentication and Authorization" desc="" tags="" position="4" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-255" name="The application does not wipe used and not needed passwords or key material" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When using password or key material within an application, these are copied in memory and can, be copied back to the disk depending on several factors.
If the application handles passwords or key material, an attacker with access to the system could inspect the memory or the hard disk to retrieve back those secrets on its original form.  </desc>
                </weakness>
                <weakness ref="NO-PASSWORD-CHANGE" name="Lack of password change facility" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When the application does not offer a password change facility, a compromise of the current user password will lead to an attacker having persistent access to the account. </desc>
                </weakness>
                <weakness ref="CWE-521" name="Poor quality passwords in use" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product does not enforce a strong password policy, which makes it easier for attackers to compromise user accounts through brute force or dictionary based attacks.
An authentication mechanism is only as strong as its credentials. For this reason, it is important to require users to have strong passwords. Lack of password complexity significantly reduces the search space when trying to guess user's passwords, making brute-force attacks easier.  </desc>
                </weakness>
                <weakness ref="CWE-257" name="Plaintext Storage of a Password" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit overplaintextpasswords since they are subject not only to reuse by maliciousattackersbut also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts. </desc>
                </weakness>
                <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources. 
 </desc>
                </weakness>
                <weakness ref="CWE-732" name="Incorrect Permission Assignment for Critical Resource" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.
When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.  </desc>
                </weakness>
                <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.
New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges. Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.  </desc>
                </weakness>
                <weakness ref="CWE-254-PROD" name="The product lacks key security features" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product lacks of key security features such as protection against tampering, unprotected storages or it has other misconfigurations and omissions during production.</desc>
                </weakness>
                <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>An information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="IOT2.4.8.12" name="The product allows the factory issued or OEM login accounts to be disabled, erased or renamed." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The product allows the factory issued or &lt;span class="caps"&gt;OEM&lt;/span&gt; login accounts to be disabled, erased or renamed.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
The factory issued or &lt;span class="caps"&gt;OEM&lt;/span&gt; login accounts should be disabled, erased or renamed. This is to avoid the type of attacks where factory default logins and passwords are published on the web, which allows attackers to mount very simple scanning and dictionary attacks on devices.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the product allows the factory issued or &lt;span class="caps"&gt;OEM&lt;/span&gt; login accounts to be disabled, erased or renamed when installed or commissioned.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="IoT Security Guidance" url="https://www.owasp.org/index.php/IoT_Security_Guidance"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.8.16" name="The product allows an authorized factory reset of the device’s authorization information." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The product allows an authorized factory reset of the device’s authorization information.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
The devices are often authorized to an account, based on license agreements with service providers. The device should have the option to be deauthorized and reset in case the user no longer wants to use it or if the user wants to authorize the device to another account.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the product allows an authorized factory reset of the device’s authorization information.&lt;/p&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.8.3" name="Where a UI password is used for login authentication, the factory issued or reset password is unique to each device in the product family." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where a user interface password is used for login authentication, the factory issued or reset password is unique to each device in the product family.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Where a device needs a password to log in, a default password is usually provided that allows the device to be accessed during its initial setup, and then the user will be prompted to change it after he/she first logs on. An attacker with knowledge of the default password can log in, usually with root or administrative privileges and perform malicious actions. Therefore, all initial passwords and factory reset passwords issued should be unique to each user.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Apply a process which ensures that the initial user interface password or factory reset password is unique to each device in the product family. If a password-less authentication is used the same principles of uniqueness apply.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="US-CERT: Risks of Default Passwords on the Internet" url="https://www.us-cert.gov/ncas/alerts/TA13-175A"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.8.5" name="The product will not allow new passwords containing the user account name with which the user account is associated." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The product will not allow new passwords containing the user account name with which the user account is associated.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Weak passwords are a serious threat to computer security, and specifically the guessable ones should be forbidden through organizational policy and suitable technical measures. Using the user account name as password or part of a password is completely insecure and makes a brute-force attack against the login interface much easier.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the product does not allow new passwords containing the user account name with which the user account is associated.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Implement Proper Password Strength Controls" url="https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Implement_Proper_Password_Strength_Controls"/>
                        <reference name="Testing for Default or Guessable User Account (OWASP-AT-003)" url="https://www.owasp.org/index.php/Testing_for_Default_or_Guessable_User_Account_(OWASP-AT-003)"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Please see reference [2] for &lt;span class="caps"&gt;OWASP&lt;/span&gt; testing methodology link.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.8.6" name="The product/system enforces passwords to be compliant with 3GPP TS33.117 or similar recommendations." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Password entry follows industry standard practice such recommendations of the 3GPP TS33.117 Password policy. [ref. 1] or &lt;span class="caps"&gt;NIST&lt;/span&gt; SP800-63b [ref. 2] or &lt;span class="caps"&gt;NCSC&lt;/span&gt; [Ref 3] on password length, characters from the groupings and special characters.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
A key concern when using passwords for authentication is password strength. A &amp;#8220;strong&amp;#8221; password policy makes it difficult or even improbable for one to guess the password through either manual or automated means. The main characteristics that define a strong password are length, complexity and topology (the pattern that a password is written).&lt;br /&gt;
Passwords shall not be vulnerable to dictionary attack, which is a type of brute force attack technique for defeating a cipher or authentication mechanism by trying to determine its decryption key or passphrase by trying hundreds or sometimes millions of likely possibilities, such as words in a dictionary. &lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the product/system enforces passwords to be compliant with 3GPP TS33.117 or similar (&lt;span class="caps"&gt;NIST&lt;/span&gt; SP800-63b [ref. 2] or &lt;span class="caps"&gt;NCSC&lt;/span&gt; [Ref 3]) recommendations to include: At least eight characters in length, characters from the groupings: alpha, numeric and special characters and shall not be vulnerable to dictionary attack.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Catalogue of general security assurance requirements" url="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=2928"/>
                        <reference name="NIST Special Publication 800-63B: Digital Identity Guidelines" url="https://pages.nist.gov/800-63-3/sp800-63b.html"/>
                        <reference name="Password strategies that can help your organisation remain secure" url="https://www.ncsc.gov.uk/guidance/password-collection"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Please see reference [3] for &lt;span class="caps"&gt;OWASP&lt;/span&gt; testing methodology link.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.8.15" name="Where passwords are entered on a UI, the actual pass phrase is obscured by default." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where passwords are entered on a user interface, the actual pass phrase is obscured by default.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Password masking is the practice of obscuring the password characters when entered on a user interface, more often behind bullets (•), asterisks (*) or similar camouflaging characters. The idea behind password masking is primarily the protection against &amp;#8220;shoulder surfing&amp;#8221;, in other words to prevent nearby observers reading the password &amp;#8220;over the user&amp;#8217;s shoulder&amp;#8221; and thus stolen, which is crucial for mobile devices. A second reason is to obscure the password in cases of shared screens, projectors, etc.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the actual pass phrase is obscured by default where entered on a user interface.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="The Pros and Cons of Password Masking" url="https://www.schneier.com/blog/archives/2009/07/the_pros_and_co.html"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.8.11" name="The product only allows controlled user account access." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The product only allows controlled user account access. Access using anonymous or guest user accounts is not supported without justification.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Product shall not allow any unjustified anonymous or guest access in order to prevent potential theft or disclosure of sensitive information, therefore only controlled user account access shall be permitted.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the product only allows controlled user account access and access using anonymous or guest user accounts is not supported without justification.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Top 10 2013-A7-Missing Function Level Access Control" url="https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;The best way to find out if an application has failed to properly restrict function level access is to verify every application function:&lt;/p&gt;

	&lt;p&gt;1. Does the UI show navigation to unauthorized functions?&lt;br /&gt;
2. Are server side authentication or authorization checks missing?&lt;br /&gt;
3. Are server side checks done that solely rely on information provided by the attacker?&lt;/p&gt;

	&lt;p&gt;Using a proxy, browse your application with a privileged role. Then revisit restricted pages using a less privileged role. If the server responses are alike, you&amp;#8217;re probably vulnerable. Some testing proxies directly support this type of analysis.&lt;br /&gt;
You can also check the access control implementation in the code. Try following a single privileged request through the code and verifying the authorization pattern. Then search the codebase to find where that pattern is not being followed.&lt;br /&gt;
Automated tools are unlikely to find these problems.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.8.2" name="Where the product has a secure source of time there is a method of validating its integrity." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where the product has a secure source of time there is a method of validating its integrity.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Network Time Protocol (&lt;span class="caps"&gt;NTP&lt;/span&gt;) is a networking protocol for clock synchronization between computer systems over packet-switched, variable-latency data networks. In operation since before 1985, &lt;span class="caps"&gt;NTP&lt;/span&gt; is one of the oldest Internet protocols in current use. &lt;span class="caps"&gt;NTP&lt;/span&gt;sec is a fork implementation of &lt;span class="caps"&gt;NTP&lt;/span&gt; that has been systematically security-hardened.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that where the product has a secure source of time there is a method of validating its integrity such as &lt;span class="caps"&gt;NTP&lt;/span&gt;sec (please see reference &lt;span class="caps"&gt;URL&lt;/span&gt; [1]).&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="NTPsec project - a secure, hardened, and improved implementation of Network Time Protocol derived from NTP" url="https://www.ntpsec.org/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.8.17" name="Where the product  has the ability to remotely recover from attack, it should rely on a known good state, to enable safe recovery and updating of the device" platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The ability to remotely recover from these situations should rely on a known good state, such as locally storing a known good version to enable safe recovery and updating of the device. This will avoid denial of service and costly recalls or maintenance visits, whilst managing the risk of potential takeover of the device by an attacker subverting update or other network communications mechanisms.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Ensuring Software Integrity in IoT Devices" url="https://www.omicsonline.org/open-access/ensuring-software-integrity-in-iot-devices-2165-7866-1000217.pdf"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:57">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-112" name="Brute Force" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers&amp;#8217; ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one&amp;#8217;s secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.8.12" mitigation="17"/>
                                <control ref="IOT2.4.8.16" mitigation="17"/>
                                <control ref="IOT2.4.8.3" mitigation="17"/>
                                <control ref="IOT2.4.8.5" mitigation="17"/>
                                <control ref="IOT2.4.8.6" mitigation="17"/>
                                <control ref="IOT2.4.8.15" mitigation="17"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-255">
                                    <controls>
                                        <control ref="IOT2.4.8.12" mitigation="17"/>
                                        <control ref="IOT2.4.8.16" mitigation="17"/>
                                    </controls>
                                </weakness>
                                <weakness ref="NO-PASSWORD-CHANGE">
                                    <controls>
                                        <control ref="IOT2.4.8.12" mitigation="17"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-521">
                                    <controls>
                                        <control ref="IOT2.4.8.3" mitigation="17"/>
                                        <control ref="IOT2.4.8.5" mitigation="17"/>
                                        <control ref="IOT2.4.8.6" mitigation="17"/>
                                        <control ref="IOT2.4.8.12" mitigation="17"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-257">
                                    <controls>
                                        <control ref="IOT2.4.8.15" mitigation="17"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems &amp;#8211; all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.8.11" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-306">
                                    <controls>
                                        <control ref="IOT2.4.8.11" mitigation="100"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-732">
                                    <controls>
                                        <control ref="IOT2.4.8.11" mitigation="100"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-250">
                                    <controls>
                                        <control ref="IOT2.4.8.11" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="general" name="General" desc="" library="">
                    <threats>
                        <threat ref="IOT-INSUF-SEC" name="Exploitation of insufficient IoT Security" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers will often attempt to exploit&lt;br /&gt;
insufficient tampering protection, unprotected storages or other misconfigured features.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.8.2" mitigation="33"/>
                                <control ref="IOT2.4.8.15" mitigation="33"/>
                                <control ref="IOT2.4.8.17" mitigation="33"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-254-PROD">
                                    <controls>
                                        <control ref="IOT2.4.8.2" mitigation="33"/>
                                        <control ref="IOT2.4.8.15" mitigation="33"/>
                                        <control ref="IOT2.4.8.17" mitigation="33"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-37" name="Retrieve Embedded Sensitive Data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.8.11" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-200">
                                    <controls>
                                        <control ref="IOT2.4.8.11" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="iot-encryption-and-key-management-for-hardware" name="IoT Encryption and Key Management for Hardware" desc="" tags="" position="5" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>An information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information.</desc>
                </weakness>
                <weakness ref="CWE-254-PROD" name="The product lacks key security features" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product lacks of key security features such as protection against tampering, unprotected storages or it has other misconfigurations and omissions during production.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="IOT2.4.9.4" name="There is a secure method of key insertion that protects keys against copying." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;There is a secure method of key insertion that protects keys against copying.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Keys shall be protected from copying, using a secure insertion method. This can be achieved by using a dedicated secure and trusted hardware module which stores and protects the keys.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Trusted Platform Module (&lt;span class="caps"&gt;TPM&lt;/span&gt;, also known as &lt;span class="caps"&gt;ISO&lt;/span&gt;/IEC 11889) is an international standard for a secure cryptoprocessor, a dedicated microcontroller designed to secure hardware through integrated cryptographic keys. Each &lt;span class="caps"&gt;TPM&lt;/span&gt; chip has a unique and secret &lt;span class="caps"&gt;RSA&lt;/span&gt; key burned in as it is produced. Pushing the security down to the hardware level provides more protection than a software-only solution.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Trusted Platform Module (TPM) definition" url="https://whatis.techtarget.com/definition/trusted-platform-module-TPM"/>
                        <reference name="Trusted Platform Module (TPM)" url="https://trustedcomputinggroup.org/wp-content/uploads/TPM-2.0-A-Brief-Introduction.pdf"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.9.8" name="The cryptographic key chain used for signing production software is different from that used for any other software images." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The cryptographic key chain used for signing production software is different from that used for any other test, development or other software images.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Often test or development images have fewer restrictions and/or more privileges. Therefore, to prevent the installation of nonproduction software into production devices, a different cryptographic key chain should be used for signing production software.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Use a different cryptographic key chain for signing production software from that used for any other test, development or other software images.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Best Practices to Securely Operate Hardware Security Modules" url="https://pdfs.semanticscholar.org/78f4/0fb3b0142c63cfba0a52fa7573a944d8f461.pdf"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="general" name="General" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-37" name="Retrieve Embedded Sensitive Data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.9.4" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-200">
                                    <controls>
                                        <control ref="IOT2.4.9.4" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems &amp;#8211; all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.9.8" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-254-PROD">
                                    <controls>
                                        <control ref="IOT2.4.9.8" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="iot-web-user-interface" name="IoT Web User Interface" desc="" tags="" position="6" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-521" name="Poor quality passwords in use" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product does not enforce a strong password policy, which makes it easier for attackers to compromise user accounts through brute force or dictionary based attacks.
An authentication mechanism is only as strong as its credentials. For this reason, it is important to require users to have strong passwords. Lack of password complexity significantly reduces the search space when trying to guess user's passwords, making brute-force attacks easier.  </desc>
                </weakness>
                <weakness ref="CWE-257" name="Plaintext Storage of a Password" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit overplaintextpasswords since they are subject not only to reuse by maliciousattackersbut also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts. </desc>
                </weakness>
                <weakness ref="CWE-254-PROD" name="The product lacks key security features" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product lacks of key security features such as protection against tampering, unprotected storages or it has other misconfigurations and omissions during production.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="IOT2.4.10.4" name="The initial password or factory reset password for web UIs is unique to each device in the product family." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where a web user interface password is used for login authentication, the initial password or factory reset password is unique to each device in the product family.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Where a web user interface needs a password to log in, a default password is usually provided that allows the device to be accessed during its initial setup, and then the user will be prompted to change it after he/she first logs on. An attacker with knowledge of the default password can log in, usually with root or administrative privileges and perform malicious actions. Therefore, all initial passwords and factory reset passwords issued for web user interfaces should be unique to each user.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Apply a process which ensures that the initial password or factory reset password for web user interfaces is unique to each device in the product family.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="US-CERT: Risks of Default Passwords on the Internet" url="https://www.us-cert.gov/ncas/alerts/TA13-175A"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.10.7" name="Pass phrase is obscured by default where entered on a web UI." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where passwords are entered on a web user interface, the actual pass phrase is obscured by default to prevent the capture of passwords.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Password masking is the practice of obscuring the password characters when entered on a user interface, more often behind bullets (•), asterisks (*) or similar camouflaging characters. The idea behind password masking is primarily the protection against &amp;#8220;shoulder surfing&amp;#8221;, in other words to prevent nearby observers reading the password &amp;#8220;over the user&amp;#8217;s shoulder&amp;#8221; and thus stolen, which is crucial for mobile devices. A second reason is to obscure the password in cases of shared screens, projectors, etc.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the actual pass phrase is obscured by default where entered on a web user interface.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="The Pros and Cons of Password Masking" url="https://www.schneier.com/blog/archives/2009/07/the_pros_and_co.html"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-112" name="Brute Force" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers&amp;#8217; ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one&amp;#8217;s secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.10.4" mitigation="50"/>
                                <control ref="IOT2.4.10.7" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-521">
                                    <controls>
                                        <control ref="IOT2.4.10.4" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-257">
                                    <controls>
                                        <control ref="IOT2.4.10.7" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="general" name="General" desc="" library="">
                    <threats>
                        <threat ref="IOT-INSUF-SEC" name="Exploitation of insufficient IoT Security" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers will often attempt to exploit&lt;br /&gt;
insufficient tampering protection, unprotected storages or other misconfigured features.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.10.7" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-254-PROD">
                                    <controls>
                                        <control ref="IOT2.4.10.7" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="iot-mobile-application" name="IoT Mobile Application" desc="" tags="" position="7" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.
New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges. Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.  </desc>
                </weakness>
                <weakness ref="CWE-732" name="Incorrect Permission Assignment for Critical Resource" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.
When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.  </desc>
                </weakness>
                <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources. 
 </desc>
                </weakness>
                <weakness ref="CWE-521" name="Poor quality passwords in use" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product does not enforce a strong password policy, which makes it easier for attackers to compromise user accounts through brute force or dictionary based attacks.
An authentication mechanism is only as strong as its credentials. For this reason, it is important to require users to have strong passwords. Lack of password complexity significantly reduces the search space when trying to guess user's passwords, making brute-force attacks easier.  </desc>
                </weakness>
                <weakness ref="SOCI-ENG-SS" name=" Shoulder surfing attack" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>Attacks using social engineering such as monitoring the keyboard entry by the user or collecting his personal
information to verify whether it is used as a password or forms part of the password. </desc>
                </weakness>
                <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.
Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
                </weakness>
                <weakness ref="CWE-254-PROD" name="The product lacks key security features" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product lacks of key security features such as protection against tampering, unprotected storages or it has other misconfigurations and omissions during production.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="IOT2.4.11.3" name="Any related databases or files are either tamper resistant or restricted in their access." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The mobile application ensures that any related databases or files are either tamper resistant or restricted in their access.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Anti-tamper software is software which makes it harder for an attacker to modify it. Attackers can tamper with or install a backdoor on an app, re-sign it and publish the malicious version to third-party app marketplaces. Such attacks typically target popular apps and financial apps.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Employ anti-tamper and tamper-detection techniques to prevent illegitimate applications from executing. For example use checksums, digital signatures and other validation mechanisms to help detect file tampering. Upon detection of tampering, databases or files are re-initialized.&lt;/p&gt;

	&lt;p&gt;Impact:&lt;br /&gt;
Anti-tampering technology typically makes the software somewhat larger and also has a performance impact.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Android application development guidance" url="https://www.ncsc.gov.uk/guidance/android-application-development-guidance-0"/>
                        <reference name="Implement Anti-tamper Techniques" url="https://books.nowsecure.com/secure-mobile-development/en/coding-practices/anti-tamper-techniques.html"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.11.1" name="Where a UI password is used for login authentication, the initial password or factory reset password is unique to each device." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where an application’s user interface password is used for login authentication, the initial password or factory reset password is unique to each device in the product family.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Where a device needs a password to log in, a default password is usually provided that allows the device to be accessed during its initial setup, and then the user will be prompted to change it after he/she first logs on. An attacker with knowledge of the default password can log in, usually with root or administrative privileges and perform malicious actions. Therefore, all initial passwords and factory reset passwords issued should be unique to each user.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Apply a process which ensures that the initial password or factory reset password is unique to each device in the product family.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="US-CERT: Risks of Default Passwords on the Internet" url="https://www.us-cert.gov/ncas/alerts/TA13-175A"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.11.6" name="Pass phrase is obscured by default where entered on a UI." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where passwords are entered on a user interface, the actual pass phrase is obscured by default to prevent the capture of passwords.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Password masking is the practice of obscuring the password characters when entered on a user interface, more often behind bullets (•), asterisks (*) or similar camouflaging characters. The idea behind password masking is primarily the protection against &amp;#8220;shoulder surfing&amp;#8221;, in other words to prevent nearby observers reading the password &amp;#8220;over the user&amp;#8217;s shoulder&amp;#8221; and thus stolen, which is crucial for mobile devices. A second reason is to obscure the password in cases of shared screens, projectors, etc.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the actual pass phrase is obscured by default where entered on a user interface.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="The Pros and Cons of Password Masking" url="https://www.schneier.com/blog/archives/2009/07/the_pros_and_co.html"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.11.4" name="Application communicates with product related remote server(s) or device over a secure connection." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where the application communicates with a product related remote server(s) or device it does so over a secure connection.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Secure connections are a cornerstone for a client/server communication. Cryptographic protocols such as Transport Layer Security (&lt;span class="caps"&gt;TLS&lt;/span&gt;) are used to prevent eavesdropping and tampering. Therefore the application shall always communicate over a secure connection.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the application communicates with product related remote server(s) or device over a secure connection such as a &lt;span class="caps"&gt;TLS&lt;/span&gt; connection using certificate pinning.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Using TLS to protect data" url="https://www.ncsc.gov.uk/guidance/tls-external-facing-services"/>
                        <reference name="The Transport Layer Security (TLS) Protocol Version 1.2" url="https://tools.ietf.org/html/rfc5246"/>
                        <reference name="Certificate and Public Key Pinning" url="https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems &amp;#8211; all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.11.3" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-250">
                                    <controls>
                                        <control ref="IOT2.4.11.3" mitigation="100"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-732">
                                    <controls>
                                        <control ref="IOT2.4.11.3" mitigation="100"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-306">
                                    <controls>
                                        <control ref="IOT2.4.11.3" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-112" name="Brute Force" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers&amp;#8217; ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one&amp;#8217;s secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.11.1" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-521">
                                    <controls>
                                        <control ref="IOT2.4.11.1" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-403" name="Social Engineering" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attack patterns within this category focus on the manipulation and exploitation of people. The techniques defined by each pattern are used to convince a target into performing actions or divulging confidential information that benefit the adversary, often resulting in access to computer systems or facilities. While similar to a confidence trick or simple fraud, the term typically applies to trickery or deception for the purpose of information gathering, fraud, or computer system access. In most cases, the adversary never comes face-to-face with the victim.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.11.6" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="SOCI-ENG-SS">
                                    <controls>
                                        <control ref="IOT2.4.11.6" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="networking" name="Networking" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-157" name="Sniffing Attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.11.4" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-319">
                                    <controls>
                                        <control ref="IOT2.4.11.4" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="general" name="General" desc="" library="">
                    <threats>
                        <threat ref="IOT-INSUF-SEC" name="Exploitation of insufficient IoT Security" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers will often attempt to exploit&lt;br /&gt;
insufficient tampering protection, unprotected storages or other misconfigured features.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.11.6" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-254-PROD">
                                    <controls>
                                        <control ref="IOT2.4.11.6" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="iot-device-interfaces" name="IoT Device Interfaces" desc="" tags="" position="8" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="UNPATCHED-PRODUCT" name="Recommended security patches are not applied" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When patches and updates are not applied in a timely manner then a product (e.g. Operating System, Software or Mobile App) or a system could be vulnerable to known security issues. These issues could be used by an attacker to gain access to the system. </desc>
                </weakness>
                <weakness ref="CWE-254-PROD" name="The product lacks key security features" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product lacks of key security features such as protection against tampering, unprotected storages or it has other misconfigurations and omissions during production.</desc>
                </weakness>
                <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>An information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information.</desc>
                </weakness>
                <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.
Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
                </weakness>
                <weakness ref="CWE-326" name="Inadequate Encryption Strength" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources. </desc>
                </weakness>
                <weakness ref="SSL-WEAK-CIPHERS" name="Use of weak TLS cipher suites" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>A weak TLS cipher suite could allow an attacker to sniff the transmission by exploiting this weakness. </desc>
                </weakness>
                <weakness ref="UNRESTRICTED-NETWORK" name="Service is exposed to a wide attack surface" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product is exposed or reachable to an unnecessarily large group of potential attackers. An over-exposure of a component increases the chance of an attacker gaining access to the system through a vulnerability. </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="IOT2.4.7.21" name="If a factory reset is made the device should warn that secure operation may be compromised unless updated." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;If a factory reset is made the device should warn that secure operation may be compromised unless updated.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Software updates perform numerous tasks and they are available for both Operating System and individual software programs. Updates can apply a wide range of revisions into a system such as adding new features, removing outdated features, updating drivers, fixing bugs, and most importantly, fixing security holes. For that reason after a factory reset, the device is reverting to an earlier, out-of-date and probably insecure version and it has to be updated again to ensure its secure operation.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that if a factory reset is made the device warns that secure operation may be compromised unless updated.&lt;/p&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.7.24" name="As far as reasonably possible, devices should remain operating and locally functional in the case of a loss of network connection and should recover cleanly in the case of restoration of a loss of power. " platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;As far as reasonably possible, devices should remain operating and locally functional in the case of a loss of network connection and should recover cleanly in the case of restoration of a loss of power. Devices should be able to return to a network in a sensible state and in an orderly fashion, rather than in a massive scale reconnect.&lt;br /&gt;
Continuous operation ensures that devices provide basic functionality without relying on other systems or networks. It is important to note here that a device should only be required to supply basic features when the network is inaccessible. Devices should provide continuous operation if the network or the Internet is inaccessible. Manual controls where needed, either physical buttons or digital on the device itself.&lt;/p&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.7.17" name="Where there is a loss of communications it shall not compromise the integrity of the device. " platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where there is a loss of communications it shall not compromise the integrity of the device.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
A device of course is expected to lose communications, but when it does it will be in a safe way and security controls and settings remain in effect. The integrity of a system should remain even though networking has been lost. Therefore, device&amp;#8217;s integrity shall be ensured regardless of being connected to a network or not. &lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that where there is a loss of communications it shall not compromise the integrity of the device.&lt;/p&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.7.12" name="All network communications keys are stored securely, in accordance with industry standards." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;All network communications keys are stored securely, in accordance with industry standards such as &lt;span class="caps"&gt;FIPS&lt;/span&gt; 140 or similar.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Network communications keys shall be securely stored in accordance with industry standards. &lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that cryptographic keys for update integrity protection and confidentiality are securely managed in accordance with industry standards such as &lt;span class="caps"&gt;FIPS&lt;/span&gt; 140-2.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Security Requirements for Cryptographic Modules" url="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.140-2.pdf"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.7.5" name="Alerting on unauthorized changes." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;If an unauthorised change is detected, the device should alert the user/administrator to an issue and should not connect to wider networks than those necessary to perform the alerting function.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
IoT device software should be verified using secure boot mechanisms. When an unauthorized change is detected, the device should alert operators to the issue. The issue notification should not connect to wider networks than necessary to deliver the alert.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that If an unauthorised change is detected, the device alerts the user/administrator to an issue and doesn&amp;#8217;t connect to wider networks than those necessary to perform the alerting function.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Top 10-2017 A3-Sensitive Data Exposure" url="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.7.13" name="Where the MQTT protocol is used, it is protected by a TLS connection with no known cipher vulnerabilities." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where the &lt;span class="caps"&gt;MQTT&lt;/span&gt; protocol is used, it is protected by a &lt;span class="caps"&gt;TLS&lt;/span&gt; connection with no known cipher vulnerabilities.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
&lt;span class="caps"&gt;MQTT&lt;/span&gt; (Message Queue Telemetry Transport), is a very lightweight and widely used messaging and information exchange protocol for IoT devices throughout the world. The &lt;span class="caps"&gt;MQTT&lt;/span&gt; communication can be encrypted using &lt;span class="caps"&gt;TLS&lt;/span&gt; / &lt;span class="caps"&gt;SSL&lt;/span&gt; protocols, ensuring a secure and safe communication.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that where the &lt;span class="caps"&gt;MQTT&lt;/span&gt; protocol is used, it is protected by a &lt;span class="caps"&gt;TLS&lt;/span&gt; connection with no known cipher vulnerabilities.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="MQTT Version 3.1.1 Plus Errata 01" url="http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html"/>
                        <reference name="MQTT and CoAP, IoT Protocols" url="https://www.eclipse.org/community/eclipse_newsletter/2014/february/article2.php"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.7.14" name="Where the CoAP protocol is used, it is protected by a DTLS connection with no known cipher vulnerabilities." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where the CoAP protocol is used, it is protected by a &lt;span class="caps"&gt;DTLS&lt;/span&gt; connection with no known cipher vulnerabilities.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Constrained Application Protocol (CoAP) is a service layer protocol that is intended for use in resource-constrained internet devices, such as wireless sensor network nodes. CoAP is designed to easily translate to &lt;span class="caps"&gt;HTTP&lt;/span&gt; for simplified integration with the web, while also meeting specialized requirements such as multicast support, very low overhead, and simplicity which are extremely important for IoT.&lt;br /&gt;
Because CoAP is built on top of &lt;span class="caps"&gt;UDP&lt;/span&gt; not &lt;span class="caps"&gt;TCP&lt;/span&gt;, &lt;span class="caps"&gt;SSL&lt;/span&gt;/TLS are not available to provide security.Datagram Transport Layer Security (&lt;span class="caps"&gt;DTLS&lt;/span&gt;) provides the same assurances as &lt;span class="caps"&gt;TLS&lt;/span&gt; but for transfers of data over &lt;span class="caps"&gt;UDP&lt;/span&gt;. &lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that where the CoAP protocol is used, it is protected by a &lt;span class="caps"&gt;DTLS&lt;/span&gt; connection with no known cipher vulnerabilities.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="MQTT and CoAP, IoT Protocols" url="https://www.eclipse.org/community/eclipse_newsletter/2014/february/article2.php"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.7.1" name="The product prevents unauthorized connections to it or other devices the product is connected to." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The product prevents unauthorized connections to it or other devices the product is connected to.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
A significant vulnerability is networked system accessibility. Because by definition IoT systems are connected to the Internet, attacks can be conducted remotely, either by direct access to networked control interfaces, or by downloading malware to devices. For that reason product shall prevent unauthorized connections to it or other devices the product is connected to, for example by firewalls.&lt;br /&gt;
Firewall is a software used to maintain the security of a private network and block unauthorized access to or from private networks and are often employed to prevent unauthorized Web users or malware from gaining access to private networks connected to the Internet.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the product prevents unauthorized connections to it or other devices the product is connected to. For example, there is a firewall on each interface and internet layer protocol.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="IoT Security Guidance" url="https://www.owasp.org/index.php/IoT_Security_Guidance"/>
                        <reference name="NIST Guidelines on Firewalls and Firewall Policy" url="https://ws680.nist.gov/publication/get_pdf.cfm?pub_id=901083"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.7.3" name="The uncontrolled and any unintended packet forwarding function should be blocked." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;For products with one or more network interfaces, the uncontrolled and any unintended packet forwarding function should be blocked.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Forwarding refers to the router-local action of transferring the packet from an input link interface to the appropriate output link interface. When applications allow user input to forward requests between different parts of the site, the application must check that the user is authorized to access the &lt;span class="caps"&gt;URL&lt;/span&gt;, perform the functions it provides, and it is an appropriate &lt;span class="caps"&gt;URL&lt;/span&gt; request. If the application fails to perform these checks, an attacker crafted &lt;span class="caps"&gt;URL&lt;/span&gt; may pass the application’s access control check and then forward the attacker to an administrative function that is not normally permitted.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the uncontrolled and any unintended packet forwarding function is blocked to stop undesirable communication paths.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Unvalidated Redirects and Forwards Cheat Sheet" url="https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet"/>
                        <reference name="Top 10 2013-A10-Unvalidated Redirects and Forwards" url="https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;The best way to find out if an application has any unvalidated redirects or forwards is to:&lt;/p&gt;

	&lt;p&gt;1. Review the code for all uses of redirect or forward (called a transfer in .NET). For each use, identify if the target &lt;span class="caps"&gt;URL&lt;/span&gt; is included in any parameter values. If so, if the target &lt;span class="caps"&gt;URL&lt;/span&gt; isn’t validated against a whitelist, you are vulnerable.&lt;br /&gt;
2. Also, spider the site to see if it generates any redirects (&lt;span class="caps"&gt;HTTP&lt;/span&gt; response codes 300-307, typically 302). Look at the parameters supplied prior to the redirect to see if they appear to be a target &lt;span class="caps"&gt;URL&lt;/span&gt; or a piece of such a &lt;span class="caps"&gt;URL&lt;/span&gt;. If so, change the &lt;span class="caps"&gt;URL&lt;/span&gt; target and observe whether the site redirects to the new target.&lt;br /&gt;
3. If code is unavailable, check all parameters to see if they look like part of a redirect or forward &lt;span class="caps"&gt;URL&lt;/span&gt; destination and test those that do.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="general" name="General" desc="" library="">
                    <threats>
                        <threat ref="OWASP A6:2017" name="Exploitation of Security Misconfiguration" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers will often attempt to exploit&lt;br /&gt;
unpatched flaws or access default&lt;br /&gt;
accounts, unused pages, unprotected&lt;br /&gt;
files and directories, etc to gain&lt;br /&gt;
unauthorized access or knowledge of&lt;br /&gt;
the system.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.7.21" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="UNPATCHED-PRODUCT">
                                    <controls>
                                        <control ref="IOT2.4.7.21" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="IOT-INSUF-SEC" name="Exploitation of insufficient IoT Security" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers will often attempt to exploit&lt;br /&gt;
insufficient tampering protection, unprotected storages or other misconfigured features.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.7.24" mitigation="50"/>
                                <control ref="IOT2.4.7.17" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-254-PROD">
                                    <controls>
                                        <control ref="IOT2.4.7.24" mitigation="50"/>
                                        <control ref="IOT2.4.7.17" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-37" name="Retrieve Embedded Sensitive Data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.7.12" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-200">
                                    <controls>
                                        <control ref="IOT2.4.7.12" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="networking" name="Networking" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-157" name="Sniffing Attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.7.5" mitigation="25"/>
                                <control ref="IOT2.4.7.13" mitigation="25"/>
                                <control ref="IOT2.4.7.14" mitigation="25"/>
                                <control ref="IOT2.4.7.12" mitigation="25"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-319">
                                    <controls>
                                        <control ref="IOT2.4.7.5" mitigation="25"/>
                                        <control ref="IOT2.4.7.13" mitigation="25"/>
                                        <control ref="IOT2.4.7.14" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-326">
                                    <controls>
                                        <control ref="IOT2.4.7.5" mitigation="25"/>
                                        <control ref="IOT2.4.7.13" mitigation="25"/>
                                        <control ref="IOT2.4.7.14" mitigation="25"/>
                                        <control ref="IOT2.4.7.12" mitigation="25"/>
                                    </controls>
                                </weakness>
                                <weakness ref="SSL-WEAK-CIPHERS">
                                    <controls>
                                        <control ref="IOT2.4.7.13" mitigation="25"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="IOT-WIDE-ATTACK-SURFACE" name="Exploitation of a wide attack surface" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Every point of network interaction or other service is a potential part of the attack surface having exploitable vulnerabilities.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.7.1" mitigation="50"/>
                                <control ref="IOT2.4.7.3" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="UNRESTRICTED-NETWORK">
                                    <controls>
                                        <control ref="IOT2.4.7.1" mitigation="50"/>
                                        <control ref="IOT2.4.7.3" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="iot-device-wireless-interfaces" name="IoT Device Wireless Interfaces" desc="" tags="" position="9" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.
Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
                </weakness>
                <weakness ref="CWE-326" name="Inadequate Encryption Strength" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources. </desc>
                </weakness>
                <weakness ref="CWE-307" name="The application does not implement anti-automation mechanisms to prevent automated long time-sustained probes" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests.
This can allow the actor to perform actions more frequently than expected. The actor could be a human or an automated process such as a virus or bot. This could be used to cause a denial of service, compromise program logic (such as limiting humans to a single vote), or other consequences. For example, an authentication routine might not limit the number of times an attacker can guess a password. Or, a web site might conduct a poll but only expect humans to vote a maximum of once a day.  </desc>
                </weakness>
                <weakness ref="CWE-654" name="Reliance on a Single Factor in a Security Decision" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality. </desc>
                </weakness>
                <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>When a security-critical event occurs, the software either does not record the event or omits important details about the event when logging it.
When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds.  </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="IOT2.4.7.10" name="For any WiFi connection, WPA2 with AES or a similar strength encryption has been used and insecure protocols such as WPA and TKIP are disabled." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;For any WiFi connection, WPA2 with &lt;span class="caps"&gt;AES&lt;/span&gt; or a similar strength encryption has been used and insecure protocols such as &lt;span class="caps"&gt;WPA&lt;/span&gt; and &lt;span class="caps"&gt;TKIP&lt;/span&gt; are disabled.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Most Wi-Fi networks are configured to encrypt traffic between client devices and access points, so that someone outside the network cannot read or interfere with communications on the network. WPA2 is one protocol that can be used for this purpose.&lt;/p&gt;

	&lt;p&gt;Note: Keep in mind to get protected from &amp;#8220;Krack&amp;#8221; WPA2 vulnerability, please see reference &lt;span class="caps"&gt;URL&lt;/span&gt; [1] for details.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that for any WiFi connection, WPA2 with &lt;span class="caps"&gt;AES&lt;/span&gt; or a similar strength encryption has been used and insecure protocols such as &lt;span class="caps"&gt;WPA&lt;/span&gt; and &lt;span class="caps"&gt;TKIP&lt;/span&gt; are disabled.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="IEEE 802.11i-2004 - IEEE Standard for information technology" url="https://standards.ieee.org/standard/802_11i-2004.html"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.7.11" name="Where WPA2 WPS is used it has a unique, random key per device and enforces exponentially increasing retry attempt delays." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where WPA2 &lt;span class="caps"&gt;WPS&lt;/span&gt; is used it has a unique, random key per device and enforces exponentially increasing retry attempt delays.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
When the same secret key programmed into a product at manufacture is shared between multiple devices, it exposes them to various types of malicious attacks. In other words, this means that if an attacker is able to access one device, he/she can possibly log into a huge quantity of other devices that share the same secret key.&lt;br /&gt;
Where WPA2 &lt;span class="caps"&gt;WPS&lt;/span&gt; is used and allows users to enter passwords as many times as they want, an attacker may try to exploit this by using scripts that enter different combinations until the password cracks. To prevent this kind of brute force attack, the product shall have defense such as exponentially increasing retry attempt delays.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that where WPA2 &lt;span class="caps"&gt;WPS&lt;/span&gt; is used it has a unique, random key per device and enforces exponentially increasing retry attempt delays.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Mutual Authentication on Network product management protocols" url="https://www.etsi.org/deliver/etsi_ts/133100_133199/133117/15.00.00_60/ts_133117v150000p.pdf#page=31"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.7.8" name="Where a wireless communications interface requires an initial pairing process, a Strong Authentication shall be used." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Where a wireless communications interface requires an initial pairing process, a Strong Authentication shall be used.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Strong authentication blends at least two different authentication factors of different types to improve the safety of identity verification and to prevent unauthorized logins even when passwords have been compromised. For example, this can be achieved by using something the user has (e.g. security token) and something the user knows (e.g. password). &lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that where a wireless communications interface requires an initial pairing process, a Strong Authentication is be used, requiring physical interaction with the device or possession of a shared secret. For example, Bluetooth Numeric Comparison.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Guide to Bluetooth Security" url="https://csrc.nist.gov/publications/detail/sp/800-121/rev-1/archive/2012-06-11"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="networking" name="Networking" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-157" name="Sniffing Attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.7.10" mitigation="50"/>
                                <control ref="IOT2.4.7.11" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-319">
                                    <controls>
                                        <control ref="IOT2.4.7.10" mitigation="50"/>
                                        <control ref="IOT2.4.7.11" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-326">
                                    <controls>
                                        <control ref="IOT2.4.7.10" mitigation="50"/>
                                        <control ref="IOT2.4.7.11" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-112" name="Brute Force" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers&amp;#8217; ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one&amp;#8217;s secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.7.11" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-307">
                                    <controls>
                                        <control ref="IOT2.4.7.11" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems &amp;#8211; all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.7.8" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-654">
                                    <controls>
                                        <control ref="IOT2.4.7.8" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
                <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="">
                    <threats>
                        <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.7.11" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-778">
                                    <controls>
                                        <control ref="IOT2.4.7.11" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="iot-privacy" name="IoT Privacy" desc="" tags="" position="10" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-254-PROD" name="The product lacks key security features" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The product lacks of key security features such as protection against tampering, unprotected storages or it has other misconfigurations and omissions during production.</desc>
                </weakness>
                <weakness ref="CWE-398" name="The application has not been securely developed" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The code has features that do not directly introduce aweakness or vulnerability, but indicate that the product has not been carefully developed or maintained. Programs are more likely to be secure when good development practices are followed. If a program is complex, difficult to maintain, not portable, or shows evidence of neglect, then there is a higher likelihood that weaknesses are buried in the code.</desc>
                </weakness>
                <weakness ref="CWE-921" name="Storage of Sensitive Data in a Mechanism without Access Control" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The software stores sensitive information in a file system or device that does not have built-in access control.
While many modern file systems or devices utilize some form of access control in order to restrict access to data, not all storage mechanisms have this capability. For example, memory cards, floppy disks, CDs, and USB devices are typically made accessible to any user within the system. This can become a problem when sensitive data is stored in these mechanisms in a multi-user environment, because anybody on the system can read or write this data. On Android devices, external storage is typically globally readable and writable by other applications on the device. External storage may also be easily accessible through the mobile device's USB connection or physically accessible through the device's memory card port.  </desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="IOT2.4.12.1" name="The product/service stores the minimum amount of Personal Information from users." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;The product/service stores the minimum amount of Personal Information from users.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Data can present unintended privacy concerns when aggregated. Therefore the product/service shall collect and store the minimal amount of data possible.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the product/service stores the minimum amount of Personal Information from users. Consult with data scientists, legal and compliance teams to determine risk of data collection and storage. Consider implications of consent and the fact that IoT devices may not present an interface for collecting consent and may passively collect data about people other than owners and operators. IoT may collect information about individuals who cannot provide consent (such as minors) and data collection should be modified accordingly.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="IoT Security Guidance" url="https://www.owasp.org/index.php/IoT_Security_Guidance"/>
                        <reference name="OWASP Top 10 Privacy Risks Project" url="https://www.owasp.org/index.php/OWASP_Top_10_Privacy_Risks_Project#tab=Top_10_Privacy_Risks_2"/>
                        <reference name="MITRE Privacy Requirements Definition and Testing" url="https://www.mitre.org/publications/systems-engineering-guide/enterprise-engineering/engineering-informationintensive"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps>	&lt;p&gt;Please see reference [3] for &lt;span class="caps"&gt;MITRE&lt;/span&gt; testing methodology link.&lt;/p&gt;</steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.12.13" name="Devices and services should be designed with security usability in mind." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Devices and services should be designed with security usability in mind, reducing where possible, security friction and decision points that may have a detrimental impact on security. Best practices on usable security should be followed, particularly for user interaction and user interfaces.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Usability and cybersecurity complement one another. A well-designed system needs to make it easy for the user to do the right thing, hard to do the wrong thing, and easy to recover when the wrong things happen anyway. Usability has only recently become an important concern in the cybersecurity field, due to growing recognition of the fact that users themselves are a key component in organizational security programs. If users find a cybersecurity measure too difficult, they will try to circumvent it &amp;#8211; which harms organizational security. Therefore, it is in every organization’s interest to design cybersecurity measures in such a way that they take into account the perceptions, characteristics, needs, abilities, and behaviors of users themselves.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that devices and services are designed with security usability in mind.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Usability Of Security" url="https://csrc.nist.gov/Projects/Usability-Of-Security/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:58">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.12.14" name="The product or service only records audio/visual data in accordance with the authorization of the user (e.g., no passive recording without explicit authorization)." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;IoT provider shall ensure the appropriate level of users’ privacy. This includes the obligation to inform users about the collection of their personal information, receive a consent to do so in certain cases, the data minimization obligation, the same cybersecurity measures discussed afore, and many more. Literally, users’ privacy must be implemented by design, considering data protection on the very early stages of development.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="ESOMAR Data Protection Checklist" url="https://www.esomar.org/uploads/public/knowledge-and-standards/codes-and-guidelines/ESOMAR-Data-Protection-Checklist_September-2017.pdf"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:59">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="general" name="General" desc="" library="">
                    <threats>
                        <threat ref="IOT-INSUF-SEC" name="Exploitation of insufficient IoT Security" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Attackers will often attempt to exploit&lt;br /&gt;
insufficient tampering protection, unprotected storages or other misconfigured features.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.12.1" mitigation="50"/>
                                <control ref="IOT2.4.12.13" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-254-PROD">
                                    <controls>
                                        <control ref="IOT2.4.12.1" mitigation="50"/>
                                    </controls>
                                </weakness>
                                <weakness ref="CWE-398">
                                    <controls>
                                        <control ref="IOT2.4.12.13" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                        <threat ref="CAPEC-37" name="Retrieve Embedded Sensitive Data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.12.14" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-921">
                                    <controls>
                                        <control ref="IOT2.4.12.14" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="iot-secure-supply-chain-and-production" name="IoT Secure Supply Chain and Production" desc="" tags="" position="11" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="UNNECESSARY-SERVICES" name="Unnecessary services are exposed" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:59">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>The application exposes unnecessary services which increase the attack surface.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="IOT2.4.14.1" name="All the production test and calibration software is erased, removed or secured before the product is dispatched from the factory." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;All the production test and calibration software used during manufacture is erased, removed or secured before the product is dispatched from the factory.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
The product should have all of the production test and calibration software used during manufacture erased, removed or secured before the product is dispatched from the factory. This is to prevent alteration of the product post manufacture when using authorized production software, for example hacking of the RF characteristics for greater RF &lt;span class="caps"&gt;ERP&lt;/span&gt;. Where such functionality is required in a service center, it shall be erased or removed upon completion of any servicing activities.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Erase, remove or secure all the production test and calibration software used during manufacture, before the product is dispatched from the factory.&lt;/p&gt;</desc>
                    <implementations/>
                    <references/>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:59">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="general" name="General" desc="" library="">
                    <threats>
                        <threat ref="IOT-WIDE-ATTACK-SURFACE" name="Exploitation of a wide attack surface" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;Every point of network interaction or other service is a potential part of the attack surface having exploitable vulnerabilities.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.14.1" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="UNNECESSARY-SERVICES">
                                    <controls>
                                        <control ref="IOT2.4.14.1" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="iot-device-ownership-transfer" name="IoT Device Ownership Transfer" desc="" tags="" position="12" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:59">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>An information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="IOT2.4.16.4" name="The device has an irrevocable method of decommissioning and recommissioning." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;In case of ownership change, the device has an irrevocable method of decommissioning and recommissioning.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Decommissioning is the last stage in the device&amp;#8217;s life cycle. For example an IoT device may need to be decommissioned, because it will be commissioned in another network (recommissioning) or because it is due for replacement which is the case when the device reaches its end of life. In both cases resetting the device to its factory configuration is an important activity and should be handled properly by an irrevocable method.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the device has an irrevocable method of decommissioning and recommissioning.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="A staged approach to decommissioning" url="https://www.nao.org.uk/decommissioning/a-staged-approach-to-decommissioning/"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:59">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="general" name="General" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-37" name="Retrieve Embedded Sensitive Data" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.16.4" mitigation="100"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-200">
                                    <controls>
                                        <control ref="IOT2.4.16.4" mitigation="100"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
        <component ref="rf-bluetooh-communication" name="RF-Bluetooth communication" desc="" tags="" position="13" groupName="" library="" diagramPositionX="0" diagramPositionY="0" componentDefinitionRef="">
            <weaknesses>
                <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100">
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:59">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                    <desc>An information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information.</desc>
                </weakness>
            </weaknesses>
            <controls>
                <control ref="IOT2.4.7.22" name="Where RF communications are enabled (e.g., ZigBee, etc.) antenna power is configured to limit ability of mapping assets to limit attacks such as WAR-Driving." platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;By  using low transmitted power, the  discovery probability from an attacker decreases .Higher transmitted power implies   higher   resistance   against   jamming   because   a stronger jamming signal is needed to overcome the original signal.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Wardriving Definition" url="https://techterms.com/definition/wardriving"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:59">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
                <control ref="IOT2.4.7.23" name="Protocol anonymity features are enabled in protocols (e.g., Bluetooth) to limit location tracking capabilities. " platform="" cost="1" risk="0" state="Recommended" owner="" library="" source="MANUAL">
                    <desc>	&lt;p&gt;Bluetooth anonymity mode, where the devices &lt;span class="caps"&gt;BDADDR&lt;/span&gt; is masked allowing use of services through access point without giving out device identity. Each time the active address is updated, it is sent to all the devices it is communicating or connected with. The use of the fixed Bluetooth hardware address is still supported in the Bluetooth anonymity mode. This is done to allow direct connections between two trusted devices.&lt;/p&gt;</desc>
                    <implementations/>
                    <references>
                        <reference name="Enhancements to Bluetooth Baseband Security" url="https://pdfs.semanticscholar.org/bbd0/33f3d9aa207fcccc43d8c4954ac58bba3461.pdf"/>
                    </references>
                    <standards/>
                    <udts/>
                    <test expiryDate="" expiryPeriod="0">
                        <steps></steps>
                        <notes></notes>
                        <references/>
                        <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-02-07T13:21:59">
                            <output></output>
                        </source>
                        <udts/>
                    </test>
                </control>
            </controls>
            <usecases>
                <usecase ref="networking" name="Networking" desc="" library="">
                    <threats>
                        <threat ref="CAPEC-157" name="Sniffing Attacks" state="Expose" source="MANUAL" owner="" library="">
                            <desc>	&lt;p&gt;An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.&lt;/p&gt;</desc>
                            <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
                            <references/>
                            <controls>
                                <control ref="IOT2.4.7.22" mitigation="50"/>
                                <control ref="IOT2.4.7.23" mitigation="50"/>
                            </controls>
                            <weaknesses>
                                <weakness ref="CWE-200">
                                    <controls>
                                        <control ref="IOT2.4.7.22" mitigation="50"/>
                                        <control ref="IOT2.4.7.23" mitigation="50"/>
                                    </controls>
                                </weakness>
                            </weaknesses>
                        </threat>
                    </threats>
                </usecase>
            </usecases>
        </component>
    </components>
    <rules/>
</project>
